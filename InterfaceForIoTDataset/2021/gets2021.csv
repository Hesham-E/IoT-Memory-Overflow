GithubID,Year,FullPath,Codesnippet,CWE,isTrueVulnerable,Codesnippet5
2021\boxofhope\io_server\src\io_home.cpp,Dataset Download,../../Dataset Download/2021\boxofhope\io_server\src\io_home.cpp,"while (fgets(buffer.data(), 128, f) != NULL) {",120,1,"    }

    while (fgets(buffer.data(), 128, f) != NULL) {
        buffer
          .data(); //< Clear buffer, we don't care about output just exit code
"
2021\cslim\test\libglusterfs\call-stub.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\call-stub.cpp.c,"extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)",120,1,"

extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;
# 638 ""/usr/include/stdio.h"" 3 4
"
2021\cslim\test\libglusterfs\call-stub.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\call-stub.cpp.c,extern char *gets (char *__s) __attribute__ ((__deprecated__));,120,1,"     ;
# 638 ""/usr/include/stdio.h"" 3 4
extern char *gets (char *__s) __attribute__ ((__deprecated__));


"
2021\cslim\test\libglusterfs\checksum.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\checksum.cpp.c,"extern char * gzgets (gzFile file, char *buf, int len);",120,1,"

extern char * gzgets (gzFile file, char *buf, int len);
# 1385 ""/usr/include/zlib.h"" 3 4
extern int gzputc (gzFile file, int c);
"
2021\cslim\test\libglusterfs\store.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\store.cpp.c,"temp = fgets (str, size, file);",120,1,"        do { if (!(store_errno)) { do { _gf_msg ("""", ""./store.c"", __FUNCTION__, 196, GF_LOG_ERROR, 0, 1, (100000 + 1000 + 150), ""Assertion failed: "" ""store_errno""); } while (0); } } while (0);

        temp = fgets (str, size, file);
        if (temp == ((void *)0) || feof (file)) {
                ret = -1;
"
2021\cslim\test\sqlite312-cpp\shell.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\shell.cpp.c,"if( fgets(&zLine[n], nLine - n, in)==0 ){",120,1,"      if( zLine==0 ) return 0;
    }
    if( fgets(&zLine[n], nLine - n, in)==0 ){
      if( n==0 ){
        free(zLine);
"
2021\cslim\test\sqlite312-cpp\shell.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\shell.cpp.c,"while( fgets(z, sizeof(z), in)!=0 ){",120,1,"  in = fopen(z, ""rb"");
  if( in==0 ) return;
  while( fgets(z, sizeof(z), in)!=0 ){
    static const struct {
      const char *zPattern;
"
2021\deneyapkart-arduino-core\tools\sdk\include\fatfs\ff.h,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\tools\sdk\include\fatfs\ff.h,"TCHAR* f_gets (TCHAR* buff, int len, FIL* fp);						*/",120,1,"int f_puts (const TCHAR* str, FIL* cp);								/* Put a string to the file */
int f_printf (FIL* fp, const TCHAR* str, ...);						/* Put a formatted string to the file */
TCHAR* f_gets (TCHAR* buff, int len, FIL* fp);						/* Get a string from the file */

#define f_eof(fp) ((int)((fp)->fptr == (fp)->obj.objsize))
"
2021\deneyapkart-arduino-core\tools\sdk\include\mbedtls\mbedtls\x509.h,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\tools\sdk\include\mbedtls\mbedtls\x509.h,"int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn );",120,1," *                 terminated nul byte), or a negative error code.
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn );

/**
"
2021\deneyapkart-arduino-core\tools\sdk\include\mbedtls\mbedtls\x509.h,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\tools\sdk\include\mbedtls\mbedtls\x509.h,"int mbedtls_x509_serial_gets( char *buf, size_t size, const mbedtls_x509_buf *serial );",120,1," *                 terminated nul byte), or a negative error code.
 */
int mbedtls_x509_serial_gets( char *buf, size_t size, const mbedtls_x509_buf *serial );

/**
"
2021\deneyapkart-arduino-core\tools\sdk\include\mbedtls\mbedtls\x509.h,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\tools\sdk\include\mbedtls\mbedtls\x509.h,"int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,",120,1,"int mbedtls_x509_get_ext( unsigned char **p, const unsigned char *end,
                  mbedtls_x509_buf *ext, int tag );
int mbedtls_x509_sig_alg_gets( char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
                       mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
                       const void *sig_opts );
"
2021\enemy\enemy.c,Dataset Download,../../Dataset Download/2021\enemy\enemy.c,"unsigned char *fdgets(unsigned char *, int, int);",120,1,"}

unsigned char *fdgets(unsigned char *, int, int);
int initConnection();
void RandString(unsigned char * buf, int length);
"
2021\enemy\enemy.c,Dataset Download,../../Dataset Download/2021\enemy\enemy.c,"char *util_fdgets(char *buffer, int buffer_size, int fd)",120,1,"        *zero++ = 0;
}
char *util_fdgets(char *buffer, int buffer_size, int fd)
{
    int got = 0, total = 0;
"
2021\enemy\enemy.c,Dataset Download,../../Dataset Download/2021\enemy\enemy.c,"while (util_fdgets(buffer, 512, fd) != NULL)",120,1,"        return 0;

    while (util_fdgets(buffer, 512, fd) != NULL)
    {
        int i = 0, ii = 0;
"
2021\enemy\enemy.c,Dataset Download,../../Dataset Download/2021\enemy\enemy.c,"fgets(buf,1024,file);",120,1,"							sprintf(outfile,""%s%s\n"",cwd,argv[0]+i);
							while(!feof(file)) {
									fgets(buf,1024,file);
									if (!strcasecmp(buf,outfile)) d++;
							}
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"int fdgets(unsigned char *buffer, int bufferSize, int fd) {",120,1,"char new_password[40];
//////////////////////////////////
int fdgets(unsigned char *buffer, int bufferSize, int fd) {
	int total = 0, got = 1;
	while(got == 1 && total < bufferSize && *(buffer + total - 1) != '\n') { got = read(fd, buffer + total, 1); total++; }
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"while(memset(buf, 0, sizeof buf) && (count = fdgets(buf, sizeof buf, datafd)) > 0) {",120,1,"				char buf[2048];
				memset(buf, 0, sizeof buf);
				while(memset(buf, 0, sizeof buf) && (count = fdgets(buf, sizeof buf, datafd)) > 0) {
					if(strstr(buf, ""\n"") == NULL) { done = 1; break; }
					trim(buf);
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"while(fgets(temp, 512, fp) != NULL){",120,1,"        return(-1);
    }
    while(fgets(temp, 512, fp) != NULL){
        if((strstr(temp, str)) != NULL){
            find_result++;
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"if(fdgets(buf, sizeof buf, datafd) < 1) goto end;",120,1,"        sprintf(botnet, ""\e[31mUsername\e[97m: "");
		if(send(datafd, botnet, strlen(botnet), MSG_NOSIGNAL) == -1) goto end;
        if(fdgets(buf, sizeof buf, datafd) < 1) goto end;
        trim(buf);
		char* nickstring;
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"while(fdgets(buf, sizeof buf, datafd) > 0)",120,1,"		fclose(client_logs);

		while(fdgets(buf, sizeof buf, datafd) > 0)
		{
			if(strstr(buf, ""bots""))
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"while(fdgets(new_username, sizeof(new_username), datafd) > 0)",120,1,"					if(send(datafd, auresp, strlen(auresp), MSG_NOSIGNAL) == -1) goto end;
					memset(auresp, 0, sizeof(auresp));
					while(fdgets(new_username, sizeof(new_username), datafd) > 0)
						break;
					trim(new_username);
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"while(fdgets(new_password, sizeof(new_password), datafd) > 0)",120,1,"					if(send(datafd, auresp, strlen(auresp), MSG_NOSIGNAL) == -1) goto end;
					memset(auresp, 0, sizeof(auresp));
					while(fdgets(new_password, sizeof(new_password), datafd) > 0)
						break;
					trim(new_password);;
"
2021\Freak-Web-Server\externals\node12\include\node\openssl\bio.h,Dataset Download,../../Dataset Download/2021\Freak-Web-Server\externals\node12\include\node\openssl\bio.h,"int BIO_gets(BIO *bp, char *buf, int size);",120,1,"int BIO_read(BIO *b, void *data, int dlen);
int BIO_read_ex(BIO *b, void *data, size_t dlen, size_t *readbytes);
int BIO_gets(BIO *bp, char *buf, int size);
int BIO_write(BIO *b, const void *data, int dlen);
int BIO_write_ex(BIO *b, const void *data, size_t dlen, size_t *written);
"
2021\Freak-Web-Server\externals\node12\include\node\openssl\bio.h,Dataset Download,../../Dataset Download/2021\Freak-Web-Server\externals\node12\include\node\openssl\bio.h,"int (*BIO_meth_get_gets(const BIO_METHOD *biom)) (BIO *, char *, int);",120,1,"int BIO_meth_set_puts(BIO_METHOD *biom,
                      int (*puts) (BIO *, const char *));
int (*BIO_meth_get_gets(const BIO_METHOD *biom)) (BIO *, char *, int);
int BIO_meth_set_gets(BIO_METHOD *biom,
                      int (*gets) (BIO *, char *, int));
"
2021\Freak-Web-Server\externals\node12\include\node\openssl\bio.h,Dataset Download,../../Dataset Download/2021\Freak-Web-Server\externals\node12\include\node\openssl\bio.h,"int BIO_meth_set_gets(BIO_METHOD *biom,",120,1,"                      int (*puts) (BIO *, const char *));
int (*BIO_meth_get_gets(const BIO_METHOD *biom)) (BIO *, char *, int);
int BIO_meth_set_gets(BIO_METHOD *biom,
                      int (*gets) (BIO *, char *, int));
long (*BIO_meth_get_ctrl(const BIO_METHOD *biom)) (BIO *, int, long, void *);
"
2021\haas-mini-program\adapter\platform\linux\network\amp_udp.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\linux\network\amp_udp.c,"buff = fgets(line, sizeof(line), fp);",120,1,"    }

    buff = fgets(line, sizeof(line), fp);
    if (buff == NULL) {
        perror(""fgets"");
"
2021\haas-mini-program\adapter\platform\linux\network\amp_udp.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\linux\network\amp_udp.c,"while (fgets(line, sizeof(line), fp)) {",120,1,"    }

    while (fgets(line, sizeof(line), fp)) {
        if (11 !=
            sscanf(line, ""%s %08x %08x %x %d %d %d %08x %d %d %d"",
"
2021\haas-mini-program\components\und\src\und_manage.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\und\src\und_manage.c,"aos_memset(ctx->targets, 0, sizeof(ctx->targets));",120,1,"            aos_free(ctx->targets[i]);
    }
    aos_memset(ctx->targets, 0, sizeof(ctx->targets));
    aos_memset(ctx->wb, 0, sizeof(ctx->wb));
    undp_mutex_unlock(ctx->mutex);
"
2021\haas-mini-program\components\und\src\und_manage.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\und\src\und_manage.c,"aos_memset(ctx->targets[cap_idx], 0, len);",120,1,"            return UND_MEM_ERR;
        }
        aos_memset(ctx->targets[cap_idx], 0, len);
        ctx->targets[cap_idx]->size = UND_ELEM_MAX_CNT_PER_TARGET;
    }
"
2021\haas-mini-program\utils\mbedtls\include\mbedtls\x509.h,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\include\mbedtls\x509.h,"int mbedtls_x509_dn_gets(char *buf, size_t size, const mbedtls_x509_name *dn);",120,1," *                 terminated nul byte), or a negative error code.
 */
int mbedtls_x509_dn_gets(char *buf, size_t size, const mbedtls_x509_name *dn);

/**
"
2021\haas-mini-program\utils\mbedtls\include\mbedtls\x509.h,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\include\mbedtls\x509.h,"int mbedtls_x509_serial_gets(char *buf, size_t size, const mbedtls_x509_buf *serial);",120,1," *                 terminated nul byte), or a negative error code.
 */
int mbedtls_x509_serial_gets(char *buf, size_t size, const mbedtls_x509_buf *serial);

/**
"
2021\haas-mini-program\utils\mbedtls\include\mbedtls\x509.h,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\include\mbedtls\x509.h,"int mbedtls_x509_sig_alg_gets(char *buf, size_t size, const mbedtls_x509_buf *sig_oid,",120,1,"int mbedtls_x509_get_ext(unsigned char **p, const unsigned char *end,
                                     mbedtls_x509_buf *ext, int tag);
int mbedtls_x509_sig_alg_gets(char *buf, size_t size, const mbedtls_x509_buf *sig_oid,
        mbedtls_pk_type_t pk_alg, mbedtls_md_type_t md_alg,
        const void *sig_opts);
"
2021\haas-mini-program\utils\mbedtls\library\bignum.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\bignum.c,"if( fgets( s, sizeof( s ) - 1, fin ) == NULL )",120,1,"
    memset( s, 0, sizeof( s ) );
    if( fgets( s, sizeof( s ) - 1, fin ) == NULL )
        return( MBEDTLS_ERR_MPI_FILE_IO_ERROR );

"
2021\haas-mini-program\utils\mbedtls\library\x509.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\x509.c,"int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )",120,1," * than size characters will be written
 */
int mbedtls_x509_dn_gets( char *buf, size_t size, const mbedtls_x509_name *dn )
{
    int ret;
"
2021\haas-mini-program\utils\mbedtls\library\x509.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\x509.c,"int mbedtls_x509_serial_gets( char *buf, size_t size, const mbedtls_x509_buf *serial )",120,1," * than size characters will be written
 */
int mbedtls_x509_serial_gets( char *buf, size_t size, const mbedtls_x509_buf *serial )
{
    int ret;
"
2021\haas-mini-program\utils\mbedtls\library\x509_crt.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\x509_crt.c,"ret = mbedtls_x509_serial_gets( p, n, &crt->serial );",120,1,"    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_x509_serial_gets( p, n, &crt->serial );
    MBEDTLS_X509_SAFE_SNPRINTF;

"
2021\haas-mini-program\utils\mbedtls\library\x509_crt.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\x509_crt.c,"ret = mbedtls_x509_dn_gets( p, n, &crt->issuer  );",120,1,"    ret = mbedtls_snprintf( p, n, ""\n%sissuer name       : "", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
    ret = mbedtls_x509_dn_gets( p, n, &crt->issuer  );
    MBEDTLS_X509_SAFE_SNPRINTF;

"
2021\haas-mini-program\utils\mbedtls\library\x509_crt.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\x509_crt.c,"ret = mbedtls_x509_dn_gets( p, n, &crt->subject );",120,1,"    ret = mbedtls_snprintf( p, n, ""\n%ssubject name      : "", prefix );
    MBEDTLS_X509_SAFE_SNPRINTF;
    ret = mbedtls_x509_dn_gets( p, n, &crt->subject );
    MBEDTLS_X509_SAFE_SNPRINTF;

"
2021\haas-mini-program\utils\mbedtls\library\x509_crt.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\x509_crt.c,"ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,",120,1,"    MBEDTLS_X509_SAFE_SNPRINTF;

    ret = mbedtls_x509_sig_alg_gets( p, n, &crt->sig_oid, crt->sig_pk,
                             crt->sig_md, crt->sig_opts );
    MBEDTLS_X509_SAFE_SNPRINTF;
"
2021\HVAC-Monitoring-System\datamgr.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\datamgr.c,"while(fgets(line, sizeof(line), fp_sensor_map) != NULL)",120,1,"    char line[11]; // Line length chosen according to curent room_sensor.map [7] caused problems
    
    while(fgets(line, sizeof(line), fp_sensor_map) != NULL) // Reads every line of the text file
    {
        sscanf(line, ""%hu%hu"", &(dummy.room), &(dummy.sensor.id)); // Parses line and retreives room and sensor id's
"
2021\IOTProject\Maintain\doorAccess\doorAccess_file.c,Dataset Download,../../Dataset Download/2021\IOTProject\Maintain\doorAccess\doorAccess_file.c,"while (n < N && fgets(temp[n], sizeof(* temp), FD) != NULL)",120,1,"  }
  
  while (n < N && fgets(temp[n], sizeof(* temp), FD) != NULL)
  {
    puts(temp[n]);
"
2021\Kiss-Light_Hub\src\inih\ini.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\inih\ini.c,is the fgets() equivalent used by ini_parse_string(). */,120,1,"
/* An ini_reader function to read the next line from a string buffer. This
   is the fgets() equivalent used by ini_parse_string(). */
static char* ini_reader_string(char* str, int num, void* stream) {
    ini_parse_string_ctx* ctx = (ini_parse_string_ctx*)stream;
"
2021\netifyd\src\nd-dhc.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-dhc.cpp,"if (fgets(header, sizeof(header), hf) == NULL) { fclose(hf); return; }",120,1,"    if (! (hf = fopen(filename, ""r""))) return;

    if (fgets(header, sizeof(header), hf) == NULL) { fclose(hf); return; }

    if (pthread_mutex_lock(&lock) == 0) {
"
2021\netifyd\src\nd-socket.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-socket.cpp,"if (! fgets(filename, max_path_len, fh)) break;",120,1,"                &a, &b, &c, &d, &e, &f, &g);
            if (count == 0) {
                if (! fgets(filename, max_path_len, fh)) break;
                continue;
            }
"
2021\netifyd\src\nd-socket.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-socket.cpp,"else if (! fgets(filename, max_path_len, fh)) break;",120,1,"            }
            else if (count == -1) break;
            else if (! fgets(filename, max_path_len, fh)) break;
            else if (strncmp(filename, base->node.c_str(), base->node.size()) == 0) {
                rc = EADDRINUSE;
"
2021\netifyd\src\nd-util.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-util.cpp,"if (fgets(_url, ND_URL_SINK_LEN, fh) == NULL) {",120,1,"    }

    if (fgets(_url, ND_URL_SINK_LEN, fh) == NULL) {
        fclose(fh);
        nd_printf(""Error reading URL: %s: %s\n"", ND_URL_SINK_PATH, strerror(errno));
"
2021\netifyd\src\netifyd.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\netifyd.cpp,"if (fgets(buffer, sizeof(buffer), fh)) {",120,1,"    size_t line = 0;
    while (! feof(fh)) {
        if (fgets(buffer, sizeof(buffer), fh)) {
            line++;
            char *p = buffer;
"
2021\netifyd\src\netifyd.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\netifyd.cpp,"if (fgets(pid, sizeof(pid), hpid)) {",120,1,"    if (hpid != NULL) {
        char pid[32];
        if (fgets(pid, sizeof(pid), hpid)) {
            nd_pid = nd_is_running(
                (pid_t)strtol(pid, NULL, 0),
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,TCHAR *f_gets (,120,1,"/*-----------------------------------------------------------------------*/

TCHAR *f_gets (
    TCHAR *buff,	/* Pointer to the string buffer to read */
    int len,		/* Size of string buffer (characters) */
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.h,"TCHAR *f_gets (TCHAR *buff, int len, FIL *fp);						*/",120,1,"    int f_puts (const TCHAR *str, FIL *cp);								/* Put a string to the file */
    int f_printf (FIL *fp, const TCHAR *str, ...);						/* Put a formatted string to the file */
    TCHAR *f_gets (TCHAR *buff, int len, FIL *fp);						/* Get a string from the file */


"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\libc\libc.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\libc\libc.h,"FAR char *lib_fgets(FAR char *buf, size_t buflen, FILE *stream,",120,1,"	/* Defined in lib_libfgets.c */

	FAR char *lib_fgets(FAR char *buf, size_t buflen, FILE *stream,
			bool keepnl, bool consume);

"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\music_player\fs_fat\ff.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\music_player\fs_fat\ff.c,TCHAR* f_gets (,120,1,"/*-----------------------------------------------------------------------*/

TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wolfssl\src\bio.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wolfssl\src\bio.c,"int wolfSSL_BIO_gets(WOLFSSL_BIO* bio, char* buf, int sz)",120,1," *         value in an error case.
 */
int wolfSSL_BIO_gets(WOLFSSL_BIO* bio, char* buf, int sz)
{
    int ret = WOLFSSL_BIO_UNSET;
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wolfssl\src\ssl.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wolfssl\src\ssl.c,"while ((pemLen = wolfSSL_BIO_gets(bio, pem, sizeof(pem) - 1)) > 0) {",120,1,"        /* Find header line. */
        pem[sizeof(pem) - 1] = '\0';
        while ((pemLen = wolfSSL_BIO_gets(bio, pem, sizeof(pem) - 1)) > 0) {
            if (XSTRNCMP(pem, PEM_BEGIN, PEM_BEGIN_SZ) == 0)
                break;
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wolfssl\wolfssl\ssl.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wolfssl\wolfssl\ssl.h,"WOLFSSL_API int wolfSSL_BIO_gets(WOLFSSL_BIO* bio, char* buf, int sz);",120,1,"WOLFSSL_API int  wolfSSL_BIO_free(WOLFSSL_BIO*);
WOLFSSL_API int  wolfSSL_BIO_free_all(WOLFSSL_BIO*);
WOLFSSL_API int wolfSSL_BIO_gets(WOLFSSL_BIO* bio, char* buf, int sz);
WOLFSSL_API WOLFSSL_BIO* wolfSSL_BIO_next(WOLFSSL_BIO* bio);
WOLFSSL_API WOLFSSL_BIO* wolfSSL_BIO_find_type(WOLFSSL_BIO* bio, int type);
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\ipa-utils.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\ipa-utils.h,"possible_polymorphic_call_targets (tree, HOST_WIDE_INT,",120,1,"void update_type_inheritance_graph (void);
vec <cgraph_node *>
possible_polymorphic_call_targets (tree, HOST_WIDE_INT,
				   ipa_polymorphic_call_context,
				   bool *final = NULL,
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\ipa-utils.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\ipa-utils.h,"void dump_possible_polymorphic_call_targets (FILE *, tree, HOST_WIDE_INT,",120,1,"				   int *nonconstruction_targets = NULL);
odr_type get_odr_type (tree, bool insert = false);
void dump_possible_polymorphic_call_targets (FILE *, tree, HOST_WIDE_INT,
					     const ipa_polymorphic_call_context &);
bool possible_polymorphic_call_target_p (tree, HOST_WIDE_INT,
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\ipa-utils.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\ipa-utils.h,"possible_polymorphic_call_targets (struct cgraph_edge *e,",120,1,"
inline vec <cgraph_node *>
possible_polymorphic_call_targets (struct cgraph_edge *e,
				   bool *final = NULL,
				   void **cache_token = NULL,
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\ipa-utils.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\ipa-utils.h,"return possible_polymorphic_call_targets (e->indirect_info->otr_type,",120,1,"					  e->indirect_info->maybe_in_construction,
					  e->indirect_info->maybe_derived_type};
  return possible_polymorphic_call_targets (e->indirect_info->otr_type,
					    e->indirect_info->otr_token,
					    context,
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\ipa-utils.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\ipa-utils.h,"possible_polymorphic_call_targets (tree call,",120,1,"
inline vec <cgraph_node *>
possible_polymorphic_call_targets (tree call,
				   bool *final = NULL,
				   void **cache_token = NULL)
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\ipa-utils.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\ipa-utils.h,"return possible_polymorphic_call_targets (obj_type_ref_class (call),",120,1,"			     call,
			     &otr_type, &otr_token, &context);
  return possible_polymorphic_call_targets (obj_type_ref_class (call),
					    tree_to_uhwi
					      (OBJ_TYPE_REF_TOKEN (call)),
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\ipa-utils.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\ipa-utils.h,"dump_possible_polymorphic_call_targets (FILE *f, struct cgraph_edge *e)",120,1,"
inline void
dump_possible_polymorphic_call_targets (FILE *f, struct cgraph_edge *e)
{
  gcc_checking_assert (e->indirect_info->polymorphic);
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\ipa-utils.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\ipa-utils.h,"dump_possible_polymorphic_call_targets (f, e->indirect_info->otr_type,",120,1,"					  e->indirect_info->maybe_in_construction,
					  e->indirect_info->maybe_derived_type};
  dump_possible_polymorphic_call_targets (f, e->indirect_info->otr_type,
					  e->indirect_info->otr_token,
					  context);
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\system.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\system.h,"#  define fgets(S, n, Stream) fgets_unlocked (S, n, Stream)",120,1,"# ifdef HAVE_FGETS_UNLOCKED
#  undef fgets
#  define fgets(S, n, Stream) fgets_unlocked (S, n, Stream)
#  if defined (HAVE_DECL_FGETS_UNLOCKED) && !HAVE_DECL_FGETS_UNLOCKED
extern char *fgets_unlocked (char *, int, FILE *);
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\sdk\include\tuya_hal_fs.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\sdk\include\tuya_hal_fs.h,"CHAR_T* tuya_hal_fgets(CHAR_T* buf, INT_T len, TUYA_FILE file);",120,1," * @return  读入的字符串指针
 */
CHAR_T* tuya_hal_fgets(CHAR_T* buf, INT_T len, TUYA_FILE file);

/**
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\sdk\include\uf_file.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\sdk\include\uf_file.h,"CHAR_T *ufgets(IN CHAR_T *s,IN INT_T n, IN uFILE *stream);",120,1,"***********************************************************/
__UF_FILE_EXT \
CHAR_T *ufgets(IN CHAR_T *s,IN INT_T n, IN uFILE *stream);

#ifdef __cplusplus
"
2021\univ-csProject\DB+C_POS Implement\res_pos.c,Dataset Download,../../Dataset Download/2021\univ-csProject\DB+C_POS Implement\res_pos.c,"fgets(menuName, sizeof(menuName), stdin);",120,1,"	__fpurge(stdin);
	printf("" 메뉴 이름을 입력하세요.: "");
	fgets(menuName, sizeof(menuName), stdin);
	menuName[strlen(menuName) - 1] = '\0';
	strcpy(infoMenu_Name, menuName);
"
2021\univ-csProject\DB+C_POS Implement\res_pos.c,Dataset Download,../../Dataset Download/2021\univ-csProject\DB+C_POS Implement\res_pos.c,"fgets(date, sizeof(date), stdin);",120,1,"	
	__fpurge(stdin);
	fgets(date, sizeof(date), stdin);
	date[strlen(date) - 1] = '\0';
	strcpy(desc, date);
"
2021\univ-csProject\DB+C_POS Implement\res_pos.c,Dataset Download,../../Dataset Download/2021\univ-csProject\DB+C_POS Implement\res_pos.c,"fgets(foods, sizeof(foods), stdin);",120,1,"	printf("" 재고현황을 검색 할 식재료명을 입력하세요. : "");
	__fpurge(stdin);
	fgets(foods, sizeof(foods), stdin);
	foods[strlen(foods) - 1] = '\0';
	
"
2021\univ-csProject\DB+C_POS Implement\res_pos.c,Dataset Download,../../Dataset Download/2021\univ-csProject\DB+C_POS Implement\res_pos.c,"fgets(name, sizeof(name), stdin);",120,1,"	printf("" 2. 직원 이름입력 : "");
	__fpurge(stdin);
	fgets(name, sizeof(name), stdin);
	name[strlen(name) - 1] = '\0';

"
2021\univ-csProject\DB+C_POS Implement\res_pos.c,Dataset Download,../../Dataset Download/2021\univ-csProject\DB+C_POS Implement\res_pos.c,"fgets(hp, sizeof(hp), stdin);",120,1,"	printf("" 3. 직원 HP입력 : "");
	__fpurge(stdin);
	fgets(hp, sizeof(hp), stdin);
	hp[strlen(hp) - 1] = '\0';

"
2021\univ-csProject\Network Implement\Network Final Teamproject\tcp_emulc.c,Dataset Download,../../Dataset Download/2021\univ-csProject\Network Implement\Network Final Teamproject\tcp_emulc.c,"fgets(abuf, sizeof(abuf), stdin);",120,1,"	/*2.입력받은 데이터 전송*/
	printf(""\n+=== Input data to Transfer ===+\n"");
	fgets(abuf, sizeof(abuf), stdin);
	abuf[strlen(abuf) -1] = '\0';
	t_tcb[conn-1].snd_buf= (u_char *)abuf;
"
2021\univ-csProject\Network Implement\tcp_chat\chat_cli.c,Dataset Download,../../Dataset Download/2021\univ-csProject\Network Implement\tcp_chat\chat_cli.c,"fgets(msg, BUF_SIZE, stdin);",120,1,"		while(1) 
		{
			fgets(msg, BUF_SIZE, stdin);
			if(!strcmp(msg,""q\n"")||!strcmp(msg,""Q\n"")) 
			{
"
2021\univ-csProject\Network Implement\tcp_chat\tcp_chatcli.c,Dataset Download,../../Dataset Download/2021\univ-csProject\Network Implement\tcp_chat\tcp_chatcli.c,"if(fgets(bufmsg, MAXLINE, stdin)){",120,1,"		}
		if(FD_ISSET(0, &read_fds)){
			if(fgets(bufmsg, MAXLINE, stdin)){
				if(send(s, bufall, namelen+strlen(bufmsg), 0) < 0)
					puts(""Error : Write error on socket"");
"
2021\univ-csProject\Network Implement\tcp_talk\tcp_talkcli.c,Dataset Download,../../Dataset Download/2021\univ-csProject\Network Implement\tcp_talk\tcp_talkcli.c,"while(fgets(buf, sizeof(buf), stdin) != NULL){",120,1,"	char buf[MAXLINE+1];
	int nbyte;
	while(fgets(buf, sizeof(buf), stdin) != NULL){
		nbyte = strlen(buf);
		write(sd, buf, strlen(buf));
"
2021\virtual-festo-twin\Hardware_Design\LinuxSys.sdk\zynq_fsbl_bsp\ps7_cortexa9_0\include\ff.h,Dataset Download,../../Dataset Download/2021\virtual-festo-twin\Hardware_Design\LinuxSys.sdk\zynq_fsbl_bsp\ps7_cortexa9_0\include\ff.h,"TCHAR* f_gets (TCHAR* buff, s32 len, FIL* fp);						*/",120,1,"#endif
#if _USE_STRFUNC
TCHAR* f_gets (TCHAR* buff, s32 len, FIL* fp);						/* Get a string from the file */
#if !_FS_READONLY
int f_putc (TCHAR c, FIL* fp);										/* Put a character to the file */
"
2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\tests\dtls-client.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\tests\dtls-client.c,"if (fgets(buf + len, sizeof(buf) - len, stdin))",120,1,"static void
handle_stdin() {
  if (fgets(buf + len, sizeof(buf) - len, stdin))
    len += strlen(buf + len);
}
"
