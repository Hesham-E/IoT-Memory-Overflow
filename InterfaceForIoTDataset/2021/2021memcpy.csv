,GithubID,Year,FullPath,Codesnippet,CWE,isTrueVulnerable,Codesnippet5
35,2021\arduino-learn-circuit\libraries\arduinoWebSockets-master\src\WebSockets.cpp,Dataset Download,../../Dataset Download/2021\arduino-learn-circuit\libraries\arduinoWebSockets-master\src\WebSockets.cpp,"memcpy((dataPtr + WEBSOCKETS_MAX_HEADER_SIZE), payload, length);",120,1,"        uint8_t * dataPtr = (uint8_t *) malloc(length + WEBSOCKETS_MAX_HEADER_SIZE);
        if(dataPtr) {
            memcpy((dataPtr + WEBSOCKETS_MAX_HEADER_SIZE), payload, length);
            headerToPayload = true;
            useInternBuffer = true;
"
37,2021\arduino-learn-circuit\libraries\arduinoWebSockets-master\src\libsha1\libsha1.c,Dataset Download,../../Dataset Download/2021\arduino-learn-circuit\libraries\arduinoWebSockets-master\src\libsha1\libsha1.c,"memcpy(block, buffer, 64);",120,1,"#ifdef SHA1HANDSOFF
    CHAR64LONG16 block[1];  /* use array to appear as a pointer */
    memcpy(block, buffer, 64);
#else
    /* The following had better never be used because it causes the
"
39,2021\arduino-learn-circuit\libraries\arduinoWebSockets-master\src\libsha1\libsha1.c,Dataset Download,../../Dataset Download/2021\arduino-learn-circuit\libraries\arduinoWebSockets-master\src\libsha1\libsha1.c,"memcpy(&context->buffer[j], data, (i = 64-j));",120,1,"    j = (j >> 3) & 63;
    if ((j + len) > 63) {
        memcpy(&context->buffer[j], data, (i = 64-j));
        SHA1Transform(context->state, context->buffer);
        for ( ; i + 63 < len; i += 64) {
"
40,2021\arduino-learn-circuit\libraries\arduinoWebSockets-master\src\libsha1\libsha1.c,Dataset Download,../../Dataset Download/2021\arduino-learn-circuit\libraries\arduinoWebSockets-master\src\libsha1\libsha1.c,"memcpy(&context->buffer[j], &data[i], len - i);",120,1,"    }
    else i = 0;
    memcpy(&context->buffer[j], &data[i], len - i);
}

"
43,2021\arduino-learn-circuit\libraries\firebase-arduino-master\contrib\src\thing\Portal.cpp,Dataset Download,../../Dataset Download/2021\arduino-learn-circuit\libraries\firebase-arduino-master\contrib\src\thing\Portal.cpp,"memcpy(buffer, config.c_str(), config.length()+1);",120,1,"        String config = server_.arg(""config"");
        buffer = (char*)malloc(config.length()+1);
        memcpy(buffer, config.c_str(), config.length()+1);
      }
      { // Scoped because serializer is invalid after free().
"
46,2021\arduino-learn-circuit\libraries\pubsubclient-master\tests\src\receive_spec.cpp,Dataset Download,../../Dataset Download/2021\arduino-learn-circuit\libraries\pubsubclient-master\tests\src\receive_spec.cpp,"memcpy(lastPayload,payload,length);",120,1,"    callback_called = true;
    strcpy(lastTopic,topic);
    memcpy(lastPayload,payload,length);
    lastLength = length;
}
"
48,2021\arduino-learn-circuit\libraries\pubsubclient-master\tests\src\receive_spec.cpp,Dataset Download,../../Dataset Download/2021\arduino-learn-circuit\libraries\pubsubclient-master\tests\src\receive_spec.cpp,"memcpy(bigPublish,publish,16);",120,1,"    memset(bigPublish,'A',length);
    bigPublish[length] = 'B';
    memcpy(bigPublish,publish,16);
    shimClient.respond(bigPublish,length);

"
54,2021\arduino-learn-circuit\libraries\pubsubclient-master\tests\src\lib\IPAddress.cpp,Dataset Download,../../Dataset Download/2021\arduino-learn-circuit\libraries\pubsubclient-master\tests\src\lib\IPAddress.cpp,"memcpy(_address, &address, sizeof(_address));",120,1,"IPAddress::IPAddress(uint32_t address)
{
    memcpy(_address, &address, sizeof(_address));
}

"
55,2021\arduino-learn-circuit\libraries\pubsubclient-master\tests\src\lib\IPAddress.cpp,Dataset Download,../../Dataset Download/2021\arduino-learn-circuit\libraries\pubsubclient-master\tests\src\lib\IPAddress.cpp,"memcpy(_address, address, sizeof(_address));",120,1,"IPAddress::IPAddress(const uint8_t *address)
{
    memcpy(_address, address, sizeof(_address));
}

"
57,2021\arduino-learn-circuit\libraries\pubsubclient-master\tests\src\lib\IPAddress.cpp,Dataset Download,../../Dataset Download/2021\arduino-learn-circuit\libraries\pubsubclient-master\tests\src\lib\IPAddress.cpp,"memcpy(_address, (const uint8_t *)&address, sizeof(_address));",120,1,"IPAddress& IPAddress::operator=(uint32_t address)
{
    memcpy(_address, (const uint8_t *)&address, sizeof(_address));
    return *this;
}
"
61,2021\aws-edukit-example\components\core2forAWS\sk6812\sk6812.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\sk6812\sk6812.c,"memcpy(neopixel_buffer, px->pixels, blen);",120,1,"	}

	memcpy(neopixel_buffer, px->pixels, blen);
	for (uint16_t i = 0; i < blen; i++) {
		float b = px->brightness / 255.0;
"
63,2021\aws-edukit-example\components\core2forAWS\tft\disp_spi.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\disp_spi.c,"memcpy(t.base.tx_data, data, length);",120,1,"    if (length <= 4 && data != NULL) {
        t.base.flags = SPI_TRANS_USE_TXDATA;
        memcpy(t.base.tx_data, data, length);
    } else {
        t.base.tx_buffer = data;
"
64,2021\aws-edukit-example\components\core2forAWS\tft\disp_spi.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\disp_spi.c,"memcpy(&queuedt, &t, sizeof t);",120,1,"    } else {
        static spi_transaction_ext_t queuedt;
        memcpy(&queuedt, &t, sizeof t);
        spi_pending_trans++;
        if (spi_device_queue_trans(spi, (spi_transaction_t *) &queuedt, portMAX_DELAY) != ESP_OK) {
"
65,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_core\lv_obj.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_core\lv_obj.c,"_lv_memcpy(&new_obj->user_data, &copy->user_data, sizeof(lv_obj_user_data_t));",120,1,"        /*Set user data*/
#if LV_USE_USER_DATA
        _lv_memcpy(&new_obj->user_data, &copy->user_data, sizeof(lv_obj_user_data_t));
#endif

"
66,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_core\lv_obj.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_core\lv_obj.c,"_lv_memcpy(&obj->user_data, &data, sizeof(lv_obj_user_data_t));",120,1,"    LV_ASSERT_OBJ(obj, LV_OBJX_NAME);

    _lv_memcpy(&obj->user_data, &data, sizeof(lv_obj_user_data_t));
}
#endif
"
67,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_core\lv_refr.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_core\lv_refr.c,"_lv_memcpy(copy_buf, buf_ina + start_offs, line_length);",120,1,"                            /* The frame buffer is probably in an external RAM where sequential access is much faster.
                             * So first copy a line into a buffer and write it back the ext. RAM */
                            _lv_memcpy(copy_buf, buf_ina + start_offs, line_length);
                            _lv_memcpy(buf_act + start_offs, copy_buf, line_length);
                            start_offs += hres * sizeof(lv_color_t);
"
68,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_core\lv_refr.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_core\lv_refr.c,"_lv_memcpy(buf_act + start_offs, copy_buf, line_length);",120,1,"                             * So first copy a line into a buffer and write it back the ext. RAM */
                            _lv_memcpy(copy_buf, buf_ina + start_offs, line_length);
                            _lv_memcpy(buf_act + start_offs, copy_buf, line_length);
                            start_offs += hres * sizeof(lv_color_t);
                        }
"
69,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_core\lv_style.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_core\lv_style.c,"_lv_memcpy(style_dest->map, style_src->map, size);",120,1,"    uint16_t size = _lv_style_get_mem_size(style_src);
    style_dest->map = lv_mem_alloc(size);
    _lv_memcpy(style_dest->map, style_src->map, size);
}

"
70,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_core\lv_style.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_core\lv_style.c,"_lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));",120,1,"        if(list_src->has_trans) {
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 1) * sizeof(lv_style_t *));
            _lv_memcpy(list_dest->style_list, list_src->style_list + 1, (list_src->style_cnt - 1) * sizeof(lv_style_t *));
            list_dest->style_cnt = list_src->style_cnt - 1;
        }
"
71,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_core\lv_style.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_core\lv_style.c,"_lv_memcpy(list_dest->style_list, list_src->style_list, list_src->style_cnt * sizeof(lv_style_t *));",120,1,"        else {
            list_dest->style_list = lv_mem_alloc(list_src->style_cnt * sizeof(lv_style_t *));
            _lv_memcpy(list_dest->style_list, list_src->style_list, list_src->style_cnt * sizeof(lv_style_t *));
            list_dest->style_cnt = list_src->style_cnt;
        }
"
72,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_core\lv_style.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_core\lv_style.c,"_lv_memcpy(list_dest->style_list, list_src->style_list + 2, (list_src->style_cnt - 2) * sizeof(lv_style_t *));",120,1,"        if(list_src->has_trans) {
            list_dest->style_list = lv_mem_alloc((list_src->style_cnt - 2) * sizeof(lv_style_t *));
            _lv_memcpy(list_dest->style_list, list_src->style_list + 2, (list_src->style_cnt - 2) * sizeof(lv_style_t *));
            list_dest->style_cnt = list_src->style_cnt - 2;
        }
"
74,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_draw\lv_draw_blend.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_draw\lv_draw_blend.c,"_lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));",120,1,"            /*Software rendering*/
            for(y = 0; y < draw_area_h; y++) {
                _lv_memcpy(disp_buf_first, map_buf_first, draw_area_w * sizeof(lv_color_t));
                disp_buf_first += disp_w;
                map_buf_first += map_w;
"
77,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_draw\lv_draw_rect.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_draw\lv_draw_rect.c,"_lv_memcpy(sh_buf, sh_cache, corner_size * corner_size);",120,1,"        /*Use the cache if available*/
        sh_buf = _lv_mem_buf_get(corner_size * corner_size);
        _lv_memcpy(sh_buf, sh_cache, corner_size * corner_size);
    }
    else {
"
78,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_draw\lv_draw_rect.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_draw\lv_draw_rect.c,"_lv_memcpy(sh_cache, sh_buf, corner_size * corner_size);",120,1,"        /*Cache the corner if it fits into the cache size*/
        if(corner_size * corner_size < sizeof(sh_cache)) {
            _lv_memcpy(sh_cache, sh_buf, corner_size * corner_size);
            sh_cache_size = corner_size;
            sh_cache_r = r_sh;
"
79,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_draw\lv_draw_rect.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_draw\lv_draw_rect.c,"_lv_memcpy(mask_buf, sh_buf_tmp, w);",120,1,"
            for(y = 0; y < h; y++) {
                _lv_memcpy(mask_buf, sh_buf_tmp, w);
                mask_res = lv_draw_mask_apply(mask_buf, fa.x1, fa.y1, w);
                if(mask_res == LV_DRAW_MASK_RES_FULL_COVER) mask_res = LV_DRAW_MASK_RES_CHANGED;
"
88,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_draw\lv_draw_rect.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_draw\lv_draw_rect.c,"_lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));",120,1,"            v += left_val;
        }
        _lv_memcpy(sh_ups_tmp_buf, sh_ups_blur_buf, size * sizeof(uint16_t));
        sh_ups_tmp_buf += size;
    }
"
97,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_hal\lv_hal_disp.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_hal\lv_hal_disp.c,"_lv_memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));",120,1,"
    _lv_memset_00(disp, sizeof(lv_disp_t));
    _lv_memcpy(&disp->driver, driver, sizeof(lv_disp_drv_t));

    _lv_ll_init(&disp->scr_ll, sizeof(lv_obj_t));
"
98,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_hal\lv_hal_disp.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_hal\lv_hal_disp.c,"memcpy(&disp->driver, new_drv, sizeof(lv_disp_drv_t));",120,1,"void lv_disp_drv_update(lv_disp_t * disp, lv_disp_drv_t * new_drv)
{
    memcpy(&disp->driver, new_drv, sizeof(lv_disp_drv_t));

    lv_obj_t * scr;
"
99,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_hal\lv_hal_indev.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_hal\lv_hal_indev.c,"_lv_memcpy(&indev->driver, driver, sizeof(lv_indev_drv_t));",120,1,"
    _lv_memset_00(indev, sizeof(lv_indev_t));
    _lv_memcpy(&indev->driver, driver, sizeof(lv_indev_drv_t));

    indev->proc.reset_query = 1;
"
100,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_hal\lv_hal_indev.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_hal\lv_hal_indev.c,"memcpy(&indev->driver, new_drv, sizeof(lv_indev_drv_t));",120,1,"void lv_indev_drv_update(lv_indev_t * indev, lv_indev_drv_t * new_drv)
{
    memcpy(&indev->driver, new_drv, sizeof(lv_indev_drv_t));
}

"
101,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_misc\lv_anim.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_misc\lv_anim.c,"_lv_memcpy(new_anim, a, sizeof(lv_anim_t));",120,1,"    /*Initialize the animation descriptor*/
    a->time_orig = a->time;
    _lv_memcpy(new_anim, a, sizeof(lv_anim_t));

    /*Set the start value*/
"
102,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_misc\lv_anim.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_misc\lv_anim.c,"_lv_memcpy(&a_tmp, a, sizeof(lv_anim_t));",120,1,"         * This way the `ready_cb` will see the animations like it's animation is ready deleted*/
        lv_anim_t a_tmp;
        _lv_memcpy(&a_tmp, a, sizeof(lv_anim_t));
        _lv_ll_remove(&LV_GC_ROOT(_lv_anim_ll), a);
        lv_mem_free(a);
"
103,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_misc\lv_bidi.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_misc\lv_bidi.c,"_lv_memcpy(&str_out[wr], str_in, rd);",120,1,"        if(base_dir == LV_BIDI_DIR_LTR) {
            if(str_out) {
                _lv_memcpy(&str_out[wr], str_in, rd);
                wr += rd;
            }
"
104,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_misc\lv_bidi.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_misc\lv_bidi.c,"if(str_out) _lv_memcpy(&str_out[wr], &str_in[rd], run_len);",120,1,"        if(base_dir == LV_BIDI_DIR_LTR) {
            if(run_dir == LV_BIDI_DIR_LTR) {
                if(str_out) _lv_memcpy(&str_out[wr], &str_in[rd], run_len);
                if(pos_conv_out) fill_pos_conv(&pos_conv_out[pos_conv_wr], pos_conv_run_len, pos_conv_rd);
            }
"
106,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_misc\lv_bidi.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_misc\lv_bidi.c,"if(dest) _lv_memcpy(&dest[wr], &src[first_weak], last_weak - first_weak + 1);",120,1,"            }

            if(dest) _lv_memcpy(&dest[wr], &src[first_weak], last_weak - first_weak + 1);
            if(pos_conv_out) fill_pos_conv(&pos_conv_out[pos_conv_wr], pos_conv_last_weak - pos_conv_first_weak + 1,
                                               pos_conv_rd_base + pos_conv_first_weak);
"
107,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_misc\lv_bidi.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_misc\lv_bidi.c,"if(dest) _lv_memcpy(&dest[wr], &src[i], letter_size);",120,1,"            /*Just store the letter*/
            else {
                if(dest) _lv_memcpy(&dest[wr], &src[i], letter_size);
                if(pos_conv_out) pos_conv_out[pos_conv_wr] = SET_RTL_POS(pos_conv_rd_base + pos_conv_i, true);
                wr += letter_size;
"
108,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_misc\lv_debug.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_misc\lv_debug.c,"_lv_memcpy(bufp, msg, msg_len);",120,1,"
        /*Add the function name*/
        _lv_memcpy(bufp, msg, msg_len);
        bufp += msg_len;

"
109,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_misc\lv_fs.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_misc\lv_fs.c,"_lv_memcpy(new_drv, drv_p, sizeof(lv_fs_drv_t));",120,1,"    if(new_drv == NULL) return;

    _lv_memcpy(new_drv, drv_p, sizeof(lv_fs_drv_t));
}

"
112,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_misc\lv_mem.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_misc\lv_mem.c,"_lv_memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));",120,1,"        /*Copy the old data to the new. Use the smaller size*/
        if(old_size != 0) {
            _lv_memcpy(new_p, data_p, LV_MATH_MIN(new_size, old_size));
            lv_mem_free(data_p);
        }
"
114,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_misc\lv_mem.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_misc\lv_mem.c,"LV_ATTRIBUTE_FAST_MEM void * _lv_memcpy(void * dst, const void * src, size_t len)",120,1," * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM void * _lv_memcpy(void * dst, const void * src, size_t len)
{
    uint8_t * d8 = dst;
"
116,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_misc\lv_mem.h,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_misc\lv_mem.h,"static inline void * _lv_memcpy(void * dst, const void * src, size_t len)",120,1," * @param len number of byte to copy
 */
static inline void * _lv_memcpy(void * dst, const void * src, size_t len)
{
    return memcpy(dst, src, len);
"
117,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_misc\lv_mem.h,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_misc\lv_mem.h,"return memcpy(dst, src, len);",120,1,"static inline void * _lv_memcpy(void * dst, const void * src, size_t len)
{
    return memcpy(dst, src, len);
}

"
123,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_misc\lv_mem.h,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_misc\lv_mem.h,"LV_ATTRIBUTE_FAST_MEM void * _lv_memcpy(void * dst, const void * src, size_t len);",120,1," * @param len number of byte to copy
 */
LV_ATTRIBUTE_FAST_MEM void * _lv_memcpy(void * dst, const void * src, size_t len);

/**
"
125,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_btnmatrix.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_btnmatrix.c,"_lv_memcpy(ext->ctrl_bits, ctrl_map, sizeof(lv_btnmatrix_ctrl_t) * ext->btn_cnt);",120,1,"
    lv_btnmatrix_ext_t * ext = lv_obj_get_ext_attr(btnm);
    _lv_memcpy(ext->ctrl_bits, ctrl_map, sizeof(lv_btnmatrix_ctrl_t) * ext->btn_cnt);

    lv_btnmatrix_set_map(btnm, ext->map_p);
"
127,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_canvas.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_canvas.c,"_lv_memcpy((void *)&ext->dsc.data[px], to_copy8, w * px_size);",120,1,"    lv_coord_t i;
    for(i = 0; i < h; i++) {
        _lv_memcpy((void *)&ext->dsc.data[px], to_copy8, w * px_size);
        px += ext->dsc.header.w * px_size;
        to_copy8 += w * px_size;
"
128,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_canvas.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_canvas.c,"_lv_memcpy(line_buf, &ext->dsc.data[y * line_w], line_w);",120,1,"        lv_color_t c;
        lv_opa_t opa = LV_OPA_TRANSP;
        _lv_memcpy(line_buf, &ext->dsc.data[y * line_w], line_w);


"
131,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_chart.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_chart.c,"_lv_memcpy(&ext->x_axis, &ext_copy->x_axis, sizeof(lv_chart_axis_cfg_t));",120,1,"        _lv_memcpy_small(ext->ymin, ext_copy->ymin, sizeof(ext->ymin));
        _lv_memcpy_small(ext->ymax, ext_copy->ymax, sizeof(ext->ymax));
        _lv_memcpy(&ext->x_axis, &ext_copy->x_axis, sizeof(lv_chart_axis_cfg_t));
        _lv_memcpy(&ext->y_axis, &ext_copy->y_axis, sizeof(lv_chart_axis_cfg_t));
        _lv_memcpy(&ext->secondary_y_axis, &ext_copy->secondary_y_axis, sizeof(lv_chart_axis_cfg_t));
"
132,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_chart.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_chart.c,"_lv_memcpy(&ext->y_axis, &ext_copy->y_axis, sizeof(lv_chart_axis_cfg_t));",120,1,"        _lv_memcpy_small(ext->ymax, ext_copy->ymax, sizeof(ext->ymax));
        _lv_memcpy(&ext->x_axis, &ext_copy->x_axis, sizeof(lv_chart_axis_cfg_t));
        _lv_memcpy(&ext->y_axis, &ext_copy->y_axis, sizeof(lv_chart_axis_cfg_t));
        _lv_memcpy(&ext->secondary_y_axis, &ext_copy->secondary_y_axis, sizeof(lv_chart_axis_cfg_t));

"
133,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_chart.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_chart.c,"_lv_memcpy(&ext->secondary_y_axis, &ext_copy->secondary_y_axis, sizeof(lv_chart_axis_cfg_t));",120,1,"        _lv_memcpy(&ext->x_axis, &ext_copy->x_axis, sizeof(lv_chart_axis_cfg_t));
        _lv_memcpy(&ext->y_axis, &ext_copy->y_axis, sizeof(lv_chart_axis_cfg_t));
        _lv_memcpy(&ext->secondary_y_axis, &ext_copy->secondary_y_axis, sizeof(lv_chart_axis_cfg_t));

        /*Refresh the style with new signal function*/
"
134,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_chart.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_chart.c,"memcpy(ser->points, y_array, ext->point_cnt * (sizeof(lv_coord_t)));",120,1,"
    lv_chart_ext_t * ext = lv_obj_get_ext_attr(chart);
    memcpy(ser->points, y_array, ext->point_cnt * (sizeof(lv_coord_t)));
    ser->start_point = 0;
    lv_chart_refresh(chart);
"
140,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_imgbtn.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_imgbtn.c,"_lv_memcpy((void *)ext->img_src_mid, copy_ext->img_src_mid, sizeof(ext->img_src_mid));",120,1,"    else {
        lv_imgbtn_ext_t * copy_ext = lv_obj_get_ext_attr(copy);
        _lv_memcpy((void *)ext->img_src_mid, copy_ext->img_src_mid, sizeof(ext->img_src_mid));
#if LV_IMGBTN_TILED
        _lv_memcpy((void *)ext->img_src_left, copy_ext->img_src_left, sizeof(ext->img_src_left));
"
141,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_imgbtn.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_imgbtn.c,"_lv_memcpy((void *)ext->img_src_left, copy_ext->img_src_left, sizeof(ext->img_src_left));",120,1,"        _lv_memcpy((void *)ext->img_src_mid, copy_ext->img_src_mid, sizeof(ext->img_src_mid));
#if LV_IMGBTN_TILED
        _lv_memcpy((void *)ext->img_src_left, copy_ext->img_src_left, sizeof(ext->img_src_left));
        _lv_memcpy((void *)ext->img_src_right, copy_ext->img_src_right, sizeof(ext->img_src_right));
#endif
"
142,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_imgbtn.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_imgbtn.c,"_lv_memcpy((void *)ext->img_src_right, copy_ext->img_src_right, sizeof(ext->img_src_right));",120,1,"#if LV_IMGBTN_TILED
        _lv_memcpy((void *)ext->img_src_left, copy_ext->img_src_left, sizeof(ext->img_src_left));
        _lv_memcpy((void *)ext->img_src_right, copy_ext->img_src_right, sizeof(ext->img_src_right));
#endif
        ext->tiled = copy_ext->tiled;
"
143,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_label.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_label.c,"_lv_memcpy(ext->text, copy_ext->text, _lv_mem_get_size(copy_ext->text));",120,1,"            LV_ASSERT_MEM(ext->text);
            if(ext->text == NULL) return NULL;
            _lv_memcpy(ext->text, copy_ext->text, _lv_mem_get_size(copy_ext->text));
        }

"
144,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_label.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_label.c,"_lv_memcpy(ext->dot.tmp, copy_ext->dot.tmp, sizeof(ext->dot.tmp));",120,1,"        }
        else {
            _lv_memcpy(ext->dot.tmp, copy_ext->dot.tmp, sizeof(ext->dot.tmp));
        }
        ext->dot_tmp_alloc = copy_ext->dot_tmp_alloc;
"
146,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_label.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_label.c,"_lv_memcpy(ext->dot.tmp_ptr, data, len);",120,1,"            return false;
        }
        _lv_memcpy(ext->dot.tmp_ptr, data, len);
        ext->dot.tmp_ptr[len] = '\0';
        ext->dot_tmp_alloc    = true;
"
147,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_label.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_label.c,"_lv_memcpy(ext->dot.tmp, data, len);",120,1,"        /* Characters can be directly stored in object */
        ext->dot_tmp_alloc = false;
        _lv_memcpy(ext->dot.tmp, data, len);
    }
    return true;
"
148,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_objmask.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_objmask.c,"_lv_memcpy(m->param, param, param_size);",120,1,"    if(m->param == NULL) return NULL;

    _lv_memcpy(m->param, param, param_size);

    lv_obj_invalidate(objmask);
"
149,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_objmask.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_objmask.c,"memcpy(mask->param, param, get_param_size(dsc->type));",120,1,"    lv_draw_mask_common_dsc_t * dsc = param;

    memcpy(mask->param, param, get_param_size(dsc->type));

    lv_obj_invalidate(objmask);
"
154,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_textarea.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_textarea.c,"_lv_memcpy(ext->pwd_tmp, copy_ext->pwd_tmp, len);",120,1,"            if(ext->pwd_tmp == NULL) return NULL;

            _lv_memcpy(ext->pwd_tmp, copy_ext->pwd_tmp, len);
        }

"
158,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_textarea.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_textarea.c,"_lv_memcpy(letter_buf, &txt[ext->cursor.txt_byte_pos], _lv_txt_encoded_size(&txt[ext->cursor.txt_byte_pos]));",120,1,"
        char letter_buf[8] = {0};
        _lv_memcpy(letter_buf, &txt[ext->cursor.txt_byte_pos], _lv_txt_encoded_size(&txt[ext->cursor.txt_byte_pos]));

        if(cur_dsc.bg_opa == LV_OPA_COVER) {
"
159,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_textarea.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_textarea.c,"_lv_memcpy(&txt_tmp[i * bullet_len], bullet, bullet_len);",120,1,"        int32_t i;
        for(i = 0; i < enc_len; i++) {
            _lv_memcpy(&txt_tmp[i * bullet_len], bullet, bullet_len);
        }

"
164,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\tests\lv_test_assert.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\tests\lv_test_assert.c,"memcpy(&ref_px, ptr_ref, 3);",120,1,"        uint32_t ref_px = 0;
        uint32_t act_px = 0;
        memcpy(&ref_px, ptr_ref, 3);
        memcpy(&act_px, ptr_act, 3);
        lv_test_error(""   FAIL: %s. (Expected:  %s, diff. at (%d;%d), %08x instead of %08x)"", s, fn_ref, x, y, act_px, ref_px);
"
165,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\tests\lv_test_assert.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\tests\lv_test_assert.c,"memcpy(&act_px, ptr_act, 3);",120,1,"        uint32_t act_px = 0;
        memcpy(&ref_px, ptr_ref, 3);
        memcpy(&act_px, ptr_act, 3);
        lv_test_error(""   FAIL: %s. (Expected:  %s, diff. at (%d;%d), %08x instead of %08x)"", s, fn_ref, x, y, act_px, ref_px);
    } else {
"
168,2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\tests\lv_test_main.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\tests\lv_test_main.c,"memcpy(test_fb, color_p, lv_area_get_size(area) * sizeof(lv_color_t));",120,1,"    LV_UNUSED(color_p);

    memcpy(test_fb, color_p, lv_area_get_size(area) * sizeof(lv_color_t));

    lv_disp_flush_ready(disp_drv);
"
179,2021\aws-edukit-example\components\esp-aws-iot\aws-iot-device-sdk-embedded-C\src\aws_iot_mqtt_client_common_internal.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-aws-iot\aws-iot-device-sdk-embedded-C\src\aws_iot_mqtt_client_common_internal.c,"memcpy(*pptr, string, stringLen);",120,1,"	aws_iot_mqtt_internal_write_uint_16(pptr, stringLen);
	if(stringLen > 0) {
		memcpy(*pptr, string, stringLen);
		*pptr += stringLen;
	}
"
180,2021\aws-edukit-example\components\esp-aws-iot\aws-iot-device-sdk-embedded-C\src\aws_iot_mqtt_client_publish.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-aws-iot\aws-iot-device-sdk-embedded-C\src\aws_iot_mqtt_client_publish.c,"memcpy(ptr, pPayload, payloadLen);",120,1,"	}

	memcpy(ptr, pPayload, payloadLen);
	ptr += payloadLen;

"
181,2021\aws-edukit-example\components\esp-aws-iot\aws-iot-device-sdk-embedded-C\src\aws_iot_shadow_records.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-aws-iot\aws-iot-device-sdk-embedded-C\src\aws_iot_shadow_records.c,"memcpy(shadowRxBuf, params->payload, params->payloadLen);",120,1,"	}

	memcpy(shadowRxBuf, params->payload, params->payloadLen);
	shadowRxBuf[params->payloadLen] = '\0';    // jsmn_parse relies on a string

"
182,2021\aws-edukit-example\components\esp-aws-iot\aws-iot-device-sdk-embedded-C\src\aws_iot_shadow_records.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-aws-iot\aws-iot-device-sdk-embedded-C\src\aws_iot_shadow_records.c,"memcpy(AckWaitList[indexAckWaitList].clientTokenID, pExtractedClientToken, MAX_SIZE_CLIENT_ID_WITH_SEQUENCE);",120,1,"					  uint32_t timeout_seconds) {
	AckWaitList[indexAckWaitList].callback = callback;
	memcpy(AckWaitList[indexAckWaitList].clientTokenID, pExtractedClientToken, MAX_SIZE_CLIENT_ID_WITH_SEQUENCE);
	memcpy(AckWaitList[indexAckWaitList].thingName, pThingName, MAX_SIZE_OF_THING_NAME);
	AckWaitList[indexAckWaitList].pCallbackContext = pCallbackContext;
"
183,2021\aws-edukit-example\components\esp-aws-iot\aws-iot-device-sdk-embedded-C\src\aws_iot_shadow_records.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-aws-iot\aws-iot-device-sdk-embedded-C\src\aws_iot_shadow_records.c,"memcpy(AckWaitList[indexAckWaitList].thingName, pThingName, MAX_SIZE_OF_THING_NAME);",120,1,"	AckWaitList[indexAckWaitList].callback = callback;
	memcpy(AckWaitList[indexAckWaitList].clientTokenID, pExtractedClientToken, MAX_SIZE_CLIENT_ID_WITH_SEQUENCE);
	memcpy(AckWaitList[indexAckWaitList].thingName, pThingName, MAX_SIZE_OF_THING_NAME);
	AckWaitList[indexAckWaitList].pCallbackContext = pCallbackContext;
	AckWaitList[indexAckWaitList].action = action;
"
193,2021\aws-edukit-example\components\esp-aws-iot\aws-iot-device-sdk-embedded-C\tests\unit\tls_mock\aws_iot_tests_unit_mock_tls.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-aws-iot\aws-iot-device-sdk-embedded-C\tests\unit\tls_mock\aws_iot_tests_unit_mock_tls.c,"memcpy(LastPublishMessagePayload, TxBuffer.pBuffer + payloadStart, lastPublishMessagePayloadLen);",120,1,"
		lastPublishMessagePayloadLen = mqttPacketLength - payloadStart + 2; /* + 2 as the first two bytes don't count towards the length */
		memcpy(LastPublishMessagePayload, TxBuffer.pBuffer + payloadStart, lastPublishMessagePayloadLen);
		LastPublishMessagePayload[lastPublishMessagePayloadLen] = 0;
	}
"
194,2021\aws-edukit-example\components\esp-aws-iot\aws-iot-device-sdk-embedded-C\tests\unit\tls_mock\aws_iot_tests_unit_mock_tls.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-aws-iot\aws-iot-device-sdk-embedded-C\tests\unit\tls_mock\aws_iot_tests_unit_mock_tls.c,"memcpy(pMsg, &(RxBuffer.pBuffer[RxIndex]), len);",120,1,"
	if((false == RxBuffer.NoMsgFlag) && (RxIndex < RxBuffer.len)) {
		memcpy(pMsg, &(RxBuffer.pBuffer[RxIndex]), len);
		RxIndex += len;
		*read_len = len;
"
198,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\app\ip_protection\symmetric_authentication.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\app\ip_protection\symmetric_authentication.c,"memcpy(temp_key_derive.value, sn, sizeof(sn));",120,1,"        memset(&temp_key_derive, 0, sizeof(temp_key_derive));
        temp_key_derive.valid = 1;
        memcpy(temp_key_derive.value, sn, sizeof(sn)); // 32 bytes TempKey ( SN[0:8] with padded 23 zeros used in symmetric key calculation)

        // Parameters used deriving the symmetric key
"
201,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\app\tng\tng_atcacert_client.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\app\tng\tng_atcacert_client.c,"memcpy(public_key, raw_public_key, 64);",120,1,"    else
    {
        memcpy(public_key, raw_public_key, 64);
    }

"
203,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\app\tng\tng_atcacert_client.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\app\tng\tng_atcacert_client.c,"memcpy(cert, g_cryptoauth_root_ca_002_cert, g_cryptoauth_root_ca_002_cert_size);",120,1,"    }

    memcpy(cert, g_cryptoauth_root_ca_002_cert, g_cryptoauth_root_ca_002_cert_size);
    *cert_size = g_cryptoauth_root_ca_002_cert_size;

"
204,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\app\tng\tng_atcacert_client.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\app\tng\tng_atcacert_client.c,"memcpy(public_key, &g_cryptoauth_root_ca_002_cert[CRYPTOAUTH_ROOT_CA_002_PUBLIC_KEY_OFFSET], 64);",120,1,"    }

    memcpy(public_key, &g_cryptoauth_root_ca_002_cert[CRYPTOAUTH_ROOT_CA_002_PUBLIC_KEY_OFFSET], 64);

    return ATCACERT_E_SUCCESS;
"
206,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_client.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_client.c,"memcpy(data, &public_key[device_loc->offset], device_loc->count);",120,1,"            return ret;
        }
        memcpy(data, &public_key[device_loc->offset], device_loc->count);
    }
    else
"
208,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_client.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_client.c,"memcpy(csr, csr_def->cert_template, csr_def->cert_template_size);",120,1,"        }
        // Copy the CSR template into the CSR that will be returned
        memcpy(csr, csr_def->cert_template, csr_def->cert_template_size);
        csr_max_size = *csr_size;
        *csr_size = csr_def->cert_template_size;
"
216,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_def.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_def.c,"memcpy(build_state->cert, build_state->cert_def->cert_template, build_state->cert_def->cert_template_size);",120,1,"    // Initialize the cert buffer with the cert template
    *build_state->cert_size = build_state->cert_def->cert_template_size;
    memcpy(build_state->cert, build_state->cert_def->cert_template, build_state->cert_def->cert_template_size);

    if (build_state->cert_def->type == CERTTYPE_X509)
"
218,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_def.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_def.c,"memcpy(&build_state->device_sn[0], &data[0], 4);",120,1,"        // Get the device SN
        build_state->is_device_sn = TRUE;
        memcpy(&build_state->device_sn[0], &data[0], 4);
        memcpy(&build_state->device_sn[4], &data[8], 5);
    }
"
219,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_def.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_def.c,"memcpy(&build_state->device_sn[4], &data[8], 5);",120,1,"        build_state->is_device_sn = TRUE;
        memcpy(&build_state->device_sn[0], &data[0], 4);
        memcpy(&build_state->device_sn[4], &data[8], 5);
    }

"
220,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_def.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_def.c,"memcpy(&data_dest[offset - device_loc_dest->offset], &data_src[offset - device_loc_src->offset], end - offset);",120,1,"    size_t end    = ATCACERT_MIN(device_loc_src->offset + device_loc_src->count, device_loc_dest->offset + device_loc_dest->count);

    memcpy(&data_dest[offset - device_loc_dest->offset], &data_src[offset - device_loc_src->offset], end - offset);
}

"
221,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_def.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_def.c,"memcpy(&sn[1], device_sn, 9);",120,1,"        sn_size = 1 + 9;
        sn[0] = 0x40;
        memcpy(&sn[1], device_sn, 9);
        break;

"
222,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_def.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_def.c,"memcpy(&msg[0], device_sn, 9);",120,1,"
        // Add device SN to the hash input
        memcpy(&msg[0], device_sn, 9);

        // Add compressed/encoded dates to hash input
"
223,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_def.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_def.c,"memcpy(enc_dates, &comp_cert[64], 3);",120,1,"
    }
    memcpy(enc_dates, &comp_cert[64], 3);
    memcpy(signer_id, &comp_cert[67], 2);
    template_id = (comp_cert[69] >> 4) & 0x0F;
"
224,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_def.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_def.c,"memcpy(signer_id, &comp_cert[67], 2);",120,1,"    }
    memcpy(enc_dates, &comp_cert[64], 3);
    memcpy(signer_id, &comp_cert[67], 2);
    template_id = (comp_cert[69] >> 4) & 0x0F;
    chain_id = comp_cert[69] & 0x0F;
"
226,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_def.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_def.c,"memcpy(&cert[cert_loc->offset + eff_offset], data, data_size);",120,1,"    }

    memcpy(&cert[cert_loc->offset + eff_offset], data, data_size);

    return ATCACERT_E_SUCCESS;
"
227,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_def.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_def.c,"memcpy(data, &cert[cert_loc->offset + eff_offset], data_size);",120,1,"    }

    memcpy(data, &cert[cert_loc->offset + eff_offset], data_size);

    return ATCACERT_E_SUCCESS;
"
228,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_def.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_def.c,"memcpy(&msg[1], public_key, 64);",120,1,"
    msg[0] = 0x04;
    memcpy(&msg[1], public_key, 64);

    return atcac_sw_sha1(msg, sizeof(msg), key_id);
"
235,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_def.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_def.c,"memcpy(destination, data, data_size);",120,1,"        if (*destination_size >= data_size)
        {
            memcpy(destination, data, data_size);
            *destination_size = data_size;
        }
"
236,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_der.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_der.c,"memcpy(der_length, new_der_length, new_der_len_size);",120,1,"    }

    memcpy(der_length, new_der_length, new_der_len_size);

    return 0;
"
237,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_der.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_der.c,"memcpy(&der_int[1], der_length, der_length_size);",120,1,"    }
    der_int[0] = 0x02;                                                                  // Integer tag
    memcpy(&der_int[1], der_length, der_length_size);                                   // Integer length
    if (pad)
    {
"
238,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_der.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_der.c,"memcpy(&der_int[der_length_size + 1 + pad], &int_data[trim], int_data_size - trim);",120,1,"        der_int[der_length_size + 1] = 0;                                               // Unsigned integer value requires padding byte so it's not interpreted as negative
    }
    memcpy(&der_int[der_length_size + 1 + pad], &int_data[trim], int_data_size - trim); // Integer value

    return ATCACERT_E_SUCCESS;
"
239,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_der.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_der.c,"memcpy(int_data, &der_int[1 + der_length_size], int_data_size_calc);",120,1,"
    }
    memcpy(int_data, &der_int[1 + der_length_size], int_data_size_calc);

    return ATCACERT_E_SUCCESS;
"
241,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_der.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_der.c,"memcpy(&raw_sig[32 - int_data_size], &int_data[0], int_data_size);",120,1,"        if (raw_sig != NULL)
        {
            memcpy(&raw_sig[32 - int_data_size], &int_data[0], int_data_size);
        }
    }
"
242,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_der.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_der.c,"memcpy(&raw_sig[0], &int_data[1], 32);",120,1,"        if (raw_sig != NULL)
        {
            memcpy(&raw_sig[0], &int_data[1], 32);
        }
    }
"
243,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_der.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_der.c,"memcpy(&raw_sig[64 - int_data_size], &int_data[0], int_data_size);",120,1,"        if (raw_sig != NULL)
        {
            memcpy(&raw_sig[64 - int_data_size], &int_data[0], int_data_size);
        }
    }
"
244,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_der.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_der.c,"memcpy(&raw_sig[32], &int_data[1], 32);",120,1,"        if (raw_sig != NULL)
        {
            memcpy(&raw_sig[32], &int_data[1], 32);
        }
    }
"
245,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_pem.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_pem.c,"memcpy(&pem[pem_index], header, header_size);",120,1,"        return ATCACERT_E_BUFFER_TOO_SMALL;
    }
    memcpy(&pem[pem_index], header, header_size);
    pem_index += header_size;
    memcpy(&pem[pem_index], ""\r\n"", 2);
"
246,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_pem.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_pem.c,"memcpy(&pem[pem_index], ""\r\n"", 2);",120,1,"    memcpy(&pem[pem_index], header, header_size);
    pem_index += header_size;
    memcpy(&pem[pem_index], ""\r\n"", 2);
    pem_index += 2;

"
248,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_pem.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\atcacert\atcacert_pem.c,"memcpy(&pem[pem_index], footer, footer_size);",120,1,"
    // Add footer
    memcpy(&pem[pem_index], footer, footer_size);
    pem_index += footer_size;
    memcpy(&pem[pem_index], ""\r\n"", 2);
"
256,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes.c,"memcpy(packet.data, aes_in, ATCA_AES_GFM_SIZE);",120,1,"        if (AES_MODE_GFM == (mode & AES_MODE_GFM))
        {
            memcpy(packet.data, aes_in, ATCA_AES_GFM_SIZE);
        }
        else
"
257,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes.c,"memcpy(packet.data, aes_in, AES_DATA_SIZE);",120,1,"        else
        {
            memcpy(packet.data, aes_in, AES_DATA_SIZE);
        }

"
258,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes.c,"memcpy(aes_out, &packet.data[ATCA_RSP_DATA_IDX], AES_DATA_SIZE);",120,1,"        {
            // The AES command return a 16 byte data.
            memcpy(aes_out, &packet.data[ATCA_RSP_DATA_IDX], AES_DATA_SIZE);
        }

"
259,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes.c,"memcpy(aes_in, h, AES_DATA_SIZE);",120,1,"    uint8_t aes_in[AES_DATA_SIZE * 2];

    memcpy(aes_in, h, AES_DATA_SIZE);
    memcpy(aes_in + AES_DATA_SIZE, input, AES_DATA_SIZE);
    // KeyID is ignored for GFM mode
"
260,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes.c,"memcpy(aes_in + AES_DATA_SIZE, input, AES_DATA_SIZE);",120,1,"
    memcpy(aes_in, h, AES_DATA_SIZE);
    memcpy(aes_in + AES_DATA_SIZE, input, AES_DATA_SIZE);
    // KeyID is ignored for GFM mode
    return atcab_aes(AES_MODE_GFM, 0x0000, aes_in, output);
"
262,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes_cbc.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes_cbc.c,"memcpy(ctx->ciphertext, iv, sizeof(ctx->ciphertext));",120,1,"    ctx->key_id = key_id;
    ctx->key_block = key_block;
    memcpy(ctx->ciphertext, iv, sizeof(ctx->ciphertext));

    return ATCA_SUCCESS;
"
263,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes_cbc.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes_cbc.c,"memcpy(ctx->ciphertext, ciphertext, AES_DATA_SIZE);",120,1,"
    // Save copy of ciphertext for next block operation
    memcpy(ctx->ciphertext, ciphertext, AES_DATA_SIZE);

    return status;
"
266,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes_cmac.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes_cmac.c,"memcpy(&ctx->block[ctx->block_size], data, copy_size);",120,1,"    }

    memcpy(&ctx->block[ctx->block_size], data, copy_size);

    if (ctx->block_size + data_size < AES_DATA_SIZE + 1)
"
267,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes_cmac.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes_cmac.c,"memcpy(ctx->block, &data[copy_size + block_count * AES_DATA_SIZE], ctx->block_size);",120,1,"    // Save any remaining data
    ctx->block_size = data_size;
    memcpy(ctx->block, &data[copy_size + block_count * AES_DATA_SIZE], ctx->block_size);

    return ATCA_SUCCESS;
"
268,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes_cmac.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes_cmac.c,"memcpy(cmac, cmac_full, cmac_size);",120,1,"    }

    memcpy(cmac, cmac_full, cmac_size);

    return ATCA_SUCCESS;
"
270,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes_ctr.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes_ctr.c,"memcpy(ctx->cb, iv, AES_DATA_SIZE);",120,1,"    ctx->key_block = key_block;
    ctx->counter_size = counter_size;
    memcpy(ctx->cb, iv, AES_DATA_SIZE);

    return ATCA_SUCCESS;
"
272,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes_ctr.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes_ctr.c,"memcpy(iv, random_nonce, nonce_size);",120,1,"            return status;
        }
        memcpy(iv, random_nonce, nonce_size);
    }
    memcpy(ctx->cb, iv, AES_DATA_SIZE);
"
275,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes_gcm.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes_gcm.c,"memcpy(pad_bytes, data, data_size);",120,1,"    if (data_size)
    {
        memcpy(pad_bytes, data, data_size);
        memset(&pad_bytes[data_size], 0, sizeof(pad_bytes) - data_size);

"
279,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes_gcm.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes_gcm.c,"memcpy(ctx->j0, iv, iv_size);",120,1,"    {
        //J0 = IV || 0^31 ||1.
        memcpy(ctx->j0, iv, iv_size);
        ctx->j0[AES_DATA_SIZE - 1] = 0x01;
    }
"
281,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes_gcm.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes_gcm.c,"memcpy(&ghash_data[12], &length, sizeof(length));",120,1,"        memset(ghash_data, 0, AES_DATA_SIZE);
        length = ATCA_UINT32_HOST_TO_BE((uint32_t)(iv_size * 8));
        memcpy(&ghash_data[12], &length, sizeof(length));
        if (ATCA_SUCCESS != (status = atcab_aes_ghash(ctx->h, ghash_data, sizeof(ghash_data), ctx->j0)))
        {
"
282,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes_gcm.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes_gcm.c,"memcpy(ctx->cb, ctx->j0, AES_DATA_SIZE);",120,1,"    ctx->key_id = key_id;
    ctx->key_block = key_block;
    memcpy(ctx->cb, ctx->j0, AES_DATA_SIZE);

    if (ATCA_SUCCESS != (status = atcab_aes_gcm_increment(ctx->cb, 4)))
"
283,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes_gcm.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes_gcm.c,"memcpy(iv, random, rand_size);",120,1,"        RETURN(status, ""GCM init rand - Random Generation failed"");
    }
    memcpy(iv, random, rand_size);
    memcpy(&iv[rand_size], free_field, free_field_size);

"
284,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes_gcm.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes_gcm.c,"memcpy(&iv[rand_size], free_field, free_field_size);",120,1,"    }
    memcpy(iv, random, rand_size);
    memcpy(&iv[rand_size], free_field, free_field_size);

    if (ATCA_SUCCESS != (status = atcab_aes_gcm_init(ctx, key_id, key_block, iv, rand_size + free_field_size)))
"
285,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes_gcm.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes_gcm.c,"memcpy(&ctx->partial_aad[ctx->partial_aad_size], aad, copy_size);",120,1,"
    // Copy data into current block
    memcpy(&ctx->partial_aad[ctx->partial_aad_size], aad, copy_size);

    if (ctx->partial_aad_size + aad_size < AES_DATA_SIZE)
"
286,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes_gcm.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes_gcm.c,"memcpy(ctx->partial_aad, &aad[copy_size + block_count * AES_DATA_SIZE], ctx->partial_aad_size);",120,1,"    ctx->aad_size += (block_count + 1) * AES_DATA_SIZE;
    ctx->partial_aad_size = aad_size % AES_DATA_SIZE;
    memcpy(ctx->partial_aad, &aad[copy_size + block_count * AES_DATA_SIZE], ctx->partial_aad_size);

    return ATCA_SUCCESS;
"
288,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes_gcm.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes_gcm.c,"memcpy(&temp_data[0], &length, sizeof(length));",120,1,"    memset(temp_data, 0, AES_DATA_SIZE);
    length = ATCA_UINT64_HOST_TO_BE(((uint64_t)ctx->aad_size) * 8);
    memcpy(&temp_data[0], &length, sizeof(length));
    length = ATCA_UINT64_HOST_TO_BE(((uint64_t)ctx->data_size) * 8);
    memcpy(&temp_data[8], &length, sizeof(length));
"
289,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes_gcm.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_aes_gcm.c,"memcpy(&temp_data[8], &length, sizeof(length));",120,1,"    memcpy(&temp_data[0], &length, sizeof(length));
    length = ATCA_UINT64_HOST_TO_BE(((uint64_t)ctx->data_size) * 8);
    memcpy(&temp_data[8], &length, sizeof(length));

    //S = GHASH(H, [len(A)]64 || [len(C)]64))
"
290,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_checkmac.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_checkmac.c,"memcpy(&packet.data[0], challenge, CHECKMAC_CLIENT_CHALLENGE_SIZE);",120,1,"        if (challenge != NULL)
        {
            memcpy(&packet.data[0], challenge, CHECKMAC_CLIENT_CHALLENGE_SIZE);
        }
        else
"
292,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_checkmac.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_checkmac.c,"memcpy(&packet.data[32], response, CHECKMAC_CLIENT_RESPONSE_SIZE);",120,1,"            memset(&packet.data[0], 0, CHECKMAC_CLIENT_CHALLENGE_SIZE);
        }
        memcpy(&packet.data[32], response, CHECKMAC_CLIENT_RESPONSE_SIZE);
        memcpy(&packet.data[64], other_data, CHECKMAC_OTHER_DATA_SIZE);

"
293,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_checkmac.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_checkmac.c,"memcpy(&packet.data[64], other_data, CHECKMAC_OTHER_DATA_SIZE);",120,1,"        }
        memcpy(&packet.data[32], response, CHECKMAC_CLIENT_RESPONSE_SIZE);
        memcpy(&packet.data[64], other_data, CHECKMAC_OTHER_DATA_SIZE);

        if ((status = atCheckMAC(ca_cmd, &packet)) != ATCA_SUCCESS)
"
294,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_derivekey.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_derivekey.c,"memcpy(packet.data, mac, MAC_SIZE);",120,1,"        if (mac != NULL)
        {
            memcpy(packet.data, mac, MAC_SIZE);
        }

"
295,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_ecdh.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_ecdh.c,"memcpy(packet.data, public_key, ATCA_PUB_KEY_SIZE);",120,1,"        packet.param1 = mode;
        packet.param2 = key_id;
        memcpy(packet.data, public_key, ATCA_PUB_KEY_SIZE);

        if ((status = atECDH(_gDevice->mCommands, &packet)) != ATCA_SUCCESS)
"
296,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_ecdh.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_ecdh.c,"memcpy(pms, &packet.data[ATCA_RSP_DATA_IDX], ATCA_KEY_SIZE);",120,1,"        if (pms != NULL && packet.data[ATCA_COUNT_IDX] >= (3 + ATCA_KEY_SIZE))
        {
            memcpy(pms, &packet.data[ATCA_RSP_DATA_IDX], ATCA_KEY_SIZE);
        }

"
297,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_ecdh.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_ecdh.c,"memcpy(out_nonce, &packet.data[ATCA_RSP_DATA_IDX + ATCA_KEY_SIZE], ATCA_KEY_SIZE);",120,1,"        if (out_nonce != NULL && packet.data[ATCA_COUNT_IDX] >= (3 + ATCA_KEY_SIZE * 2))
        {
            memcpy(out_nonce, &packet.data[ATCA_RSP_DATA_IDX + ATCA_KEY_SIZE], ATCA_KEY_SIZE);
        }

"
300,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_gendig.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_gendig.c,"memcpy(&packet.data[0], &other_data[0], ATCA_BLOCK_SIZE);",120,1,"        if (packet.param1 == GENDIG_ZONE_SHARED_NONCE && other_data_size >= ATCA_BLOCK_SIZE)
        {
            memcpy(&packet.data[0], &other_data[0], ATCA_BLOCK_SIZE);
        }
        else if (packet.param1 == GENDIG_ZONE_DATA && other_data_size >= ATCA_WORD_SIZE)
"
301,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_gendig.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_gendig.c,"memcpy(&packet.data[0], &other_data[0], ATCA_WORD_SIZE);",120,1,"        else if (packet.param1 == GENDIG_ZONE_DATA && other_data_size >= ATCA_WORD_SIZE)
        {
            memcpy(&packet.data[0], &other_data[0], ATCA_WORD_SIZE);
            is_no_mac_key = true;
        }
"
302,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_genkey.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_genkey.c,"memcpy(packet.data, other_data, GENKEY_OTHER_DATA_SIZE);",120,1,"        if (other_data)
        {
            memcpy(packet.data, other_data, GENKEY_OTHER_DATA_SIZE);
        }

"
303,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_genkey.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_genkey.c,"memcpy(public_key, &packet.data[ATCA_RSP_DATA_IDX], ATCA_PUB_KEY_SIZE);",120,1,"            if (packet.data[ATCA_COUNT_IDX] == (ATCA_PUB_KEY_SIZE + ATCA_PACKET_OVERHEAD))
            {
                memcpy(public_key, &packet.data[ATCA_RSP_DATA_IDX], ATCA_PUB_KEY_SIZE);
            }
            else
"
304,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_hmac.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_hmac.c,"memcpy(digest, &packet.data[ATCA_RSP_DATA_IDX], HMAC_DIGEST_SIZE);",120,1,"        }

        memcpy(digest, &packet.data[ATCA_RSP_DATA_IDX], HMAC_DIGEST_SIZE);

    }
"
305,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_info.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_info.c,"memcpy(out_data, &packet.data[ATCA_RSP_DATA_IDX], 4);",120,1,"        if (out_data != NULL && packet.data[ATCA_COUNT_IDX] >= 7)
        {
            memcpy(out_data, &packet.data[ATCA_RSP_DATA_IDX], 4);
        }
    }
"
306,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_kdf.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_kdf.c,"memcpy(&packet.data[KDF_DETAILS_SIZE], message, AES_DATA_SIZE);",120,1,"        {
            // AES algorithm has a fixed message size
            memcpy(&packet.data[KDF_DETAILS_SIZE], message, AES_DATA_SIZE);
        }
        else
"
307,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_kdf.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_kdf.c,"memcpy(&packet.data[KDF_DETAILS_SIZE], message, packet.data[3]);",120,1,"        {
            // All other algorithms encode message size in the last byte of details
            memcpy(&packet.data[KDF_DETAILS_SIZE], message, packet.data[3]);
        }

"
308,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_kdf.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_kdf.c,"memcpy(out_data, &packet.data[ATCA_RSP_DATA_IDX], out_data_size);",120,1,"        if (out_data != NULL && packet.data[ATCA_COUNT_IDX] >= (ATCA_PACKET_OVERHEAD + out_data_size))
        {
            memcpy(out_data, &packet.data[ATCA_RSP_DATA_IDX], out_data_size);
        }

"
309,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_kdf.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_kdf.c,"memcpy(out_nonce, &packet.data[ATCA_RSP_DATA_IDX + out_data_size], 32);",120,1,"        if (out_nonce != NULL && packet.data[ATCA_COUNT_IDX] >= (ATCA_PACKET_OVERHEAD + out_data_size + 32))
        {
            memcpy(out_nonce, &packet.data[ATCA_RSP_DATA_IDX + out_data_size], 32);
        }
    }
"
311,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_mac.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_mac.c,"memcpy(&packet.data[0], challenge, 32);",120,1,"                return ATCA_BAD_PARAM;
            }
            memcpy(&packet.data[0], challenge, 32);  // a 32-byte challenge
        }

"
312,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_mac.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_mac.c,"memcpy(digest, &packet.data[ATCA_RSP_DATA_IDX], MAC_SIZE);",120,1,"        }

        memcpy(digest, &packet.data[ATCA_RSP_DATA_IDX], MAC_SIZE);

    }
"
313,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_nonce.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_nonce.c,"memcpy(packet.data, num_in, NONCE_NUMIN_SIZE);",120,1,"        if ((nonce_mode == NONCE_MODE_SEED_UPDATE || nonce_mode == NONCE_MODE_NO_SEED_UPDATE))
        {
            memcpy(packet.data, num_in, NONCE_NUMIN_SIZE);
        }
        else if (nonce_mode == NONCE_MODE_PASSTHROUGH)
"
314,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_nonce.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_nonce.c,"memcpy(packet.data, num_in, 64);",120,1,"            if ((mode & NONCE_MODE_INPUT_LEN_MASK) == NONCE_MODE_INPUT_LEN_64)
            {
                memcpy(packet.data, num_in, 64);
            }
            else
"
315,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_nonce.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_nonce.c,"memcpy(packet.data, num_in, 32);",120,1,"            else
            {
                memcpy(packet.data, num_in, 32);
            }
        }
"
316,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_nonce.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_nonce.c,"memcpy(&rand_out[0], &packet.data[ATCA_RSP_DATA_IDX], 32);",120,1,"        if ((rand_out != NULL) && (packet.data[ATCA_COUNT_IDX] >= 35))
        {
            memcpy(&rand_out[0], &packet.data[ATCA_RSP_DATA_IDX], 32);
        }

"
317,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_privwrite.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_privwrite.c,"memcpy(&packet.data[0], priv_key, 36);",120,1,"            packet.param1 = 0x00;                           // Mode is unencrypted write
            packet.param2 = key_id;                         // Key ID
            memcpy(&packet.data[0], priv_key, 36);          // Private key
            memset(&packet.data[36], 0, 32);                // MAC (ignored for unencrypted write)
        }
"
324,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_privwrite.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_privwrite.c,"memcpy(&packet.data[0], cipher_text, sizeof(cipher_text));",120,1,"            packet.param1 = PRIVWRITE_MODE_ENCRYPT;            // Mode is encrypted write
            packet.param2 = key_id;                            // Key ID
            memcpy(&packet.data[0], cipher_text, sizeof(cipher_text));
            memcpy(&packet.data[sizeof(cipher_text)], host_mac, sizeof(host_mac));
        }
"
325,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_privwrite.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_privwrite.c,"memcpy(&packet.data[sizeof(cipher_text)], host_mac, sizeof(host_mac));",120,1,"            packet.param2 = key_id;                            // Key ID
            memcpy(&packet.data[0], cipher_text, sizeof(cipher_text));
            memcpy(&packet.data[sizeof(cipher_text)], host_mac, sizeof(host_mac));
        }

"
326,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_random.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_random.c,"memcpy(rand_out, &packet.data[ATCA_RSP_DATA_IDX], RANDOM_NUM_SIZE);",120,1,"        if (rand_out)
        {
            memcpy(rand_out, &packet.data[ATCA_RSP_DATA_IDX], RANDOM_NUM_SIZE);
        }
    }
"
327,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_read.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_read.c,"memcpy(data, &packet.data[1], len);",120,1,"        }

        memcpy(data, &packet.data[1], len);
    }
    while (0);
"
328,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_read.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_read.c,"memcpy(&serial_number[0], &read_buf[0], 4);",120,1,"            break;
        }
        memcpy(&serial_number[0], &read_buf[0], 4);
        memcpy(&serial_number[4], &read_buf[8], 5);
    }
"
329,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_read.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_read.c,"memcpy(&serial_number[4], &read_buf[8], 5);",120,1,"        }
        memcpy(&serial_number[0], &read_buf[0], 4);
        memcpy(&serial_number[4], &read_buf[8], 5);
    }
    while (0);
"
334,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_read.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_read.c,"memcpy(&public_key[cpy_index], &read_buf[read_index], cpy_size);",120,1,"        cpy_size = ATCA_BLOCK_SIZE - ATCA_PUB_KEY_PAD;
        read_index = ATCA_PUB_KEY_PAD;
        memcpy(&public_key[cpy_index], &read_buf[read_index], cpy_size);
        cpy_index += cpy_size;

"
338,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_read.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_read.c,"memcpy(&data[data_idx], &read_buf[read_buf_idx], copy_length);",120,1,"            }

            memcpy(&data[data_idx], &read_buf[read_buf_idx], copy_length);
            data_idx += copy_length;
            if (read_size == ATCA_BLOCK_SIZE)
"
339,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_secureboot.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_secureboot.c,"memcpy(packet.data, digest, SECUREBOOT_DIGEST_SIZE);",120,1,"        packet.param2 = param2;

        memcpy(packet.data, digest, SECUREBOOT_DIGEST_SIZE);

        if (signature)
"
340,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_secureboot.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_secureboot.c,"memcpy(&packet.data[SECUREBOOT_DIGEST_SIZE], signature, SECUREBOOT_SIGNATURE_SIZE);",120,1,"        if (signature)
        {
            memcpy(&packet.data[SECUREBOOT_DIGEST_SIZE], signature, SECUREBOOT_SIGNATURE_SIZE);
        }

"
341,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_secureboot.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_secureboot.c,"memcpy(mac, &packet.data[ATCA_RSP_DATA_IDX], SECUREBOOT_MAC_SIZE);",120,1,"        if ((mac != NULL) && (packet.data[ATCA_COUNT_IDX] >= SECUREBOOT_RSP_SIZE_MAC))
        {
            memcpy(mac, &packet.data[ATCA_RSP_DATA_IDX], SECUREBOOT_MAC_SIZE);
        }

"
346,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_sha.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_sha.c,"memcpy(packet.data, message, length);",120,1,"        if (cmd_mode != SHA_MODE_SHA256_PUBLIC && cmd_mode != SHA_MODE_HMAC_START)
        {
            memcpy(packet.data, message, length);
        }

"
347,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_sha.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_sha.c,"memcpy(data_out, &packet.data[ATCA_RSP_DATA_IDX], *data_out_size);",120,1,"            }
            *data_out_size = packet.data[ATCA_COUNT_IDX] - ATCA_PACKET_OVERHEAD;
            memcpy(data_out, &packet.data[ATCA_RSP_DATA_IDX], *data_out_size);
        }
    }
"
350,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_sha.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_sha.c,"memcpy(ctx->block, &data[copy_size + block_count * ATCA_SHA256_BLOCK_SIZE], ctx->block_size);",120,1,"    ctx->total_msg_size += (block_count + 1) * ATCA_SHA256_BLOCK_SIZE;
    ctx->block_size = data_size % ATCA_SHA256_BLOCK_SIZE;
    memcpy(ctx->block, &data[copy_size + block_count * ATCA_SHA256_BLOCK_SIZE], ctx->block_size);

    return ATCA_SUCCESS;
"
355,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_sign.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_sign.c,"memcpy(signature, &packet.data[ATCA_RSP_DATA_IDX], ATCA_SIG_SIZE);",120,1,"            if (packet.data[ATCA_COUNT_IDX] == (ATCA_SIG_SIZE + ATCA_PACKET_OVERHEAD))
            {
                memcpy(signature, &packet.data[ATCA_RSP_DATA_IDX], ATCA_SIG_SIZE);
            }
            else
"
357,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_verify.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_verify.c,"memcpy(&packet.data[0], signature, ATCA_SIG_SIZE);",120,1,"        packet.param1 = mode;
        packet.param2 = key_id;
        memcpy(&packet.data[0], signature, ATCA_SIG_SIZE);
        if (verify_mode == VERIFY_MODE_EXTERNAL)
        {
"
358,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_verify.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_verify.c,"memcpy(&packet.data[ATCA_SIG_SIZE], public_key, ATCA_PUB_KEY_SIZE);",120,1,"        if (verify_mode == VERIFY_MODE_EXTERNAL)
        {
            memcpy(&packet.data[ATCA_SIG_SIZE], public_key, ATCA_PUB_KEY_SIZE);
        }
        else if (other_data)
"
359,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_verify.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_verify.c,"memcpy(&packet.data[ATCA_SIG_SIZE], other_data, VERIFY_OTHER_DATA_SIZE);",120,1,"        else if (other_data)
        {
            memcpy(&packet.data[ATCA_SIG_SIZE], other_data, VERIFY_OTHER_DATA_SIZE);
        }

"
360,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_verify.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_verify.c,"memcpy(mac, &packet.data[ATCA_RSP_DATA_IDX], MAC_SIZE);",120,1,"        if ((mac != NULL) && (packet.data[ATCA_COUNT_IDX] >= (ATCA_PACKET_OVERHEAD + MAC_SIZE)))
        {
            memcpy(mac, &packet.data[ATCA_RSP_DATA_IDX], MAC_SIZE);
        }

"
361,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_verify.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_verify.c,"memcpy(&msg_dig_buf[0], message, 32);",120,1,"        // When using the message digest buffer as the message source, the
        // second 32 bytes in the buffer will be the MAC system nonce.
        memcpy(&msg_dig_buf[0], message, 32);
        memcpy(&msg_dig_buf[32], num_in, 32);
        if ((status = atcab_nonce_load(NONCE_MODE_TARGET_MSGDIGBUF, msg_dig_buf, 64)) != ATCA_SUCCESS)
"
362,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_verify.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_verify.c,"memcpy(&msg_dig_buf[32], num_in, 32);",120,1,"        // second 32 bytes in the buffer will be the MAC system nonce.
        memcpy(&msg_dig_buf[0], message, 32);
        memcpy(&msg_dig_buf[32], num_in, 32);
        if ((status = atcab_nonce_load(NONCE_MODE_TARGET_MSGDIGBUF, msg_dig_buf, 64)) != ATCA_SUCCESS)
        {
"
364,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_write.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_write.c,"memcpy(packet.data, value, 32);",120,1,"        {
            // 32-byte write
            memcpy(packet.data, value, 32);
            // Only 32-byte writes can have a MAC
            if (mac)
"
365,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_write.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_write.c,"memcpy(&packet.data[32], mac, 32);",120,1,"            if (mac)
            {
                memcpy(&packet.data[32], mac, 32);
            }
        }
"
366,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_write.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_write.c,"memcpy(packet.data, value, 4);",120,1,"        {
            // 4-byte write
            memcpy(packet.data, value, 4);
        }

"
372,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_write.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_write.c,"memcpy(&public_key_formatted[4], &public_key[0], 32);",120,1,"
    memset(public_key_formatted, 0, sizeof(public_key_formatted));
    memcpy(&public_key_formatted[4], &public_key[0], 32);   // Move X to padded position
    memcpy(&public_key_formatted[40], &public_key[32], 32); // Move Y to padded position

"
373,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_write.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_basic_write.c,"memcpy(&public_key_formatted[40], &public_key[32], 32);",120,1,"    memset(public_key_formatted, 0, sizeof(public_key_formatted));
    memcpy(&public_key_formatted[4], &public_key[0], 32);   // Move X to padded position
    memcpy(&public_key_formatted[40], &public_key[32], 32); // Move Y to padded position

    // Using this instead of atcab_write_zone_bytes, as that function doesn't work when
"
374,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_helpers.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\basic\atca_helpers.c,"memcpy(&hex[cur_hex_size], ""\r\n"", 2);",120,1,"                    return ATCA_SMALL_BUFFER;
                }
                memcpy(&hex[cur_hex_size], ""\r\n"", 2);
                cur_hex_size += 2;
            }
"
376,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\crypto\hashes\sha1_routines.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\crypto\hashes\sha1_routines.c,"memcpy(((U8*)ctx->buf) + 64 - freeBytes, src, i);",120,1,"        {
            // Have to use memcpy, size is other than 64 bytes.
            memcpy(((U8*)ctx->buf) + 64 - freeBytes, src, i);
        }

"
379,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\crypto\hashes\sha2_routines.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\crypto\hashes\sha2_routines.c,"memcpy(&ctx->block[ctx->block_size], msg, copy_size);",120,1,"
    // Copy data into current block
    memcpy(&ctx->block[ctx->block_size], msg, copy_size);

    if (ctx->block_size + msg_size < SHA256_BLOCK_SIZE)
"
380,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\crypto\hashes\sha2_routines.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\crypto\hashes\sha2_routines.c,"memcpy(ctx->block, &msg[copy_size + block_count * SHA256_BLOCK_SIZE], ctx->block_size);",120,1,"    ctx->total_msg_size += (block_count + 1) * SHA256_BLOCK_SIZE;
    ctx->block_size = msg_size % SHA256_BLOCK_SIZE;
    memcpy(ctx->block, &msg[copy_size + block_count * SHA256_BLOCK_SIZE], ctx->block_size);
}

"
384,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\hal\hal_all_platforms_kit_hidapi.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\hal\hal_all_platforms_kit_hidapi.c,"memcpy(&buffer[1], &txdata[(txlength - bytes_left)], bytes_to_send);",120,1,"        }

        memcpy(&buffer[1], &txdata[(txlength - bytes_left)], bytes_to_send);

        bytes_written = hid_write(pHid->kits[cfg->atcahid.idx], buffer, cfg->atcahid.packetsize + 1);
"
386,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\hal\hal_at90usb1287_i2c_asf.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\hal\hal_at90usb1287_i2c_asf.c,"memcpy( (uint8_t*)head, (uint8_t*)&discoverCfg, sizeof(ATCAIfaceCfg));",120,1,"            // now the device type is known, so update the caller's cfg array element with it
            (*found)++;
            memcpy( (uint8_t*)head, (uint8_t*)&discoverCfg, sizeof(ATCAIfaceCfg));
            head->devtype = discoverCfg.devtype;
            head++;
"
391,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\hal\hal_i2c_start.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\hal\hal_i2c_start.c,"memcpy(&(data->i2c_master_instance), &I2C_0, sizeof(struct i2c_m_sync_desc));",120,1,"        {
        case 2:
            memcpy(&(data->i2c_master_instance), &I2C_0, sizeof(struct i2c_m_sync_desc));
            data->sercom_core_freq = I2C_SERCOM_CORE_FREQ;
            break;
"
393,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\hal\hal_linux_kit_cdc.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\hal\hal_linux_kit_cdc.c,"memcpy(&rxdata[total_bytes], &buffer[0], bytes_to_cpy);",120,1,"
            // Copy the received data
            memcpy(&rxdata[total_bytes], &buffer[0], bytes_to_cpy);
            total_bytes += bytes_to_cpy;
        }
"
400,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\hal\hal_pic32mx695f512h_i2c.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\hal\hal_pic32mx695f512h_i2c.c,"memcpy(&i2cBuffer[1], data, len);",120,1,"
    i2cBuffer[0] = address | 0x00;
    memcpy(&i2cBuffer[1], data, len);

    if (!StartTransfer(i2c_id, FALSE))
"
417,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\hal\hal_win_kit_cdc.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\hal\hal_win_kit_cdc.c,"memcpy(&buffer[0], &txdata[(txlength - bytes_left)], bytes_to_send);",120,1,"        }

        memcpy(&buffer[0], &txdata[(txlength - bytes_left)], bytes_to_send);

        result = WriteFile(pCdc->kits[cdcid].write_handle, buffer, bytes_to_send, &bytes_sent, NULL);
"
418,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\hal\hal_win_kit_cdc.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\hal\hal_win_kit_cdc.c,"memcpy(&rxdata[total_bytes], &buffer[0], bytes_to_copy);",120,1,"
        // Copy the received data
        memcpy(&rxdata[total_bytes], &buffer[0], bytes_to_copy);
        total_bytes += bytes_to_copy - size_adjust;
    }
"
425,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\hal\hal_win_kit_hid.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\hal\hal_win_kit_hid.c,"memcpy(&rxdata[total_bytes], &buffer[1], bytes_to_cpy);",120,1,"
        // Copy the received data
        memcpy(&rxdata[total_bytes], &buffer[1], bytes_to_cpy);
        total_bytes += bytes_to_cpy - size_adjust;
    }
"
438,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\hal\kit_protocol.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\hal\kit_protocol.c,"memcpy(&pkitcmd[cpyindex], cmdpre, cpylen);",120,1,"    // Copy the prefix
    cpylen = strlen(cmdpre);
    memcpy(&pkitcmd[cpyindex], cmdpre, cpylen);
    cpyindex += cpylen;

"
439,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\hal\kit_protocol.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\hal\kit_protocol.c,"memcpy(&pkitcmd[cpyindex], cmdpost, cpylen);",120,1,"    // Copy the postfix
    cpylen = strlen(cmdpost);
    memcpy(&pkitcmd[cpyindex], cmdpost, cpylen);
    cpyindex += cpylen;

"
441,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(param->p_temp, param->otp, 11);",120,1,"    if (param->mode & MAC_MODE_INCLUDE_OTP_88)
    {
        memcpy(param->p_temp, param->otp, 11);            // use OTP[0:10], Mode:5 is overridden
        param->p_temp += 11;
    }
"
442,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(param->p_temp, param->otp, 8);",120,1,"        if (param->mode & MAC_MODE_INCLUDE_OTP_64)
        {
            memcpy(param->p_temp, param->otp, 8);         // use 8 bytes OTP[0:7] for (6)
        }
        else
"
445,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(param->p_temp, &param->sn[4], 4);",120,1,"    if (param->mode & MAC_MODE_INCLUDE_SN)
    {
        memcpy(param->p_temp, &param->sn[4], 4);           //use SN[4:7] for (9)
    }
    else
"
447,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(param->p_temp, &param->sn[2], 2);",120,1,"    if (param->mode & MAC_MODE_INCLUDE_SN)
    {
        memcpy(param->p_temp, &param->sn[2], 2);           //use SN[2:3] for (11)
    }
    else
"
449,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(param->temp_key->value, param->rand_out, 32);",120,1,"        {
            // Nonce calculation mode. Actual value of TempKey has been returned in RandOut
            memcpy(param->temp_key->value, param->rand_out, 32);

            // TempKey flags aren't changed
"
450,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(p_temp, param->rand_out, RANDOM_NUM_SIZE);",120,1,"            p_temp = temporary;

            memcpy(p_temp, param->rand_out, RANDOM_NUM_SIZE);
            p_temp += RANDOM_NUM_SIZE;

"
451,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(p_temp, param->num_in, NONCE_NUMIN_SIZE);",120,1,"            p_temp += RANDOM_NUM_SIZE;

            memcpy(p_temp, param->num_in, NONCE_NUMIN_SIZE);
            p_temp += NONCE_NUMIN_SIZE;

"
452,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(param->temp_key->value, param->num_in, 64);",120,1,"            if ((param->mode & NONCE_MODE_INPUT_LEN_MASK) == NONCE_MODE_INPUT_LEN_64)
            {
                memcpy(param->temp_key->value, param->num_in, 64);
                param->temp_key->is_64 = 1;
            }
"
453,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(param->temp_key->value, param->num_in, 32);",120,1,"            else
            {
                memcpy(param->temp_key->value, param->num_in, 32);
                param->temp_key->is_64 = 0;
            }
"
454,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(message, param->msg_dig_buf, 32);",120,1,"    {
        // Message source is the first 32 bytes of the message digest buffer
        memcpy(message, param->msg_dig_buf, 32);
    }
    else
"
455,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(message, param->temp_key->value, 32);",120,1,"            return ATCA_BAD_PARAM;
        }
        memcpy(message, param->temp_key->value, 32);
    }

"
456,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(p_temp, param->mode & MAC_MODE_BLOCK1_TEMPKEY ? param->temp_key->value : param->key, ATCA_KEY_SIZE);",120,1,"
    // (1) first 32 bytes
    memcpy(p_temp, param->mode & MAC_MODE_BLOCK1_TEMPKEY ? param->temp_key->value : param->key, ATCA_KEY_SIZE);                // use Key[KeyID]
    p_temp += ATCA_KEY_SIZE;

"
457,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(p_temp, param->mode & MAC_MODE_BLOCK2_TEMPKEY ? param->temp_key->value : param->challenge, ATCA_KEY_SIZE);",120,1,"
    // (2) second 32 bytes
    memcpy(p_temp, param->mode & MAC_MODE_BLOCK2_TEMPKEY ? param->temp_key->value : param->challenge, ATCA_KEY_SIZE);          // use Key[KeyID]
    p_temp += ATCA_KEY_SIZE;

"
459,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(&msg[0], param->temp_key->value, 32);",120,1,"    if (param->mode & CHECKMAC_MODE_BLOCK1_TEMPKEY)
    {
        memcpy(&msg[0], param->temp_key->value, 32);
    }
    else
"
460,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(&msg[0], param->slot_key, 32);",120,1,"    else
    {
        memcpy(&msg[0], param->slot_key, 32);
    }
    if (param->mode & CHECKMAC_MODE_BLOCK2_TEMPKEY)
"
461,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(&msg[32], param->temp_key->value, 32);",120,1,"    if (param->mode & CHECKMAC_MODE_BLOCK2_TEMPKEY)
    {
        memcpy(&msg[32], param->temp_key->value, 32);
    }
    else
"
462,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(&msg[32], param->client_chal, 32);",120,1,"    else
    {
        memcpy(&msg[32], param->client_chal, 32);
    }
    memcpy(&msg[64], &param->other_data[0], 4);
"
463,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(&msg[64], &param->other_data[0], 4);",120,1,"        memcpy(&msg[32], param->client_chal, 32);
    }
    memcpy(&msg[64], &param->other_data[0], 4);
    if (param->mode & CHECKMAC_MODE_INCLUDE_OTP_64)
    {
"
464,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(&msg[68], param->otp, 8);",120,1,"    if (param->mode & CHECKMAC_MODE_INCLUDE_OTP_64)
    {
        memcpy(&msg[68], param->otp, 8);
    }
    memcpy(&msg[76], &param->other_data[4], 3);
"
465,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(&msg[76], &param->other_data[4], 3);",120,1,"        memcpy(&msg[68], param->otp, 8);
    }
    memcpy(&msg[76], &param->other_data[4], 3);
    msg[79] = param->sn[8];
    memcpy(&msg[80], &param->other_data[7], 4);
"
466,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(&msg[80], &param->other_data[7], 4);",120,1,"    memcpy(&msg[76], &param->other_data[4], 3);
    msg[79] = param->sn[8];
    memcpy(&msg[80], &param->other_data[7], 4);
    memcpy(&msg[84], &param->sn[0], 2);
    memcpy(&msg[86], &param->other_data[11], 2);
"
467,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(&msg[84], &param->sn[0], 2);",120,1,"    msg[79] = param->sn[8];
    memcpy(&msg[80], &param->other_data[7], 4);
    memcpy(&msg[84], &param->sn[0], 2);
    memcpy(&msg[86], &param->other_data[11], 2);

"
468,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(&msg[86], &param->other_data[11], 2);",120,1,"    memcpy(&msg[80], &param->other_data[7], 4);
    memcpy(&msg[84], &param->sn[0], 2);
    memcpy(&msg[86], &param->other_data[11], 2);

    // Calculate the client response
"
469,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(param->temp_key->value, param->target_key, ATCA_KEY_SIZE);",120,1,"    {
        // CheckMac Copy will be performed
        memcpy(param->temp_key->value, param->target_key, ATCA_KEY_SIZE);
        param->temp_key->gen_dig_data = 0;
        param->temp_key->source_flag = 1;
"
472,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(p_temp, param->temp_key->value, ATCA_KEY_SIZE);",120,1,"    p_temp += ATCA_KEY_SIZE;

    memcpy(p_temp, param->temp_key->value, ATCA_KEY_SIZE);
    p_temp += ATCA_KEY_SIZE;

"
474,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(p_temp, param->response, ATCA_SHA_DIGEST_SIZE);",120,1,"
    // Append result from last calculation H((K0 ^ ipad) || text)
    memcpy(p_temp, param->response, ATCA_SHA_DIGEST_SIZE);
    p_temp += ATCA_SHA_DIGEST_SIZE;

"
476,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(p_temp, param->other_data, ATCA_KEY_SIZE);",120,1,"        else
        {
            memcpy(p_temp, param->other_data, ATCA_KEY_SIZE);       // 32 bytes other data

        }
"
478,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(p_temp, param->stored_value, ATCA_KEY_SIZE);",120,1,"    else
    {
        memcpy(p_temp, param->stored_value, ATCA_KEY_SIZE);     // 32 bytes of stored data

    }
"
479,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(p_temp, param->other_data, 4);",120,1,"    {
        // If a key has the SlotConfig.NoMac bit set, then opcode and parameters come from OtherData
        memcpy(p_temp, param->other_data, 4);
        p_temp += 4;
    }
"
490,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(p_temp, param->input_data, ATCA_KEY_SIZE);",120,1,"
        // (8) 32 bytes PlainText
        memcpy(p_temp, param->input_data, ATCA_KEY_SIZE);

        // Calculate SHA256 to get MAC
"
493,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(p_temp, param->input_data, ATCA_PRIVWRITE_PLAIN_TEXT_SIZE);",120,1,"
        // (8) 36 bytes PlainText (Private Key)
        memcpy(p_temp, param->input_data, ATCA_PRIVWRITE_PLAIN_TEXT_SIZE);

        // Calculate SHA256 to get the new TempKey
"
494,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(p_temp, param->parent_key, ATCA_KEY_SIZE);",120,1,"
    // (1) 32 bytes parent key
    memcpy(p_temp, param->parent_key, ATCA_KEY_SIZE);
    p_temp += ATCA_KEY_SIZE;

"
500,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(&msg[33], param->other_data, 3);",120,1,"            return ATCA_BAD_PARAM;
        }
        memcpy(&msg[33], param->other_data, 3); // OtherData replaces mode and key_id in message
    }
    else if (param->mode & GENKEY_MODE_DIGEST)
"
501,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(&msg[37], &param->sn[0], 2);",120,1,"
    msg[36] = param->sn[8];
    memcpy(&msg[37], &param->sn[0], 2);

    // Copy public key into end of message
"
502,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(&msg[sizeof(msg) - param->public_key_size], param->public_key, param->public_key_size);",120,1,"
    // Copy public key into end of message
    memcpy(&msg[sizeof(msg) - param->public_key_size], param->public_key, param->public_key_size);

    atcac_sw_sha2_256(msg, sizeof(msg), param->temp_key->value);
"
505,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(&msg[48], &param->sn[0], 2);",120,1,"    // Serial Number
    msg[43] = param->sn[8];
    memcpy(&msg[48], &param->sn[0], 2);
    if (param->mode & SIGN_MODE_INCLUDE_SN)
    {
"
506,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(&msg[44], &param->sn[4], 4);",120,1,"    if (param->mode & SIGN_MODE_INCLUDE_SN)
    {
        memcpy(&msg[44], &param->sn[4], 4);
        memcpy(&msg[50], &param->sn[2], 2);
    }
"
507,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(&msg[50], &param->sn[2], 2);",120,1,"    {
        memcpy(&msg[44], &param->sn[4], 4);
        memcpy(&msg[50], &param->sn[2], 2);
    }

"
508,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(param->message, msg, sizeof(msg));",120,1,"    if (param->message)
    {
        memcpy(param->message, msg, sizeof(msg));
    }
    if (param->verify_other_data)
"
509,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(&param->verify_other_data[0],  &msg[33], 10);",120,1,"    if (param->verify_other_data)
    {
        memcpy(&param->verify_other_data[0],  &msg[33], 10);
        memcpy(&param->verify_other_data[10], &msg[44], 4);
        memcpy(&param->verify_other_data[14], &msg[50], 5);
"
510,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(&param->verify_other_data[10], &msg[44], 4);",120,1,"    {
        memcpy(&param->verify_other_data[0],  &msg[33], 10);
        memcpy(&param->verify_other_data[10], &msg[44], 4);
        memcpy(&param->verify_other_data[14], &msg[50], 5);
    }
"
511,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(&param->verify_other_data[14], &msg[50], 5);",120,1,"        memcpy(&param->verify_other_data[0],  &msg[33], 10);
        memcpy(&param->verify_other_data[10], &msg[44], 4);
        memcpy(&param->verify_other_data[14], &msg[50], 5);
    }
    if (param->digest)
"
512,2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\host\atca_host.c,"memcpy(counter_match_value + 4, counter_match_value, 4);",120,1,"
    // Counter match value should be repeated in the next 4 bytes
    memcpy(counter_match_value + 4, counter_match_value, 4);

    return ATCA_SUCCESS;
"
523,2021\B-L4S5I-IOT01A-using-VL530X-via-I2C\Core\platform\src\vl53l0x_tof.c,Dataset Download,../../Dataset Download/2021\B-L4S5I-IOT01A-using-VL530X-via-I2C\Core\platform\src\vl53l0x_tof.c,"memcpy(&_I2CBuffer[1], pdata, count);",120,1,"    
    _I2CBuffer[0] = index;
    memcpy(&_I2CBuffer[1], pdata, count);
    
    status_int = _I2CWrite(Dev, _I2CBuffer, count + 1);
"
529,2021\c-vertices-sdk\examples\unix\main.c,Dataset Download,../../Dataset Download/2021\c-vertices-sdk\examples\unix\main.c,"memcpy(keys, alice_account.private_key, sizeof(alice_account.private_key));",120,1,"                // libsodium wants to have private and public keys concatenated
                unsigned char keys[crypto_sign_ed25519_SECRETKEYBYTES] = {0};
                memcpy(keys, alice_account.private_key, sizeof(alice_account.private_key));
                memcpy(&keys[32], alice_account.public_key, sizeof(alice_account.public_key));

"
530,2021\c-vertices-sdk\examples\unix\main.c,Dataset Download,../../Dataset Download/2021\c-vertices-sdk\examples\unix\main.c,"memcpy(&keys[32], alice_account.public_key, sizeof(alice_account.public_key));",120,1,"                unsigned char keys[crypto_sign_ed25519_SECRETKEYBYTES] = {0};
                memcpy(keys, alice_account.private_key, sizeof(alice_account.private_key));
                memcpy(&keys[32], alice_account.public_key, sizeof(alice_account.public_key));

                // prepend ""TX"" to the payload before signing
"
531,2021\c-vertices-sdk\examples\unix\main.c,Dataset Download,../../Dataset Download/2021\c-vertices-sdk\examples\unix\main.c,"memcpy(&to_be_signed[2], &tx->payload[tx->payload_offset], tx->payload_length);",120,1,"                to_be_signed[0] = 'T';
                to_be_signed[1] = 'X';
                memcpy(&to_be_signed[2], &tx->payload[tx->payload_offset], tx->payload_length);

                // sign the payload
"
532,2021\c-vertices-sdk\examples\unix\main.c,Dataset Download,../../Dataset Download/2021\c-vertices-sdk\examples\unix\main.c,"memcpy(&payload[1], &tx->payload[tx->payload_offset - 4], tx->payload_length + 4);",120,1,"            char payload[tx->payload_length + 5];
            payload[0] = (char) 0x81; // starting flag for map of one element
            memcpy(&payload[1], &tx->payload[tx->payload_offset - 4], tx->payload_length + 4);

            fwrite(payload, sizeof payload, 1, ftx);
"
534,2021\c-vertices-sdk\examples\unix\main.c,Dataset Download,../../Dataset Download/2021\c-vertices-sdk\examples\unix\main.c,"memcpy(alice_account.private_key, ed25519_sk, sizeof(alice_account.private_key));",120,1,"        crypto_sign_ed25519_seed_keypair(ed25519_pk, ed25519_sk, seed);

        memcpy(alice_account.private_key, ed25519_sk, sizeof(alice_account.private_key));
        memcpy(alice_account.public_key, ed25519_pk, sizeof(alice_account.public_key));

"
535,2021\c-vertices-sdk\examples\unix\main.c,Dataset Download,../../Dataset Download/2021\c-vertices-sdk\examples\unix\main.c,"memcpy(alice_account.public_key, ed25519_pk, sizeof(alice_account.public_key));",120,1,"
        memcpy(alice_account.private_key, ed25519_sk, sizeof(alice_account.private_key));
        memcpy(alice_account.public_key, ed25519_pk, sizeof(alice_account.public_key));

        FILE *fw = fopen(CONFIG_PATH ""private_key.bin"", ""wb"");
"
536,2021\c-vertices-sdk\examples\unix\main.c,Dataset Download,../../Dataset Download/2021\c-vertices-sdk\examples\unix\main.c,"memcpy(public_key_checksum, alice_account.public_key, sizeof(alice_account.public_key));",120,1,"    unsigned char checksum[32] = {0};
    char public_key_checksum[36] = {0};
    memcpy(public_key_checksum, alice_account.public_key, sizeof(alice_account.public_key));

    err_code = sha512_256(alice_account.public_key, sizeof(alice_account.public_key), checksum);
"
537,2021\c-vertices-sdk\examples\unix\main.c,Dataset Download,../../Dataset Download/2021\c-vertices-sdk\examples\unix\main.c,"memcpy(&public_key_checksum[32], &checksum[32 - 4], 4);",120,1,"    VTC_ASSERT(err_code);

    memcpy(&public_key_checksum[32], &checksum[32 - 4], 4);

    size_t size = 58;
"
539,2021\c-vertices-sdk\src\account.c,Dataset Download,../../Dataset Download/2021\c-vertices-sdk\src\account.c,"memcpy(account->public_key, result, sizeof account->public_key);",120,1,"
    // copy address part
    memcpy(account->public_key, result, sizeof account->public_key);

    return VTC_SUCCESS;
"
540,2021\c-vertices-sdk\src\account.c,Dataset Download,../../Dataset Download/2021\c-vertices-sdk\src\account.c,"memcpy(addr, m_accounts[id].info->public_key, ADDRESS_LENGTH);",120,1,"    }

    memcpy(addr, m_accounts[id].info->public_key, ADDRESS_LENGTH);

    return VTC_SUCCESS;
"
543,2021\c-vertices-sdk\src\algorand\algorand_provider.c,Dataset Download,../../Dataset Download/2021\c-vertices-sdk\src\algorand\algorand_provider.c,"memcpy(rx_buf, received_data, received_data_size);",120,1,"    payload->size = received_data_size;

    memcpy(rx_buf, received_data, received_data_size);
    rx_buf[received_data_size] = 0;

"
545,2021\c-vertices-sdk\src\algorand\algorand_provider.c,Dataset Download,../../Dataset Download/2021\c-vertices-sdk\src\algorand\algorand_provider.c,"memcpy(tx->genesis_hash, m_provider.version.genesis_hash, sizeof(tx->genesis_hash));",120,1,"            else
            {
                memcpy(tx->genesis_hash, m_provider.version.genesis_hash, sizeof(tx->genesis_hash));
            }

"
551,2021\c-vertices-sdk\src\algorand\algorand_provider.c,Dataset Download,../../Dataset Download/2021\c-vertices-sdk\src\algorand\algorand_provider.c,"memcpy(version->genesis_hash, m_provider.version.genesis_hash, sizeof(version->genesis_hash));",120,1,"    // copy version into caller structure
    strcpy(version->network, m_provider.version.network);
    memcpy(version->genesis_hash, m_provider.version.genesis_hash, sizeof(version->genesis_hash));

    version->major = m_provider.version.major;
"
553,2021\c-vertices-sdk\src\algorand\algorand_transaction.c,Dataset Download,../../Dataset Download/2021\c-vertices-sdk\src\algorand\algorand_transaction.c,"memcpy(signature_ptr, (const void *) m_pending_tx[bufid].signature, len);",120,1,"                    char *signature_ptr = (char *) mpack_read_bytes_inplace(&reader, len);
                    // replace the signature with the current one
                    memcpy(signature_ptr, (const void *) m_pending_tx[bufid].signature, len);
                    err_code = VTC_SUCCESS;
                }
"
600,2021\cslim\test\libglusterfs\call-stub.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\call-stub.cpp.c,"memcpy (dup_str, src, len);",120,1,"        }

        memcpy (dup_str, src, len);
out:
        return dup_str;
"
602,2021\cslim\test\libglusterfs\call-stub.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\call-stub.cpp.c,"memcpy (dup_mem, src, size);",120,1,"                goto out;

        memcpy (dup_mem, src, size);

out:
"
603,2021\cslim\test\libglusterfs\call-stub.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\call-stub.cpp.c,"memcpy (buf + copied, vector[i].iov_base, vector[i].iov_len);",120,1,"
 for (i = 0; i < count; i++) {
  memcpy (buf + copied, vector[i].iov_base, vector[i].iov_len);
  copied += vector[i].iov_len;
 }
"
604,2021\cslim\test\libglusterfs\call-stub.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\call-stub.cpp.c,"memcpy (vector[i].iov_base, buf + (size - left), cp);",120,1,"  cp = ((vector[i].iov_len)<(left)?(vector[i].iov_len):(left));
  if (vector[i].iov_base != buf + (size - left))
   memcpy (vector[i].iov_base, buf + (size - left), cp);
  ret += cp;
  left -= cp;
"
605,2021\cslim\test\libglusterfs\call-stub.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\call-stub.cpp.c,"memcpy (newptr, ptr, size);",120,1,"  return ((void *)0);

 memcpy (newptr, ptr, size);
 return newptr;
}
"
659,2021\cslim\test\libglusterfs\client_t.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\client_t.cpp.c,"memcpy (clienttable->cliententries, oldclients, cpy);",120,1,"        if (oldclients) {
                uint32_t cpy = oldmax_clients * sizeof (cliententry_t);
                memcpy (clienttable->cliententries, oldclients, cpy);
        }

"
764,2021\cslim\test\libglusterfs\common-utils.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\common-utils.cpp.c,"pathc = (__extension__ ({ __const char *__old = (path); size_t __len = strlen (__old) + 1; char *__new = (char *) __builtin_alloca (__len); (char *) memcpy (__new, __old, __len); }));",120,1,"

        pathc = (__extension__ ({ __const char *__old = (path); size_t __len = strlen (__old) + 1; char *__new = (char *) __builtin_alloca (__len); (char *) memcpy (__new, __old, __len); }));
        if (!pathc) {
                goto out;
"
780,2021\cslim\test\libglusterfs\common-utils.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\common-utils.cpp.c,"net_str = (__extension__ ({ __const char *__old = (network); size_t __len = strlen (__old) + 1; char *__new = (char *) __builtin_alloca (__len); (char *) memcpy (__new, __old, __len); }));",120,1,"        }

        net_str = (__extension__ ({ __const char *__old = (network); size_t __len = strlen (__old) + 1; char *__new = (char *) __builtin_alloca (__len); (char *) memcpy (__new, __old, __len); }));
        slash = strchr (net_str, '/');
        if (!slash)
"
800,2021\cslim\test\libglusterfs\compat.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\compat.c,"memcpy (str, data->data, data->len);",120,1,"                goto err;
        }
        memcpy (str, data->data, data->len);
        str[data->len] = '\0';

"
817,2021\cslim\test\libglusterfs\compat.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\compat.c,"memcpy (buf, &netword, sizeof(netword));",120,1,"
        netword = hton32 (count);
        memcpy (buf, &netword, sizeof(netword));
        buf += 4;
        pair = this->members_list;
"
820,2021\cslim\test\libglusterfs\compat.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\compat.c,"memcpy (buf, pair->key, keylen);",120,1,"                buf += 4;

                memcpy (buf, pair->key, keylen);
                buf += keylen;
                *buf++ = '\0';
"
821,2021\cslim\test\libglusterfs\compat.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\compat.c,"memcpy (buf, pair->value->data, vallen);",120,1,"
                if (pair->value->data) {
                        memcpy (buf, pair->value->data, vallen);
                        buf += vallen;
                }
"
884,2021\cslim\test\libglusterfs\compat.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\compat.c,"memcpy (strfd->data + strfd->size, str, size + 1);",120,1,"

        memcpy (strfd->data + strfd->size, str, size + 1);
        strfd->size += size;

"
1067,2021\cslim\test\libglusterfs\dict.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\dict.cpp.c,"memcpy (&hostord, buf, sizeof(hostord));",120,1,"        }

        memcpy (&hostord, buf, sizeof(hostord));
        count = hton32 (hostord);
        buf += 4;
"
1187,2021\cslim\test\libglusterfs\fd-lk.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\fd-lk.cpp.c,"memcpy (v->locks[0], big, sizeof (fd_lk_ctx_node_t));",120,1,"                        goto out;

                memcpy (v->locks[0], big, sizeof (fd_lk_ctx_node_t));

                v->locks[0]->fl_type = small->fl_type;
"
1189,2021\cslim\test\libglusterfs\fd-lk.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\fd-lk.cpp.c,"memcpy (v->locks[1], small, sizeof (fd_lk_ctx_node_t));",120,1,"                                             v->locks[0]->fl_end);

                memcpy (v->locks[1], small, sizeof (fd_lk_ctx_node_t));

                memcpy (v->locks[2], big, sizeof (fd_lk_ctx_node_t));
"
1190,2021\cslim\test\libglusterfs\fd-lk.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\fd-lk.cpp.c,"memcpy (v->locks[2], big, sizeof (fd_lk_ctx_node_t));",120,1,"                memcpy (v->locks[1], small, sizeof (fd_lk_ctx_node_t));

                memcpy (v->locks[2], big, sizeof (fd_lk_ctx_node_t));
                v->locks[2]->fl_start = small->fl_end + 1;
                v->locks[2]->user_flock.l_len =
"
1191,2021\cslim\test\libglusterfs\fd-lk.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\fd-lk.cpp.c,"memcpy (v->locks[0], small, sizeof (fd_lk_ctx_node_t));",120,1,"                        goto out;

                memcpy (v->locks[0], small, sizeof (fd_lk_ctx_node_t));

                memcpy (v->locks[1], big, sizeof (fd_lk_ctx_node_t));
"
1192,2021\cslim\test\libglusterfs\fd-lk.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\fd-lk.cpp.c,"memcpy (v->locks[1], big, sizeof (fd_lk_ctx_node_t));",120,1,"                memcpy (v->locks[0], small, sizeof (fd_lk_ctx_node_t));

                memcpy (v->locks[1], big, sizeof (fd_lk_ctx_node_t));
                v->locks[1]->fl_start = small->fl_end + 1;
                v->locks[1]->user_flock.l_start = small->fl_end + 1;
"
1220,2021\cslim\test\libglusterfs\fd.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\fd.cpp.c,"memcpy (fdtable->fdentries, oldfds, cpy);",120,1,"        if (oldfds) {
                uint32_t cpy = oldmax_fds * sizeof (fdentry_t);
                memcpy (fdtable->fdentries, oldfds, cpy);
        }

"
1326,2021\cslim\test\libglusterfs\graph-print.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\graph-print.cpp.c,"memcpy (iov->iov_base, buf, len);",120,1,"        }

        memcpy (iov->iov_base, buf, len);
        iov->iov_base += len;
        iov->iov_len -= len;
"
1418,2021\cslim\test\libglusterfs\iobuf.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\iobuf.cpp.c,"memcpy(&my_iobuf, iobuf, sizeof(my_iobuf));",120,1,"                return;
        }
        memcpy(&my_iobuf, iobuf, sizeof(my_iobuf));
        pthread_mutex_unlock (&iobuf->lock);

"
1492,2021\cslim\test\libglusterfs\logging.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\logging.cpp.c,"memcpy ((void *)&(iter->latest), (void *)&tv,",120,1,"                        found = _gf_true;

                        memcpy ((void *)&(iter->latest), (void *)&tv,
                                sizeof (struct timeval));
                        break;
"
1493,2021\cslim\test\libglusterfs\logging.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\logging.cpp.c,"memcpy ((void *)&(buf_new->latest), (void *)&tv,",120,1,"                }

                memcpy ((void *)&(buf_new->latest), (void *)&tv,
                        sizeof (struct timeval));
                memcpy ((void *)&(buf_new->oldest), (void *)&tv,
"
1494,2021\cslim\test\libglusterfs\logging.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\logging.cpp.c,"memcpy ((void *)&(buf_new->oldest), (void *)&tv,",120,1,"                memcpy ((void *)&(buf_new->latest), (void *)&tv,
                        sizeof (struct timeval));
                memcpy ((void *)&(buf_new->oldest), (void *)&tv,
                        sizeof (struct timeval));

"
1635,2021\cslim\test\libglusterfs\rbthash.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\rbthash.cpp.c,"memcpy (entry->key, key, keylen);",120,1,"
        do { (&entry->list)->next = (&entry->list)->prev = &entry->list; } while (0);
        memcpy (entry->key, key, keylen);
        entry->keylen = keylen;
        entry->keyhash = tbl->hashfunc (entry->key, entry->keylen);
"
1735,2021\cslim\test\libglusterfs\stack.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\stack.cpp.c,"memcpy (&frame->begin, &stack->tv, sizeof (stack->tv));",120,1,"
                                                         ;
                memcpy (&frame->begin, &stack->tv, sizeof (stack->tv));
        }

"
1738,2021\cslim\test\libglusterfs\stack.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\stack.cpp.c,"memcpy(&my_frame, call_frame, sizeof(my_frame));",120,1,"                goto out;

        memcpy(&my_frame, call_frame, sizeof(my_frame));
        pthread_mutex_unlock (&call_frame->lock);

"
1740,2021\cslim\test\libglusterfs\stack.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\stack.cpp.c,"memcpy (&tmp_frame, call_frame, sizeof (tmp_frame));",120,1,"        if (ret)
                return;
        memcpy (&tmp_frame, call_frame, sizeof (tmp_frame));
        pthread_mutex_unlock (&call_frame->lock);

"
1900,2021\cslim\test\libglusterfs\syncop.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\syncop.cpp.c,"memcpy (opctx->groups, groups, (sizeof (gid_t) * count));",120,1,"
 if (count)
  memcpy (opctx->groups, groups, (sizeof (gid_t) * count));


"
2062,2021\cslim\test\sqlite312-cpp\shell.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\shell.cpp.c,"memcpy(&zIn[nIn], zAppend, nAppend);",120,1,"    (((zCsr-zIn)==len) ? (void) (0) : __assert_fail (""(zCsr-zIn)==len"", ""shell.c"", 1206, __PRETTY_FUNCTION__));
  }else{
    memcpy(&zIn[nIn], zAppend, nAppend);
    zIn[len-1] = '\0';
  }
"
2063,2021\cslim\test\sqlite312-cpp\shell.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\shell.cpp.c,"memcpy(zErrMsg, sqlite3_errmsg(db), nErrMsg);",120,1,"  char *zErrMsg = sqlite3_malloc64(nErrMsg);
  if( zErrMsg ){
    memcpy(zErrMsg, sqlite3_errmsg(db), nErrMsg);
  }
  return zErrMsg;
"
2071,2021\cslim\test\sqlite312-cpp\shell.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\shell.cpp.c,"memcpy(zInsert+i, "",?"", 2);",120,1,"  i = (int)strlen(zInsert);
  for(j=1; j<n; j++){
    memcpy(zInsert+i, "",?"", 2);
    i += 2;
  }
"
2072,2021\cslim\test\sqlite312-cpp\shell.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\shell.cpp.c,"memcpy(zInsert+i, "");"", 3);",120,1,"    i += 2;
  }
  memcpy(zInsert+i, "");"", 3);
  rc = sqlite3_prepare_v2(newDb, zInsert, -1, &pInsert, 0);
  if( rc ){
"
2073,2021\cslim\test\sqlite312-cpp\shell.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\shell.cpp.c,"memcpy(&data, p, sizeof(data));",120,1,"    char *zErrMsg = 0;
    open_db(p, 0);
    memcpy(&data, p, sizeof(data));
    data.showHeader = 1;
    data.cMode = data.mode = 1;
"
2078,2021\cslim\test\sqlite312-cpp\shell.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\shell.cpp.c,"memcpy(zLine,"";"",2);",120,1,"    }
    if( line_is_command_terminator(zLine) && line_is_complete(zSql, nSql) ){
      memcpy(zLine,"";"",2);
    }
    nLine = strlen30(zLine);
"
2079,2021\cslim\test\sqlite312-cpp\shell.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\shell.cpp.c,"memcpy(zSql, zLine+i, nLine+1-i);",120,1,"      for(i=0; zLine[i] && ((*__ctype_b_loc ())[(int) (((unsigned char)zLine[i]))] & (unsigned short int) _ISspace); i++){}
      ((nAlloc>0 && zSql!=0) ? (void) (0) : __assert_fail (""nAlloc>0 && zSql!=0"", ""shell.c"", 4440, __PRETTY_FUNCTION__));
      memcpy(zSql, zLine+i, nLine+1-i);
      startline = lineno;
      nSql = nLine-i;
"
2080,2021\cslim\test\sqlite312-cpp\shell.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\shell.cpp.c,"memcpy(zSql+nSql, zLine, nLine+1);",120,1,"    }else{
      zSql[nSql++] = '\n';
      memcpy(zSql+nSql, zLine, nLine+1);
      nSql += nLine;
    }
"
2081,2021\cslim\test\sqlite312-cpp\shell.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\shell.cpp.c,"if( z ) memcpy(z, home_dir, n);",120,1,"    int n = strlen30(home_dir) + 1;
    char *z = malloc( n );
    if( z ) memcpy(z, home_dir, n);
    home_dir = z;
  }
"
2083,2021\cslim\test\sqlite312-cpp\shell.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\shell.cpp.c,"memcpy(data->colSeparator,""|"", 2);",120,1,"  data->normalMode = data->cMode = data->mode = 2;
  data->autoExplain = 1;
  memcpy(data->colSeparator,""|"", 2);
  memcpy(data->rowSeparator,""\n"", 2);
  data->showHeader = 0;
"
2084,2021\cslim\test\sqlite312-cpp\shell.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\shell.cpp.c,"memcpy(data->rowSeparator,""\n"", 2);",120,1,"  data->autoExplain = 1;
  memcpy(data->colSeparator,""|"", 2);
  memcpy(data->rowSeparator,""\n"", 2);
  data->showHeader = 0;
  data->shellFlgs = 0x00004;
"
2085,2021\cslim\test\sqlite312-cpp\shell.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\shell.cpp.c,"memcpy(data.colSeparator,"","",2);",120,1,"    }else if( strcmp(z,""-csv"")==0 ){
      data.mode = 7;
      memcpy(data.colSeparator,"","",2);
    }else if( strcmp(z,""-ascii"")==0 ){
      data.mode = 9;
"
2109,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(pNew, p, db->lookaside.sz);",120,1,"{

        memcpy(pNew, p, db->lookaside.sz);
        sqlite3DbFree(db, p);
      }
"
2110,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(zNew, z, n);",120,1,"{

    memcpy(zNew, z, n);
  }
  return zNew;
"
2111,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(zNew, z, (size_t)n);",120,1,"{

    memcpy(zNew, z, (size_t)n);
    zNew[n] = 0;
  }
"
2112,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(buf+(prefix!=0),""Inf"",4);",120,1,"            bufpt = buf;
            buf[0] = prefix;
            memcpy(buf+(prefix!=0),""Inf"",4);
            length = 3+(prefix!=0);
            break;
"
2113,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"if( !(((p)->printfFlags & 0x04)!=0) && p->nChar>0 ) memcpy(zNew, p->zText, p->nChar);",120,1,"
      ((void) (0));
      if( !(((p)->printfFlags & 0x04)!=0) && p->nChar>0 ) memcpy(zNew, p->zText, p->nChar);
      p->zText = zNew;
      p->nAlloc = sqlite3DbMallocSize(p->db, zNew);
"
2114,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&p->zText[p->nChar], z, N);",120,1,"{

    memcpy(&p->zText[p->nChar], z, N);
    p->nChar += N;
  }
"
2115,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&p->zText[p->nChar-N], z, N);",120,1,"    ((void) (0));
    p->nChar += N;
    memcpy(&p->zText[p->nChar-N], z, N);
  }
}
"
2116,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(p->zText, p->zBase, p->nChar+1);",120,1,"{

        memcpy(p->zText, p->zBase, p->nChar+1);
        p->printfFlags |= 0x04;
      }else{
"
2120,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(pOut, &u, 8);",120,1,"      u = u*16 + sqlite3HexToInt(z[k]);
    }
    memcpy(pOut, &u, 8);
    return (z[k]==0 && k-i<=16) ? 0 : 1;
  }else
"
2121,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(pValue, &u, 4);",120,1,"{

      memcpy(pValue, &u, 4);
      return 1;
    }else{
"
2122,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&x,p,4);",120,1,"
  u32 x;
  memcpy(&x,p,4);
  return __builtin_bswap32(x);
# 26542 ""sqlite3.c""
"
2123,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(p,&x,4);",120,1,"
  u32 x = __builtin_bswap32(v);
  memcpy(p,&x,4);
# 26560 ""sqlite3.c""
}
"
2124,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&a, &x, 8);",120,1,"  if( x<=1 ) return 0;
  if( x<=2000000000 ) return sqlite3LogEst((u64)x);
  memcpy(&a, &x, 8);
  e = (a>>52) - 1022;
  return e*10;
"
2129,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&pInode->fileId, &fileId, sizeof(fileId));",120,1,"    }
    memset(pInode, 0, sizeof(*pInode));
    memcpy(&pInode->fileId, &fileId, sizeof(fileId));
    pInode->nRef = 1;
    pInode->pNext = inodeList;
"
2131,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(pBuf, &((u8 *)(pFile->pMapRegion))[offset], amt);",120,1,"{

      memcpy(pBuf, &((u8 *)(pFile->pMapRegion))[offset], amt);
      return 0;
    }else{
"
2132,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(pBuf, &((u8 *)(pFile->pMapRegion))[offset], nCopy);",120,1,"    }else{
      int nCopy = pFile->mmapSize - offset;
      memcpy(pBuf, &((u8 *)(pFile->pMapRegion))[offset], nCopy);
      pBuf = &((u8 *)pBuf)[nCopy];
      amt -= nCopy;
"
2138,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(zDb, zPath, nDb);",120,1,"      nDb--;
    }
    memcpy(zDb, zPath, nDb);
    zDb[nDb] = '\0';

"
2141,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(zDel, zIn, n);",120,1,"            }else{
              memmove(&zDel[n], zDel, nByte+1);
              memcpy(zDel, zIn, n);
              nByte += n;
            }
"
2143,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(zBuf, &t, sizeof(t));",120,1,"      time_t t;
      time(&t);
      memcpy(zBuf, &t, sizeof(t));
      memcpy(&zBuf[sizeof(t)], &randomnessPid, sizeof(randomnessPid));
      ((void) (0));
"
2144,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&zBuf[sizeof(t)], &randomnessPid, sizeof(randomnessPid));",120,1,"      time(&t);
      memcpy(zBuf, &t, sizeof(t));
      memcpy(&zBuf[sizeof(t)], &randomnessPid, sizeof(randomnessPid));
      ((void) (0));
      nBuf = sizeof(t) + sizeof(randomnessPid);
"
2145,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(aiValues, p->u.aHash, sizeof(p->u.aHash));",120,1,"      return 7;
    }else{
      memcpy(aiValues, p->u.aHash, sizeof(p->u.aHash));
      memset(p->u.apSub, 0, sizeof(p->u.apSub));
      p->iDivisor = (p->iSize + ((((512 -(3*sizeof(u32)))/sizeof(Bitvec*))*sizeof(Bitvec*))/sizeof(Bitvec *)) - 1)/((((512 -(3*sizeof(u32)))/sizeof(Bitvec*))*sizeof(Bitvec*))/sizeof(Bitvec *));
"
2157,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(zHeader, aJournalMagic, sizeof(aJournalMagic));",120,1,"{

    memcpy(zHeader, aJournalMagic, sizeof(aJournalMagic));
    sqlite3Put4byte((u8*)&zHeader[sizeof(aJournalMagic)],0xffffffff);
  }else{
"
2159,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(pData, (u8*)aData, pPager->pageSize);",120,1,"    void *pData;
    pData = pPg->pData;
    memcpy(pData, (u8*)aData, pPager->pageSize);
    pPager->xReiniter(pPg);
    if( isMainJrnl && (!isSavepnt || *pOffset<=pPager->journalHdr) )
"
2160,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&pPager->dbFileVers, &((u8*)pData)[24],sizeof(pPager->dbFileVers));",120,1,"{

      memcpy(&pPager->dbFileVers, &((u8*)pData)[24],sizeof(pPager->dbFileVers));
    }

"
2163,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&pPager->dbFileVers, dbFileVers, sizeof(pPager->dbFileVers));",120,1,"    }else{
      u8 *dbFileVers = &((u8*)pPg->pData)[24];
      memcpy(&pPager->dbFileVers, dbFileVers, sizeof(pPager->dbFileVers));
    }
  }
"
2167,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&pPager->dbFileVers, &pData[24], sizeof(pPager->dbFileVers));",120,1,"{

        memcpy(&pPager->dbFileVers, &pData[24], sizeof(pPager->dbFileVers));
      }
      if( pgno>pPager->dbFileSize )
"
2168,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(pPager->zFilename, zPathname, nPathname);",120,1,"    ((void) (0));
    pPager->zJournal = (char*)(pPtr += nPathname + 1 + nUri);
    memcpy(pPager->zFilename, zPathname, nPathname);
    if( nUri ) memcpy(&pPager->zFilename[nPathname+1], zUri, nUri);
    memcpy(pPager->zJournal, zPathname, nPathname);
"
2169,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"if( nUri ) memcpy(&pPager->zFilename[nPathname+1], zUri, nUri);",120,1,"    pPager->zJournal = (char*)(pPtr += nPathname + 1 + nUri);
    memcpy(pPager->zFilename, zPathname, nPathname);
    if( nUri ) memcpy(&pPager->zFilename[nPathname+1], zUri, nUri);
    memcpy(pPager->zJournal, zPathname, nPathname);
    memcpy(&pPager->zJournal[nPathname], ""-journal\000"", 8+2);
"
2170,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(pPager->zJournal, zPathname, nPathname);",120,1,"    memcpy(pPager->zFilename, zPathname, nPathname);
    if( nUri ) memcpy(&pPager->zFilename[nPathname+1], zUri, nUri);
    memcpy(pPager->zJournal, zPathname, nPathname);
    memcpy(&pPager->zJournal[nPathname], ""-journal\000"", 8+2);
    ;
"
2171,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&pPager->zJournal[nPathname], ""-journal\000"", 8+2);",120,1,"    if( nUri ) memcpy(&pPager->zFilename[nPathname+1], zUri, nUri);
    memcpy(pPager->zJournal, zPathname, nPathname);
    memcpy(&pPager->zJournal[nPathname], ""-journal\000"", 8+2);
    ;

"
2172,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(pPager->zWal, zPathname, nPathname);",120,1,"
    pPager->zWal = &pPager->zJournal[nPathname+8+1];
    memcpy(pPager->zWal, zPathname, nPathname);
    memcpy(&pPager->zWal[nPathname], ""-wal\000"", 4+1);
    ;
"
2173,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&pPager->zWal[nPathname], ""-wal\000"", 4+1);",120,1,"    pPager->zWal = &pPager->zJournal[nPathname+8+1];
    memcpy(pPager->zWal, zPathname, nPathname);
    memcpy(&pPager->zWal[nPathname], ""-wal\000"", 4+1);
    ;

"
2176,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&pPager->dbFileVers, pCopy, sizeof(pPager->dbFileVers));",120,1,"
          const void *pCopy = (const void *)&((const char *)zBuf)[24];
          memcpy(&pPager->dbFileVers, pCopy, sizeof(pPager->dbFileVers));
          pPager->changeCountDone = 1;
        }
"
2178,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy((void*)&aHdr[1], (const void*)&pWal->hdr, sizeof(WalIndexHdr));",120,1,"  pWal->hdr.iVersion = 3007000;
  walChecksumBytes(1, (u8*)&pWal->hdr, nCksum, 0, pWal->hdr.aCksum);
  memcpy((void*)&aHdr[1], (const void*)&pWal->hdr, sizeof(WalIndexHdr));
  walShmBarrier(pWal);
  memcpy((void*)&aHdr[0], (const void*)&pWal->hdr, sizeof(WalIndexHdr));
"
2179,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy((void*)&aHdr[0], (const void*)&pWal->hdr, sizeof(WalIndexHdr));",120,1,"  memcpy((void*)&aHdr[1], (const void*)&pWal->hdr, sizeof(WalIndexHdr));
  walShmBarrier(pWal);
  memcpy((void*)&aHdr[0], (const void*)&pWal->hdr, sizeof(WalIndexHdr));
}
# 52052 ""sqlite3.c""
"
2180,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&aFrame[8], pWal->hdr.aSalt, 8);",120,1,"{

    memcpy(&aFrame[8], pWal->hdr.aSalt, 8);

    nativeCksum = (pWal->hdr.bigEndCksum==0);
"
2185,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&pWal->hdr.aSalt, &aBuf[16], 8);",120,1,"    pWal->szPage = szPage;
    pWal->nCkpt = sqlite3Get4byte(&aBuf[12]);
    memcpy(&pWal->hdr.aSalt, &aBuf[16], 8);


"
2186,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(aLeft, aTmp, sizeof(aTmp[0])*iOut);",120,1,"  *paRight = aLeft;
  *pnRight = iOut;
  memcpy(aLeft, aTmp, sizeof(aTmp[0])*iOut);
}
# 52839 ""sqlite3.c""
"
2189,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&pWal->hdr.aSalt[1], &salt1, 4);",120,1,"  pWal->hdr.mxFrame = 0;
  sqlite3Put4byte((u8*)&aSalt[0], 1 + sqlite3Get4byte((u8*)&aSalt[0]));
  memcpy(&pWal->hdr.aSalt[1], &salt1, 4);
  walIndexWriteHdr(pWal);
  pInfo->nBackfill = 0;
"
2190,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&h1, (void *)&aHdr[0], sizeof(h1));",120,1,"# 53381 ""sqlite3.c""
  aHdr = walIndexHdr(pWal);
  memcpy(&h1, (void *)&aHdr[0], sizeof(h1));
  walShmBarrier(pWal);
  memcpy(&h2, (void *)&aHdr[1], sizeof(h2));
"
2191,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&h2, (void *)&aHdr[1], sizeof(h2));",120,1,"  memcpy(&h1, (void *)&aHdr[0], sizeof(h1));
  walShmBarrier(pWal);
  memcpy(&h2, (void *)&aHdr[1], sizeof(h2));

  if( memcmp(&h1, &h2, sizeof(h1))!=0 )
"
2192,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&pWal->hdr, &h1, sizeof(WalIndexHdr));",120,1,"
    *pChanged = 1;
    memcpy(&pWal->hdr, &h1, sizeof(WalIndexHdr));
    pWal->szPage = (pWal->hdr.szPage&0xfe00) + ((pWal->hdr.szPage&0x0001)<<16);
    ;
"
2193,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&pWal->hdr, (void *)walIndexHdr(pWal), sizeof(WalIndexHdr));",120,1,"

    memcpy(&pWal->hdr, (void *)walIndexHdr(pWal), sizeof(WalIndexHdr));

    for(iFrame=pWal->hdr.mxFrame+1;
"
2194,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&aWalHdr[16], pWal->hdr.aSalt, 8);",120,1,"    sqlite3Put4byte(&aWalHdr[12], pWal->nCkpt);
    if( pWal->nCkpt==0 ) sqlite3_randomness(8, pWal->hdr.aSalt);
    memcpy(&aWalHdr[16], pWal->hdr.aSalt, 8);
    walChecksumBytes(1, aWalHdr, 32 -2*4, 0, aCksum);
    sqlite3Put4byte(&aWalHdr[24], aCksum[0]);
"
2196,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&temp[x], &data[x], (cbrk+size) - x);",120,1,"      temp = sqlite3PagerTempSpace(pPage->pBt->pPager);
      x = ((&data[hdr+5])[0]<<8 | (&data[hdr+5])[1]);
      memcpy(&temp[x], &data[x], (cbrk+size) - x);
      src = temp;
    }
"
2197,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&data[cbrk], &src[pc], size);",120,1,"      src = temp;
    }
    memcpy(&data[cbrk], &src[pc], size);
  }
  ((void) (0));
"
2199,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&aData[iAddr], &aData[pc], 2);",120,1,"

        memcpy(&aData[iAddr], &aData[pc], 2);
        aData[hdr+7] += (u8)x;
      }else{
"
2203,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(zFullPathname, zFilename, nFilename);",120,1,"{

        memcpy(zFullPathname, zFilename, nFilename);
      }else{
        rc = sqlite3OsFullPathname(pVfs, zFilename,
"
2205,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(data, zMagicHeader, sizeof(zMagicHeader));",120,1,"  rc = sqlite3PagerWrite(pP1->pDbPage);
  if( rc ) return rc;
  memcpy(data, zMagicHeader, sizeof(zMagicHeader));
  ((void) (0));
  data[16] = (u8)((pBt->pageSize>>8)&0xff);
"
2208,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(pPayload, pBuf, nByte);",120,1,"      return rc;
    }
    memcpy(pPayload, pBuf, nByte);
  }else{

"
2209,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(pBuf, pPayload, nByte);",120,1,"  }else{

    memcpy(pBuf, pPayload, nByte);
  }
  return 0;
"
2211,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&pPage1->aData[32], &pTrunk->aData[0], 4);",120,1,"        }
        *pPgno = iTrunk;
        memcpy(&pPage1->aData[32], &pTrunk->aData[0], 4);
        *ppPage = pTrunk;
        pTrunk = 0;
"
2213,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&pPrevTrunk->aData[0], &pTrunk->aData[0], 4);",120,1,"              goto end_allocate_page;
            }
            memcpy(&pPrevTrunk->aData[0], &pTrunk->aData[0], 4);
          }
        }else{
"
2214,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&pNewTrunk->aData[0], &pTrunk->aData[0], 4);",120,1,"            goto end_allocate_page;
          }
          memcpy(&pNewTrunk->aData[0], &pTrunk->aData[0], 4);
          sqlite3Put4byte(&pNewTrunk->aData[4], k-1);
          memcpy(&pNewTrunk->aData[8], &pTrunk->aData[12], (k-1)*4);
"
2215,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&pNewTrunk->aData[8], &pTrunk->aData[12], (k-1)*4);",120,1,"          memcpy(&pNewTrunk->aData[0], &pTrunk->aData[0], 4);
          sqlite3Put4byte(&pNewTrunk->aData[4], k-1);
          memcpy(&pNewTrunk->aData[8], &pTrunk->aData[12], (k-1)*4);
          releasePage(pNewTrunk);
          if( !pPrevTrunk )
"
2216,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&aData[8+closest*4], &aData[4+k*4], 4);",120,1,"{

            memcpy(&aData[8+closest*4], &aData[4+k*4], 4);
          }
          sqlite3Put4byte(&aData[4], k-1);
"
2218,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(pPayload, pSrc, n);",120,1,"      if( n>nSrc ) n = nSrc;
      ((void) (0));
      memcpy(pPayload, pSrc, n);
    }else{
      memset(pPayload, 0, n);
"
2222,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(pTemp, pCell, sz);",120,1,"{

      memcpy(pTemp, pCell, sz);
      pCell = pTemp;
    }
"
2223,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&data[idx], pCell, sz);",120,1,"    ((void) (0));
    pPage->nFree -= (u16)(2 + sz);
    memcpy(&data[idx], pCell, sz);
    if( iChild )
{
"
2225,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&pTmp[i], &aData[i], usableSize - i);",120,1,"
  i = ((&aData[hdr+5])[0]<<8 | (&aData[hdr+5])[1]);
  memcpy(&pTmp[i], &aData[i], usableSize - i);

  pData = pEnd;
"
2226,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(pData, pCell, szCell[i]);",120,1,"    pCellptr += 2;
    if( pData < pCellptr ) return sqlite3CorruptError(62287);
    memcpy(pData, pCell, szCell[i]);
    ((void) (0));
    ;
"
2231,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&aTo[iData], &aFrom[iData], pBt->usableSize-iData);",120,1,"
    iData = ((&aFrom[iFromHdr+5])[0]<<8 | (&aFrom[iFromHdr+5])[1]);
    memcpy(&aTo[iData], &aFrom[iData], pBt->usableSize-iData);
    memcpy(&aTo[iToHdr], &aFrom[iFromHdr], pFrom->cellOffset + 2*pFrom->nCell);

"
2232,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&aTo[iToHdr], &aFrom[iFromHdr], pFrom->cellOffset + 2*pFrom->nCell);",120,1,"    iData = ((&aFrom[iFromHdr+5])[0]<<8 | (&aFrom[iFromHdr+5])[1]);
    memcpy(&aTo[iData], &aFrom[iData], pBt->usableSize-iData);
    memcpy(&aTo[iToHdr], &aFrom[iFromHdr], pFrom->cellOffset + 2*pFrom->nCell);


"
2236,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&aOvflSpace[iOff], apDiv[i], szNew[i]);",120,1,"          goto balance_cleanup;
        }else{
          memcpy(&aOvflSpace[iOff], apDiv[i], szNew[i]);
          apDiv[i] = &aOvflSpace[apDiv[i]-pParent->aData];
        }
"
2238,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(pTemp, apDiv[i], sz);",120,1,"      ((void) (0));
      ((void) (0));
      memcpy(pTemp, apDiv[i], sz);
      b.apCell[b.nCell] = pTemp+leafCorrection;
      ((void) (0));
"
2239,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(b.apCell[b.nCell], &pOld->aData[8], 4);",120,1,"

        memcpy(b.apCell[b.nCell], &pOld->aData[8], 4);
      }else{
        ((void) (0));
"
2240,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&apNew[nNew-1]->aData[8], &pOld->aData[8], 4);",120,1,"
    MemPage *pOld = (nNew>nOld ? apNew : apOld)[nOld-1];
    memcpy(&apNew[nNew-1]->aData[8], &pOld->aData[8], 4);
  }
# 63303 ""sqlite3.c""
"
2241,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&pNew->aData[8], pCell, 4);",120,1,"{

      memcpy(&pNew->aData[8], pCell, 4);
    }else if( leafData )
{
"
2242,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(newCell, oldCell, 4);",120,1,"{

      memcpy(newCell, oldCell, 4);
    }
    rc = clearCell(pPage, oldCell, &szOld);
"
2243,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(zOut, zIn, nCopy);",120,1,"      u8 *zOut = &zDestData[iOff%nDestPgsz];
# 65820 ""sqlite3.c""
      memcpy(zOut, zIn, nCopy);
      ((u8 *)sqlite3PagerGetExtra(pDestPg))[0] = 0;
      if( iOff==0 && bUpdate==0 )
"
2245,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(pMem->zMalloc, pMem->z, pMem->n);",120,1,"{

    memcpy(pMem->zMalloc, pMem->z, pMem->n);
  }
  if( (pMem->flags&0x0400)!=0 )
"
2249,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(pMem, &t, sizeof(t));",120,1,"    ((void) (0));
    if( pMem->szMalloc>0 ) sqlite3DbFree(pMem->db, pMem->zMalloc);
    memcpy(pMem, &t, sizeof(t));
    rc = ctx.isError;
  }
"
2250,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(pTo, pFrom, __builtin_offsetof (Mem, zMalloc));",120,1,"{
 vdbeClrCopy(pTo,pFrom,srcType); return; }
  memcpy(pTo, pFrom, __builtin_offsetof (Mem, zMalloc));
  if( (pFrom->flags&0x0800)==0 )
{
"
2252,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(pTo, pFrom, sizeof(Mem));",120,1,"
  sqlite3VdbeMemRelease(pTo);
  memcpy(pTo, pFrom, sizeof(Mem));
  pFrom->flags = 0x0001;
  pFrom->szMalloc = 0;
"
2253,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(pMem->z, z, nAlloc);",120,1,"      return 7;
    }
    memcpy(pMem->z, z, nAlloc);
  }else if( xDel==((sqlite3_destructor_type)sqlite3MallocSize) )
{
"
2254,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"if( p4copy ) memcpy(p4copy, zP4, 8);",120,1,"
  char *p4copy = sqlite3DbMallocRawNN(sqlite3VdbeDb(p), 8);
  if( p4copy ) memcpy(p4copy, zP4, 8);
  return sqlite3VdbeAddOp4(p, op, p1, p2, p3, p4copy, p4type);
}
"
2257,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&v, &pMem->u.r, sizeof(v));",120,1,"
      ((void) (0));
      memcpy(&v, &pMem->u.r, sizeof(v));
      ;
    }else{
"
2258,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"if( len>0 ) memcpy(buf, pMem->z, len);",120,1,"                                                            ;
    len = pMem->n;
    if( len>0 ) memcpy(buf, pMem->z, len);
    return len;
  }
"
2259,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&pMem->u.r, &x, sizeof(x));",120,1,"    ((void) (0));
    ;
    memcpy(&pMem->u.r, &x, sizeof(x));
    pMem->flags = sqlite3IsNaN(pMem->u.r) ? 0x0001 : 0x0008;
  }
"
2261,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(pNew, pOrig, __builtin_offsetof (Mem, zMalloc));",120,1,"  if( pNew==0 ) return 0;
  memset(pNew, 0, sizeof(*pNew));
  memcpy(pNew, pOrig, __builtin_offsetof (Mem, zMalloc));
  pNew->flags &= ~0x0400;
  pNew->db = 0;
"
2265,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(pOut->z, pIn2->z, pIn2->n);",120,1,"{

    memcpy(pOut->z, pIn2->z, pIn2->n);
  }
  memcpy(&pOut->z[pIn2->n], pIn1->z, pIn1->n);
"
2266,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&pOut->z[pIn2->n], pIn1->z, pIn1->n);",120,1,"    memcpy(pOut->z, pIn2->z, pIn2->n);
  }
  memcpy(&pOut->z[pIn2->n], pIn1->z, pIn1->n);
  pOut->z[nByte]=0;
  pOut->z[nByte+1] = 0;
"
2267,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&uA, &iA, sizeof(uA));",120,1,"      iA = (iA>=0 || op==87) ? 0 : -1;
    }else{
      memcpy(&uA, &iA, sizeof(uA));
      if( op==87 )
{
"
2268,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&iA, &uA, sizeof(iA));",120,1,"        if( iA<0 ) uA |= ((((u64)0xffffffff)<<32)|0xffffffff) << (64-iB);
      }
      memcpy(&iA, &uA, sizeof(iA));
    }
  }
"
2270,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(pDest->z, zData, len);",120,1,"        pDest->z = pDest->zMalloc;
      }
      memcpy(pDest->z, zData, len);
      pDest->z[len] = 0;
      pDest->z[len+1] = 0;
"
2271,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(pNew->zName, zName, nName+1);",120,1,"
        pNew->zName = (char *)&pNew[1];
        memcpy(pNew->zName, zName, nName+1);


"
2277,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(p->aAlloc, &p->aBuffer[iBuf], nAvail);",120,1,"

    memcpy(p->aAlloc, &p->aBuffer[iBuf], nAvail);
    p->iReadOff += nAvail;
    nRem = nByte - nAvail;
"
2278,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&p->aAlloc[nByte - nRem], aNext, nCopy);",120,1,"      if( rc!=0 ) return rc;
      ((void) (0));
      memcpy(&p->aAlloc[nByte - nRem], aNext, nCopy);
      nRem -= nCopy;
    }
"
2279,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(pKeyInfo, pCsr->pKeyInfo, szKeyInfo);",120,1,"  }else{
    pSorter->pKeyInfo = pKeyInfo = (KeyInfo*)((u8*)pSorter + sz);
    memcpy(pKeyInfo, pCsr->pKeyInfo, szKeyInfo);
    pKeyInfo->db = 0;
    if( nField && nWorker==0 )
"
2282,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&p->aBuffer[p->iBufEnd], &pData[nData-nRem], nCopy);",120,1,"    }

    memcpy(&p->aBuffer[p->iBufEnd], &pData[nData-nRem], nCopy);
    p->iBufEnd += nCopy;
    if( p->iBufEnd==p->nBuffer )
"
2285,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(((void*)((SorterRecord*)(pNew) + 1)), pVal->z, pVal->n);",120,1,"  }

  memcpy(((void*)((SorterRecord*)(pNew) + 1)), pVal->z, pVal->n);
  pNew->nVal = pVal->n;
  pSorter->list.pList = pNew;
"
2286,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(pOut->z, pKey, nKey);",120,1,"  pOut->n = nKey;
  ((pOut)->flags = ((pOut)->flags&~(0x81ff|0x4000))|0x0010);
  memcpy(pOut->z, pKey, nKey);

  return 0;
"
2287,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(zOut, (u8*)pChunk->zChunk + iChunkOffset, nCopy);",120,1,"    int iSpace = p->nChunkSize - iChunkOffset;
    int nCopy = ((nRead)<((p->nChunkSize - iChunkOffset))?(nRead):((p->nChunkSize - iChunkOffset)));
    memcpy(zOut, (u8*)pChunk->zChunk + iChunkOffset, nCopy);
    zOut += nCopy;
    nRead -= iSpace;
"
2289,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy((u8*)p->endpoint.pChunk->zChunk + iChunkOffset, zWrite, iSpace);",120,1,"        }

        memcpy((u8*)p->endpoint.pChunk->zChunk + iChunkOffset, zWrite, iSpace);
        zWrite += iSpace;
        nWrite -= iSpace;
"
2292,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(pExpr, pDup, sizeof(*pExpr));",120,1,"  (pExpr)->flags|=(0x008000);
  sqlite3ExprDelete(db, pExpr);
  memcpy(pExpr, pDup, sizeof(*pExpr));
  if( !(((pExpr)->flags&(0x000400))!=0) && pExpr->u.zToken!=0 )
{
"
2299,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"if( pToken->n ) memcpy(pNew->u.zToken, pToken->z, pToken->n);",120,1,"        pNew->u.zToken = (char*)&pNew[1];
        ((void) (0));
        if( pToken->n ) memcpy(pNew->u.zToken, pToken->z, pToken->n);
        pNew->u.zToken[pToken->n] = 0;
        if( dequote && nExtra>=3
"
2301,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(zAlloc, p, nNewSize);",120,1,"
        ((void) (0));
        memcpy(zAlloc, p, nNewSize);
      }else{
        u32 nSize = (u32)exprStructSize(p);
"
2302,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(zAlloc, p, nSize);",120,1,"      }else{
        u32 nSize = (u32)exprStructSize(p);
        memcpy(zAlloc, p, nSize);
        if( nSize<sizeof(Expr) )
{
"
2304,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(zToken, p->u.zToken, nToken);",120,1,"
        char *zToken = pNew->u.zToken = (char*)&zAlloc[nNewSize];
        memcpy(zToken, p->u.zToken, nToken);
      }

"
2309,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(pNew->aCol, pTab->aCol, sizeof(Column)*pNew->nCol);",120,1,"    goto exit_begin_add_column;
  }
  memcpy(pNew->aCol, pTab->aCol, sizeof(Column)*pNew->nCol);
  for(i=0; i<pNew->nCol; i++)
{
"
2310,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(aNew, db->aDb, sizeof(db->aDb[0])*2);",120,1,"    aNew = sqlite3DbMallocRawNN(db, sizeof(db->aDb[0])*3 );
    if( aNew==0 ) return;
    memcpy(aNew, db->aDb, sizeof(db->aDb[0])*2);
  }else{
    aNew = sqlite3DbRealloc(db, db->aDb, sizeof(db->aDb[0])*(db->nDb+1) );
"
2313,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(saveBuf, &pParse->nVar, (sizeof(Parse) - __builtin_offsetof (Parse, nVar)));",120,1,"  }
  pParse->nested++;
  memcpy(saveBuf, &pParse->nVar, (sizeof(Parse) - __builtin_offsetof (Parse, nVar)));
  memset(&pParse->nVar, 0, (sizeof(Parse) - __builtin_offsetof (Parse, nVar)));
  sqlite3RunParser(pParse, zSql, &zErrMsg);
"
2315,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&pParse->nVar, saveBuf, (sizeof(Parse) - __builtin_offsetof (Parse, nVar)));",120,1,"  sqlite3DbFree(db, zErrMsg);
  sqlite3DbFree(db, zSql);
  memcpy(&pParse->nVar, saveBuf, (sizeof(Parse) - __builtin_offsetof (Parse, nVar)));
  pParse->nested--;
}
"
2316,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(db->aDbStatic, db->aDb, 2*sizeof(db->aDb[0]));",120,1,"{

    memcpy(db->aDbStatic, db->aDb, 2*sizeof(db->aDb[0]));
    sqlite3DbFree(db, db->aDb);
    db->aDb = db->aDbStatic;
"
2317,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(z, pName->z, pName->n);",120,1,"  z = sqlite3DbMallocRaw(db, pName->n + pType->n + 2);
  if( z==0 ) return;
  memcpy(z, pName->z, pName->n);
  z[pName->n] = 0;
  sqlite3Dequote(z);
"
2319,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(zType, pType->z, pType->n);",120,1,"  }else{
    zType = z + sqlite3Strlen30(z) + 1;
    memcpy(zType, pType->z, pType->n);
    zType[pType->n] = 0;
    pCol->affinity = sqlite3AffinityType(zType, &pCol->szEst);
"
2321,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&zStmt[k], zType, len);",120,1,"    ((void) (0))
                                                              ;
    memcpy(&zStmt[k], zType, len);
    k += len;
    ((void) (0));
"
2322,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(zExtra, pIdx->azColl, sizeof(char*)*pIdx->nColumn);",120,1,"  zExtra = sqlite3DbMallocZero(db, nByte);
  if( zExtra==0 ) return 7;
  memcpy(zExtra, pIdx->azColl, sizeof(char*)*pIdx->nColumn);
  pIdx->azColl = (const char**)zExtra;
  zExtra += sizeof(char*)*N;
"
2323,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(zExtra, pIdx->aiColumn, sizeof(i16)*pIdx->nColumn);",120,1,"  pIdx->azColl = (const char**)zExtra;
  zExtra += sizeof(char*)*N;
  memcpy(zExtra, pIdx->aiColumn, sizeof(i16)*pIdx->nColumn);
  pIdx->aiColumn = (i16*)zExtra;
  zExtra += sizeof(i16)*N;
"
2324,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(zExtra, pIdx->aSortOrder, pIdx->nColumn);",120,1,"  pIdx->aiColumn = (i16*)zExtra;
  zExtra += sizeof(i16)*N;
  memcpy(zExtra, pIdx->aSortOrder, pIdx->nColumn);
  pIdx->aSortOrder = (u8*)zExtra;
  pIdx->nColumn = N;
"
2325,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(z, pTo->z, pTo->n);",120,1,"  z = (char*)&pFKey->aCol[nCol];
  pFKey->zTo = z;
  memcpy(z, pTo->z, pTo->n);
  z[pTo->n] = 0;
  sqlite3Dequote(z);
"
2326,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(z, pToCol->a[i].zName, n);",120,1,"      int n = sqlite3Strlen30(pToCol->a[i].zName);
      pFKey->aCol[i].zCol = z;
      memcpy(z, pToCol->a[i].zName, n);
      z[n] = 0;
      z += n+1;
"
2327,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(pIndex->zName, zName, nName+1);",120,1,"  pIndex->zName = zExtra;
  zExtra += nName + 1;
  memcpy(pIndex->zName, zName, nName+1);
  pIndex->pTable = pTab;
  pIndex->onError = (u8)onError;
"
2328,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(zExtra, zColl, nColl);",120,1,"      nColl = sqlite3Strlen30(zColl) + 1;
      ((void) (0));
      memcpy(zExtra, zColl, nColl);
      zColl = zExtra;
      zExtra += nColl;
"
2329,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&a[1], aVal, nCopy*sizeof(LogEst));",120,1,"

  memcpy(&a[1], aVal, nCopy*sizeof(LogEst));
  for(i=nCopy+1; i<=pIdx->nKeyCol; i++)
{
"
2332,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(pColl, pColl2, sizeof(CollSeq));",120,1,"{

      memcpy(pColl, pColl2, sizeof(CollSeq));
      pColl->xDel = 0;
      return 0;
"
2333,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(pColl[0].zName, zName, nName);",120,1,"      pColl[2].zName = (char*)&pColl[3];
      pColl[2].enc = 3;
      memcpy(pColl[0].zName, zName, nName);
      pColl[0].zName[nName] = 0;
      pDel = sqlite3HashInsert(&db->aCollSeq, pColl[0].zName, pColl);
"
2334,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy((char*)&pBest[1], zName, nName+1);",120,1,"    pBest->nArg = (u16)nArg;
    pBest->funcFlags = enc;
    memcpy((char*)&pBest[1], zName, nName+1);
    pOther = (FuncDef*)sqlite3HashInsert(&db->aFunc, pBest->zName, pBest);
    if( pOther==pBest )
"
2338,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&zOut[j], zRep, nRep);",120,1,"        return;
      }
      memcpy(&zOut[j], zRep, nRep);
      j += nRep;
      i += nPattern-1;
"
2339,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&zOut[j], &zStr[i], nStr-i);",120,1,"  }
  ((void) (0));
  memcpy(&zOut[j], &zStr[i], nStr-i);
  j += nStr - i;
  ((void) (0));
"
2340,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(aWc, pDef->pUserData, 3);",120,1,"

  memcpy(aWc, pDef->pUserData, 3);
  ((void) (0));
  ((void) (0));
"
2342,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy((char *)pStep->zTarget, zFrom, nFrom);",120,1,"      pStep = pTrigger->step_list = (TriggerStep *)&pTrigger[1];
      pStep->zTarget = (char *)&pStep[1];
      memcpy((char *)pStep->zTarget, zFrom, nFrom);

      pStep->pWhere = sqlite3ExprDup(db, pWhere, 0x0001);
"
2346,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(*pzErrMsg, sqlite3_errmsg(db), nErrMsg);",120,1,"{

      memcpy(*pzErrMsg, sqlite3_errmsg(db), nErrMsg);
    }else{
      rc = 7;
"
2347,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(zAltEntry, ""sqlite3_"", 8);",120,1,"      return 7;
    }
    memcpy(zAltEntry, ""sqlite3_"", 8);
    for(iFile=ncFile-1; iFile>=0 && zFile[iFile]!='/'; iFile--)
{
"
2348,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(zAltEntry+iEntry, ""_init"", 6);",120,1,"      }
    }
    memcpy(zAltEntry+iEntry, ""_init"", 6);
    zEntry = zAltEntry;
    xInit = (int(*)(sqlite3*,char**,const sqlite3_api_routines*))
"
2349,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(aHandle, db->aExtension, sizeof(handle)*db->nExtension);",120,1,"{

    memcpy(aHandle, db->aExtension, sizeof(handle)*db->nExtension);
  }
  sqlite3DbFree(db, db->aExtension);
"
2360,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(z, argv[i], n);",120,1,"        z = sqlite3_malloc64( n );
        if( z==0 ) goto malloc_failed;
        memcpy(z, argv[i], n);
      }
      p->azResult[p->nData++] = z;
"
2368,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(zCopy, zName, nName+1);",120,1,"      Module *pDel;
      char *zCopy = (char *)(&pMod[1]);
      memcpy(zCopy, zName, nName+1);
      pMod->zName = zCopy;
      pMod->pModule = pModule;
"
2371,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy((char*)&pNew[1], pDef->zName, sqlite3Strlen30(pDef->zName)+1);",120,1,"  *pNew = *pDef;
  pNew->zName = (const char*)&pNew[1];
  memcpy((char*)&pNew[1], pDef->zName, sqlite3Strlen30(pDef->zName)+1);
  pNew->xSFunc = xSFunc;
  pNew->pUserData = pArg;
"
2372,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(pTab->zName, pMod->zName, nName);",120,1,"  pMod->pEpoTab = pTab;
  pTab->zName = (char*)&pTab[1];
  memcpy(pTab->zName, pMod->zName, nName);
  pTab->nRef = 1;
  pTab->pSchema = db->aDb[0].pSchema;
"
2373,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(pOrTab->a, pTabItem, sizeof(*pTabItem));",120,1,"      pOrTab->nAlloc = (u8)(nNotReady + 1);
      pOrTab->nSrc = pOrTab->nAlloc;
      memcpy(pOrTab->a, pTabItem, sizeof(*pTabItem));
      origSrc = pWInfo->pTabList->a;
      for(k=1; k<=nNotReady; k++)
"
2374,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(&pOrTab->a[k], &origSrc[pLevel[k].iFrom], sizeof(pOrTab->a[k]));",120,1,"{

        memcpy(&pOrTab->a[k], &origSrc[pLevel[k].iFrom], sizeof(pOrTab->a[k]));
      }
    }else{
"
2375,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(pWC->a, pOld, sizeof(pWC->a[0])*pWC->nTerm);",120,1,"      return 0;
    }
    memcpy(pWC->a, pOld, sizeof(pWC->a[0])*pWC->nTerm);
    if( pOld!=pWC->aStatic )
{
"
2379,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(aiCur, pWInfo->aiCurOnePass, sizeof(int)*2);",120,1,"{

  memcpy(aiCur, pWInfo->aiCurOnePass, sizeof(int)*2);


"
2380,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(pDest->a, pSrc->a, pDest->n*sizeof(pDest->a[0]));",120,1,"
  pDest->n = pSrc->n;
  memcpy(pDest->a, pSrc->a, pDest->n*sizeof(pDest->a[0]));
}
# 123642 ""sqlite3.c""
"
2381,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(paNew, p->aLTerm, sizeof(p->aLTerm[0])*p->nLSlot);",120,1,"  paNew = sqlite3DbMallocRawNN(db, sizeof(p->aLTerm[0])*n);
  if( paNew==0 ) return 7;
  memcpy(paNew, p->aLTerm, sizeof(p->aLTerm[0])*p->nLSlot);
  if( p->aLTerm!=p->aLTermSpace ) sqlite3DbFree(db, p->aLTerm);
  p->aLTerm = paNew;
"
2383,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(pTo, pFrom, __builtin_offsetof (WhereLoop, nLSlot));",120,1,"    return 7;
  }
  memcpy(pTo, pFrom, __builtin_offsetof (WhereLoop, nLSlot));
  memcpy(pTo->aLTerm, pFrom->aLTerm, pTo->nLTerm*sizeof(pTo->aLTerm[0]));
  if( pFrom->wsFlags & 0x00000400 )
"
2384,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(pTo->aLTerm, pFrom->aLTerm, pTo->nLTerm*sizeof(pTo->aLTerm[0]));",120,1,"  }
  memcpy(pTo, pFrom, __builtin_offsetof (WhereLoop, nLSlot));
  memcpy(pTo->aLTerm, pFrom->aLTerm, pTo->nLTerm*sizeof(pTo->aLTerm[0]));
  if( pFrom->wsFlags & 0x00000400 )
{
"
2391,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(pTo->aLoop, pFrom->aLoop, sizeof(WhereLoop*)*iLoop);",120,1,"        pTo->rUnsorted = rUnsorted;
        pTo->isOrdered = isOrdered;
        memcpy(pTo->aLoop, pFrom->aLoop, sizeof(WhereLoop*)*iLoop);
        pTo->aLoop[iLoop] = pWLoop;
        if( nTo>=mxChoice )
"
2394,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(zFile, zUri, nUri);",120,1,"    zFile = sqlite3_malloc64(nUri+2);
    if( !zFile ) return 7;
    memcpy(zFile, zUri, nUri);
    zFile[nUri] = '\0';
    zFile[nUri+1] = '\0';
"
2395,2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\sqlite3.cpp.c,"memcpy(db->aLimit, aHardLimit, sizeof(db->aLimit));",120,1,"
  ((void) (0));
  memcpy(db->aLimit, aHardLimit, sizeof(db->aLimit));
  db->aLimit[11] = 0;
  db->autoCommit = 1;
"
2397,2021\deneyapkart-arduino-core\cores\esp32\cbuf.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\cores\esp32\cbuf.cpp,"memcpy(dst, _begin, top_size);",120,1,"    if(_end < _begin && size_to_read > (size_t) (_bufend - _begin)) {
        size_t top_size = _bufend - _begin;
        memcpy(dst, _begin, top_size);
        begin = _buf;
        size_to_read -= top_size;
"
2398,2021\deneyapkart-arduino-core\cores\esp32\cbuf.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\cores\esp32\cbuf.cpp,"memcpy(dst, begin, size_to_read);",120,1,"        dst += top_size;
    }
    memcpy(dst, begin, size_to_read);
    return size_read;
}
"
2400,2021\deneyapkart-arduino-core\cores\esp32\cbuf.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\cores\esp32\cbuf.cpp,"memcpy(dst, _begin, size_to_read);",120,1,"        dst += top_size;
    }
    memcpy(dst, _begin, size_to_read);
    _begin = wrap_if_bufend(_begin + size_to_read);
    return size_read;
"
2401,2021\deneyapkart-arduino-core\cores\esp32\cbuf.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\cores\esp32\cbuf.cpp,"memcpy(_end, src, top_size);",120,1,"    if(_end >= _begin && size_to_write > (size_t) (_bufend - _end)) {
        size_t top_size = _bufend - _end;
        memcpy(_end, src, top_size);
        _end = _buf;
        size_to_write -= top_size;
"
2402,2021\deneyapkart-arduino-core\cores\esp32\cbuf.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\cores\esp32\cbuf.cpp,"memcpy(_end, src, size_to_write);",120,1,"        src += top_size;
    }
    memcpy(_end, src, size_to_write);
    _end = wrap_if_bufend(_end + size_to_write);
    return size_written;
"
2418,2021\deneyapkart-arduino-core\cores\esp32\esp32-hal-spi.c,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\cores\esp32\esp32-hal-spi.c,"memcpy(bytesBuf, data, bytes);",120,1,"
    if(data) {
        memcpy(bytesBuf, data, bytes);//copy data to buffer
    } else {
        memset(bytesBuf, 0xFF, bytes);
"
2420,2021\deneyapkart-arduino-core\cores\esp32\esp32-hal-spi.c,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\cores\esp32\esp32-hal-spi.c,"memcpy(out, bytesBuf, bytes);",120,1,"            wordsBuf[i] = spi->dev->data_buf[i];//copy spi fifo to buffer
        }
        memcpy(out, bytesBuf, bytes);//copy buffer to output
    }
}
"
2421,2021\deneyapkart-arduino-core\cores\esp32\esp32-hal-spi.c,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\cores\esp32\esp32-hal-spi.c,"memcpy(&bestReg, &reg, sizeof(bestReg));",120,1,"            calFreq = ClkRegToFreq(&reg);
            if(calFreq == (int32_t) freq) {
                memcpy(&bestReg, &reg, sizeof(bestReg));
                break;
            } else if(calFreq < (int32_t) freq) {
"
2428,2021\deneyapkart-arduino-core\cores\esp32\IPAddress.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\cores\esp32\IPAddress.cpp,"memcpy(_address.bytes, address, sizeof(_address.bytes));",120,1,"IPAddress::IPAddress(const uint8_t *address)
{
    memcpy(_address.bytes, address, sizeof(_address.bytes));
}

"
2433,2021\deneyapkart-arduino-core\cores\esp32\IPv6Address.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\cores\esp32\IPv6Address.cpp,"memcpy(_address.bytes, (const uint8_t *)address, sizeof(_address.bytes));",120,1,"IPv6Address::IPv6Address(const uint32_t *address)
{
    memcpy(_address.bytes, (const uint8_t *)address, sizeof(_address.bytes));
}

"
2437,2021\deneyapkart-arduino-core\cores\esp32\MD5Builder.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\cores\esp32\MD5Builder.cpp,"memcpy(output, _buf, 16);",120,1,"void MD5Builder::getBytes(uint8_t * output)
{
    memcpy(output, _buf, 16);
}

"
2441,2021\deneyapkart-arduino-core\cores\esp32\StreamString.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\cores\esp32\StreamString.cpp,"memcpy((void *) (wbuffer() + len()), (const void *) data, size);",120,1,"        const unsigned int newlen = length() + size;
        if(reserve(newlen + 1)) {
            memcpy((void *) (wbuffer() + len()), (const void *) data, size);
            setLen(newlen);
            *(wbuffer() + newlen) = 0x00; // add null for string end
"
2444,2021\deneyapkart-arduino-core\cores\esp32\WString.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\cores\esp32\WString.cpp,"memcpy(temp, buffer(), maxStrLen);",120,1,"            // Using bufptr, need to shrink into sso.buff
            char temp[sizeof(sso.buff)];
            memcpy(temp, buffer(), maxStrLen);
            free(wbuffer());
            uint16_t oldLen = len();
"
2445,2021\deneyapkart-arduino-core\cores\esp32\WString.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\cores\esp32\WString.cpp,"memcpy(wbuffer(), temp, maxStrLen);",120,1,"            setSSO(true);
	    setLen(oldLen);
            memcpy(wbuffer(), temp, maxStrLen);
            return 1;
        }
"
2500,2021\deneyapkart-arduino-core\libraries\07_BLE\src\BLEAddress.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\07_BLE\src\BLEAddress.cpp,"memcpy(m_address, address, ESP_BD_ADDR_LEN);",120,1," */
BLEAddress::BLEAddress(esp_bd_addr_t address) {
	memcpy(m_address, address, ESP_BD_ADDR_LEN);
} // BLEAddress

"
2501,2021\deneyapkart-arduino-core\libraries\07_BLE\src\BLEAdvertising.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\07_BLE\src\BLEAdvertising.cpp,"memcpy(p, serviceUUID128.getNative()->uuid.uuid128, 16);",120,1,"			log_d(""- advertising service: %s"", m_serviceUUIDs[i].toString().c_str());
			BLEUUID serviceUUID128 = m_serviceUUIDs[i].to128();
			memcpy(p, serviceUUID128.getNative()->uuid.uuid128, 16);
			p += 16;
		}
"
2502,2021\deneyapkart-arduino-core\libraries\07_BLE\src\BLEAdvertising.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\07_BLE\src\BLEAdvertising.cpp,"memcpy(&m_scanRespData, &m_advData, sizeof(esp_ble_adv_data_t));",120,1,"	if (!m_customScanResponseData && m_scanResp) {
		// Set the configuration for scan response.
		memcpy(&m_scanRespData, &m_advData, sizeof(esp_ble_adv_data_t)); // Copy the content of m_advData.
		m_scanRespData.set_scan_rsp = true; // Define this struct as scan response data
		m_scanRespData.include_name = true; // Caution: This may lead to a crash if the device name has more than 29 characters
"
2504,2021\deneyapkart-arduino-core\libraries\07_BLE\src\BLEBeacon.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\07_BLE\src\BLEBeacon.cpp,"memcpy(&m_beaconData, data.data(), sizeof(m_beaconData));",120,1,"		return;
	}
	memcpy(&m_beaconData, data.data(), sizeof(m_beaconData));
} // setData

"
2505,2021\deneyapkart-arduino-core\libraries\07_BLE\src\BLEBeacon.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\07_BLE\src\BLEBeacon.cpp,"memcpy(m_beaconData.proximityUUID, uuid.getNative()->uuid.uuid128, 16);",120,1,"void BLEBeacon::setProximityUUID(BLEUUID uuid) {
	uuid = uuid.to128();
	memcpy(m_beaconData.proximityUUID, uuid.getNative()->uuid.uuid128, 16);
} // setProximityUUID

"
2506,2021\deneyapkart-arduino-core\libraries\07_BLE\src\BLECharacteristic.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\07_BLE\src\BLECharacteristic.cpp,"memcpy(rsp.attr_value.value, param->write.value, param->write.len);",120,1,"					rsp.attr_value.offset   = param->write.offset;
					rsp.attr_value.auth_req = ESP_GATT_AUTH_REQ_NONE;
					memcpy(rsp.attr_value.value, param->write.value, param->write.len);

					esp_err_t errRc = ::esp_ble_gatts_send_response(
"
2507,2021\deneyapkart-arduino-core\libraries\07_BLE\src\BLECharacteristic.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\07_BLE\src\BLECharacteristic.cpp,"memcpy(rsp.attr_value.value, value.data() + rsp.attr_value.offset, rsp.attr_value.len);",120,1,"							rsp.attr_value.len    = value.length() - m_value.getReadOffset();
							rsp.attr_value.offset = m_value.getReadOffset();
							memcpy(rsp.attr_value.value, value.data() + rsp.attr_value.offset, rsp.attr_value.len);
							m_value.setReadOffset(0);
						} else {
"
2509,2021\deneyapkart-arduino-core\libraries\07_BLE\src\BLECharacteristic.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\07_BLE\src\BLECharacteristic.cpp,"memcpy(rsp.attr_value.value, value.data(), rsp.attr_value.len);",120,1,"							rsp.attr_value.len    = maxOffset;
							rsp.attr_value.offset = 0;
							memcpy(rsp.attr_value.value, value.data(), rsp.attr_value.len);
						} else {
							// Will fit in a single packet with no callbacks required.
"
2511,2021\deneyapkart-arduino-core\libraries\07_BLE\src\BLEDescriptor.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\07_BLE\src\BLEDescriptor.cpp,"memcpy(m_value.attr_value, data, length);",120,1,"	}
	m_value.attr_len = length;
	memcpy(m_value.attr_value, data, length);
} // setValue

"
2512,2021\deneyapkart-arduino-core\libraries\07_BLE\src\BLEDevice.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\07_BLE\src\BLEDevice.cpp,"memcpy(addr, bdAddr, sizeof(addr));",120,1,"	const uint8_t* bdAddr = esp_bt_dev_get_address();
	esp_bd_addr_t addr;
	memcpy(addr, bdAddr, sizeof(addr));
	return BLEAddress(addr);
} // getAddress
"
2513,2021\deneyapkart-arduino-core\libraries\07_BLE\src\BLEEddystoneTLM.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\07_BLE\src\BLEEddystoneTLM.cpp,"memcpy(&m_eddystoneData, data.data(), data.length());",120,1,"		return;
	}
  memcpy(&m_eddystoneData, data.data(), data.length());
} // setData

"
2518,2021\deneyapkart-arduino-core\libraries\07_BLE\src\BLEEddystoneURL.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\07_BLE\src\BLEEddystoneURL.cpp,"memcpy(m_eddystoneData.url, url.data(), url.length());",120,1,"  }
  memset(m_eddystoneData.url, 0, sizeof(m_eddystoneData.url));
  memcpy(m_eddystoneData.url, url.data(), url.length());
  lengthURL = url.length();
} // setURL
"
2519,2021\deneyapkart-arduino-core\libraries\07_BLE\src\BLERemoteCharacteristic.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\07_BLE\src\BLERemoteCharacteristic.cpp,"memcpy(m_rawData, evtParam->read.value, evtParam->read.value_len);",120,1,"				if(m_rawData != nullptr) free(m_rawData);
				m_rawData = (uint8_t*) calloc(evtParam->read.value_len, sizeof(uint8_t));
				memcpy(m_rawData, evtParam->read.value, evtParam->read.value_len);
			} else {
				m_value = """";
"
2521,2021\deneyapkart-arduino-core\libraries\07_BLE\src\BLEServer.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\07_BLE\src\BLEServer.cpp,"memcpy(&addr, address.getNative(), 6);",120,1,"bool BLEServer::connect(BLEAddress address) {
	esp_bd_addr_t addr;
	memcpy(&addr, address.getNative(), 6);
	// Perform the open connection request against the target BLE Server.
	m_semaphoreOpenEvt.take(""connect"");
"
2522,2021\deneyapkart-arduino-core\libraries\07_BLE\src\BLEServer.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\07_BLE\src\BLEServer.cpp,"memcpy(conn_params.bda, remote_bda, sizeof(esp_bd_addr_t));",120,1,"void BLEServer::updateConnParams(esp_bd_addr_t remote_bda, uint16_t minInterval, uint16_t maxInterval, uint16_t latency, uint16_t timeout) {
	esp_ble_conn_update_params_t conn_params;
	memcpy(conn_params.bda, remote_bda, sizeof(esp_bd_addr_t));
	conn_params.latency = latency;
	conn_params.max_int = maxInterval;    // max_int = 0x20*1.25ms = 40ms
"
2524,2021\deneyapkart-arduino-core\libraries\07_BLE\src\BLEUUID.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\07_BLE\src\BLEUUID.cpp,"memcpy(m_uuid.uuid.uuid128, pData, 16);",120,1,"		memrcpy(m_uuid.uuid.uuid128, pData, 16);
	} else {
		memcpy(m_uuid.uuid.uuid128, pData, 16);
	}
	m_valueSet = true;
"
2526,2021\deneyapkart-arduino-core\libraries\07_BLE\src\BluetoothSerial.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\07_BLE\src\BluetoothSerial.cpp,"memcpy(bdname, rmt_bdname, rmt_bdname_len);",120,1,"    if (rmt_bdname) {
        rmt_bdname_len = rmt_bdname_len > ESP_BT_GAP_MAX_BDNAME_LEN ? ESP_BT_GAP_MAX_BDNAME_LEN : rmt_bdname_len;
        memcpy(bdname, rmt_bdname, rmt_bdname_len);
        bdname[rmt_bdname_len] = 0;
        *bdname_len = rmt_bdname_len;
"
2527,2021\deneyapkart-arduino-core\libraries\07_BLE\src\BluetoothSerial.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\07_BLE\src\BluetoothSerial.cpp,"memcpy(packet->data, data, len);",120,1,"    }
    packet->len = len;
    memcpy(packet->data, data, len);
    if (!_spp_tx_queue || xQueueSend(_spp_tx_queue, &packet, SPP_TX_QUEUE_TIMEOUT) != pdPASS) {
        log_e(""SPP TX Queue Send Failed!"");
"
2528,2021\deneyapkart-arduino-core\libraries\07_BLE\src\BluetoothSerial.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\07_BLE\src\BluetoothSerial.cpp,"memcpy(_spp_tx_buffer+_spp_tx_buffer_len, packet->data, packet->len);",120,1,"        if(_spp_tx_queue && xQueueReceive(_spp_tx_queue, &packet, portMAX_DELAY) == pdTRUE && packet){
            if(packet->len <= (SPP_TX_MAX - _spp_tx_buffer_len)){
                memcpy(_spp_tx_buffer+_spp_tx_buffer_len, packet->data, packet->len);
                _spp_tx_buffer_len+=packet->len;
                free(packet);
"
2529,2021\deneyapkart-arduino-core\libraries\07_BLE\src\BluetoothSerial.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\07_BLE\src\BluetoothSerial.cpp,"memcpy(_spp_tx_buffer+_spp_tx_buffer_len, data, to_send);",120,1,"                data = packet->data;
                to_send = SPP_TX_MAX - _spp_tx_buffer_len;
                memcpy(_spp_tx_buffer+_spp_tx_buffer_len, data, to_send);
                _spp_tx_buffer_len = SPP_TX_MAX;
                data += to_send;
"
2530,2021\deneyapkart-arduino-core\libraries\07_BLE\src\BluetoothSerial.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\07_BLE\src\BluetoothSerial.cpp,"memcpy(_spp_tx_buffer, data, SPP_TX_MAX);",120,1,"                }
                while(len >= SPP_TX_MAX){
                    memcpy(_spp_tx_buffer, data, SPP_TX_MAX);
                    _spp_tx_buffer_len = SPP_TX_MAX;
                    data += SPP_TX_MAX;
"
2531,2021\deneyapkart-arduino-core\libraries\07_BLE\src\BluetoothSerial.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\07_BLE\src\BluetoothSerial.cpp,"memcpy(_spp_tx_buffer, data, len);",120,1,"                }
                if(len){
                    memcpy(_spp_tx_buffer, data, len);
                    _spp_tx_buffer_len += len;
                    if(uxQueueMessagesWaiting(_spp_tx_queue) == 0){
"
2532,2021\deneyapkart-arduino-core\libraries\07_BLE\src\BluetoothSerial.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\07_BLE\src\BluetoothSerial.cpp,"memcpy(_peer_bd_addr, param->disc_res.bda, ESP_BD_ADDR_LEN);",120,1,"                                log_v(""ESP_BT_GAP_DISC_RES_EVT : SPP_START_DISCOVERY_EIR : %s"", peer_bdname, peer_bdname_len);
                                _isRemoteAddressSet = true;
                                memcpy(_peer_bd_addr, param->disc_res.bda, ESP_BD_ADDR_LEN);
                                esp_bt_gap_cancel_discovery();
                                esp_spp_start_discovery(_peer_bd_addr);
"
2533,2021\deneyapkart-arduino-core\libraries\07_BLE\src\BluetoothSerial.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\07_BLE\src\BluetoothSerial.cpp,"memcpy(peer_bdname, param->disc_res.prop[i].val, peer_bdname_len);",120,1,"                    case ESP_BT_GAP_DEV_PROP_BDNAME:
                        peer_bdname_len = param->disc_res.prop[i].len;
                        memcpy(peer_bdname, param->disc_res.prop[i].val, peer_bdname_len);
                        peer_bdname_len--; // len includes 0 terminator
                        log_v(""ESP_BT_GAP_DISC_RES_EVT : BDNAME :  %s : %d"", peer_bdname, peer_bdname_len);
"
2536,2021\deneyapkart-arduino-core\libraries\07_BLE\src\BluetoothSerial.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\07_BLE\src\BluetoothSerial.cpp,"memcpy(pin_code, ""1234"", 4);",120,1,"                log_i(""Input pin code: 1234"");
                esp_bt_pin_code_t pin_code;
                memcpy(pin_code, ""1234"", 4);
                esp_bt_gap_pin_reply(param->pin_req.bda, true, 4, pin_code);
            }
"
2537,2021\deneyapkart-arduino-core\libraries\07_BLE\src\BluetoothSerial.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\07_BLE\src\BluetoothSerial.cpp,"memcpy(current_bd_addr, param->cfm_req.bda, sizeof(esp_bd_addr_t));",120,1,"            log_i(""ESP_BT_GAP_CFM_REQ_EVT Please compare the numeric value: %d"", param->cfm_req.num_val);
            if (confirm_request_callback) {
                memcpy(current_bd_addr, param->cfm_req.bda, sizeof(esp_bd_addr_t));
                confirm_request_callback(param->cfm_req.num_val);
            }
"
2538,2021\deneyapkart-arduino-core\libraries\07_BLE\src\BluetoothSerial.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\07_BLE\src\BluetoothSerial.cpp,"memcpy(_pin_code, pin, _pin_len);",120,1,"    } else if (!isEmpty){
        _pin_len = strlen(pin);
        memcpy(_pin_code, pin, _pin_len);
    } else {
        _pin_len = 0; // resetting pin to none (default)
"
2539,2021\deneyapkart-arduino-core\libraries\07_BLE\src\BluetoothSerial.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\07_BLE\src\BluetoothSerial.cpp,"memcpy(_peer_bd_addr, remoteAddress, ESP_BD_ADDR_LEN);",120,1,"    _remote_name[0] = 0;
    _isRemoteAddressSet = true;
    memcpy(_peer_bd_addr, remoteAddress, ESP_BD_ADDR_LEN);
    log_i(""master : remoteAddress"");
    if (esp_spp_start_discovery(_peer_bd_addr) == ESP_OK) {
"
2550,2021\deneyapkart-arduino-core\libraries\08_WiFi\src\ETH.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\08_WiFi\src\ETH.cpp,"memcpy(&eth_config, &config, sizeof(eth_config_t));",120,1,"    if(type == ETH_PHY_LAN8720){
        eth_config_t config = phy_lan8720_default_ethernet_config;
        memcpy(&eth_config, &config, sizeof(eth_config_t));
    } else if(type == ETH_PHY_TLK110){
        eth_config_t config = phy_tlk110_default_ethernet_config;
"
2554,2021\deneyapkart-arduino-core\libraries\08_WiFi\src\WiFiClient.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\08_WiFi\src\WiFiClient.cpp,"memcpy(dst, _buffer + _pos, len);",120,1,"                *dst = _buffer[_pos];
            } else {
                memcpy(dst, _buffer + _pos, len);
            }
            _pos += len;
"
2555,2021\deneyapkart-arduino-core\libraries\08_WiFi\src\WiFiClient.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\08_WiFi\src\WiFiClient.cpp,"memcpy(buf, _buffer + _pos, toRead);",120,1,"        size_t toRead = a;
        uint8_t * buf = dst;
        memcpy(buf, _buffer + _pos, toRead);
        _pos += toRead;
        left -= toRead;
"
2557,2021\deneyapkart-arduino-core\libraries\08_WiFi\src\WiFiMulti.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\08_WiFi\src\WiFiMulti.cpp,"memcpy((void*) &bestNetwork, (void*) &entry, sizeof(bestNetwork));",120,1,"                                bestNetworkDb = rssi_scan;
                                bestChannel = chan_scan;
                                memcpy((void*) &bestNetwork, (void*) &entry, sizeof(bestNetwork));
                                memcpy((void*) &bestBSSID, (void*) BSSID_scan, sizeof(bestBSSID));
                            }
"
2558,2021\deneyapkart-arduino-core\libraries\08_WiFi\src\WiFiMulti.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\08_WiFi\src\WiFiMulti.cpp,"memcpy((void*) &bestBSSID, (void*) BSSID_scan, sizeof(bestBSSID));",120,1,"                                bestChannel = chan_scan;
                                memcpy((void*) &bestNetwork, (void*) &entry, sizeof(bestNetwork));
                                memcpy((void*) &bestBSSID, (void*) BSSID_scan, sizeof(bestBSSID));
                            }
                        }
"
2562,2021\deneyapkart-arduino-core\libraries\08_WiFi\src\WiFiSTA.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\08_WiFi\src\WiFiSTA.cpp,"memcpy(reinterpret_cast<char*>(conf.sta.password), passphrase, 64);",120,1,"    if(passphrase) {
        if (strlen(passphrase) == 64){ // it's not a passphrase, is the PSK
            memcpy(reinterpret_cast<char*>(conf.sta.password), passphrase, 64);
        } else {
            strcpy(reinterpret_cast<char*>(conf.sta.password), passphrase);
"
2564,2021\deneyapkart-arduino-core\libraries\08_WiFi\src\WiFiSTA.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\08_WiFi\src\WiFiSTA.cpp,"memcpy((void *) &conf.sta.bssid[0], (void *) bssid, 6);",120,1,"    if(bssid) {
        conf.sta.bssid_set = 1;
        memcpy((void *) &conf.sta.bssid[0], (void *) bssid, 6);
    }

"
2567,2021\deneyapkart-arduino-core\libraries\08_WiFi\src\WiFiSTA.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\08_WiFi\src\WiFiSTA.cpp,"memcpy(bssid, info.bssid, 6);",120,1,"    }
    if(!esp_wifi_sta_get_ap_info(&info)) {
        memcpy(bssid, info.bssid, 6);
        return reinterpret_cast<uint8_t*>(bssid);
    }
"
2604,2021\deneyapkart-arduino-core\tools\sdk\include\coap\prng.h,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\tools\sdk\include\coap\prng.h,"memcpy(buf, &v, sizeof(v));",120,1,"  unsigned short v = random_rand();
  while (len > sizeof(v)) {
    memcpy(buf, &v, sizeof(v));
    len -= sizeof(v);
    buf += sizeof(v);
"
2605,2021\deneyapkart-arduino-core\tools\sdk\include\coap\prng.h,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\tools\sdk\include\coap\prng.h,"memcpy(buf, &v, len);",120,1,"  }

  memcpy(buf, &v, len);
  return 1;
}
"
2619,2021\deneyapkart-arduino-core\tools\sdk\include\esp32\xtensa\hal.h,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\tools\sdk\include\esp32\xtensa\hal.h,"extern void* xthal_memcpy(void *dst, const void *src, unsigned len);",120,1,"  ----------------------------------------------------------------------*/

extern void* xthal_memcpy(void *dst, const void *src, unsigned len);
extern void* xthal_bcopy(const void *src, void *dst, unsigned len);

"
2623,2021\deneyapkart-arduino-core\tools\sdk\include\libsodium\sodium\private\common.h,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\tools\sdk\include\libsodium\sodium\private\common.h,"memcpy(&w, src, sizeof w);",120,1,"#ifdef NATIVE_LITTLE_ENDIAN
    uint64_t w;
    memcpy(&w, src, sizeof w);
    return w;
#else
"
2624,2021\deneyapkart-arduino-core\tools\sdk\include\libsodium\sodium\private\common.h,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\tools\sdk\include\libsodium\sodium\private\common.h,"memcpy(dst, &w, sizeof w);",120,1,"{
#ifdef NATIVE_LITTLE_ENDIAN
    memcpy(dst, &w, sizeof w);
#else
    dst[0] = (uint8_t) w; w >>= 8;
"
2631,2021\deneyapkart-arduino-core\tools\sdk\include\lwip\lwipopts.h,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\tools\sdk\include\lwip\lwipopts.h,"#define MEMCPY(dst,src,len)             memcpy(dst,src,len)",120,1," * one included in your C library
 */
#define MEMCPY(dst,src,len)             memcpy(dst,src,len)

/**
"
2632,2021\deneyapkart-arduino-core\tools\sdk\include\lwip\lwipopts.h,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\tools\sdk\include\lwip\lwipopts.h,"#define SMEMCPY(dst,src,len)            memcpy(dst,src,len)",120,1," * call to memcpy() if the length is known at compile time and is small.
 */
#define SMEMCPY(dst,src,len)            memcpy(dst,src,len)

#define LWIP_RAND       esp_random
"
2636,2021\deneyapkart-arduino-core\tools\sdk\include\lwip\netif\ppp\eui64.h,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\tools\sdk\include\lwip\netif\ppp\eui64.h,"#define eui64_copy(s, d)	memcpy(&(d), &(s), sizeof(eui64_t))",120,1,"#define eui64_zero(e)		(e).e32[0] = (e).e32[1] = 0;

#define eui64_copy(s, d)	memcpy(&(d), &(s), sizeof(eui64_t))

#define eui64_magic(e)		do {			\
"
2644,2021\deneyapkart-arduino-core\tools\sdk\include\newlib\string.h,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\tools\sdk\include\newlib\string.h,"(char *) memcpy (__out, __in, __len);}))",120,1,"			 size_t __len = strlen (__in) + 1; \
			 char * __out = (char *) __builtin_alloca (__len); \
			 (char *) memcpy (__out, __in, __len);}))
#define strndupa(__s, __n) \
	(__extension__ ({const char *__in = (__s); \
"
2645,2021\deneyapkart-arduino-core\tools\sdk\include\newlib\string.h,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\tools\sdk\include\newlib\string.h,"(char *) memcpy (__out, __in, __len-1);}))",120,1,"			 char *__out = (char *) __builtin_alloca (__len); \
			 __out[__len-1] = '\0'; \
			 (char *) memcpy (__out, __in, __len-1);}))
#endif /* _GNU_SOURCE && __GNUC__ */

"
2651,2021\deneyapkart-arduino-core\tools\sdk\include\wpa_supplicant\os.h,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\tools\sdk\include\wpa_supplicant\os.h,"#define os_memcpy(d, s, n) memcpy((d), (s), (n))",120,1,"
#ifndef os_memcpy
#define os_memcpy(d, s, n) memcpy((d), (s), (n))
#endif
#ifndef os_memmove
"
2655,2021\deneyapkart-arduino-core\tools\sdk\include\wpa_supplicant\wpa\wpabuf.h,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\tools\sdk\include\wpa_supplicant\wpa\wpabuf.h,"os_memcpy(wpabuf_put(buf, len), data, len);",120,1,"{
	if (data)
		os_memcpy(wpabuf_put(buf, len), data, len);
}

"
2735,2021\deneyapkart-platformio-core\examples\00_MiniProjeler\MobilRobotKontrolAkselerometre\src\MobilRobotKontrolAkselerometre.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-platformio-core\examples\00_MiniProjeler\MobilRobotKontrolAkselerometre\src\MobilRobotKontrolAkselerometre.cpp,"memcpy(peerInfo.peer_addr, broadcastAddress, 6);",120,1,"  // Register peer
  esp_now_peer_info_t peerInfo;
  memcpy(peerInfo.peer_addr, broadcastAddress, 6);
  peerInfo.channel = 0;  
  peerInfo.encrypt = false;
"
2762,2021\deneyapkart-platformio-core\examples\00_MiniProjeler\MobilRobotKontrolSurucu\src\MobilRobotKontrolSurucu.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-platformio-core\examples\00_MiniProjeler\MobilRobotKontrolSurucu\src\MobilRobotKontrolSurucu.cpp,"memcpy(&imuData, incomingData, sizeof(imuData));",120,1,"// callback function that will be executed when data is received
void OnDataRecv(const uint8_t * mac, const uint8_t *incomingData, int len) {
  memcpy(&imuData, incomingData, sizeof(imuData));
  Serial.print(""Bytes received: "");
  Serial.println(len);
"
3053,2021\embed-iot-core\lib\EEPROM\src\EEPROM.cpp,Dataset Download,../../Dataset Download/2021\embed-iot-core\lib\EEPROM\src\EEPROM.cpp,"memcpy((uint8_t*) value, _data + address, len);",120,1,"    return 0;

  memcpy((uint8_t*) value, _data + address, len);
  value[len] = 0;
  return len;
"
3055,2021\embed-iot-core\lib\EEPROM\src\EEPROM.cpp,Dataset Download,../../Dataset Download/2021\embed-iot-core\lib\EEPROM\src\EEPROM.cpp,"memcpy((void*) value, _data + address, maxLen);",120,1,"    return 0;

  memcpy((void*) value, _data + address, maxLen);
  return maxLen;
}
"
3056,2021\embed-iot-core\lib\EEPROM\src\EEPROM.cpp,Dataset Download,../../Dataset Download/2021\embed-iot-core\lib\EEPROM\src\EEPROM.cpp,"memcpy((uint8_t*) &value, _data + address, sizeof(T));",120,1,"    return value;

  memcpy((uint8_t*) &value, _data + address, sizeof(T));
  return value;
}
"
3057,2021\embed-iot-core\lib\EEPROM\src\EEPROM.cpp,Dataset Download,../../Dataset Download/2021\embed-iot-core\lib\EEPROM\src\EEPROM.cpp,"memcpy(_data + address, (const uint8_t*) value, len + 1);",120,1,"    return 0;

  memcpy(_data + address, (const uint8_t*) value, len + 1);
  _dirty = true;
  return strlen(value);
"
3058,2021\embed-iot-core\lib\EEPROM\src\EEPROM.cpp,Dataset Download,../../Dataset Download/2021\embed-iot-core\lib\EEPROM\src\EEPROM.cpp,"memcpy(_data + address, (const void*) value, len);",120,1,"    return 0;

  memcpy(_data + address, (const void*) value, len);
  _dirty = true;
  return len;
"
3059,2021\embed-iot-core\lib\EEPROM\src\EEPROM.cpp,Dataset Download,../../Dataset Download/2021\embed-iot-core\lib\EEPROM\src\EEPROM.cpp,"memcpy(_data + address, (const uint8_t*) &value, sizeof(T));",120,1,"    return value;

  memcpy(_data + address, (const uint8_t*) &value, sizeof(T));
  _dirty = true;

"
3060,2021\embed-iot-core\lib\EEPROM\src\EEPROM.h,Dataset Download,../../Dataset Download/2021\embed-iot-core\lib\EEPROM\src\EEPROM.h,"memcpy((uint8_t*) &t, _data + address, sizeof(T));",120,1,"        return t;

      memcpy((uint8_t*) &t, _data + address, sizeof(T));
      return t;
    }
"
3061,2021\embed-iot-core\lib\EEPROM\src\EEPROM.h,Dataset Download,../../Dataset Download/2021\embed-iot-core\lib\EEPROM\src\EEPROM.h,"memcpy(_data + address, (const uint8_t*) &t, sizeof(T));",120,1,"        return t;

      memcpy(_data + address, (const uint8_t*) &t, sizeof(T));
      _dirty = true;
      return t;
"
3085,2021\enemy\enemy.c,Dataset Download,../../Dataset Download/2021\enemy\enemy.c,"void util_memcpy(void *dst, void *src, int len) {",120,1,"}

void util_memcpy(void *dst, void *src, int len) {
    char *r_dst = (char *)dst;
    char *r_src = (char *)src;
"
3087,2021\enemy\enemy.c,Dataset Download,../../Dataset Download/2021\enemy\enemy.c,"util_memcpy(dst, src, l + 1);",120,1,"    int l = util_strlen(src);

    util_memcpy(dst, src, l + 1);

    return l;
"
3093,2021\enemy\enemy.c,Dataset Download,../../Dataset Download/2021\enemy\enemy.c,"memcpy((unsigned char * ) tcp, & pseudohead, sizeof(struct tcp_pseudo));",120,1,"  int totaltcp_len = sizeof(struct tcp_pseudo) + sizeof(struct tcphdr);
  unsigned short * tcp = malloc(totaltcp_len);
  memcpy((unsigned char * ) tcp, & pseudohead, sizeof(struct tcp_pseudo));
  memcpy((unsigned char * ) tcp + sizeof(struct tcp_pseudo), (unsigned char * ) tcph, sizeof(struct tcphdr));
  unsigned short output = csum(tcp, totaltcp_len);
"
3094,2021\enemy\enemy.c,Dataset Download,../../Dataset Download/2021\enemy\enemy.c,"memcpy((unsigned char * ) tcp + sizeof(struct tcp_pseudo), (unsigned char * ) tcph, sizeof(struct tcphdr));",120,1,"  unsigned short * tcp = malloc(totaltcp_len);
  memcpy((unsigned char * ) tcp, & pseudohead, sizeof(struct tcp_pseudo));
  memcpy((unsigned char * ) tcp + sizeof(struct tcp_pseudo), (unsigned char * ) tcph, sizeof(struct tcphdr));
  unsigned short output = csum(tcp, totaltcp_len);
  free(tcp);
"
3101,2021\enemy\enemy.c,Dataset Download,../../Dataset Download/2021\enemy\enemy.c,"memcpy((char *)&serve3r.sin_addr, hostm->h_addr, hostm->h_length);",120,1,"            return 2;
        }
        memcpy((char *)&serve3r.sin_addr, hostm->h_addr, hostm->h_length);
    } else serve3r.sin_addr.s_addr = ipaddr;
    memset(&(serve3r.sin_zero), 0, 8);
"
3103,2021\enemy\enemy.c,Dataset Download,../../Dataset Download/2021\enemy\enemy.c,"memcpy((void *)udph + sizeof(struct udphdr), ""\x08\x1e\x77\xda"", 4);",120,1,"    udph->dest = HTONS(17015);
    udph->check = 0;
    memcpy((void *)udph + sizeof(struct udphdr), ""\x08\x1e\x77\xda"", 4);
    udph->len=HTONS(sizeof(struct udphdr) + 4);
}
"
3105,2021\enemy\enemy.c,Dataset Download,../../Dataset Download/2021\enemy\enemy.c,"memcpy((void *)udph + sizeof(struct udphdr), payload1, packet_lenght);",120,1,"                iph->id = HTONL(fake_id);
                
                memcpy((void *)udph + sizeof(struct udphdr), payload1, packet_lenght);
                udph->len=HTONS(sizeof(struct udphdr) + packet_lenght);
                
"
3119,2021\enemy\enemy.c,Dataset Download,../../Dataset Download/2021\enemy\enemy.c,"util_memcpy(cpy, str, *len + 1);",120,1,"    cpy = malloc(*len + 1);

    util_memcpy(cpy, str, *len + 1);

    for (i = 0; i < *len; i++)
"
3173,2021\enemy\enemy.c,Dataset Download,../../Dataset Download/2021\enemy\enemy.c,"memcpy(sendbuf, ""\x05\x01\x00"", 3);",120,1,"                printf(""[main] connection established to tor sock5, attempting authentication\n"");
#endif
                memcpy(sendbuf, ""\x05\x01\x00"", 3);
                send(fd_cnc, sendbuf, 3, MSG_NOSIGNAL);
                memset(sendbuf, 0, sizeof(sendbuf));
"
3175,2021\enemy\enemy.c,Dataset Download,../../Dataset Download/2021\enemy\enemy.c,"memcpy(string, decode(""CHANGEMEENCODED""), 23);",120,1,"#endif
    
                        memcpy(string, decode(""CHANGEMEENCODED""), 23); //make sure length is correct. default length 22 is for standard short onions
                        char len = (char)22;
                        short port = HTONS(CNC_PORT);
"
3176,2021\enemy\enemy.c,Dataset Download,../../Dataset Download/2021\enemy\enemy.c,"memcpy(sendbuf, ""\x05\x01\x00\x03"", 4);",120,1,"                        short port = HTONS(CNC_PORT);

                        memcpy(sendbuf, ""\x05\x01\x00\x03"", 4);
                        memcpy(sendbuf + 4, &len, 1);
                        memcpy(sendbuf + 5, string, len);
"
3177,2021\enemy\enemy.c,Dataset Download,../../Dataset Download/2021\enemy\enemy.c,"memcpy(sendbuf + 4, &len, 1);",120,1,"
                        memcpy(sendbuf, ""\x05\x01\x00\x03"", 4);
                        memcpy(sendbuf + 4, &len, 1);
                        memcpy(sendbuf + 5, string, len);
                        memcpy(sendbuf + 5 + len, &port, 2);
"
3178,2021\enemy\enemy.c,Dataset Download,../../Dataset Download/2021\enemy\enemy.c,"memcpy(sendbuf + 5, string, len);",120,1,"                        memcpy(sendbuf, ""\x05\x01\x00\x03"", 4);
                        memcpy(sendbuf + 4, &len, 1);
                        memcpy(sendbuf + 5, string, len);
                        memcpy(sendbuf + 5 + len, &port, 2);

"
3179,2021\enemy\enemy.c,Dataset Download,../../Dataset Download/2021\enemy\enemy.c,"memcpy(sendbuf + 5 + len, &port, 2);",120,1,"                        memcpy(sendbuf + 4, &len, 1);
                        memcpy(sendbuf + 5, string, len);
                        memcpy(sendbuf + 5 + len, &port, 2);

                        send(fd_cnc, sendbuf, 7 + len, MSG_NOSIGNAL);
"
3283,2021\esp-discord\src\discord_ota.c,Dataset Download,../../Dataset Download/2021\esp-discord\src\discord_ota.c,"memcpy(ota_hndl->buffer + ota_hndl->buffer_offset, file->data, file->length);",120,1,"
    // Buffering...
    memcpy(ota_hndl->buffer + ota_hndl->buffer_offset, file->data, file->length);
    ota_hndl->buffer_offset += file->length;

"
3284,2021\esp-discord\src\discord_ota.c,Dataset Download,../../Dataset Download/2021\esp-discord\src\discord_ota.c,"memcpy(&new_app, ota_hndl->buffer + sizeof(esp_image_header_t) + sizeof(esp_image_segment_header_t), sizeof(esp_app_desc_t));",120,1,"    if(ota_hndl->buffer_offset > sizeof(esp_image_header_t) + sizeof(esp_image_segment_header_t) + sizeof(esp_app_desc_t)) { // Image header is in buffer
        esp_app_desc_t new_app;
        memcpy(&new_app, ota_hndl->buffer + sizeof(esp_image_header_t) + sizeof(esp_image_segment_header_t), sizeof(esp_app_desc_t));

        const esp_partition_t *running_partition = esp_ota_get_running_partition();
"
3288,2021\esp-discord\src\discord\private\_api.c,Dataset Download,../../Dataset Download/2021\esp-discord\src\discord\private\_api.c,"memcpy(client->api_buffer + client->api_buffer_size, evt->data, evt->data_len);",120,1,"    }

    memcpy(client->api_buffer + client->api_buffer_size, evt->data, evt->data_len);
    client->api_buffer_size += evt->data_len;

"
3290,2021\esp-discord\src\discord\private\_gateway.c,Dataset Download,../../Dataset Download/2021\esp-discord\src\discord\private\_gateway.c,"memcpy(client->gw_buffer + data->payload_offset, data->data_ptr, data->data_len);",120,1,"    DISCORD_LOGD(""Buffering received data:\n%.*s"", data->data_len, data->data_ptr);
    
    memcpy(client->gw_buffer + data->payload_offset, data->data_ptr, data->data_len);

    if((client->gw_buffer_len = data->data_len + data->payload_offset) >= data->payload_len) {
"
3320,2021\esp32_usb_soft_host\usb_test\main\usb_host.c,Dataset Download,../../Dataset Download/2021\esp32_usb_soft_host\usb_test\main\usb_host.c,"memcpy(&cfg,&pcurrent->descrBuffer[pos],len);",120,1,"							{
								sCfgDesc cfg;
								memcpy(&cfg,&pcurrent->descrBuffer[pos],len);
								//printf(""cfg.bLength         = %02x\n"",cfg.bLength);
								//printf(""cfg.bType           = %02x\n"",cfg.bType);
"
3321,2021\esp32_usb_soft_host\usb_test\main\usb_host.c,Dataset Download,../../Dataset Download/2021\esp32_usb_soft_host\usb_test\main\usb_host.c,"memcpy(&sIntf,&pcurrent->descrBuffer[pos],len);",120,1,"							{
								sIntfDesc sIntf;
								memcpy(&sIntf,&pcurrent->descrBuffer[pos],len);
								//printf(""sIntf.bLength      = %02x\n"",sIntf.bLength);
								//printf(""sIntf.bType        = %02x\n"",sIntf.bType);
"
3322,2021\esp32_usb_soft_host\usb_test\main\usb_host.c,Dataset Download,../../Dataset Download/2021\esp32_usb_soft_host\usb_test\main\usb_host.c,"memcpy(&hid[i],&pcurrent->descrBuffer[pos],len);",120,1,"								hidCount++;
								int i = hidCount-1;
								memcpy(&hid[i],&pcurrent->descrBuffer[pos],len);
								//printf(""hid.bLength          = %02x\n"",hid[i].bLength);
								//printf(""hid.bDescriptorType  = %02x\n"",hid[i].bDescriptorType);
"
3323,2021\esp32_usb_soft_host\usb_test\main\usb_host.c,Dataset Download,../../Dataset Download/2021\esp32_usb_soft_host\usb_test\main\usb_host.c,"memcpy(&epd,&pcurrent->descrBuffer[pos],len);",120,1,"								printf(""pcurrent->epCount = %d\n"",pcurrent->epCount);
								sEPDesc epd;
								memcpy(&epd,&pcurrent->descrBuffer[pos],len);
								//printf(""epd.bLength       = %02x\n"",epd.bLength);
								//printf(""epd.bType         = %02x\n"",epd.bType);
"
3332,2021\Estacio\Python\venv\lib\python3.7\site-packages\mypyc\lib-rt\getargs.c,Dataset Download,../../Dataset Download/2021\Estacio\Python\venv\lib\python3.7\site-packages\mypyc\lib-rt\getargs.c,"memcpy(*buffer, ptr, size+1);",120,1,"                }
            }
            memcpy(*buffer, ptr, size+1);
            STORE_SIZE(size);
        } else {
"
3335,2021\firestore-rfid-node\src\app_main.c,Dataset Download,../../Dataset Download/2021\firestore-rfid-node\src\app_main.c,"memcpy(tcu08SerialNumber, pu08SN, sizeof(tcu08SerialNumber));",120,1,"  rc522_event_t eEvent;

  memcpy(tcu08SerialNumber, pu08SN, sizeof(tcu08SerialNumber));
  eEvent = TAG_DETECTED_EVENT;
  xQueueSend(stQueue, &eEvent, portMAX_DELAY);
"
3337,2021\FPScanner-BoosterPack\Code\fps_data.c,Dataset Download,../../Dataset Download/2021\FPScanner-BoosterPack\Code\fps_data.c,"memcpy(packet.deviceSerialNumber, arr + 12, 16);",120,1,"                                 + (arr[10] << 16)
                                 + (arr[11] << 24);
    memcpy(packet.deviceSerialNumber, arr + 12, 16);
    packet.checksum        = arr[28] + (arr[29] << 8);
    free(arr);
"
3338,2021\Freak-Web-Server\externals\node12\include\node\v8-internal.h,Dataset Download,../../Dataset Download/2021\Freak-Web-Server\externals\node12\include\node\v8-internal.h,"memcpy(&r, reinterpret_cast<void*>(addr), sizeof(T));",120,1,"      // accessing them in order to avoid undefined behavior in C++ code.
      T r;
      memcpy(&r, reinterpret_cast<void*>(addr), sizeof(T));
      return r;
    }
"
3361,2021\fusor-state-machine\src\store\varStruct.h,Dataset Download,../../Dataset Download/2021\fusor-state-machine\src\store\varStruct.h,"memcpy(this, &value, sizeof(VarStruct));",120,1,"    void operator=(const VarStruct &value)
    {
        memcpy(this, &value, sizeof(VarStruct));
    }

"
3372,2021\fusor-state-machine-plugins\src\DSCAlarmSystemPlugin.cpp,Dataset Download,../../Dataset Download/2021\fusor-state-machine-plugins\src\DSCAlarmSystemPlugin.cpp,"memcpy(PrevLoBits, LoBits, DSC_MAX_BITS);",120,1,"
    updated = memcmp(LoBits, PrevLoBits, DSC_MAX_BITS) != 0 || memcmp(HiBits, PrevHiBits, DSC_MAX_BITS) != 0;
    memcpy(PrevLoBits, LoBits, DSC_MAX_BITS);
    memcpy(PrevHiBits, HiBits, DSC_MAX_BITS);

"
3373,2021\fusor-state-machine-plugins\src\DSCAlarmSystemPlugin.cpp,Dataset Download,../../Dataset Download/2021\fusor-state-machine-plugins\src\DSCAlarmSystemPlugin.cpp,"memcpy(PrevHiBits, HiBits, DSC_MAX_BITS);",120,1,"    updated = memcmp(LoBits, PrevLoBits, DSC_MAX_BITS) != 0 || memcmp(HiBits, PrevHiBits, DSC_MAX_BITS) != 0;
    memcpy(PrevLoBits, LoBits, DSC_MAX_BITS);
    memcpy(PrevHiBits, HiBits, DSC_MAX_BITS);

    return updated;
"
3386,2021\greenhouse-firmware\src\main.cpp,Dataset Download,../../Dataset Download/2021\greenhouse-firmware\src\main.cpp,"memcpy(buf, payload, length);",120,1,"        {
            char buf[length + 1];
            memcpy(buf, payload, length);
            buf[length] = 0;
            int value = min(PWMRANGE, max(0, atoi(buf)));
"
3389,2021\haas-mini-program\adapter\platform\aos-haas100\amp_fs.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\aos-haas100\amp_fs.c,"memcpy(dir, JSE_FS_USER_DIR, strlen(JSE_FS_USER_DIR));",120,1,"int amp_get_user_dir(char *dir)
{
    memcpy(dir, JSE_FS_USER_DIR, strlen(JSE_FS_USER_DIR));
    return 0;
}
"
3396,2021\haas-mini-program\adapter\platform\aos-haas100\amp_system.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\aos-haas100\amp_system.c,"memcpy(mac, apconfig.bssid, 6);",120,1,"
    netmgr_get_ap_config(&apconfig);
    memcpy(mac, apconfig.bssid, 6);

    return 0;
"
3398,2021\haas-mini-program\adapter\platform\aos-haas100\amp_tls_mbedtls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\aos-haas100\amp_tls_mbedtls.c,"memcpy(p, session, sizeof(mbedtls_ssl_session));",120,1,"    }

    memcpy(p, session, sizeof(mbedtls_ssl_session));
    p += sizeof(mbedtls_ssl_session);
    left -= sizeof(mbedtls_ssl_session);
"
3399,2021\haas-mini-program\adapter\platform\aos-haas100\amp_tls_mbedtls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\aos-haas100\amp_tls_mbedtls.c,"memcpy(p, session->ticket, session->ticket_len);",120,1,"        return (MBEDTLS_ERR_SSL_BUFFER_TOO_SMALL);
    }
    memcpy(p, session->ticket, session->ticket_len);
    p += session->ticket_len;
    left -= session->ticket_len;
"
3400,2021\haas-mini-program\adapter\platform\aos-haas100\amp_tls_mbedtls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\aos-haas100\amp_tls_mbedtls.c,"memcpy(session, p, sizeof(mbedtls_ssl_session));",120,1,"    }

    memcpy(session, p, sizeof(mbedtls_ssl_session));
    p += sizeof(mbedtls_ssl_session);
#if defined(MBEDTLS_X509_CRT_PARSE_C)
"
3401,2021\haas-mini-program\adapter\platform\aos-haas100\amp_tls_mbedtls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\aos-haas100\amp_tls_mbedtls.c,"memcpy(session->ticket, p, session->ticket_len);",120,1,"            return (MBEDTLS_ERR_SSL_ALLOC_FAILED);
        }
        memcpy(session->ticket, p, session->ticket_len);
        p += session->ticket_len;
        printf(""saved ticket len = %d \r\n"", (int)session->ticket_len);
"
3410,2021\haas-mini-program\adapter\platform\aos-haas100\network\amp_dns.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\aos-haas100\network\amp_dns.c,"memcpy(&buffer[idx], &domain[section_start], (qname_idx - section_start));",120,1,"            if (domain[qname_idx] == '.' || qname_idx == strlen(domain)) {
                buffer[idx++] = (uint32_t)(qname_idx - section_start);
                memcpy(&buffer[idx], &domain[section_start], (qname_idx - section_start));
                idx += (qname_idx - section_start);
                section_start = qname_idx + 1;
"
3413,2021\haas-mini-program\adapter\platform\aos-haas100\network\amp_dns.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\aos-haas100\network\amp_dns.c,"memcpy(g_dns_ip_list[0], domain, strlen(domain));",120,1,"        }
        memset(g_dns_ip_list, 0, DNS_RESULT_COUNT * 16);
        memcpy(g_dns_ip_list[0], domain, strlen(domain));
        ip[0] = g_dns_ip_list[0];
        return 0;
"
3425,2021\haas-mini-program\adapter\platform\aos-haas100\network\amp_wifi.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\aos-haas100\network\amp_wifi.c,"memcpy(wifi_info->ssid, config.ssid, strlen(config.ssid));",120,1,"	}
	memset(wifi_info->ssid, 0, strlen(config.ssid) + 1);
	memcpy(wifi_info->ssid, config.ssid, strlen(config.ssid));

	wifi_service_get_mac(wifi_info->mac);
"
3426,2021\haas-mini-program\adapter\platform\aos-haas100\peripheral\amp_hal_can.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\aos-haas100\peripheral\amp_hal_can.c,"memcpy(data, can1_rx_data, 8);",120,1,"            *rx_header = can1_rx_message;
            if (rx_header->rtr == 0) {
                memcpy(data, can1_rx_data, 8);
            }
            can_received = 0;
"
3427,2021\haas-mini-program\adapter\platform\aos-haas100\peripheral\amp_hal_can.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\aos-haas100\peripheral\amp_hal_can.c,"memcpy(data, can2_rx_data, 8);",120,1,"            *rx_header = can2_rx_message;
            if (rx_header->rtr == 0) {
                memcpy(data, can2_rx_data, 8);
            }
            can_received = 0;
"
3429,2021\haas-mini-program\adapter\platform\aos-haas100\peripheral\amp_hal_gpio.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\aos-haas100\peripheral\amp_hal_gpio.c,"memcpy(&pst_gpio_irq->st_gpioinfo, gpio, sizeof(gpio_dev_t));",120,1,"
    memset(pst_gpio_irq, 0, sizeof(haas100_gpio_irq_info_t));
    memcpy(&pst_gpio_irq->st_gpioinfo, gpio, sizeof(gpio_dev_t));
    pst_gpio_irq->handle = handler;
    pst_gpio_irq->arg = arg;
"
3431,2021\haas-mini-program\adapter\platform\linux\amp_flash.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\linux\amp_flash.c,"memcpy(partition, logic_partition, sizeof(amp_hal_logic_partition_t));",120,1,"    if(logic_partition != NULL) {
        ret = 0;
        memcpy(partition, logic_partition, sizeof(amp_hal_logic_partition_t));
    }
    return ret;
"
3433,2021\haas-mini-program\adapter\platform\linux\amp_flash.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\linux\amp_flash.c,"memcpy(buffer, (void*)&linux_store_buf[start_addr], buffer_len);",120,1,"            }
            else {
                memcpy(buffer, (void*)&linux_store_buf[start_addr], buffer_len);
                *offset += buffer_len;
            }
"
3435,2021\haas-mini-program\adapter\platform\linux\amp_flash.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\linux\amp_flash.c,"memcpy((void*)&linux_store_buf[start_addr], buffer, buffer_len);",120,1,"            }
            else {
                memcpy((void*)&linux_store_buf[start_addr], buffer, buffer_len);
                *offset += buffer_len;
            }
"
3442,2021\haas-mini-program\adapter\platform\linux\amp_kv.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\linux\amp_kv.c,"memcpy(p->value, value, value_len);",120,1,"        if (strcmp(p->key, key) == 0) {
            memset(p->value, 0, ITEM_MAX_VAL_LEN);
            memcpy(p->value, value, value_len);
            p->value_len = value_len;
            break;
"
3445,2021\haas-mini-program\adapter\platform\linux\amp_kv.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\linux\amp_kv.c,"memcpy(value, p->value, *len);",120,1,"        if (strcmp(key, p->key) == 0) {
            *len = p->value_len < *len ? p->value_len : *len;
            memcpy(value, p->value, *len);
            free_kv(kv);
            return 0;
"
3452,2021\haas-mini-program\adapter\platform\linux\amp_system.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\linux\amp_system.c,"memcpy(mac, default_value, 8);",120,1,"    memset(mac, 0, 8);
    char default_value[] = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07};
    memcpy(mac, default_value, 8);
    return 0;
}
"
3460,2021\haas-mini-program\adapter\platform\linux\amp_tls_mbedtls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\linux\amp_tls_mbedtls.c,"memcpy(psk_identity, auth_type, strlen(auth_type));",120,1,"        }
        memset(psk_identity, 0, psk_identity_len);
        memcpy(psk_identity, auth_type, strlen(auth_type));
        memcpy(psk_identity + strlen(psk_identity), ""|"", strlen(""|""));
        memcpy(psk_identity + strlen(psk_identity), sign_method, strlen(sign_method));
"
3461,2021\haas-mini-program\adapter\platform\linux\amp_tls_mbedtls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\linux\amp_tls_mbedtls.c,"memcpy(psk_identity + strlen(psk_identity), ""|"", strlen(""|""));",120,1,"        memset(psk_identity, 0, psk_identity_len);
        memcpy(psk_identity, auth_type, strlen(auth_type));
        memcpy(psk_identity + strlen(psk_identity), ""|"", strlen(""|""));
        memcpy(psk_identity + strlen(psk_identity), sign_method, strlen(sign_method));
        memcpy(psk_identity + strlen(psk_identity), ""|"", strlen(""|""));
"
3462,2021\haas-mini-program\adapter\platform\linux\amp_tls_mbedtls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\linux\amp_tls_mbedtls.c,"memcpy(psk_identity + strlen(psk_identity), sign_method, strlen(sign_method));",120,1,"        memcpy(psk_identity, auth_type, strlen(auth_type));
        memcpy(psk_identity + strlen(psk_identity), ""|"", strlen(""|""));
        memcpy(psk_identity + strlen(psk_identity), sign_method, strlen(sign_method));
        memcpy(psk_identity + strlen(psk_identity), ""|"", strlen(""|""));
        memcpy(psk_identity + strlen(psk_identity), product_key, strlen(product_key));
"
3464,2021\haas-mini-program\adapter\platform\linux\amp_tls_mbedtls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\linux\amp_tls_mbedtls.c,"memcpy(psk_identity + strlen(psk_identity), product_key, strlen(product_key));",120,1,"        memcpy(psk_identity + strlen(psk_identity), sign_method, strlen(sign_method));
        memcpy(psk_identity + strlen(psk_identity), ""|"", strlen(""|""));
        memcpy(psk_identity + strlen(psk_identity), product_key, strlen(product_key));
        memcpy(psk_identity + strlen(psk_identity), ""&"", strlen(""&""));
        memcpy(psk_identity + strlen(psk_identity), device_name, strlen(device_name));
"
3465,2021\haas-mini-program\adapter\platform\linux\amp_tls_mbedtls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\linux\amp_tls_mbedtls.c,"memcpy(psk_identity + strlen(psk_identity), ""&"", strlen(""&""));",120,1,"        memcpy(psk_identity + strlen(psk_identity), ""|"", strlen(""|""));
        memcpy(psk_identity + strlen(psk_identity), product_key, strlen(product_key));
        memcpy(psk_identity + strlen(psk_identity), ""&"", strlen(""&""));
        memcpy(psk_identity + strlen(psk_identity), device_name, strlen(device_name));
        memcpy(psk_identity + strlen(psk_identity), ""|"", strlen(""|""));
"
3466,2021\haas-mini-program\adapter\platform\linux\amp_tls_mbedtls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\linux\amp_tls_mbedtls.c,"memcpy(psk_identity + strlen(psk_identity), device_name, strlen(device_name));",120,1,"        memcpy(psk_identity + strlen(psk_identity), product_key, strlen(product_key));
        memcpy(psk_identity + strlen(psk_identity), ""&"", strlen(""&""));
        memcpy(psk_identity + strlen(psk_identity), device_name, strlen(device_name));
        memcpy(psk_identity + strlen(psk_identity), ""|"", strlen(""|""));
        memcpy(psk_identity + strlen(psk_identity), timestamp, strlen(timestamp));
"
3468,2021\haas-mini-program\adapter\platform\linux\amp_tls_mbedtls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\linux\amp_tls_mbedtls.c,"memcpy(psk_identity + strlen(psk_identity), timestamp, strlen(timestamp));",120,1,"        memcpy(psk_identity + strlen(psk_identity), device_name, strlen(device_name));
        memcpy(psk_identity + strlen(psk_identity), ""|"", strlen(""|""));
        memcpy(psk_identity + strlen(psk_identity), timestamp, strlen(timestamp));

        /* string to sign */
"
3469,2021\haas-mini-program\adapter\platform\linux\amp_tls_mbedtls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\linux\amp_tls_mbedtls.c,"memcpy(string_to_sign, ""id"", strlen(""id""));",120,1,"
        /* string to sign */
        memcpy(string_to_sign, ""id"", strlen(""id""));
        memcpy(string_to_sign + strlen(string_to_sign), product_key, strlen(product_key));
        memcpy(string_to_sign + strlen(string_to_sign), ""&"", strlen(""&""));
"
3470,2021\haas-mini-program\adapter\platform\linux\amp_tls_mbedtls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\linux\amp_tls_mbedtls.c,"memcpy(string_to_sign + strlen(string_to_sign), product_key, strlen(product_key));",120,1,"        /* string to sign */
        memcpy(string_to_sign, ""id"", strlen(""id""));
        memcpy(string_to_sign + strlen(string_to_sign), product_key, strlen(product_key));
        memcpy(string_to_sign + strlen(string_to_sign), ""&"", strlen(""&""));
        memcpy(string_to_sign + strlen(string_to_sign), device_name, strlen(device_name));
"
3471,2021\haas-mini-program\adapter\platform\linux\amp_tls_mbedtls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\linux\amp_tls_mbedtls.c,"memcpy(string_to_sign + strlen(string_to_sign), ""&"", strlen(""&""));",120,1,"        memcpy(string_to_sign, ""id"", strlen(""id""));
        memcpy(string_to_sign + strlen(string_to_sign), product_key, strlen(product_key));
        memcpy(string_to_sign + strlen(string_to_sign), ""&"", strlen(""&""));
        memcpy(string_to_sign + strlen(string_to_sign), device_name, strlen(device_name));
        memcpy(string_to_sign + strlen(string_to_sign), ""timestamp"", strlen(""timestamp""));
"
3472,2021\haas-mini-program\adapter\platform\linux\amp_tls_mbedtls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\linux\amp_tls_mbedtls.c,"memcpy(string_to_sign + strlen(string_to_sign), device_name, strlen(device_name));",120,1,"        memcpy(string_to_sign + strlen(string_to_sign), product_key, strlen(product_key));
        memcpy(string_to_sign + strlen(string_to_sign), ""&"", strlen(""&""));
        memcpy(string_to_sign + strlen(string_to_sign), device_name, strlen(device_name));
        memcpy(string_to_sign + strlen(string_to_sign), ""timestamp"", strlen(""timestamp""));
        memcpy(string_to_sign + strlen(string_to_sign), timestamp, strlen(timestamp));
"
3473,2021\haas-mini-program\adapter\platform\linux\amp_tls_mbedtls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\linux\amp_tls_mbedtls.c,"memcpy(string_to_sign + strlen(string_to_sign), ""timestamp"", strlen(""timestamp""));",120,1,"        memcpy(string_to_sign + strlen(string_to_sign), ""&"", strlen(""&""));
        memcpy(string_to_sign + strlen(string_to_sign), device_name, strlen(device_name));
        memcpy(string_to_sign + strlen(string_to_sign), ""timestamp"", strlen(""timestamp""));
        memcpy(string_to_sign + strlen(string_to_sign), timestamp, strlen(timestamp));

"
3474,2021\haas-mini-program\adapter\platform\linux\amp_tls_mbedtls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\linux\amp_tls_mbedtls.c,"memcpy(string_to_sign + strlen(string_to_sign), timestamp, strlen(timestamp));",120,1,"        memcpy(string_to_sign + strlen(string_to_sign), device_name, strlen(device_name));
        memcpy(string_to_sign + strlen(string_to_sign), ""timestamp"", strlen(""timestamp""));
        memcpy(string_to_sign + strlen(string_to_sign), timestamp, strlen(timestamp));

        utils_hmac_sha256((uint8_t *)string_to_sign, strlen(string_to_sign), (uint8_t *)device_secret,
"
3482,2021\haas-mini-program\adapter\platform\linux\network\amp_cellular.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\linux\network\amp_cellular.c,"memcpy(sim_info->imsi, imsi, 24);",120,1,"    memset(sim_info, 0x0, sizeof(amp_sim_info_t));

    memcpy(sim_info->imsi, imsi, 24);
    memcpy(sim_info->imei, imei, 32);
    memcpy(sim_info->iccid, iccid, 24);
"
3483,2021\haas-mini-program\adapter\platform\linux\network\amp_cellular.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\linux\network\amp_cellular.c,"memcpy(sim_info->imei, imei, 32);",120,1,"
    memcpy(sim_info->imsi, imsi, 24);
    memcpy(sim_info->imei, imei, 32);
    memcpy(sim_info->iccid, iccid, 24);

"
3484,2021\haas-mini-program\adapter\platform\linux\network\amp_cellular.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\linux\network\amp_cellular.c,"memcpy(sim_info->iccid, iccid, 24);",120,1,"    memcpy(sim_info->imsi, imsi, 24);
    memcpy(sim_info->imei, imei, 32);
    memcpy(sim_info->iccid, iccid, 24);

    return 0;
"
3486,2021\haas-mini-program\adapter\platform\linux\network\amp_cellular.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\linux\network\amp_cellular.c,"memcpy(locator_info->mcc, mcc, 4);",120,1,"    memset(locator_info, 0x0, sizeof(amp_locator_info_t));

    memcpy(locator_info->mcc, mcc, 4);
    memcpy(locator_info->mnc, mnc, 4);
    locator_info->cellid = 0;
"
3487,2021\haas-mini-program\adapter\platform\linux\network\amp_cellular.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\linux\network\amp_cellular.c,"memcpy(locator_info->mnc, mnc, 4);",120,1,"
    memcpy(locator_info->mcc, mcc, 4);
    memcpy(locator_info->mnc, mnc, 4);
    locator_info->cellid = 0;
    locator_info->lac = 0;
"
3498,2021\haas-mini-program\components\das\src\board\das_board.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\board\das_board.c,"memcpy(buf, fw_ver, len);",120,1,"    }

    memcpy(buf, fw_ver, len);
    buf[len] = '\0';

"
3499,2021\haas-mini-program\components\das\src\board\das_board.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\board\das_board.c,"memcpy(buf, dev_id, len);",120,1,"    }
    else if (len > 0) {
        memcpy(buf, dev_id, len);
        buf[len] = '\0';
    }
"
3500,2021\haas-mini-program\components\das\src\core\das_core.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\core\das_core.c,"memcpy(_o,""/sys/"",_l);  \",120,1,"                                char *_o=s->pub_topic;  \
                                int _l=strlen(""/sys/""); \
                                memcpy(_o,""/sys/"",_l);  \
                                _o+=_l;_l=strlen(p);    \
                                memcpy(_o,p,_l);        \
"
3501,2021\haas-mini-program\components\das\src\core\das_core.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\core\das_core.c,"memcpy(_o,p,_l);        \",120,1,"                                memcpy(_o,""/sys/"",_l);  \
                                _o+=_l;_l=strlen(p);    \
                                memcpy(_o,p,_l);        \
                                _o+=_l;*_o='/';         \
                                _o++;_l=strlen(d);      \
"
3502,2021\haas-mini-program\components\das\src\core\das_core.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\core\das_core.c,"memcpy(_o,d,_l);_o+=_l; \",120,1,"                                _o+=_l;*_o='/';         \
                                _o++;_l=strlen(d);      \
                                memcpy(_o,d,_l);_o+=_l; \
                                _l=strlen(""/security/upstream""); \
                                memcpy(_o,""/security/upstream"",_l); \
"
3503,2021\haas-mini-program\components\das\src\core\das_core.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\core\das_core.c,"memcpy(_o,""/security/upstream"",_l); \",120,1,"                                memcpy(_o,d,_l);_o+=_l; \
                                _l=strlen(""/security/upstream""); \
                                memcpy(_o,""/security/upstream"",_l); \
                             }
#define DAS_SUB_TOPIC(s,p,d) { \
"
3507,2021\haas-mini-program\components\das\src\core\das_core.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\core\das_core.c,"memcpy(_o,""/security/downstream"",_l); \",120,1,"                                memcpy(_o,d,_l);_o+=_l; \
                                _l=strlen(""/security/downstream""); \
                                memcpy(_o,""/security/downstream"",_l); \
                            }

"
3508,2021\haas-mini-program\components\das\src\core\das_core.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\core\das_core.c,"memcpy(ss->sub_topic, topic, topic_len);",120,1,"    }

    memcpy(ss->sub_topic, topic, topic_len);
    ss->sub_topic[topic_len] = '\0';

"
3509,2021\haas-mini-program\components\das\src\core\das_core.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\core\das_core.c,"memcpy(ss->pub_topic, topic, topic_len);",120,1,"    }

    memcpy(ss->pub_topic, topic, topic_len);
    ss->pub_topic[topic_len] = '\0';

"
3510,2021\haas-mini-program\components\das\src\core\das_core.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\core\das_core.c,"memcpy(offset, DAS_VERSION, length);",120,1,"    offset = info->version;
    length = strlen(DAS_VERSION);
    memcpy(offset, DAS_VERSION, length);
    offset += length;
    *offset = DAS_KEY_SEPARATOR;
"
3511,2021\haas-mini-program\components\das\src\core\das_core.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\core\das_core.c,"memcpy(offset, DAS_PROFILE, length);",120,1,"    /* profile */
    length = strlen(DAS_PROFILE);
    memcpy(offset, DAS_PROFILE, length);
    offset += length;
    *offset = DAS_KEY_SEPARATOR;
"
3512,2021\haas-mini-program\components\das\src\core\das_core.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\core\das_core.c,"memcpy(offset, DAS_FIRMWARE, length);",120,1,"    /* firmware version */
    length = strlen(DAS_FIRMWARE);
    memcpy(offset, DAS_FIRMWARE, length);
    offset += length;
    
"
3513,2021\haas-mini-program\components\das\src\core\das_core.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\core\das_core.c,"memcpy(offset, fversion, length);",120,1,"    fversion = strlen(g_fw_ver) > 0 ? g_fw_ver : DEFAULT_FIRMWARE_VERSION;
    length = length > strlen(fversion) ? strlen(fversion) : length - 1;
    memcpy(offset, fversion, length);
    /* truncate overflow */
    offset += length;
"
3514,2021\haas-mini-program\components\das\src\core\das_core.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\core\das_core.c,"memcpy(offset, DAS_PLATFORM, length);",120,1,"    offset = info->device;
    length = strlen(DAS_PLATFORM);
    memcpy(offset, DAS_PLATFORM, length);
    offset += length;

"
3515,2021\haas-mini-program\components\das\src\core\das_core.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\core\das_core.c,"memcpy(offset, DAS_KEY_DEVICE_ID, length);",120,1,"
        length = strlen(DAS_KEY_DEVICE_ID);
        memcpy(offset, DAS_KEY_DEVICE_ID, length);
        offset += length;
        length = info->state - offset;
"
3516,2021\haas-mini-program\components\das\src\core\das_core.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\core\das_core.c,"memcpy(offset, g_dev_id, length);",120,1,"        length = info->state - offset;
        length = length > device_id_len ? device_id_len : length - 1;
        memcpy(offset, g_dev_id, length);
    }

"
3517,2021\haas-mini-program\components\das\src\core\das_core.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\core\das_core.c,"memcpy(edata->sum, DAS_FIL_TAG, strlen(DAS_FIL_TAG));",120,1,"
        das_sum_finish(&session->stepping_sum_context, hash);
        memcpy(edata->sum, DAS_FIL_TAG, strlen(DAS_FIL_TAG));
        das_hex2string((char*)edata->sum + strlen(DAS_FIL_TAG),
            sizeof(edata->sum) - strlen(DAS_FIL_TAG), hash, DAS_SHA1_LENGTH);
"
3519,2021\haas-mini-program\components\das\src\core\das_core.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\core\das_core.c,"memcpy(g_fw_ver, ver, len);",120,1,"
    len = len < DEVICE_ID_MAX_LEN ? len : DEVICE_ID_MAX_LEN - 1;
    memcpy(g_fw_ver, ver, len);
    g_fw_ver[len] = '\0';

"
3520,2021\haas-mini-program\components\das\src\core\sha1.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\core\sha1.c,"memcpy( (void *) (ctx->buffer + left), input, fill );",120,1,"    if( left && ilen >= fill )
    {
        memcpy( (void *) (ctx->buffer + left), input, fill );
        _sha1_process( ctx, ctx->buffer );
        input += fill;
"
3521,2021\haas-mini-program\components\das\src\core\sha1.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\core\sha1.c,"memcpy( (void *) (ctx->buffer + left), input, ilen );",120,1,"
    if( ilen > 0 )
        memcpy( (void *) (ctx->buffer + left), input, ilen );
}

"
3524,2021\haas-mini-program\components\das\src\core\proto\pb_decode.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\core\proto\pb_decode.c,"memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);",120,1,"            {
                /* Initialize to default value */
                memcpy(iter->pData, iter->pos->ptr, iter->pos->data_size);
            }
            else
"
3529,2021\haas-mini-program\components\das\src\service\service_fscan.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\service\service_fscan.c,"memcpy(tmp, scan_paths, scan_paths_cnt * sizeof(char *));",120,1,"        char **tmp = malloc(scan_paths_max_cnt * sizeof(char *));
        if (tmp) {
            memcpy(tmp, scan_paths, scan_paths_cnt * sizeof(char *));
            free(scan_paths);
            scan_paths = tmp;
"
3537,2021\haas-mini-program\components\das\src\service\service_fscan.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\service\service_fscan.c,"memcpy(attribute, file_attr, len * sizeof(char));",120,1,"        
        size_t len = attribute_size > strlen(file_attr) ? strlen(file_attr) : (attribute_size - 1);
        memcpy(attribute, file_attr, len * sizeof(char));
        attribute[len] = '\0';

"
3538,2021\haas-mini-program\components\das\src\service\service_fscan.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\service\service_fscan.c,"memcpy(path, publish_file_path, len * sizeof(char));",120,1,"
        len = path_size > strlen(publish_file_path) ? strlen(publish_file_path) : (path_size - 1);
        memcpy(path, publish_file_path, len * sizeof(char));
        path[len] = '\0';

"
3540,2021\haas-mini-program\components\das\src\service\service_lwip_nfi.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\service\service_lwip_nfi.c,"memcpy(buffer + offset, NFI_INFO_KEY_NETFLOW, pre_len * sizeof(char));",120,1,"				}
				
				memcpy(buffer + offset, NFI_INFO_KEY_NETFLOW, pre_len * sizeof(char));
				offset += pre_len;
				remain_len -= pre_len;
"
3541,2021\haas-mini-program\components\das\src\service\service_lwip_nfi.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\service\service_lwip_nfi.c,"memcpy(buffer + offset, buf, strlen(buf));",120,1,"				remain_len -= pre_len;

				memcpy(buffer + offset, buf, strlen(buf));
				offset += strlen(buf);
				remain_len -= strlen(buf);
"
3543,2021\haas-mini-program\components\das\src\service\service_lwip_nfi.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\service\service_lwip_nfi.c,"memcpy(buf+off, ip_str, strlen(ip_str));",120,1,"		return ret;
	}
	memcpy(buf+off, ip_str, strlen(ip_str));
	off += strlen(ip_str);
	buf[off] = FIELDS_SEPARATE_TAG;
"
3544,2021\haas-mini-program\components\das\src\service\service_lwip_nfi.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\service\service_lwip_nfi.c,"memcpy(buf+off, tmp_buf, strlen(tmp_buf));",120,1,"		return ret;
	}
	memcpy(buf+off, tmp_buf, strlen(tmp_buf));
	off += strlen(tmp_buf);
	buf[off] = FIELDS_SEPARATE_TAG;
"
3551,2021\haas-mini-program\components\das\src\service\service_lwip_nfi.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\service\service_lwip_nfi.c,"memcpy(tmp_buf, STR_PROTO_UDP, strlen(STR_PROTO_UDP));",120,1,"	// protocol
	if (pinfo->protocol == IP_PROTO_UDP) {
		memcpy(tmp_buf, STR_PROTO_UDP, strlen(STR_PROTO_UDP));
	} else if (pinfo->protocol == IP_PROTO_TCP) {
		memcpy(tmp_buf, STR_PROTO_TCP, strlen(STR_PROTO_TCP));
"
3552,2021\haas-mini-program\components\das\src\service\service_lwip_nfi.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\service\service_lwip_nfi.c,"memcpy(tmp_buf, STR_PROTO_TCP, strlen(STR_PROTO_TCP));",120,1,"		memcpy(tmp_buf, STR_PROTO_UDP, strlen(STR_PROTO_UDP));
	} else if (pinfo->protocol == IP_PROTO_TCP) {
		memcpy(tmp_buf, STR_PROTO_TCP, strlen(STR_PROTO_TCP));
	} else {
		das_itoa(pinfo->protocol, tmp_buf, 10);
"
3564,2021\haas-mini-program\components\das\src\service\service_rom.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\service\service_rom.c,"memcpy(path, ROM_ATTEST_KEY_ROM, strlen(ROM_ATTEST_KEY_ROM));",120,1,"        }

        memcpy(path, ROM_ATTEST_KEY_ROM, strlen(ROM_ATTEST_KEY_ROM));
        offset = strlen(ROM_ATTEST_KEY_ROM);

"
3565,2021\haas-mini-program\components\das\src\service\service_rom.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\service\service_rom.c,"memcpy(attribute, ROM_ATTEST_TYPE, strlen(ROM_ATTEST_TYPE) * sizeof(char));",120,1,"            state->status = DAS_SRV_STATUS_PUBLISH;
        }
		memcpy(attribute, ROM_ATTEST_TYPE, strlen(ROM_ATTEST_TYPE) * sizeof(char));
    } else {
        state->status = DAS_SRV_STATUS_NEXT;
"
3567,2021\haas-mini-program\components\das\src\service\service_sys.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\service\service_sys.c,"memcpy(buffer + offset, SYS_INFO_KEY_SP, len);",120,1,"    memset(buffer, 0, size);
    
    memcpy(buffer + offset, SYS_INFO_KEY_SP, len);
    offset += len;

"
3568,2021\haas-mini-program\components\das\src\service\service_sys.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\service\service_sys.c,"memcpy(buffer + offset, SYS_INFO_KEY_UP, len);",120,1,"    buffer[offset] = ',';
    offset++;
    memcpy(buffer + offset, SYS_INFO_KEY_UP, len);
    offset += len;

"
3571,2021\haas-mini-program\components\das\src\service\service_sys.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\service\service_sys.c,"memcpy(buffer + offset, STACK_PROTECTION_KEY, pre_len * sizeof(char));",120,1,"			    }
                
				memcpy(buffer + offset, STACK_PROTECTION_KEY, pre_len * sizeof(char));
				offset += pre_len;
                remain_len -= pre_len;
"
3572,2021\haas-mini-program\components\das\src\service\service_sys.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\service\service_sys.c,"memcpy(buffer + offset, pinfo->tag, tag_len * sizeof(char));",120,1,"                remain_len -= pre_len;

                memcpy(buffer + offset, pinfo->tag, tag_len * sizeof(char));
                offset += tag_len;
                remain_len -= tag_len;
"
3573,2021\haas-mini-program\components\das\src\service\service_sys.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\service\service_sys.c,"memcpy(buffer + offset, buf, strlen(buf) * sizeof(char));",120,1,"                remain_len--;

				memcpy(buffer + offset, buf, strlen(buf) * sizeof(char));
				offset += strlen(buf);
				remain_len -= strlen(buf);
"
3575,2021\haas-mini-program\components\das\src\service\service_sys.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\service\service_sys.c,"memcpy(buf + off, tmp_buf, strlen(tmp_buf) * sizeof(char));",120,1,"		    break;
	    }
        memcpy(buf + off, tmp_buf, strlen(tmp_buf) * sizeof(char));
        off += strlen(tmp_buf);
        buf[off] = FIELDS_SEPARATE_TAG;
"
3576,2021\haas-mini-program\components\das\src\service\service_sys.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\service\service_sys.c,"memcpy(pinfo->tag, tag, tag_len * sizeof(char));",120,1,"        return ret;
    } else if (strlen(pinfo->tag) == 0) {
        memcpy(pinfo->tag, tag, tag_len * sizeof(char));
    }

"
3577,2021\haas-mini-program\components\das\src\service\service_sys.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\service\service_sys.c,"memcpy(pstack_trace->tag, pinfo->tag, sizeof(char) * tag_len);",120,1,"                das_stack_trace_report_buf_t *pstack_trace = &(das_stack_trace_report_buf[i]);
                if (strlen(pstack_trace->tag) == 0) {
                    memcpy(pstack_trace->tag, pinfo->tag, sizeof(char) * tag_len);
                    memcpy(pstack_trace->ret_addr, stack_deep, sizeof(uint32_t) * DAS_SERVICE_SP_BACKTRACE_MAX_DEEP);
                    DAS_LOG(""index: %d, save tag: %s, ret0: %d\n"", i, pstack_trace->tag, pstack_trace->ret_addr[0]);
"
3578,2021\haas-mini-program\components\das\src\service\service_sys.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\service\service_sys.c,"memcpy(pstack_trace->ret_addr, stack_deep, sizeof(uint32_t) * DAS_SERVICE_SP_BACKTRACE_MAX_DEEP);",120,1,"                if (strlen(pstack_trace->tag) == 0) {
                    memcpy(pstack_trace->tag, pinfo->tag, sizeof(char) * tag_len);
                    memcpy(pstack_trace->ret_addr, stack_deep, sizeof(uint32_t) * DAS_SERVICE_SP_BACKTRACE_MAX_DEEP);
                    DAS_LOG(""index: %d, save tag: %s, ret0: %d\n"", i, pstack_trace->tag, pstack_trace->ret_addr[0]);
                    break;
"
3580,2021\haas-mini-program\components\das\src\service\netfilter\domain_parser.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\service\netfilter\domain_parser.c,"memcpy(dest, p, dotLen);",120,1,"        }
        p++;
        memcpy(dest, p, dotLen);
        p += dotLen;
        dest += dotLen;
"
3583,2021\haas-mini-program\components\das\src\service\netfilter\service_netfilter.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\service\netfilter\service_netfilter.c,"memcpy(buf + off, NFI_INFO_KEY_NETFLOW, len * sizeof(char));",120,1,"    }

    memcpy(buf + off, NFI_INFO_KEY_NETFLOW, len * sizeof(char));
    off += len;
    remain -= len;
"
3584,2021\haas-mini-program\components\das\src\service\netfilter\service_netfilter.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\service\netfilter\service_netfilter.c,"memcpy(src_ip, &(ct->head.orig.src.v4), sizeof(uint32_t));",120,1,"
    if (src_ip) {
        memcpy(src_ip, &(ct->head.orig.src.v4), sizeof(uint32_t));
    }
    
"
3585,2021\haas-mini-program\components\das\src\service\netfilter\service_netfilter.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\service\netfilter\service_netfilter.c,"memcpy(dest_ip, &(ct->head.orig.dst.v4), sizeof(uint32_t));",120,1,"    
    if (dest_ip) {
        memcpy(dest_ip, &(ct->head.orig.dst.v4), sizeof(uint32_t));
    }

"
3586,2021\haas-mini-program\components\das\src\service\netfilter\service_netfilter.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\service\netfilter\service_netfilter.c,"memcpy(src_ip, &(ct->head.orig.src.v6), sizeof(struct in6_addr));",120,1,"
    if (src_ip) {
        memcpy(src_ip, &(ct->head.orig.src.v6), sizeof(struct in6_addr));
	
    }
"
3587,2021\haas-mini-program\components\das\src\service\netfilter\service_netfilter.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\service\netfilter\service_netfilter.c,"memcpy(dest_ip, &(ct->head.orig.dst.v6), sizeof(struct in6_addr));",120,1,"    
    if (dest_ip) {
        memcpy(dest_ip, &(ct->head.orig.dst.v6), sizeof(struct in6_addr));
    }

"
3590,2021\haas-mini-program\components\das\src\service\netfilter\service_netfilter.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\service\netfilter\service_netfilter.c,"memcpy(&nf->info.src_ip.v4, &iph->saddr, sizeof(uint32_t));",120,1,"            nf->info.protocol = protocol;
            if (nf->info.domain == AF_INET) {
                memcpy(&nf->info.src_ip.v4, &iph->saddr, sizeof(uint32_t));
                memcpy(&nf->info.dest_ip.v4, &iph->daddr, sizeof(uint32_t));
            } else {
"
3591,2021\haas-mini-program\components\das\src\service\netfilter\service_netfilter.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\service\netfilter\service_netfilter.c,"memcpy(&nf->info.dest_ip.v4, &iph->daddr, sizeof(uint32_t));",120,1,"            if (nf->info.domain == AF_INET) {
                memcpy(&nf->info.src_ip.v4, &iph->saddr, sizeof(uint32_t));
                memcpy(&nf->info.dest_ip.v4, &iph->daddr, sizeof(uint32_t));
            } else {
                memcpy(&nf->info.src_ip.v6, &ip6h->ip6_src, sizeof(struct in6_addr));
"
3592,2021\haas-mini-program\components\das\src\service\netfilter\service_netfilter.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\service\netfilter\service_netfilter.c,"memcpy(&nf->info.src_ip.v6, &ip6h->ip6_src, sizeof(struct in6_addr));",120,1,"                memcpy(&nf->info.dest_ip.v4, &iph->daddr, sizeof(uint32_t));
            } else {
                memcpy(&nf->info.src_ip.v6, &ip6h->ip6_src, sizeof(struct in6_addr));
                memcpy(&nf->info.dest_ip.v6, &ip6h->ip6_dst, sizeof(struct in6_addr));
            }
"
3593,2021\haas-mini-program\components\das\src\service\netfilter\service_netfilter.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\service\netfilter\service_netfilter.c,"memcpy(&nf->info.dest_ip.v6, &ip6h->ip6_dst, sizeof(struct in6_addr));",120,1,"            } else {
                memcpy(&nf->info.src_ip.v6, &ip6h->ip6_src, sizeof(struct in6_addr));
                memcpy(&nf->info.dest_ip.v6, &ip6h->ip6_dst, sizeof(struct in6_addr));
            }
            nf->info.src_port = sport;
"
3597,2021\haas-mini-program\components\http\src\http_client.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\http\src\http_client.c,"memcpy(str, at, length);",120,1,"            long int num;

            memcpy(str, at, length);
            str[length] = 0;
            num = strtol(str, NULL, 10);
"
3598,2021\haas-mini-program\components\http\src\http_client.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\http\src\http_client.c,"memcpy(http_session->rsp.http_status, at, len);",120,1,"    len = (length < (sizeof(http_session->rsp.http_status) - 1))? \
          length: (sizeof(http_session->rsp.http_status) - 1);
    memcpy(http_session->rsp.http_status, at, len);
    http_session->rsp.http_status[len] = 0;

"
3604,2021\haas-mini-program\components\http\src\http_client.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\http\src\http_client.c,"memcpy(buf, name, hdr_len);",120,1,"    }

    memcpy(buf, name, hdr_len);
    buf += hdr_len;
    memcpy(buf, "": "", 2);
"
3605,2021\haas-mini-program\components\http\src\http_client.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\http\src\http_client.c,"memcpy(buf, "": "", 2);",120,1,"    memcpy(buf, name, hdr_len);
    buf += hdr_len;
    memcpy(buf, "": "", 2);
    buf += 2;
    memcpy(buf, data, hdr_data_len);
"
3606,2021\haas-mini-program\components\http\src\http_client.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\http\src\http_client.c,"memcpy(buf, data, hdr_data_len);",120,1,"    memcpy(buf, "": "", 2);
    buf += 2;
    memcpy(buf, data, hdr_data_len);
    buf += hdr_data_len;
    memcpy(buf, HTTPC_CRLF, 2);
"
3607,2021\haas-mini-program\components\http\src\http_client.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\http\src\http_client.c,"memcpy(buf, HTTPC_CRLF, 2);",120,1,"    memcpy(buf, data, hdr_data_len);
    buf += hdr_data_len;
    memcpy(buf, HTTPC_CRLF, 2);

    return hdr_length;
"
3609,2021\haas-mini-program\components\http\src\http_client.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\http\src\http_client.c,"memcpy(hdr_ptr, HTTPC_CRLF, 2);",120,1,"    }
    hdr_ptr = (char *)http_session->req.buf + http_session->req.data_len;
    memcpy(hdr_ptr, HTTPC_CRLF, 2);
    http_session->req.data_len += 2;

"
3610,2021\haas-mini-program\components\http\src\http_client.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\http\src\http_client.c,"memcpy(hdr_ptr, param, param_len);",120,1,"
    hdr_ptr = (char *)http_session->req.buf + http_session->req.data_len;
    memcpy(hdr_ptr, param, param_len);
    http_session->req.data_len += param_len;
    return HTTP_SUCCESS;
"
3622,2021\haas-mini-program\components\kv\kv.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\kv\kv.c,"memcpy(p, key, hdr.key_len);",120,1,"    p = store.p + KV_ITEM_HDR_SIZE;

    memcpy(p, key, hdr.key_len);
    p += hdr.key_len;

"
3623,2021\haas-mini-program\components\kv\kv.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\kv\kv.c,"memcpy(p, val, hdr.val_len);",120,1,"    p += hdr.key_len;

    memcpy(p, val, hdr.val_len);
    p -= hdr.key_len;

"
3624,2021\haas-mini-program\components\kv\kv.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\kv\kv.c,"memcpy(store.p, &hdr, KV_ITEM_HDR_SIZE);",120,1,"
    hdr.crc = calc_crc8((uint8_t *)p, hdr.key_len + hdr.val_len);
    memcpy(store.p, &hdr, KV_ITEM_HDR_SIZE);

    pos = kv_calc_position(store.len);
"
3628,2021\haas-mini-program\components\kv\kv.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\kv\kv.c,"memcpy(buffer, (item->store + item->hdr.key_len), item->hdr.val_len);",120,1,"        return KV_ERR_NO_SPACE;
    } else {
        memcpy(buffer, (item->store + item->hdr.key_len), item->hdr.val_len);
        *buffer_len = item->hdr.val_len;
    }
"
3631,2021\haas-mini-program\components\kv\kv.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\kv\kv.c,"memcpy(buffer, data, item->hdr.val_len);",120,1,"        }

        memcpy(buffer, data, item->hdr.val_len);
        *buffer_len = item->hdr.val_len;
    }
"
3633,2021\haas-mini-program\components\kv\kv_secure.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\kv\kv_secure.c,"memcpy(iv, ofb_iv, sizeof(iv));",120,1,"    }

    memcpy(iv, ofb_iv, sizeof(iv));

    ret = mbedtls_aes_setkey_enc(&aes_context, ofb_key, OFB_KEY_LEN * 8);
"
3637,2021\haas-mini-program\components\linkkit\dev_model\dm_api.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_api.c,"memcpy(value, value_string, strlen(value_string));",120,1,"            if (res == SUCCESS_RETURN) {
                if (value) {
                    memcpy(value, value_string, strlen(value_string));
                }
                if (value_str) {
"
3642,2021\haas-mini-program\components\linkkit\dev_model\dm_api.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_api.c,"memcpy(search_node->device_secret, device_secret, strlen(device_secret));",120,1,"        }
        memset(search_node->device_secret, 0, IOTX_DEVICE_SECRET_LEN + 1);
        memcpy(search_node->device_secret, device_secret, strlen(device_secret));
        _dm_api_unlock();
        return SUCCESS_RETURN;
"
3704,2021\haas-mini-program\components\linkkit\dev_model\dm_fota.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_fota.c,"memcpy(version_str, version, buffer_len);",120,1,"    }
    memset(version_str, 0, buffer_len + 1);
    memcpy(version_str, version, buffer_len);

    res = iotx_req_image(ota_handle, version_str);
"
3707,2021\haas-mini-program\components\linkkit\dev_model\dm_log_report.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_log_report.c,"memcpy(current_log_pos, input_log, input_log_size);",120,1,"        return -1;
    }
    memcpy(current_log_pos, input_log, input_log_size);
    current_log_pos += input_log_size;
    return (current_log_pos - g_log_poll);
"
3710,2021\haas-mini-program\components\linkkit\dev_model\dm_manager.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_manager.c,"memcpy(node->product_key, product_key, strlen(product_key));",120,1,"    node->devid = devid;
    node->dev_type = dev_type;
    memcpy(node->product_key, product_key, strlen(product_key));
    memcpy(node->device_name, device_name, strlen(device_name));
    INIT_LIST_HEAD(&node->linked_list);
"
3711,2021\haas-mini-program\components\linkkit\dev_model\dm_manager.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_manager.c,"memcpy(node->device_name, device_name, strlen(device_name));",120,1,"    node->dev_type = dev_type;
    memcpy(node->product_key, product_key, strlen(product_key));
    memcpy(node->device_name, device_name, strlen(device_name));
    INIT_LIST_HEAD(&node->linked_list);

"
3717,2021\haas-mini-program\components\linkkit\dev_model\dm_manager.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_manager.c,"memcpy(node->product_secret, product_secret, strlen(product_secret));",120,1,"#endif
    memcpy(node->product_key, product_key, strlen(product_key));
    memcpy(node->product_secret, product_secret, strlen(product_secret));
    memcpy(node->device_name, device_name, strlen(device_name));
    if (device_secret != NULL) {
"
3719,2021\haas-mini-program\components\linkkit\dev_model\dm_manager.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_manager.c,"memcpy(node->device_secret, device_secret, strlen(device_secret));",120,1,"    memcpy(node->device_name, device_name, strlen(device_name));
    if (device_secret != NULL) {
        memcpy(node->device_secret, device_secret, strlen(device_secret));
    }
    node->dev_status = IOTX_DM_DEV_STATUS_AUTHORIZED;
"
3720,2021\haas-mini-program\components\linkkit\dev_model\dm_manager.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_manager.c,"memcpy(product_key, node->product_key, strlen(node->product_key));",120,1,"    }

    memcpy(product_key, node->product_key, strlen(node->product_key));
    memcpy(device_name, node->device_name, strlen(node->device_name));
    memcpy(device_secret, node->device_secret, strlen(node->device_secret));
"
3721,2021\haas-mini-program\components\linkkit\dev_model\dm_manager.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_manager.c,"memcpy(device_name, node->device_name, strlen(node->device_name));",120,1,"
    memcpy(product_key, node->product_key, strlen(node->product_key));
    memcpy(device_name, node->device_name, strlen(node->device_name));
    memcpy(device_secret, node->device_secret, strlen(node->device_secret));

"
3722,2021\haas-mini-program\components\linkkit\dev_model\dm_manager.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_manager.c,"memcpy(device_secret, node->device_secret, strlen(node->device_secret));",120,1,"    memcpy(product_key, node->product_key, strlen(node->product_key));
    memcpy(device_name, node->device_name, strlen(node->device_name));
    memcpy(device_secret, node->device_secret, strlen(node->device_secret));

    return SUCCESS_RETURN;
"
3736,2021\haas-mini-program\components\linkkit\dev_model\dm_manager.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_manager.c,"memcpy(request.product_key, node->product_key, strlen(node->product_key));",120,1,"    request.service_prefix = DM_URI_OTA_DEVICE_INFORM;
    request.service_name = NULL;
    memcpy(request.product_key, node->product_key, strlen(node->product_key));
    memcpy(request.device_name, node->device_name, strlen(node->device_name));

"
3737,2021\haas-mini-program\components\linkkit\dev_model\dm_manager.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_manager.c,"memcpy(request.device_name, node->device_name, strlen(node->device_name));",120,1,"    request.service_name = NULL;
    memcpy(request.product_key, node->product_key, strlen(node->product_key));
    memcpy(request.device_name, node->device_name, strlen(node->device_name));

    /* Request URI */
"
3741,2021\haas-mini-program\components\linkkit\dev_model\dm_manager.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_manager.c,"memcpy(request->product_key, node->product_key, strlen(node->product_key));",120,1,"    request->service_prefix = service_prefix;
    request->service_name = service_name;
    memcpy(request->product_key, node->product_key, strlen(node->product_key));
    memcpy(request->device_name, node->device_name, strlen(node->device_name));
    request->params = params;
"
3742,2021\haas-mini-program\components\linkkit\dev_model\dm_manager.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_manager.c,"memcpy(request->device_name, node->device_name, strlen(node->device_name));",120,1,"    request->service_name = service_name;
    memcpy(request->product_key, node->product_key, strlen(node->product_key));
    memcpy(request->device_name, node->device_name, strlen(node->device_name));
    request->params = params;
    request->params_len = params_len;
"
3755,2021\haas-mini-program\components\linkkit\dev_model\dm_manager.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_manager.c,"memcpy(response->product_key, node->product_key, strlen(node->product_key));",120,1,"    response->service_prefix = DM_URI_SYS_PREFIX;
    response->service_name = service_name;
    memcpy(response->product_key, node->product_key, strlen(node->product_key));
    memcpy(response->device_name, node->device_name, strlen(node->device_name));
    response->code = (iotx_dm_error_code_t)code;
"
3756,2021\haas-mini-program\components\linkkit\dev_model\dm_manager.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_manager.c,"memcpy(response->device_name, node->device_name, strlen(node->device_name));",120,1,"    response->service_name = service_name;
    memcpy(response->product_key, node->product_key, strlen(node->product_key));
    memcpy(response->device_name, node->device_name, strlen(node->device_name));
    response->code = (iotx_dm_error_code_t)code;

"
3773,2021\haas-mini-program\components\linkkit\dev_model\dm_message.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_message.c,"memcpy(request, payload, payload_len);",120,1,"
    memset(request, 0, payload_len + 1);
    memcpy(request, payload, payload_len);
    if (g_user_topic_callback) {
        ((int (*)(const int, const unsigned char *, const int))g_user_topic_callback)(devid, request, payload_len);
"
3774,2021\haas-mini-program\components\linkkit\dev_model\dm_message.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_message.c,"memcpy(product_key, uri + start + 1, slice - start - 1);",120,1,"    }

    memcpy(product_key, uri + start + 1, slice - start - 1);
    memcpy(device_name, uri + slice + 1, end - slice - 1);

"
3775,2021\haas-mini-program\components\linkkit\dev_model\dm_message.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_message.c,"memcpy(device_name, uri + slice + 1, end - slice - 1);",120,1,"
    memcpy(product_key, uri + start + 1, slice - start - 1);
    memcpy(device_name, uri + slice + 1, end - slice - 1);

    return SUCCESS_RETURN;
"
3789,2021\haas-mini-program\components\linkkit\dev_model\dm_message.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_message.c,"memcpy(int_id, response->id.value, response->id.value_length);",120,1,"        return FAIL_RETURN;
    }
    memcpy(int_id, response->id.value, response->id.value_length);
    id = atoi(int_id);

"
3791,2021\haas-mini-program\components\linkkit\dev_model\dm_message.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_message.c,"memcpy(str_payload + 1, response->message.value, response->message.value_length);",120,1,"            memset(str_payload, 0, response->message.value_length + 3);
            str_payload[0] = '\""';
            memcpy(str_payload + 1, response->message.value, response->message.value_length);
            str_payload[1 + response->message.value_length] = '\""';

"
3813,2021\haas-mini-program\components\linkkit\dev_model\dm_message.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_message.c,"memcpy(product_key, lite_item_pk.value, lite_item_pk.value_length);",120,1,"            continue;
        }
        memcpy(product_key, lite_item_pk.value, lite_item_pk.value_length);
        memcpy(device_name, lite_item_dn.value, lite_item_dn.value_length);

"
3814,2021\haas-mini-program\components\linkkit\dev_model\dm_message.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_message.c,"memcpy(device_name, lite_item_dn.value, lite_item_dn.value_length);",120,1,"        }
        memcpy(product_key, lite_item_pk.value, lite_item_pk.value_length);
        memcpy(device_name, lite_item_dn.value, lite_item_dn.value_length);

        res = dm_mgr_device_create(IOTX_DM_DEVICE_SUBDEV, product_key, """", device_name, NULL, &devid);
"
3819,2021\haas-mini-program\components\linkkit\dev_model\dm_message.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_message.c,"memcpy(message, payload, payload_len);",120,1,"        return STATE_SYS_DEPEND_MALLOC;
    }
    memcpy(message, payload, payload_len);

    res = _dm_msg_send_to_user(IOTX_DM_EVENT_GATEWAY_PERMIT, message);
"
3820,2021\haas-mini-program\components\linkkit\dev_model\dm_message.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_message.c,"memcpy(temp_id, response->id.value, response->id.value_length);",120,1,"    if (response->code.value_int != IOTX_DM_ERR_CODE_SUCCESS) {
        /* Send Message To User */
        memcpy(temp_id, response->id.value, response->id.value_length);
        message_len = strlen(DM_MSG_EVENT_SUBDEV_REGISTER_REPLY_FMT) + DM_UTILS_UINT32_STRLEN * 2 + 1;
        message = DM_malloc(message_len);
"
3831,2021\haas-mini-program\components\linkkit\dev_model\dm_message.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_message.c,"memcpy(device_secret, lite_item_ds.value, lite_item_ds.value_length);",120,1,"        memcpy(product_key, lite_item_pk.value, lite_item_pk.value_length);
        memcpy(device_name, lite_item_dn.value, lite_item_dn.value_length);
        memcpy(device_secret, lite_item_ds.value, lite_item_ds.value_length);
        res = dm_mgr_search_device_by_pkdn(product_key, device_name, &devid);
        if (res != SUCCESS_RETURN) {
"
3888,2021\haas-mini-program\components\linkkit\dev_model\dm_message.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_message.c,"memcpy(params, DM_MSG_THING_TOPO_GET_PARAMS, strlen(DM_MSG_THING_TOPO_GET_PARAMS));",120,1,"    }
    memset(params, 0, params_len);
    memcpy(params, DM_MSG_THING_TOPO_GET_PARAMS, strlen(DM_MSG_THING_TOPO_GET_PARAMS));

    request->params = params;
"
3894,2021\haas-mini-program\components\linkkit\dev_model\dm_message.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_message.c,"memcpy(new_key, key, strlen(key));",120,1,"        memset(new_key, 0, new_key_len);
        if (key) {
            memcpy(new_key, key, strlen(key));
            new_key[strlen(new_key)] = DM_SHW_KEY_DELIMITER;
        }
"
3895,2021\haas-mini-program\components\linkkit\dev_model\dm_message.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_message.c,"memcpy(new_key + strlen(new_key), lite_item_key.value, lite_item_key.value_length);",120,1,"            new_key[strlen(new_key)] = DM_SHW_KEY_DELIMITER;
        }
        memcpy(new_key + strlen(new_key), lite_item_key.value, lite_item_key.value_length);

        if (lite_cjson_is_object(&lite_item_value)) {
"
3898,2021\haas-mini-program\components\linkkit\dev_model\dm_message.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_message.c,"memcpy(new_key + strlen(new_key), ascii_index, strlen(ascii_index));",120,1,"        }
        new_key[strlen(new_key)] = '[';
        memcpy(new_key + strlen(new_key), ascii_index, strlen(ascii_index));
        new_key[strlen(new_key)] = ']';
        DM_free(ascii_index);
"
3906,2021\haas-mini-program\components\linkkit\dev_model\dm_message.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_message.c,"memcpy(int_id, request->id.value, request->id.value_length);",120,1,"        return FAIL_RETURN;
    }
    memcpy(int_id, request->id.value, request->id.value_length);
    id = atoi(int_id);

"
3909,2021\haas-mini-program\components\linkkit\dev_model\dm_message.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_message.c,"memcpy(key, identifier, identifier_len);",120,1,"    }
    memset(key, 0, identifier_len + 1);
    memcpy(key, identifier, identifier_len);

    /* Parse Root */
"
3914,2021\haas-mini-program\components\linkkit\dev_model\dm_msg_process.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_msg_process.c,"memcpy(response->product_key, product_key, strlen(product_key));",120,1,"    response->service_prefix = DM_URI_SYS_PREFIX;
    response->service_name = dest->uri_name;
    memcpy(response->product_key, product_key, strlen(product_key));
    memcpy(response->device_name, device_name, strlen(device_name));
    response->code = (res == SUCCESS_RETURN) ? (IOTX_DM_ERR_CODE_SUCCESS) : (IOTX_DM_ERR_CODE_REQUEST_ERROR);
"
3915,2021\haas-mini-program\components\linkkit\dev_model\dm_msg_process.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_msg_process.c,"memcpy(response->device_name, device_name, strlen(device_name));",120,1,"    response->service_name = dest->uri_name;
    memcpy(response->product_key, product_key, strlen(product_key));
    memcpy(response->device_name, device_name, strlen(device_name));
    response->code = (res == SUCCESS_RETURN) ? (IOTX_DM_ERR_CODE_SUCCESS) : (IOTX_DM_ERR_CODE_REQUEST_ERROR);

"
3919,2021\haas-mini-program\components\linkkit\dev_model\dm_msg_process.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_msg_process.c,"memcpy(*data, ""{}"", strlen(""{}""));",120,1,"        }
        memset(*data, 0, strlen(""{}"") + 1);
        memcpy(*data, ""{}"", strlen(""{}""));

        *data_len = strlen((char *)*data);
"
3923,2021\haas-mini-program\components\linkkit\dev_model\dm_msg_process.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_msg_process.c,"memcpy(int_id, response.id.value, response.id.value_length);",120,1,"        return STATE_DEV_MODEL_WRONG_JSON_FORMAT;
    }
    memcpy(int_id, response.id.value, response.id.value_length);
    dm_msg_cache_remove(atoi(int_id));
#endif
"
3960,2021\haas-mini-program\components\linkkit\dev_model\dm_ota.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_ota.c,"memcpy(ctx->product_key, pk, strlen(pk) + 1);",120,1,"    memset(ctx, 0, sizeof(dm_ota_ctx_t));

    memcpy(ctx->product_key, pk, strlen(pk) + 1);
    memcpy(ctx->device_name, dn, strlen(dn) + 1);
    res = dm_ota_sub();
"
3961,2021\haas-mini-program\components\linkkit\dev_model\dm_ota.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_ota.c,"memcpy(ctx->device_name, dn, strlen(dn) + 1);",120,1,"
    memcpy(ctx->product_key, pk, strlen(pk) + 1);
    memcpy(ctx->device_name, dn, strlen(dn) + 1);
    res = dm_ota_sub();
    return res;
"
3964,2021\haas-mini-program\components\linkkit\dev_model\dm_server.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_server.c,"memcpy(alcs_context->ip, (char *)remote->addr, strlen((char *)remote->addr) + 1);",120,1,"    }
    memset(alcs_context->ip, 0, strlen((char *)remote->addr) + 1);
    memcpy(alcs_context->ip, (char *)remote->addr, strlen((char *)remote->addr) + 1);

    alcs_context->port = remote->port;
"
3966,2021\haas-mini-program\components\linkkit\dev_model\dm_server.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_server.c,"memcpy(alcs_context->token, message->token, message->header.tokenlen);",120,1,"    }
    memset(alcs_context->token, 0, message->header.tokenlen);
    memcpy(alcs_context->token, message->token, message->header.tokenlen);

    alcs_context->token_len = message->header.tokenlen;
"
3986,2021\haas-mini-program\components\linkkit\dev_model\dm_server_adapter.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_server_adapter.c,"memcpy(notify_sa.addr, ALCS_NOTIFY_HOST, strlen(ALCS_NOTIFY_HOST));",120,1,"
    memset(&notify_sa, 0, sizeof(notify_sa));
    memcpy(notify_sa.addr, ALCS_NOTIFY_HOST, strlen(ALCS_NOTIFY_HOST));
    notify_sa.port = ALCS_NOTIFY_PORT;

"
3999,2021\haas-mini-program\components\linkkit\dev_model\dm_tsl_alink.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_tsl_alink.c,"memcpy(*((char **)(complex_array->value) + index), temp, strlen(temp));",120,1,"        if (*((char **)(complex_array->value) + index) != NULL) {
            memset(*((char **)(complex_array->value) + index), 0, strlen(temp) + 1);
            memcpy(*((char **)(complex_array->value) + index), temp, strlen(temp));
        }
    }
"
4006,2021\haas-mini-program\components\linkkit\dev_model\dm_tsl_alink.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_tsl_alink.c,"memcpy(size_str, lite_item.value, lite_item.value_length);",120,1,"        return FAIL_RETURN;
    }
    memcpy(size_str, lite_item.value, lite_item.value_length);
    complex_array_next_level->size = atoi(size_str);

"
4054,2021\haas-mini-program\components\linkkit\dev_model\dm_utils.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_utils.c,"memcpy(*output, input, input_len);",120,1,"    }
    memset(*output, 0, output_len);
    memcpy(*output, input, input_len);

    return SUCCESS_RETURN;
"
4057,2021\haas-mini-program\components\linkkit\dev_model\dm_utils.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_utils.c,"memcpy(array_index_str, bracket_pre + 1, bracket_suf - bracket_pre - 1);",120,1,"            return FAIL_RETURN;
        }
        memcpy(array_index_str, bracket_pre + 1, bracket_suf - bracket_pre - 1);
        *array_index = atoi(array_index_str);
        return SUCCESS_RETURN;
"
4059,2021\haas-mini-program\components\linkkit\dev_model\dm_utils.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_utils.c,"memcpy(*output, temp_output, strlen(temp_output));",120,1,"    }
    memset(*output, 0, strlen(temp_output) + 1);
    memcpy(*output, temp_output, strlen(temp_output));

    return SUCCESS_RETURN;
"
4069,2021\haas-mini-program\components\linkkit\dev_model\dm_utils.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_utils.c,"memcpy(*service_name + strlen(*service_name), name, name_len);",120,1,"
    if (name != NULL) {
        memcpy(*service_name + strlen(*service_name), name, name_len);
    }

"
4071,2021\haas-mini-program\components\linkkit\dev_model\dm_utils.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_utils.c,"memcpy(*new_uri, prefix, strlen(prefix));",120,1,"    memset(*new_uri, 0, new_uri_len);
    
    memcpy(*new_uri, prefix, strlen(prefix));
    memcpy(*new_uri + strlen(*new_uri), uri, strlen(uri));

"
4072,2021\haas-mini-program\components\linkkit\dev_model\dm_utils.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\dm_utils.c,"memcpy(*new_uri + strlen(*new_uri), uri, strlen(uri));",120,1,"    
    memcpy(*new_uri, prefix, strlen(prefix));
    memcpy(*new_uri + strlen(*new_uri), uri, strlen(uri));

    return SUCCESS_RETURN;
"
4100,2021\haas-mini-program\components\linkkit\dev_model\impl_gateway.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\impl_gateway.c,"memcpy(params, lite_item_payload.value, lite_item_payload.value_length);",120,1,"            }
            memset(params, 0, lite_item_payload.value_length + 1);
            memcpy(params, lite_item_payload.value, lite_item_payload.value_length);

            _linkkit_gateway_upstream_mutex_lock();
"
4112,2021\haas-mini-program\components\linkkit\dev_model\impl_gateway.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\impl_gateway.c,"memcpy(identifier, lite_item_serviceid.value, lite_item_serviceid.value_length);",120,1,"            }
            memset(identifier, 0, lite_item_serviceid.value_length + 1);
            memcpy(identifier, lite_item_serviceid.value, lite_item_serviceid.value_length);

            input = IMPL_GATEWAY_MALLOC(lite_item_paylaod.value_length + 1);
"
4114,2021\haas-mini-program\components\linkkit\dev_model\impl_gateway.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\impl_gateway.c,"memcpy(input, lite_item_paylaod.value, lite_item_paylaod.value_length);",120,1,"            }
            memset(input, 0, lite_item_paylaod.value_length + 1);
            memcpy(input, lite_item_paylaod.value, lite_item_paylaod.value_length);


"
4135,2021\haas-mini-program\components\linkkit\dev_model\impl_gateway.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\impl_gateway.c,"memcpy(eventid, lite_item_eventid.value, lite_item_eventid.value_length);",120,1,"            }
            memset(eventid, 0, lite_item_eventid.value_length + 1);
            memcpy(eventid, lite_item_eventid.value, lite_item_eventid.value_length);

            _linkkit_gateway_upstream_mutex_lock();
"
4139,2021\haas-mini-program\components\linkkit\dev_model\impl_gateway.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\impl_gateway.c,"memcpy(version, lite_item_version.value, lite_item_version.value_length);",120,1,"            }
            memset(version, 0, lite_item_version.value_length + 1);
            memcpy(version, lite_item_version.value, lite_item_version.value_length);

            if (linkkit_gateway_ctx->fota_callback) {
"
4154,2021\haas-mini-program\components\linkkit\dev_model\impl_linkkit.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\impl_linkkit.c,"memcpy(insert_node->service_meta.rrpc.rrpc_id, rrpcid, rrpcid_len);",120,1,"            return STATE_DEV_MODEL_RRPCID_TOO_LONG;
        }
        memcpy(insert_node->service_meta.rrpc.rrpc_id, rrpcid, rrpcid_len);
    } else if (type == IOTX_SERVICE_REQ_TYPE_GENERAL) {
        insert_node->service_meta.general.alcs_ctx = alcs_ctx;
"
4158,2021\haas-mini-program\components\linkkit\dev_model\impl_linkkit.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\impl_linkkit.c,"memcpy(request, lite_item_payload.value, lite_item_payload.value_length);",120,1,"            }
            memset(request, 0, lite_item_payload.value_length + 1);
            memcpy(request, lite_item_payload.value, lite_item_payload.value_length);

            callback = iotx_event_callback(ITE_SERVICE_REQUEST);
"
4160,2021\haas-mini-program\components\linkkit\dev_model\impl_linkkit.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\impl_linkkit.c,"memcpy(property_payload, lite_item_payload.value, lite_item_payload.value_length);",120,1,"            }
            memset(property_payload, 0, lite_item_payload.value_length + 1);
            memcpy(property_payload, lite_item_payload.value, lite_item_payload.value_length);
#ifdef LOG_REPORT_TO_CLOUD
            if (SUCCESS_RETURN == check_target_msg(msg_id.value, msg_id.value_length)) {
"
4163,2021\haas-mini-program\components\linkkit\dev_model\impl_linkkit.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\impl_linkkit.c,"memcpy(property_data, lite_item_data.value, lite_item_data.value_length);",120,1,"            }
            memset(property_data, 0, lite_item_data.value_length + 1);
            memcpy(property_data, lite_item_data.value, lite_item_data.value_length);

            callback = iotx_event_callback(ITE_PROPERTY_DESIRED_GET_REPLY);
"
4167,2021\haas-mini-program\components\linkkit\dev_model\impl_linkkit.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\impl_linkkit.c,"memcpy(user_payload, lite_item_payload.value, lite_item_payload.value_length);",120,1,"                }
                memset(user_payload, 0, lite_item_payload.value_length + 1);
                memcpy(user_payload, lite_item_payload.value, lite_item_payload.value_length);
                user_payload_length = lite_item_payload.value_length;
            }
"
4169,2021\haas-mini-program\components\linkkit\dev_model\impl_linkkit.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\impl_linkkit.c,"memcpy(user_eventid, lite_item_eventid.value, lite_item_eventid.value_length);",120,1,"            }
            memset(user_eventid, 0, lite_item_eventid.value_length + 1);
            memcpy(user_eventid, lite_item_eventid.value, lite_item_eventid.value_length);

            user_payload = IMPL_LINKKIT_MALLOC(lite_item_payload.value_length + 1);
"
4173,2021\haas-mini-program\components\linkkit\dev_model\impl_linkkit.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\impl_linkkit.c,"memcpy(utc_payload, lite_item_utc.value, lite_item_utc.value_length);",120,1,"            }
            memset(utc_payload, 0, lite_item_utc.value_length + 1);
            memcpy(utc_payload, lite_item_utc.value, lite_item_utc.value_length);

            callback = iotx_event_callback(ITE_TIMESTAMP_REPLY);
"
4175,2021\haas-mini-program\components\linkkit\dev_model\impl_linkkit.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\impl_linkkit.c,"memcpy(rrpc_request, lite_item_payload.value, lite_item_payload.value_length);",120,1,"            }
            memset(rrpc_request, 0, lite_item_payload.value_length + 1);
            memcpy(rrpc_request, lite_item_payload.value, lite_item_payload.value_length);

            callback = iotx_event_callback(ITE_SERVICE_REQUEST);
"
4179,2021\haas-mini-program\components\linkkit\dev_model\impl_linkkit.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\impl_linkkit.c,"memcpy(err_data, lite_item_data.value, lite_item_data.value_length);",120,1,"
            memset(err_data, 0, lite_item_data.value_length + 1);
            memcpy(err_data, lite_item_data.value, lite_item_data.value_length);

            err_detail = IMPL_LINKKIT_MALLOC(lite_item_message.value_length + 1);
"
4181,2021\haas-mini-program\components\linkkit\dev_model\impl_linkkit.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\impl_linkkit.c,"memcpy(err_detail, lite_item_message.value, lite_item_message.value_length);",120,1,"
            memset(err_detail, 0, lite_item_message.value_length + 1);
            memcpy(err_detail, lite_item_message.value, lite_item_message.value_length);

            callback = iotx_event_callback(ITE_CLOUD_ERROR);
"
4183,2021\haas-mini-program\components\linkkit\dev_model\impl_linkkit.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\impl_linkkit.c,"memcpy(topo_list, lite_item_topo.value, lite_item_topo.value_length);",120,1,"            }
            memset(topo_list, 0, lite_item_topo.value_length + 1);
            memcpy(topo_list, lite_item_topo.value, lite_item_topo.value_length);

            callback = iotx_event_callback(ITE_TOPOLIST_REPLY);
"
4189,2021\haas-mini-program\components\linkkit\dev_model\impl_ntp.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\impl_ntp.c,"memcpy(server_tx_time, elem, len);",120,1,"    }

    memcpy(server_tx_time, elem, len);

    elem = json_get_value_by_name(payload, payload_len, SERVER_RX_TIME, &len, NULL);
"
4190,2021\haas-mini-program\components\linkkit\dev_model\impl_ntp.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\impl_ntp.c,"memcpy(server_rx_time, elem, len);",120,1,"    }

    memcpy(server_rx_time, elem, len);

    elem = json_get_value_by_name(payload, payload_len, DEV_TX_TIME, &len, NULL);
"
4200,2021\haas-mini-program\components\linkkit\dev_model\impl_solo.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\impl_solo.c,"memcpy(service, lite_item_serviceid.value, lite_item_serviceid.value_length);",120,1,"            }
            memset(service, 0, lite_item_serviceid.value_length + 1);
            memcpy(service, lite_item_serviceid.value, lite_item_serviceid.value_length);

            if (linkkit_solo_ctx->user_callback->thing_call_service) {
"
4202,2021\haas-mini-program\components\linkkit\dev_model\impl_solo.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\impl_solo.c,"memcpy(propertyid, lite_item_propertyid.value, lite_item_propertyid.value_length);",120,1,"            }
            memset(propertyid, 0, lite_item_propertyid.value_length + 1);
            memcpy(propertyid, lite_item_propertyid.value, lite_item_propertyid.value_length);

            if (linkkit_solo_ctx->user_callback->thing_prop_changed) {
"
4214,2021\haas-mini-program\components\linkkit\dev_model\iotx_cm_mqtt.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_model\iotx_cm_mqtt.c,"memcpy(topic, topic_info->ptopic, topic_info->topic_len);",120,1,"            }
            memset(topic, 0, topic_info->topic_len + 1);
            memcpy(topic, topic_info->ptopic, topic_info->topic_len);

            topic_handle_func(_mqtt_conncection->fd, topic, topic_info->payload, topic_info->payload_len, NULL);
"
4216,2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,"memcpy(clientid_string, device_id, strlen(device_id));",120,1,"        return STATE_MQTT_SIGN_CLIENTID_BUF_SHORT;
    }
    memcpy(clientid_string, device_id, strlen(device_id));
    memcpy(clientid_string + strlen(clientid_string), ""|"", 1);

"
4217,2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,"memcpy(clientid_string + strlen(clientid_string), ""|"", 1);",120,1,"    }
    memcpy(clientid_string, device_id, strlen(device_id));
    memcpy(clientid_string + strlen(clientid_string), ""|"", 1);

    if (enable_itls > 0) {
"
4218,2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,"memcpy(clientid_string + strlen(clientid_string), clientid_kv[i][0], strlen(clientid_kv[i][0]));",120,1,"        }

        memcpy(clientid_string + strlen(clientid_string), clientid_kv[i][0], strlen(clientid_kv[i][0]));
        memcpy(clientid_string + strlen(clientid_string), ""="", 1);
        memcpy(clientid_string + strlen(clientid_string), clientid_kv[i][1], strlen(clientid_kv[i][1]));
"
4219,2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,"memcpy(clientid_string + strlen(clientid_string), ""="", 1);",120,1,"
        memcpy(clientid_string + strlen(clientid_string), clientid_kv[i][0], strlen(clientid_kv[i][0]));
        memcpy(clientid_string + strlen(clientid_string), ""="", 1);
        memcpy(clientid_string + strlen(clientid_string), clientid_kv[i][1], strlen(clientid_kv[i][1]));
        memcpy(clientid_string + strlen(clientid_string), "","", 1);
"
4220,2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,"memcpy(clientid_string + strlen(clientid_string), clientid_kv[i][1], strlen(clientid_kv[i][1]));",120,1,"        memcpy(clientid_string + strlen(clientid_string), clientid_kv[i][0], strlen(clientid_kv[i][0]));
        memcpy(clientid_string + strlen(clientid_string), ""="", 1);
        memcpy(clientid_string + strlen(clientid_string), clientid_kv[i][1], strlen(clientid_kv[i][1]));
        memcpy(clientid_string + strlen(clientid_string), "","", 1);
    }
"
4221,2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,"memcpy(clientid_string + strlen(clientid_string), "","", 1);",120,1,"        memcpy(clientid_string + strlen(clientid_string), ""="", 1);
        memcpy(clientid_string + strlen(clientid_string), clientid_kv[i][1], strlen(clientid_kv[i][1]));
        memcpy(clientid_string + strlen(clientid_string), "","", 1);
    }

"
4222,2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,"memcpy(clientid_string + strlen(clientid_string), custom_kv, strlen(custom_kv));",120,1,"            return STATE_MQTT_SIGN_CLIENTID_BUF_SHORT;
        }
        memcpy(clientid_string + strlen(clientid_string), custom_kv, strlen(custom_kv));
        memcpy(clientid_string + strlen(clientid_string), "","", 1);
    }
"
4224,2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,"memcpy(clientid_string + strlen(clientid_string) - 1, ""|"", 1);",120,1,"    }

    memcpy(clientid_string + strlen(clientid_string) - 1, ""|"", 1);

    return STATE_SUCCESS;
"
4226,2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,"memcpy(signsource, ""clientId"", strlen(""clientId""));",120,1,"
    memset(signsource, 0, DEV_SIGN_SOURCE_MAXLEN);
    memcpy(signsource, ""clientId"", strlen(""clientId""));
    memcpy(signsource + strlen(signsource), device_id, strlen(device_id));
    memcpy(signsource + strlen(signsource), ""deviceName"", strlen(""deviceName""));
"
4227,2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,"memcpy(signsource + strlen(signsource), device_id, strlen(device_id));",120,1,"    memset(signsource, 0, DEV_SIGN_SOURCE_MAXLEN);
    memcpy(signsource, ""clientId"", strlen(""clientId""));
    memcpy(signsource + strlen(signsource), device_id, strlen(device_id));
    memcpy(signsource + strlen(signsource), ""deviceName"", strlen(""deviceName""));
    memcpy(signsource + strlen(signsource), device_name, strlen(device_name));
"
4228,2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,"memcpy(signsource + strlen(signsource), ""deviceName"", strlen(""deviceName""));",120,1,"    memcpy(signsource, ""clientId"", strlen(""clientId""));
    memcpy(signsource + strlen(signsource), device_id, strlen(device_id));
    memcpy(signsource + strlen(signsource), ""deviceName"", strlen(""deviceName""));
    memcpy(signsource + strlen(signsource), device_name, strlen(device_name));
    memcpy(signsource + strlen(signsource), ""productKey"", strlen(""productKey""));
"
4229,2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,"memcpy(signsource + strlen(signsource), device_name, strlen(device_name));",120,1,"    memcpy(signsource + strlen(signsource), device_id, strlen(device_id));
    memcpy(signsource + strlen(signsource), ""deviceName"", strlen(""deviceName""));
    memcpy(signsource + strlen(signsource), device_name, strlen(device_name));
    memcpy(signsource + strlen(signsource), ""productKey"", strlen(""productKey""));
    memcpy(signsource + strlen(signsource), product_key, strlen(product_key));
"
4230,2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,"memcpy(signsource + strlen(signsource), ""productKey"", strlen(""productKey""));",120,1,"    memcpy(signsource + strlen(signsource), ""deviceName"", strlen(""deviceName""));
    memcpy(signsource + strlen(signsource), device_name, strlen(device_name));
    memcpy(signsource + strlen(signsource), ""productKey"", strlen(""productKey""));
    memcpy(signsource + strlen(signsource), product_key, strlen(product_key));
    memcpy(signsource + strlen(signsource), ""timestamp"", strlen(""timestamp""));
"
4231,2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,"memcpy(signsource + strlen(signsource), product_key, strlen(product_key));",120,1,"    memcpy(signsource + strlen(signsource), device_name, strlen(device_name));
    memcpy(signsource + strlen(signsource), ""productKey"", strlen(""productKey""));
    memcpy(signsource + strlen(signsource), product_key, strlen(product_key));
    memcpy(signsource + strlen(signsource), ""timestamp"", strlen(""timestamp""));
    memcpy(signsource + strlen(signsource), TIMESTAMP_VALUE, strlen(TIMESTAMP_VALUE));
"
4232,2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,"memcpy(signsource + strlen(signsource), ""timestamp"", strlen(""timestamp""));",120,1,"    memcpy(signsource + strlen(signsource), ""productKey"", strlen(""productKey""));
    memcpy(signsource + strlen(signsource), product_key, strlen(product_key));
    memcpy(signsource + strlen(signsource), ""timestamp"", strlen(""timestamp""));
    memcpy(signsource + strlen(signsource), TIMESTAMP_VALUE, strlen(TIMESTAMP_VALUE));

"
4233,2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,"memcpy(signsource + strlen(signsource), TIMESTAMP_VALUE, strlen(TIMESTAMP_VALUE));",120,1,"    memcpy(signsource + strlen(signsource), product_key, strlen(product_key));
    memcpy(signsource + strlen(signsource), ""timestamp"", strlen(""timestamp""));
    memcpy(signsource + strlen(signsource), TIMESTAMP_VALUE, strlen(TIMESTAMP_VALUE));

    utils_hmac_sha256((uint8_t *)signsource, strlen(signsource), (uint8_t *)device_secret,
"
4235,2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,"memcpy(device_id, meta->product_key, strlen(meta->product_key));",120,1,"    memset(signout, 0, sizeof(iotx_sign_mqtt_t));

    memcpy(device_id, meta->product_key, strlen(meta->product_key));
    memcpy(device_id + strlen(device_id), ""."", strlen("".""));
    memcpy(device_id + strlen(device_id), meta->device_name, strlen(meta->device_name));
"
4236,2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,"memcpy(device_id + strlen(device_id), ""."", strlen("".""));",120,1,"
    memcpy(device_id, meta->product_key, strlen(meta->product_key));
    memcpy(device_id + strlen(device_id), ""."", strlen("".""));
    memcpy(device_id + strlen(device_id), meta->device_name, strlen(meta->device_name));

"
4237,2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,"memcpy(device_id + strlen(device_id), meta->device_name, strlen(meta->device_name));",120,1,"    memcpy(device_id, meta->product_key, strlen(meta->product_key));
    memcpy(device_id + strlen(device_id), ""."", strlen("".""));
    memcpy(device_id + strlen(device_id), meta->device_name, strlen(meta->device_name));

    /* setup clientid */
"
4240,2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,"memcpy(signout->hostname, g_infra_mqtt_domain[region], strlen(g_infra_mqtt_domain[region]));",120,1,"
        memset(signout->hostname, 0, DEV_SIGN_HOSTNAME_MAXLEN);
        memcpy(signout->hostname, g_infra_mqtt_domain[region], strlen(g_infra_mqtt_domain[region]));
    } else {
        length = strlen(meta->product_key) + strlen(g_infra_mqtt_domain[region]) + 2;
"
4242,2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,"memcpy(signout->hostname, meta->product_key, strlen(meta->product_key));",120,1,"        }
        memset(signout->hostname, 0, DEV_SIGN_HOSTNAME_MAXLEN);
        memcpy(signout->hostname, meta->product_key, strlen(meta->product_key));
        memcpy(signout->hostname + strlen(signout->hostname), ""."", strlen("".""));
        memcpy(signout->hostname + strlen(signout->hostname), g_infra_mqtt_domain[region],
"
4243,2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,"memcpy(signout->hostname + strlen(signout->hostname), ""."", strlen("".""));",120,1,"        memset(signout->hostname, 0, DEV_SIGN_HOSTNAME_MAXLEN);
        memcpy(signout->hostname, meta->product_key, strlen(meta->product_key));
        memcpy(signout->hostname + strlen(signout->hostname), ""."", strlen("".""));
        memcpy(signout->hostname + strlen(signout->hostname), g_infra_mqtt_domain[region],
               strlen(g_infra_mqtt_domain[region]));
"
4245,2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,"memcpy(signout->username, meta->device_name, strlen(meta->device_name));",120,1,"    }
    memset(signout->username, 0, DEV_SIGN_USERNAME_MAXLEN);
    memcpy(signout->username, meta->device_name, strlen(meta->device_name));
    memcpy(signout->username + strlen(signout->username), ""&"", strlen(""&""));
    memcpy(signout->username + strlen(signout->username), meta->product_key, strlen(meta->product_key));
"
4246,2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,"memcpy(signout->username + strlen(signout->username), ""&"", strlen(""&""));",120,1,"    memset(signout->username, 0, DEV_SIGN_USERNAME_MAXLEN);
    memcpy(signout->username, meta->device_name, strlen(meta->device_name));
    memcpy(signout->username + strlen(signout->username), ""&"", strlen(""&""));
    memcpy(signout->username + strlen(signout->username), meta->product_key, strlen(meta->product_key));

"
4247,2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dev_sign\dev_sign_mqtt.c,"memcpy(signout->username + strlen(signout->username), meta->product_key, strlen(meta->product_key));",120,1,"    memcpy(signout->username, meta->device_name, strlen(meta->device_name));
    memcpy(signout->username + strlen(signout->username), ""&"", strlen(""&""));
    memcpy(signout->username + strlen(signout->username), meta->product_key, strlen(meta->product_key));

    /* setup port */
"
4249,2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,"memcpy(random, ""8Ygb7ULYh53B6OA"", strlen(""8Ygb7ULYh53B6OA""));",120,1,"    /* Start Dynamic Register */
    memset(random, 0, DYNREG_RANDOM_KEY_LENGTH + 1);
    memcpy(random, ""8Ygb7ULYh53B6OA"", strlen(""8Ygb7ULYh53B6OA""));
    dynreg_info(""Random Key: %s"", random);

"
4251,2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,"memcpy(response->payload + strlen(response->payload), ptr, length);",120,1,"        return -1;
    }
    memcpy(response->payload + strlen(response->payload), ptr, length);

    return length;
"
4254,2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,"memcpy(device_secret, &response_payload[data_start + 1 + start], end - start + 1);",120,1,"    }

    memcpy(device_secret, &response_payload[data_start + 1 + start], end - start + 1);

    return STATE_SUCCESS;
"
4258,2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,"memcpy(signsource, ""deviceName"", strlen(""deviceName""));",120,1,"    }
    memset(signsource, 0, signsource_len);
    memcpy(signsource, ""deviceName"", strlen(""deviceName""));
    memcpy(signsource + strlen(signsource), meta_info->device_name, strlen(meta_info->device_name));
    memcpy(signsource + strlen(signsource), ""productKey"", strlen(""productKey""));
"
4259,2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,"memcpy(signsource + strlen(signsource), meta_info->device_name, strlen(meta_info->device_name));",120,1,"    memset(signsource, 0, signsource_len);
    memcpy(signsource, ""deviceName"", strlen(""deviceName""));
    memcpy(signsource + strlen(signsource), meta_info->device_name, strlen(meta_info->device_name));
    memcpy(signsource + strlen(signsource), ""productKey"", strlen(""productKey""));
    memcpy(signsource + strlen(signsource), meta_info->product_key, strlen(meta_info->product_key));
"
4261,2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,"memcpy(signsource + strlen(signsource), meta_info->product_key, strlen(meta_info->product_key));",120,1,"    memcpy(signsource + strlen(signsource), meta_info->device_name, strlen(meta_info->device_name));
    memcpy(signsource + strlen(signsource), ""productKey"", strlen(""productKey""));
    memcpy(signsource + strlen(signsource), meta_info->product_key, strlen(meta_info->product_key));
    memcpy(signsource + strlen(signsource), ""random"", strlen(""random""));
    memcpy(signsource + strlen(signsource), rand, strlen(rand));
"
4262,2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,"memcpy(signsource + strlen(signsource), ""random"", strlen(""random""));",120,1,"    memcpy(signsource + strlen(signsource), ""productKey"", strlen(""productKey""));
    memcpy(signsource + strlen(signsource), meta_info->product_key, strlen(meta_info->product_key));
    memcpy(signsource + strlen(signsource), ""random"", strlen(""random""));
    memcpy(signsource + strlen(signsource), rand, strlen(rand));

"
4263,2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,"memcpy(signsource + strlen(signsource), rand, strlen(rand));",120,1,"    memcpy(signsource + strlen(signsource), meta_info->product_key, strlen(meta_info->product_key));
    memcpy(signsource + strlen(signsource), ""random"", strlen(""random""));
    memcpy(signsource + strlen(signsource), rand, strlen(rand));

    utils_hmac_sha256((const uint8_t *)signsource, strlen(signsource), (uint8_t *)meta_info->product_secret,
"
4265,2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,"memcpy(signout->clientid, meta_info->product_key, strlen(meta_info->product_key));",120,1,"    }
    memset(signout->clientid, 0, clientid_len);
    memcpy(signout->clientid, meta_info->product_key, strlen(meta_info->product_key));
    memcpy(signout->clientid + strlen(signout->clientid), ""."", strlen("".""));
    memcpy(signout->clientid + strlen(signout->clientid), meta_info->device_name, strlen(meta_info->device_name));
"
4266,2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,"memcpy(signout->clientid + strlen(signout->clientid), ""."", strlen("".""));",120,1,"    memset(signout->clientid, 0, clientid_len);
    memcpy(signout->clientid, meta_info->product_key, strlen(meta_info->product_key));
    memcpy(signout->clientid + strlen(signout->clientid), ""."", strlen("".""));
    memcpy(signout->clientid + strlen(signout->clientid), meta_info->device_name, strlen(meta_info->device_name));
    memcpy(signout->clientid + strlen(signout->clientid), clientid1, strlen(clientid1));
"
4267,2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,"memcpy(signout->clientid + strlen(signout->clientid), meta_info->device_name, strlen(meta_info->device_name));",120,1,"    memcpy(signout->clientid, meta_info->product_key, strlen(meta_info->product_key));
    memcpy(signout->clientid + strlen(signout->clientid), ""."", strlen("".""));
    memcpy(signout->clientid + strlen(signout->clientid), meta_info->device_name, strlen(meta_info->device_name));
    memcpy(signout->clientid + strlen(signout->clientid), clientid1, strlen(clientid1));
    memcpy(signout->clientid + strlen(signout->clientid), rand, strlen(rand));
"
4268,2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,"memcpy(signout->clientid + strlen(signout->clientid), clientid1, strlen(clientid1));",120,1,"    memcpy(signout->clientid + strlen(signout->clientid), ""."", strlen("".""));
    memcpy(signout->clientid + strlen(signout->clientid), meta_info->device_name, strlen(meta_info->device_name));
    memcpy(signout->clientid + strlen(signout->clientid), clientid1, strlen(clientid1));
    memcpy(signout->clientid + strlen(signout->clientid), rand, strlen(rand));
    memcpy(signout->clientid + strlen(signout->clientid), clientid2, strlen(clientid2));
"
4269,2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,"memcpy(signout->clientid + strlen(signout->clientid), rand, strlen(rand));",120,1,"    memcpy(signout->clientid + strlen(signout->clientid), meta_info->device_name, strlen(meta_info->device_name));
    memcpy(signout->clientid + strlen(signout->clientid), clientid1, strlen(clientid1));
    memcpy(signout->clientid + strlen(signout->clientid), rand, strlen(rand));
    memcpy(signout->clientid + strlen(signout->clientid), clientid2, strlen(clientid2));

"
4270,2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,"memcpy(signout->clientid + strlen(signout->clientid), clientid2, strlen(clientid2));",120,1,"    memcpy(signout->clientid + strlen(signout->clientid), clientid1, strlen(clientid1));
    memcpy(signout->clientid + strlen(signout->clientid), rand, strlen(rand));
    memcpy(signout->clientid + strlen(signout->clientid), clientid2, strlen(clientid2));

    return STATE_SUCCESS;
"
4271,2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,"memcpy(ds, device_secret + 1, device_secret_len - 2);",120,1,"                                   &device_secret, &device_secret_len);
            if (res == STATE_SUCCESS) {
                memcpy(ds, device_secret + 1, device_secret_len - 2);
                memcpy(device_secret + 1 + 5, asterisk, strlen(asterisk));
                dynreg_info(""Topic  : %.*s"", topic_info->topic_len, topic_info->ptopic);
"
4272,2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,"memcpy(device_secret + 1 + 5, asterisk, strlen(asterisk));",120,1,"            if (res == STATE_SUCCESS) {
                memcpy(ds, device_secret + 1, device_secret_len - 2);
                memcpy(device_secret + 1 + 5, asterisk, strlen(asterisk));
                dynreg_info(""Topic  : %.*s"", topic_info->topic_len, topic_info->ptopic);
                dynreg_info(""Payload: %.*s"", topic_info->payload_len, topic_info->payload);
"
4275,2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,"memcpy(signout.hostname, g_infra_mqtt_domain[region], strlen(g_infra_mqtt_domain[region]));",120,1,"
        memset(signout.hostname, 0, DEV_SIGN_HOSTNAME_MAXLEN);
        memcpy(signout.hostname, g_infra_mqtt_domain[region], strlen(g_infra_mqtt_domain[region]));
    } else {
        length = strlen(meta->product_key) + strlen(g_infra_mqtt_domain[region]) + 2;
"
4277,2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,"memcpy(signout.hostname, meta->product_key, strlen(meta->product_key));",120,1,"        }
        memset(signout.hostname, 0, DEV_SIGN_HOSTNAME_MAXLEN);
        memcpy(signout.hostname, meta->product_key, strlen(meta->product_key));
        memcpy(signout.hostname + strlen(signout.hostname), ""."", strlen("".""));
        memcpy(signout.hostname + strlen(signout.hostname), g_infra_mqtt_domain[region],
"
4278,2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,"memcpy(signout.hostname + strlen(signout.hostname), ""."", strlen("".""));",120,1,"        memset(signout.hostname, 0, DEV_SIGN_HOSTNAME_MAXLEN);
        memcpy(signout.hostname, meta->product_key, strlen(meta->product_key));
        memcpy(signout.hostname + strlen(signout.hostname), ""."", strlen("".""));
        memcpy(signout.hostname + strlen(signout.hostname), g_infra_mqtt_domain[region],
               strlen(g_infra_mqtt_domain[region]));
"
4280,2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,"memcpy(signout.username, meta->device_name, strlen(meta->device_name));",120,1,"    }
    memset(signout.username, 0, DEV_SIGN_USERNAME_MAXLEN);
    memcpy(signout.username, meta->device_name, strlen(meta->device_name));
    memcpy(signout.username + strlen(signout.username), ""&"", strlen(""&""));
    memcpy(signout.username + strlen(signout.username), meta->product_key, strlen(meta->product_key));
"
4281,2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,"memcpy(signout.username + strlen(signout.username), ""&"", strlen(""&""));",120,1,"    memset(signout.username, 0, DEV_SIGN_USERNAME_MAXLEN);
    memcpy(signout.username, meta->device_name, strlen(meta->device_name));
    memcpy(signout.username + strlen(signout.username), ""&"", strlen(""&""));
    memcpy(signout.username + strlen(signout.username), meta->product_key, strlen(meta->product_key));

"
4282,2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,"memcpy(signout.username + strlen(signout.username), meta->product_key, strlen(meta->product_key));",120,1,"    memcpy(signout.username, meta->device_name, strlen(meta->device_name));
    memcpy(signout.username + strlen(signout.username), ""&"", strlen(""&""));
    memcpy(signout.username + strlen(signout.username), meta->product_key, strlen(meta->product_key));

    /* password */
"
4284,2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\dynamic_register\dynreg.c,"memcpy(meta->device_secret, device_secret, strlen(device_secret));",120,1,"    wrapper_mqtt_release(&pClient);

    memcpy(meta->device_secret, device_secret, strlen(device_secret));

    return res;
"
4285,2021\haas-mini-program\components\linkkit\infra\infra_activation.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_activation.c,"memcpy( encrypt_input, version_num, VERSION_NUM_SIZE);",120,1,"
	UINT8 encrypt_input[INPUT_SIZE];
	memcpy( encrypt_input, version_num, VERSION_NUM_SIZE);
	memcpy( encrypt_input+VERSION_NUM_SIZE, random_num, RANDOM_NUM_SIZE);
	memcpy( encrypt_input+VERSION_NUM_SIZE+RANDOM_NUM_SIZE,mac_address, MAC_ADDRESS_SIZE);
"
4286,2021\haas-mini-program\components\linkkit\infra\infra_activation.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_activation.c,"memcpy( encrypt_input+VERSION_NUM_SIZE, random_num, RANDOM_NUM_SIZE);",120,1,"	UINT8 encrypt_input[INPUT_SIZE];
	memcpy( encrypt_input, version_num, VERSION_NUM_SIZE);
	memcpy( encrypt_input+VERSION_NUM_SIZE, random_num, RANDOM_NUM_SIZE);
	memcpy( encrypt_input+VERSION_NUM_SIZE+RANDOM_NUM_SIZE,mac_address, MAC_ADDRESS_SIZE);
	memcpy( encrypt_input+VERSION_NUM_SIZE+RANDOM_NUM_SIZE+MAC_ADDRESS_SIZE, chip_code, CHIP_CODE_SIZE);
"
4287,2021\haas-mini-program\components\linkkit\infra\infra_activation.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_activation.c,"memcpy( encrypt_input+VERSION_NUM_SIZE+RANDOM_NUM_SIZE,mac_address, MAC_ADDRESS_SIZE);",120,1,"	memcpy( encrypt_input, version_num, VERSION_NUM_SIZE);
	memcpy( encrypt_input+VERSION_NUM_SIZE, random_num, RANDOM_NUM_SIZE);
	memcpy( encrypt_input+VERSION_NUM_SIZE+RANDOM_NUM_SIZE,mac_address, MAC_ADDRESS_SIZE);
	memcpy( encrypt_input+VERSION_NUM_SIZE+RANDOM_NUM_SIZE+MAC_ADDRESS_SIZE, chip_code, CHIP_CODE_SIZE);
	DEBUG_PRINTF("" after memcpy!!\n"");
"
4288,2021\haas-mini-program\components\linkkit\infra\infra_activation.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_activation.c,"memcpy( encrypt_input+VERSION_NUM_SIZE+RANDOM_NUM_SIZE+MAC_ADDRESS_SIZE, chip_code, CHIP_CODE_SIZE);",120,1,"	memcpy( encrypt_input+VERSION_NUM_SIZE, random_num, RANDOM_NUM_SIZE);
	memcpy( encrypt_input+VERSION_NUM_SIZE+RANDOM_NUM_SIZE,mac_address, MAC_ADDRESS_SIZE);
	memcpy( encrypt_input+VERSION_NUM_SIZE+RANDOM_NUM_SIZE+MAC_ADDRESS_SIZE, chip_code, CHIP_CODE_SIZE);
	DEBUG_PRINTF("" after memcpy!!\n"");

"
4289,2021\haas-mini-program\components\linkkit\infra\infra_activation.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_activation.c,"memcpy( &output_buffer[2*count], PLAIN_FLAG, strlen(PLAIN_FLAG) );",120,1,"		trans_byte2hex( &output_buffer[2*count], encrypt_input[count]);
	}
    memcpy( &output_buffer[2*count], PLAIN_FLAG, strlen(PLAIN_FLAG) );
    output_buffer[2*count+strlen(PLAIN_FLAG)]=0;

"
4290,2021\haas-mini-program\components\linkkit\infra\infra_activation.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_activation.c,"memcpy(_product_key, meta_info.product_key, IOTX_PRODUCT_KEY_LEN);",120,1,"    // HAL_GetDeviceName(_device_name);

    memcpy(_product_key, meta_info.product_key, IOTX_PRODUCT_KEY_LEN);
    memcpy(_device_name, meta_info.device_name, IOTX_DEVICE_NAME_LEN);

"
4291,2021\haas-mini-program\components\linkkit\infra\infra_activation.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_activation.c,"memcpy(_device_name, meta_info.device_name, IOTX_DEVICE_NAME_LEN);",120,1,"
    memcpy(_product_key, meta_info.product_key, IOTX_PRODUCT_KEY_LEN);
    memcpy(_device_name, meta_info.device_name, IOTX_DEVICE_NAME_LEN);

    /* Construct aos activation data */
"
4294,2021\haas-mini-program\components\linkkit\infra\infra_aes.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_aes.c,"memcpy( temp, input, 16 );",120,1,"        while( length > 0 )
        {
            memcpy( temp, input, 16 );
            infra_aes_crypt_ecb( ctx, mode, input, output );

"
4295,2021\haas-mini-program\components\linkkit\infra\infra_aes.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_aes.c,"memcpy( iv, temp, 16 );",120,1,"                output[i] = (unsigned char)( output[i] ^ iv[i] );

            memcpy( iv, temp, 16 );

            input  += 16;
"
4296,2021\haas-mini-program\components\linkkit\infra\infra_aes.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_aes.c,"memcpy( iv, output, 16 );",120,1,"
            infra_aes_crypt_ecb( ctx, mode, output, output );
            memcpy( iv, output, 16 );

            input  += 16;
"
4297,2021\haas-mini-program\components\linkkit\infra\infra_aes.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_aes.c,"memcpy(p_aes128->iv, iv, 16);",120,1,"
    if (ret == 0) {
        memcpy(p_aes128->iv, iv, 16);
        memcpy(p_aes128->key, key, 16);
    } else {
"
4298,2021\haas-mini-program\components\linkkit\infra\infra_aes.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_aes.c,"memcpy(p_aes128->key, key, 16);",120,1,"    if (ret == 0) {
        memcpy(p_aes128->iv, iv, 16);
        memcpy(p_aes128->key, key, 16);
    } else {
        free(p_aes128);
"
4305,2021\haas-mini-program\components\linkkit\infra\infra_cjson.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_cjson.c,"memcpy(lite_item, &current_item, sizeof(lite_cjson_t));",120,1,"
        if (iter_index == index) {
            memcpy(lite_item, &current_item, sizeof(lite_cjson_t));
            return 0;
        }
"
4309,2021\haas-mini-program\components\linkkit\infra\infra_cjson.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_cjson.c,"memcpy(lite_item, &current_item_value, sizeof(lite_cjson_t));",120,1,"        if ((current_item_key.value_length == key_len) &&
            memcmp(current_item_key.value, key, key_len) == 0) {
            memcpy(lite_item, &current_item_value, sizeof(lite_cjson_t));
            return 0;
        }
"
4311,2021\haas-mini-program\components\linkkit\infra\infra_cjson.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_cjson.c,"memcpy(&lite_iter, lite, sizeof(lite_cjson_t));",120,1,"    };

    memcpy(&lite_iter, lite, sizeof(lite_cjson_t));
    memset(&lite_prev, 0, sizeof(lite_cjson_t));

"
4314,2021\haas-mini-program\components\linkkit\infra\infra_cjson.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_cjson.c,"memcpy(&lite_iter, &lite_next, sizeof(lite_cjson_t));",120,1,"            /* printf(""current array item: %.*s\n"",lite_next.value_length,lite_next.value); */

            memcpy(&lite_iter, &lite_next, sizeof(lite_cjson_t));
            key_iter += array_key_len + 1;
            /* printf(""key_iter: %s\n"",key_iter); */
"
4315,2021\haas-mini-program\components\linkkit\infra\infra_cjson.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_cjson.c,"memcpy(&lite_iter, &lite_prev, sizeof(lite_cjson_t));",120,1,"            /* printf(""current object: %.*s\n"",lite_prev.value_length,lite_prev.value); */

            memcpy(&lite_iter, &lite_prev, sizeof(lite_cjson_t));
            key_iter = delim + 1;
        }
"
4316,2021\haas-mini-program\components\linkkit\infra\infra_cjson.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_cjson.c,"memcpy(lite_item, &lite_iter, sizeof(lite_cjson_t));",120,1,"
    /* printf(""final lite cjson value: %.*s\n"",lite_iter.value_length,lite_iter.value); */
    memcpy(lite_item, &lite_iter, sizeof(lite_cjson_t));

    return 0;
"
4320,2021\haas-mini-program\components\linkkit\infra\infra_cjson.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_cjson.c,"memcpy(lite_item_key, &current_item_key, sizeof(lite_cjson_t));",120,1,"        if (item_index == index) {
            if (lite_item_key) {
                memcpy(lite_item_key, &current_item_key, sizeof(lite_cjson_t));
            }
            if (lite_item_value) {
"
4321,2021\haas-mini-program\components\linkkit\infra\infra_cjson.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_cjson.c,"memcpy(lite_item_value, &current_item_value, sizeof(lite_cjson_t));",120,1,"            }
            if (lite_item_value) {
                memcpy(lite_item_value, &current_item_value, sizeof(lite_cjson_t));
            }
            return 0;
"
4322,2021\haas-mini-program\components\linkkit\infra\infra_cjson.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_cjson.c,"memcpy(newbuffer, p->buffer, p->offset + 1);",120,1,"        }
        if (newbuffer) {
            memcpy(newbuffer, p->buffer, p->offset + 1);
        }
        p->hooks.deallocate(p->buffer);
"
4328,2021\haas-mini-program\components\linkkit\infra\infra_cjson.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_cjson.c,"memcpy(output + 1, input, output_length);",120,1,"    if (escape_characters == 0) {
        output[0] = '\""';
        memcpy(output + 1, input, output_length);
        output[output_length + 1] = '\""';
        output[output_length + 2] = '\0';
"
4333,2021\haas-mini-program\components\linkkit\infra\infra_cjson.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_cjson.c,"memcpy(output, item->valuestring, raw_length);",120,1,"                return false;
            }
            memcpy(output, item->valuestring, raw_length);
            return true;
        }
"
4335,2021\haas-mini-program\components\linkkit\infra\infra_cjson.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_cjson.c,"memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));",120,1,"            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
        printed[buffer->offset] = '\0'; /* just to be sure */

"
4336,2021\haas-mini-program\components\linkkit\infra\infra_cjson.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_cjson.c,"memcpy(copy, string, length);",120,1,"        return NULL;
    }
    memcpy(copy, string, length);

    return copy;
"
4340,2021\haas-mini-program\components\linkkit\infra\infra_compat.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_compat.c,"memcpy(ctx->cloud_custom_domain, data, strlen((char *)data));",120,1,"            }
            memset(ctx->cloud_custom_domain, 0, strlen((char *)data) + 1);
            memcpy(ctx->cloud_custom_domain, data, strlen((char *)data));
            g_infra_mqtt_domain[IOTX_CLOUD_REGION_CUSTOM] = (const char *)ctx->cloud_custom_domain;
            res = SUCCESS_RETURN;
"
4342,2021\haas-mini-program\components\linkkit\infra\infra_compat.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_compat.c,"memcpy(ctx->http_custom_domain, data, strlen((char *)data));",120,1,"            }
            memset(ctx->http_custom_domain, 0, strlen((char *)data) + 1);
            memcpy(ctx->http_custom_domain, data, strlen((char *)data));
            g_infra_http_domain[IOTX_CLOUD_REGION_CUSTOM] = (const char *)ctx->http_custom_domain;
            res = SUCCESS_RETURN;
"
4344,2021\haas-mini-program\components\linkkit\infra\infra_compat.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_compat.c,"memcpy(ctx->product_key, data, strlen(data));",120,1,"            if ((data != NULL) && (strlen(data) <= IOTX_PRODUCT_KEY_LEN)) {
                memset(ctx->product_key, 0, IOTX_PRODUCT_KEY_LEN + 1);
                memcpy(ctx->product_key, data, strlen(data));
                res = SUCCESS_RETURN;
            } else {
"
4345,2021\haas-mini-program\components\linkkit\infra\infra_compat.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_compat.c,"memcpy(data, ctx->product_key, strlen(ctx->product_key));",120,1,"        break;
        case IOTX_IOCTL_GET_PRODUCT_KEY: {
            memcpy(data, ctx->product_key, strlen(ctx->product_key));
            res = SUCCESS_RETURN;
        }
"
4347,2021\haas-mini-program\components\linkkit\infra\infra_compat.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_compat.c,"memcpy(ctx->product_secret, data, strlen(data));",120,1,"            if ((data != NULL) && (strlen(data) <= IOTX_PRODUCT_SECRET_LEN)) {
                memset(ctx->product_secret, 0, IOTX_PRODUCT_SECRET_LEN + 1);
                memcpy(ctx->product_secret, data, strlen(data));
                res = SUCCESS_RETURN;
            } else {
"
4348,2021\haas-mini-program\components\linkkit\infra\infra_compat.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_compat.c,"memcpy(data, ctx->product_secret, strlen(ctx->product_secret));",120,1,"        break;
        case IOTX_IOCTL_GET_PRODUCT_SECRET: {
            memcpy(data, ctx->product_secret, strlen(ctx->product_secret));
            res = SUCCESS_RETURN;
        }
"
4350,2021\haas-mini-program\components\linkkit\infra\infra_compat.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_compat.c,"memcpy(ctx->device_name, data, strlen(data));",120,1,"            if ((data != NULL) && (strlen(data) <= IOTX_DEVICE_NAME_LEN)) {
                memset(ctx->device_name, 0, IOTX_DEVICE_NAME_LEN + 1);
                memcpy(ctx->device_name, data, strlen(data));
                res = SUCCESS_RETURN;
            } else {
"
4351,2021\haas-mini-program\components\linkkit\infra\infra_compat.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_compat.c,"memcpy(data, ctx->device_name, strlen(ctx->device_name));",120,1,"        break;
        case IOTX_IOCTL_GET_DEVICE_NAME: {
            memcpy(data, ctx->device_name, strlen(ctx->device_name));
            res = SUCCESS_RETURN;
        }
"
4353,2021\haas-mini-program\components\linkkit\infra\infra_compat.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_compat.c,"memcpy(ctx->device_secret, data, strlen(data));",120,1,"            if ((data != NULL) && (strlen(data) <= IOTX_DEVICE_SECRET_LEN)) {
                memset(ctx->device_secret, 0, IOTX_DEVICE_SECRET_LEN + 1);
                memcpy(ctx->device_secret, data, strlen(data));
                res = SUCCESS_RETURN;
            } else {
"
4354,2021\haas-mini-program\components\linkkit\infra\infra_compat.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_compat.c,"memcpy(data, ctx->device_secret, strlen(ctx->device_secret));",120,1,"        break;
        case IOTX_IOCTL_GET_DEVICE_SECRET: {
            memcpy(data, ctx->device_secret, strlen(ctx->device_secret));
            res = SUCCESS_RETURN;
        }
"
4356,2021\haas-mini-program\components\linkkit\infra\infra_compat.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_compat.c,"memcpy(ctx->mqtt_customzie_info, data, strlen((char *)data));",120,1,"            }
            memset(ctx->mqtt_customzie_info, 0, strlen((char *)data) + 1);
            memcpy(ctx->mqtt_customzie_info, data, strlen((char *)data));
            res = SUCCESS_RETURN;
        }
"
4358,2021\haas-mini-program\components\linkkit\infra\infra_httpc.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_httpc.c,"memcpy(host, host_ptr, host_len);",120,1,"    }

    memcpy(host, host_ptr, host_len);
    host[host_len] = '\0';
    fragment_ptr = strchr(host_ptr, '#');
"
4359,2021\haas-mini-program\components\linkkit\infra\infra_httpc.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_httpc.c,"memcpy(path, path_ptr, path_len);",120,1,"    }

    memcpy(path, path_ptr, path_len);
    path[path_len] = '\0';

"
4360,2021\haas-mini-program\components\linkkit\infra\infra_httpc.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_httpc.c,"memcpy(send_buf + idx, buf, cp_len);",120,1,"        }

        memcpy(send_buf + idx, buf, cp_len);
        idx += cp_len;
        len -= cp_len;
"
4362,2021\haas-mini-program\components\linkkit\infra\infra_httpc.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_httpc.c,"memcpy(client_data->response_buf + count, data, len_to_write_to_respons_buf);",120,1,"    int count = *recv_count;
    if (count + len_to_write_to_respons_buf < client_data->response_buf_len - 1) {
        memcpy(client_data->response_buf + count, data, len_to_write_to_respons_buf);
        count += len_to_write_to_respons_buf;
        client_data->response_buf[count] = '\0';
"
4363,2021\haas-mini-program\components\linkkit\infra\infra_httpc.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_httpc.c,"memcpy(client_data->response_buf + count, data, client_data->response_buf_len - 1 - count);",120,1,"        return STATE_SUCCESS;
    } else {
        memcpy(client_data->response_buf + count, data, client_data->response_buf_len - 1 - count);
        client_data->response_buf[client_data->response_buf_len - 1] = '\0';
        client_data->retrieve_len -= (client_data->response_buf_len - 1 - count);
"
4367,2021\haas-mini-program\components\linkkit\infra\infra_httpc.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_httpc.c,"memcpy(*ptr, data, strlen(data));",120,1,"    }
    memset(*ptr, 0, strlen(data) + 1);
    memcpy(*ptr, data, strlen(data));

    return STATE_SUCCESS;
"
4380,2021\haas-mini-program\components\linkkit\infra\infra_md5.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_md5.c,"memcpy((void *)(ctx->buffer + left), input, fill);",120,1,"
    if (left && ilen >= fill) {
        memcpy((void *)(ctx->buffer + left), input, fill);
        utils_md5_process(ctx, ctx->buffer);
        input += fill;
"
4381,2021\haas-mini-program\components\linkkit\infra\infra_md5.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_md5.c,"memcpy((void *)(ctx->buffer + left), input, ilen);",120,1,"
    if (ilen > 0) {
        memcpy((void *)(ctx->buffer + left), input, ilen);
    }
}
"
4384,2021\haas-mini-program\components\linkkit\infra\infra_md5.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_md5.c,"memcpy(k_ipad, key, key_len);",120,1,"    memset(k_ipad, 0, sizeof(k_ipad));
    memset(k_opad, 0, sizeof(k_opad));
    memcpy(k_ipad, key, key_len);
    memcpy(k_opad, key, key_len);

"
4385,2021\haas-mini-program\components\linkkit\infra\infra_md5.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_md5.c,"memcpy(k_opad, key, key_len);",120,1,"    memset(k_opad, 0, sizeof(k_opad));
    memcpy(k_ipad, key, key_len);
    memcpy(k_opad, key, key_len);

    /* XOR key with ipad and opad values */
"
4400,2021\haas-mini-program\components\linkkit\mqtt\iotx_mqtt_client.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\mqtt\iotx_mqtt_client.c,"memcpy(pClient->connect_data.struct_id, pConnectParams->struct_id, 4);",120,1,"    }

    memcpy(pClient->connect_data.struct_id, pConnectParams->struct_id, 4);
    pClient->connect_data.struct_version = pConnectParams->struct_version;
    pClient->connect_data.MQTTVersion = pConnectParams->MQTTVersion;
"
4401,2021\haas-mini-program\components\linkkit\mqtt\iotx_mqtt_client.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\mqtt\iotx_mqtt_client.c,"memcpy(pClient->connect_data.will.struct_id, pConnectParams->will.struct_id, 4);",120,1,"    pClient->connect_data.username = pConnectParams->username;
    pClient->connect_data.password = pConnectParams->password;
    memcpy(pClient->connect_data.will.struct_id, pConnectParams->will.struct_id, 4);
    pClient->connect_data.will.struct_version = pConnectParams->will.struct_version;
    pClient->connect_data.will.topicName = pConnectParams->will.topicName;
"
4406,2021\haas-mini-program\components\linkkit\mqtt\iotx_mqtt_client.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\mqtt\iotx_mqtt_client.c,"memcpy(temp, c->buf_read, c->buf_size_read < tmp_len ? c->buf_size_read : tmp_len);",120,1,"        }
        memset(temp, 0, tmp_len);
        memcpy(temp, c->buf_read, c->buf_size_read < tmp_len ? c->buf_size_read : tmp_len);
        mqtt_free(c->buf_read);
        c->buf_read = temp;
"
4408,2021\haas-mini-program\components\linkkit\mqtt\iotx_mqtt_client.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\mqtt\iotx_mqtt_client.c,"memcpy(repubInfo->buf, c->buf_send, len);",120,1,"    repubInfo->buf = (unsigned char *)repubInfo + sizeof(iotx_mc_pub_info_t);

    memcpy(repubInfo->buf, c->buf_send, len);
    INIT_LIST_HEAD(&repubInfo->linked_list);

"
4409,2021\haas-mini-program\components\linkkit\mqtt\iotx_mqtt_client.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\mqtt\iotx_mqtt_client.c,"memcpy(c->list_pub_wait_ack[idx].buf, c->buf_send, len);",120,1,"            c->list_pub_wait_ack[idx].len = len;
            iotx_time_start(&c->list_pub_wait_ack[idx].pub_start_time);
            memcpy(c->list_pub_wait_ack[idx].buf, c->buf_send, len);
            c->list_pub_wait_ack[idx].used = 1;
            *node = &c->list_pub_wait_ack[idx];
"
4411,2021\haas-mini-program\components\linkkit\mqtt\iotx_mqtt_client.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\mqtt\iotx_mqtt_client.c,"memcpy(outbuf, comp_data, outlen > MQTT_ZIP_PATH_DEFAULT_LEN ? MQTT_ZIP_PATH_DEFAULT_LEN : outlen);",120,1,"    utils_sha256((unsigned char *)path, (size_t)len, comp_data);

    memcpy(outbuf, comp_data, outlen > MQTT_ZIP_PATH_DEFAULT_LEN ? MQTT_ZIP_PATH_DEFAULT_LEN : outlen);
    return STATE_SUCCESS;
}
"
4413,2021\haas-mini-program\components\linkkit\mqtt\iotx_mqtt_client.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\mqtt\iotx_mqtt_client.c,"memcpy(payload, topic_msg->payload, topic_msg->payload_len);",120,1,"        }
        memset(payload, 0, topic_msg->payload_len + 1);
        memcpy(payload, topic_msg->payload, topic_msg->payload_len);

        callback = iotx_event_callback(ITE_IDENTITY_RESPONSE);
"
4415,2021\haas-mini-program\components\linkkit\mqtt\iotx_mqtt_client.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\mqtt\iotx_mqtt_client.c,"memcpy(str_product_key, product_key + 1, product_key_len - 2);",120,1,"            }
            memset(str_product_key, 0, product_key_len - 2 + 1);
            memcpy(str_product_key, product_key + 1, product_key_len - 2);

            str_device_name = amp_malloc(device_name_len - 2 + 1);
"
4417,2021\haas-mini-program\components\linkkit\mqtt\iotx_mqtt_client.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\mqtt\iotx_mqtt_client.c,"memcpy(str_device_name, device_name + 1, device_name_len - 2);",120,1,"            }
            memset(str_device_name, 0, device_name_len - 2 + 1);
            memcpy(str_device_name, device_name + 1, device_name_len - 2);

            IOT_Ioctl(IOTX_IOCTL_SET_PRODUCT_KEY, str_product_key);
"
4425,2021\haas-mini-program\components\linkkit\mqtt\iotx_mqtt_client.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\mqtt\iotx_mqtt_client.c,"memcpy((char *)handler->topic_filter, topicFilter, strlen(topicFilter) + 1);",120,1,"    memset((char *)handler->topic_filter, 0, CONFIG_MQTT_TOPIC_MAXLEN);
#endif
    memcpy((char *)handler->topic_filter, topicFilter, strlen(topicFilter) + 1);
#else
    if (strstr(topicFilter, ""/+"") != NULL || strstr(topicFilter, ""/#"") != NULL) {
"
4460,2021\haas-mini-program\components\linkkit\mqtt\MQTTPacket.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\mqtt\MQTTPacket.c,"memcpy(*pptr, string, len);",120,1,"    int len = strlen(string);
    writeInt(pptr, len);
    memcpy(*pptr, string, len);
    *pptr += len;
}
"
4461,2021\haas-mini-program\components\linkkit\mqtt\MQTTPacket.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\mqtt\MQTTPacket.c,"memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);",120,1,"    if (mqttstring.lenstring.len > 0) {
        writeInt(pptr, mqttstring.lenstring.len);
        memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
        *pptr += mqttstring.lenstring.len;
    } else if (mqttstring.cstring) {
"
4462,2021\haas-mini-program\components\linkkit\mqtt\MQTTSerializePublish.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\mqtt\MQTTSerializePublish.c,"memcpy(ptr, payload, payloadlen);",120,1,"    }

    memcpy(ptr, payload, payloadlen);
    ptr += payloadlen;

"
4463,2021\haas-mini-program\components\linkkit\mqtt\mqtt_api.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\mqtt\mqtt_api.c,"memcpy(kv_key + strlen(kv_key), meta_info->device_name, strlen(meta_info->device_name));",120,1,"    int buffer_len = IOTX_DEVICE_SECRET_LEN;

    memcpy(kv_key + strlen(kv_key), meta_info->device_name, strlen(meta_info->device_name));

    /* Check if Device Secret exist in KV */
"
4471,2021\haas-mini-program\components\linkkit\mqtt\mqtt_api.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\mqtt\mqtt_api.c,"memcpy(&meta_info_interal, &meta_info, sizeof(iotx_dev_meta_info_t));",120,1,"    /* get meta_info from hal */
    memset(&meta_info_interal, 0, sizeof(iotx_dev_meta_info_t));
    memcpy(&meta_info_interal, &meta_info, sizeof(iotx_dev_meta_info_t));

    if (meta_info_interal.product_key[IOTX_PRODUCT_KEY_LEN] != '\0') {
"
4473,2021\haas-mini-program\components\linkkit\mqtt\mqtt_api.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\mqtt\mqtt_api.c,"memcpy(g_internal_sign.username, tmp_sign.username, strlen(tmp_sign.username));",120,1,"        }

        memcpy(g_internal_sign.username, tmp_sign.username, strlen(tmp_sign.username));
        memcpy(g_internal_sign.password, tmp_sign.password, strlen(tmp_sign.password));
        memcpy(g_internal_sign.clientid, tmp_sign.clientid, strlen(tmp_sign.clientid));
"
4474,2021\haas-mini-program\components\linkkit\mqtt\mqtt_api.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\mqtt\mqtt_api.c,"memcpy(g_internal_sign.password, tmp_sign.password, strlen(tmp_sign.password));",120,1,"
        memcpy(g_internal_sign.username, tmp_sign.username, strlen(tmp_sign.username));
        memcpy(g_internal_sign.password, tmp_sign.password, strlen(tmp_sign.password));
        memcpy(g_internal_sign.clientid, tmp_sign.clientid, strlen(tmp_sign.clientid));
    }
"
4475,2021\haas-mini-program\components\linkkit\mqtt\mqtt_api.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\mqtt\mqtt_api.c,"memcpy(g_internal_sign.clientid, tmp_sign.clientid, strlen(tmp_sign.clientid));",120,1,"        memcpy(g_internal_sign.username, tmp_sign.username, strlen(tmp_sign.username));
        memcpy(g_internal_sign.password, tmp_sign.password, strlen(tmp_sign.password));
        memcpy(g_internal_sign.clientid, tmp_sign.clientid, strlen(tmp_sign.clientid));
    }
#else /* direct mode */
"
4476,2021\haas-mini-program\components\linkkit\mqtt\mqtt_api.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\mqtt\mqtt_api.c,"memcpy(device_id, meta_info_interal.product_key, strlen(meta_info_interal.product_key));",120,1,"
    /* setup device_id */
    memcpy(device_id, meta_info_interal.product_key, strlen(meta_info_interal.product_key));
    memcpy(device_id + strlen(device_id), ""."", strlen("".""));
    memcpy(device_id + strlen(device_id), meta_info_interal.device_name, strlen(meta_info_interal.device_name));
"
4478,2021\haas-mini-program\components\linkkit\mqtt\mqtt_api.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\mqtt\mqtt_api.c,"memcpy(device_id + strlen(device_id), meta_info_interal.device_name, strlen(meta_info_interal.device_name));",120,1,"    memcpy(device_id, meta_info_interal.product_key, strlen(meta_info_interal.product_key));
    memcpy(device_id + strlen(device_id), ""."", strlen("".""));
    memcpy(device_id + strlen(device_id), meta_info_interal.device_name, strlen(meta_info_interal.device_name));

    /* reconfig clientid, append custome clientKV and itls switch flag */
"
4482,2021\haas-mini-program\components\linkkit\mqtt\mqtt_api.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\mqtt\mqtt_api.c,"memcpy(g_default_sign.username, tmp_sign.username, strlen(tmp_sign.username));",120,1,"        }

        memcpy(g_default_sign.username, tmp_sign.username, strlen(tmp_sign.username));
        memcpy(g_default_sign.password, tmp_sign.password, strlen(tmp_sign.password));
        memcpy(g_default_sign.clientid, tmp_sign.clientid, strlen(tmp_sign.clientid));
"
4483,2021\haas-mini-program\components\linkkit\mqtt\mqtt_api.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\mqtt\mqtt_api.c,"memcpy(g_default_sign.password, tmp_sign.password, strlen(tmp_sign.password));",120,1,"
        memcpy(g_default_sign.username, tmp_sign.username, strlen(tmp_sign.username));
        memcpy(g_default_sign.password, tmp_sign.password, strlen(tmp_sign.password));
        memcpy(g_default_sign.clientid, tmp_sign.clientid, strlen(tmp_sign.clientid));
    }
"
4484,2021\haas-mini-program\components\linkkit\mqtt\mqtt_api.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\mqtt\mqtt_api.c,"memcpy(g_default_sign.clientid, tmp_sign.clientid, strlen(tmp_sign.clientid));",120,1,"        memcpy(g_default_sign.username, tmp_sign.username, strlen(tmp_sign.username));
        memcpy(g_default_sign.password, tmp_sign.password, strlen(tmp_sign.password));
        memcpy(g_default_sign.clientid, tmp_sign.clientid, strlen(tmp_sign.clientid));
    }
#else /* direct mode */
"
4485,2021\haas-mini-program\components\linkkit\mqtt\mqtt_api.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\mqtt\mqtt_api.c,"memcpy(device_id, meta_info.product_key, strlen(meta_info.product_key));",120,1,"
    /* setup device_id */
    memcpy(device_id, meta_info.product_key, strlen(meta_info.product_key));
    memcpy(device_id + strlen(device_id), ""."", strlen("".""));
    memcpy(device_id + strlen(device_id), meta_info.device_name, strlen(meta_info.device_name));
"
4487,2021\haas-mini-program\components\linkkit\mqtt\mqtt_api.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\mqtt\mqtt_api.c,"memcpy(device_id + strlen(device_id), meta_info.device_name, strlen(meta_info.device_name));",120,1,"    memcpy(device_id, meta_info.product_key, strlen(meta_info.product_key));
    memcpy(device_id + strlen(device_id), ""."", strlen("".""));
    memcpy(device_id + strlen(device_id), meta_info.device_name, strlen(meta_info.device_name));

    /* reconfig clientid, append custome clientKV and itls switch flag */
"
4500,2021\haas-mini-program\components\ota\hal\ota_hal_fs_ctrl.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\ota\hal\ota_hal_fs_ctrl.c,"memcpy(&filename[path_len], SUBDEV_FILE_NAME, 8);",120,1,"        }
        OTA_LOG_I(""path=%s"", filename);
        memcpy(&filename[path_len], SUBDEV_FILE_NAME, 8);
        OTA_LOG_I(""path=%s"", filename);
        filename[path_len + 8] = 0;
"
4501,2021\haas-mini-program\components\ota\hal\ota_hal_fs_ctrl.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\ota\hal\ota_hal_fs_ctrl.c,"memcpy(&filename[path_len], OS_APP_NAME, 12);",120,1,"            filename[path_len++] = '/'; 
        }
        memcpy(&filename[path_len], OS_APP_NAME, 12);
        filename[path_len + 12] = 0;
    }
"
4506,2021\haas-mini-program\components\ota\hal\ota_hal_fs_plat.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\ota\hal\ota_hal_fs_plat.c,"memcpy(&upack_path[upack_path_len], file_name, 8);",120,1,"            upack_path[upack_path_len++] = '/'; 
        }
        memcpy(&upack_path[upack_path_len], file_name, 8);
        fptr = ota_fopen(upack_path, ""r"");
        if(fptr == NULL) {
"
4515,2021\haas-mini-program\components\ota\hal\ota_hal_plat.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\ota\hal\ota_hal_plat.c,"memcpy(ota_cache + ota_cache_len, in_buf, tocopy);",120,1,"    }
    /*Start from last byte of remaing data*/
    memcpy(ota_cache + ota_cache_len, in_buf, tocopy);
    ota_cache_len += tocopy;
    if (ota_cache_len == OTA_FLASH_WRITE_CACHE_SIZE) {
"
4516,2021\haas-mini-program\components\ota\hal\ota_hal_plat.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\ota\hal\ota_hal_plat.c,"memcpy(ota_cache, in_buf + tocopy, in_buf_len - tocopy);",120,1,"    if (in_buf_len - tocopy > 0) {
        /*Now ota_cache only contains remaing data*/
        memcpy(ota_cache, in_buf + tocopy, in_buf_len - tocopy);
        ota_cache_len = in_buf_len - tocopy;
    }
"
4523,2021\haas-mini-program\components\ota\ota_agent\ota_service.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\ota\ota_agent\ota_service.c,"memcpy(ota_param.sign, ctx->header.sign_info->signature, sizeof(ota_param.sign));",120,1,"            int result = 0;
            memset(tmp_buf, 0x00, sizeof(tmp_buf));
            memcpy(ota_param.sign, ctx->header.sign_info->signature, sizeof(ota_param.sign));
            ota_param.hash_type = OTA_SHA256;
            result = ota_hex2str(tmp_buf, (const unsigned char*)ctx->header.sign_info->hash, sizeof(tmp_buf), sizeof(ctx->header.sign_info->hash));
"
4524,2021\haas-mini-program\components\ota\ota_agent\ota_service.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\ota\ota_agent\ota_service.c,"memcpy(ota_param.hash, tmp_buf, sizeof(tmp_buf));",120,1,"            result = ota_hex2str(tmp_buf, (const unsigned char*)ctx->header.sign_info->hash, sizeof(tmp_buf), sizeof(ctx->header.sign_info->hash));
            if(result >= 0) {
                memcpy(ota_param.hash, tmp_buf, sizeof(tmp_buf));
            }
            else {
"
4531,2021\haas-mini-program\components\ota\ota_agent\download\ota_download_http.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\ota\ota_agent\download\ota_download_http.c,"memcpy(sign_info_ptr, content, tmp_size);",120,1,"#ifdef OTA_CONFIG_LOCAL_RSA
                        if(ota_rx_size  + tmp_size <= sizeof(ota_sign_info_t)) {
                            memcpy(sign_info_ptr, content, tmp_size);
                            sign_info_ptr += tmp_size;
                            ota_rx_size += tmp_size;
"
4532,2021\haas-mini-program\components\ota\ota_agent\download\ota_download_http.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\ota\ota_agent\download\ota_download_http.c,"memcpy(sign_info_ptr, content, remain_len);",120,1,"                            if(ota_rx_size <= sizeof(ota_sign_info_t)) {
                                unsigned int remain_len = sizeof(ota_sign_info_t) - ota_rx_size;
                                memcpy(sign_info_ptr, content, remain_len);
                                sign_info_ptr += remain_len;
                                content += remain_len;
"
4533,2021\haas-mini-program\components\ota\ota_agent\download\ota_download_http.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\ota\ota_agent\download\ota_download_http.c,"memcpy(image_info_ptr, content, tmp_size - remain_len);",120,1,"                                sign_info_ptr += remain_len;
                                content += remain_len;
                                memcpy(image_info_ptr, content, tmp_size - remain_len);
                                image_info_ptr += tmp_size - remain_len;
                                ota_rx_size += tmp_size;
"
4534,2021\haas-mini-program\components\ota\ota_agent\download\ota_download_http.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\ota\ota_agent\download\ota_download_http.c,"memcpy(image_info_ptr, content, tmp_size);",120,1,"                            }
                            else {
                                memcpy(image_info_ptr, content, tmp_size);
                                image_info_ptr += tmp_size;
                                ota_rx_size += tmp_size;
"
4550,2021\haas-mini-program\components\ota\ota_agent\tools\xz\src\xz_dec_lzma2.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\ota\ota_agent\tools\xz\src\xz_dec_lzma2.c,"memcpy(dict->buf + dict->pos, b->in + b->in_pos, copy_size);",120,1,"		*left -= copy_size;

		memcpy(dict->buf + dict->pos, b->in + b->in_pos, copy_size);
		dict->pos += copy_size;

"
4551,2021\haas-mini-program\components\ota\ota_agent\tools\xz\src\xz_dec_lzma2.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\ota\ota_agent\tools\xz\src\xz_dec_lzma2.c,"memcpy(s->temp.buf + s->temp.size, b->in + b->in_pos, tmp);",120,1,"			tmp = in_avail;

		memcpy(s->temp.buf + s->temp.size, b->in + b->in_pos, tmp);

		if (s->temp.size + tmp == s->lzma2.compressed) {
"
4552,2021\haas-mini-program\components\ota\ota_agent\tools\xz\src\xz_dec_lzma2.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\ota\ota_agent\tools\xz\src\xz_dec_lzma2.c,"memcpy(s->temp.buf, b->in + b->in_pos, in_avail);",120,1,"			in_avail = s->lzma2.compressed;

		memcpy(s->temp.buf, b->in + b->in_pos, in_avail);
		s->temp.size = in_avail;
		b->in_pos += in_avail;
"
4553,2021\haas-mini-program\components\ota\ota_agent\tools\xz\src\xz_dec_stream.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\ota\ota_agent\tools\xz\src\xz_dec_stream.c,"memcpy(s->temp.buf + s->temp.pos, b->in + b->in_pos, copy_size);",120,1,"			b->in_size - b->in_pos, s->temp.size - s->temp.pos);

	memcpy(s->temp.buf + s->temp.pos, b->in + b->in_pos, copy_size);
	b->in_pos += copy_size;
	s->temp.pos += copy_size;
"
4566,2021\haas-mini-program\components\ulog\ulog_session_file.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\ulog\ulog_session_file.c,"memcpy(ulog_fs_tmp[tmp_queue_in], data, len);",120,1,"            ulog_fs_tmp[tmp_queue_in] = (char*)aos_malloc(len + 1);
            if (NULL != ulog_fs_tmp[tmp_queue_in]) {
                memcpy(ulog_fs_tmp[tmp_queue_in], data, len);
                ulog_fs_tmp[tmp_queue_in][len] = '\0';
                tmp_queue_in = (tmp_queue_in + 1) % ULOG_RESERVED_FS_SIZE;
"
4567,2021\haas-mini-program\components\ulog\ulog_session_file.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\ulog\ulog_session_file.c,"memcpy(*server, url, p - url);",120,1,"                *server = (char*)aos_malloc(p - url + 1);
                if (NULL != *server) {
                    memcpy(*server, url, p - url);
                    (*server)[p - url] = '\0';
                    const short n = strlen(p);
"
4568,2021\haas-mini-program\components\ulog\ulog_session_file.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\ulog\ulog_session_file.c,"memcpy(*uri, p, n);",120,1,"                    *uri = (char*)aos_malloc(n + 1);
                    if (NULL != *uri) {
                        memcpy(*uri, p, n);
                        (*uri)[n] = '\0';
                        rc = 0;
"
4595,2021\haas-mini-program\components\und\src\und_packet.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\und\src\und_packet.c,"memcpy(dn, AMP_INTERNAL_DEVICENAME, IOTX_DEVICE_NAME_LEN);",120,1,"
    amp_kv_get(AMP_INTERNAL_PRODUCTKEY, pk, &productkey_len);
    memcpy(dn, AMP_INTERNAL_DEVICENAME, IOTX_DEVICE_NAME_LEN);

    len = aos_snprintf(topic_buf, topic_buf_len, fmt, pk, dn);
"
4615,2021\haas-mini-program\engine\duktape_engine\repl.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\repl.c,"memcpy(buf, (const void *)src_data, src_len);",120,1,"        void *buf;
        buf = duk_push_fixed_buffer(ctx, src_len);
        memcpy(buf, (const void *)src_data, src_len);
        duk_load_function(ctx);
    }
"
4618,2021\haas-mini-program\engine\duktape_engine\addons\hardware\uart\module_uart.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\addons\hardware\uart\module_uart.c,"memcpy(&raw_buff[module->recv_index], data, recvsize);",120,1,"	        recvsize = max_len;
	    }
	    memcpy(&raw_buff[module->recv_index], data, recvsize);
    } else {
	    amp_hal_uart_recv_II(dev, &raw_buff[module->recv_index], max_len, &recvsize, 0);
"
4619,2021\haas-mini-program\engine\duktape_engine\addons\network\http\module_http.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\addons\network\http\module_http.c,"memcpy(url_dup, url, strlen(url));",120,1,"        return;
    }
    memcpy(url_dup, url, strlen(url));
    char *start = NULL;
    char *p_slash = NULL;
"
4620,2021\haas-mini-program\engine\duktape_engine\addons\network\http\module_http.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\addons\network\http\module_http.c,"memcpy(uri, p_slash, strlen(p_slash));",120,1,"        if (p_slash != NULL)
        {
            memcpy(uri, p_slash, strlen(p_slash));
            *p_slash = '\0';
        }
"
4621,2021\haas-mini-program\engine\duktape_engine\addons\network\http\module_http.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\addons\network\http\module_http.c,"memcpy(uri, '/', 1);",120,1,"        else
        {
            memcpy(uri, '/', 1);
        }
    }
"
4622,2021\haas-mini-program\engine\duktape_engine\addons\network\http\module_http.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\addons\network\http\module_http.c,"memcpy(http_buffer, rsp_info.body_start, rsp_info.rsp_len);",120,1,"    }

    memcpy(http_buffer, rsp_info.body_start, rsp_info.rsp_len);
    ret = 0;

"
4633,2021\haas-mini-program\engine\duktape_engine\addons\network\iot\module_iot.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\addons\network\iot\module_iot.c,"memcpy(iot_sign_params->meta.product_key, productKey, strlen(productKey));",120,1,"    }

    memcpy(iot_sign_params->meta.product_key, productKey, strlen(productKey));
    memcpy(iot_sign_params->meta.device_name, deviceName, strlen(deviceName));
    memcpy(iot_sign_params->meta.device_secret, deviceSecret, strlen(deviceSecret));
"
4634,2021\haas-mini-program\engine\duktape_engine\addons\network\iot\module_iot.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\addons\network\iot\module_iot.c,"memcpy(iot_sign_params->meta.device_name, deviceName, strlen(deviceName));",120,1,"
    memcpy(iot_sign_params->meta.product_key, productKey, strlen(productKey));
    memcpy(iot_sign_params->meta.device_name, deviceName, strlen(deviceName));
    memcpy(iot_sign_params->meta.device_secret, deviceSecret, strlen(deviceSecret));
    iot_sign_params->region = domain_type;
"
4635,2021\haas-mini-program\engine\duktape_engine\addons\network\iot\module_iot.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\addons\network\iot\module_iot.c,"memcpy(iot_sign_params->meta.device_secret, deviceSecret, strlen(deviceSecret));",120,1,"    memcpy(iot_sign_params->meta.product_key, productKey, strlen(productKey));
    memcpy(iot_sign_params->meta.device_name, deviceName, strlen(deviceName));
    memcpy(iot_sign_params->meta.device_secret, deviceSecret, strlen(deviceSecret));
    iot_sign_params->region = domain_type;

"
4637,2021\haas-mini-program\engine\duktape_engine\addons\network\iot\module_iot.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\addons\network\iot\module_iot.c,"memcpy(master_meta_info.product_key, productKey, strlen(productKey));",120,1,"
    memset(&master_meta_info, 0, sizeof(iotx_linkkit_dev_meta_info_t));
    memcpy(master_meta_info.product_key, productKey, strlen(productKey));
    memcpy(master_meta_info.device_name, deviceName, strlen(deviceName));
    memcpy(master_meta_info.device_secret, deviceSecret, strlen(deviceSecret));
"
4638,2021\haas-mini-program\engine\duktape_engine\addons\network\iot\module_iot.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\addons\network\iot\module_iot.c,"memcpy(master_meta_info.device_name, deviceName, strlen(deviceName));",120,1,"    memset(&master_meta_info, 0, sizeof(iotx_linkkit_dev_meta_info_t));
    memcpy(master_meta_info.product_key, productKey, strlen(productKey));
    memcpy(master_meta_info.device_name, deviceName, strlen(deviceName));
    memcpy(master_meta_info.device_secret, deviceSecret, strlen(deviceSecret));

"
4639,2021\haas-mini-program\engine\duktape_engine\addons\network\iot\module_iot.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\addons\network\iot\module_iot.c,"memcpy(master_meta_info.device_secret, deviceSecret, strlen(deviceSecret));",120,1,"    memcpy(master_meta_info.product_key, productKey, strlen(productKey));
    memcpy(master_meta_info.device_name, deviceName, strlen(deviceName));
    memcpy(master_meta_info.device_secret, deviceSecret, strlen(deviceSecret));

    IOT_Ioctl(IOTX_IOCTL_SET_DOMAIN, (void *)&domain_type);
"
4643,2021\haas-mini-program\engine\duktape_engine\addons\network\mqtt\module_mqtt.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\addons\network\mqtt\module_mqtt.c,"memcpy(p->payload, topic_info->payload, topic_info->payload_len);",120,1,"            return;
        }
        memcpy(p->payload, topic_info->payload, topic_info->payload_len);
        p->payload_len = topic_info->payload_len;

"
4644,2021\haas-mini-program\engine\duktape_engine\addons\network\mqtt\module_mqtt.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\addons\network\mqtt\module_mqtt.c,"memcpy(p->topic, topic_info->ptopic, topic_info->topic_len + 1);",120,1,"            return;
        }
        memcpy(p->topic, topic_info->ptopic, topic_info->topic_len + 1);
        p->topic[topic_info->topic_len] = 0;
        p->topic_len = topic_info->topic_len;
"
4647,2021\haas-mini-program\engine\duktape_engine\addons\network\udp\module_udp.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\addons\network\udp\module_udp.c,"memcpy(&udp_options, &(send_param->options), sizeof(udp_options_t));",120,1,"    duk_context *ctx = be_get_context();
    sock_id = send_param->sock_id;
    memcpy(&udp_options, &(send_param->options), sizeof(udp_options_t));

    ret = amp_udp_sendto(sock_id, &udp_options, send_param->msg, send_param->msg_len, 0);
"
4649,2021\haas-mini-program\engine\duktape_engine\addons\network\udp\module_udp.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\addons\network\udp\module_udp.c,"memcpy(&(send_param->options), &options, sizeof(udp_options_t));",120,1,"    send_param->msg       = msg;
    send_param->msg_len   = msg_len;
    memcpy(&(send_param->options), &options, sizeof(udp_options_t));

    amp_debug(MOD_STR, ""sockid:%d ip:%s port:%d msg:%s msg_len:%d"", sock_id, options.ip, options.port, msg, msg_len);
"
4650,2021\haas-mini-program\engine\duktape_engine\addons\network\udp\module_udp.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\addons\network\udp\module_udp.c,"memcpy(&udp_options, &(recv_param->options), sizeof(udp_options_t));",120,1,"    duk_context *ctx = be_get_context();
    sock_id = recv_param->sock_id;
    memcpy(&udp_options, &(recv_param->options), sizeof(udp_options_t));
    p = amp_calloc(1, sizeof(udp_recv_notify_param_t));
    if (!p) {
"
4657,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"#define duk_memcpy(dst,src,len)  do { \",120,1," */
#if defined(DUK_USE_ALLOW_UNDEFINED_BEHAVIOR)
#define duk_memcpy(dst,src,len)  do { \
		void *duk__dst = (dst); \
		const void *duk__src = (src); \
"
4658,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"#define duk_memcpy_unsafe(dst,src,len)  duk_memcpy((dst), (src), (len))",120,1,"		(void) DUK_MEMCPY(duk__dst, duk__src, (size_t) duk__len); \
	} while (0)
#define duk_memcpy_unsafe(dst,src,len)  duk_memcpy((dst), (src), (len))
#define duk_memmove(dst,src,len)  do { \
		void *duk__dst = (dst); \
"
4667,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) u.b, (const void *) p, (size_t) 2);",120,1,"DUK_INTERNAL DUK_ALWAYS_INLINE duk_uint16_t duk_raw_read_u16_be(const duk_uint8_t *p) {
	duk__u16_union u;
	duk_memcpy((void *) u.b, (const void *) p, (size_t) 2);
	u.x = DUK_NTOH16(u.x);
	return u.x;
"
4668,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) u.b, (const void *) p, (size_t) 4);",120,1,"DUK_INTERNAL DUK_ALWAYS_INLINE duk_uint32_t duk_raw_read_u32_be(const duk_uint8_t *p) {
	duk__u32_union u;
	duk_memcpy((void *) u.b, (const void *) p, (size_t) 4);
	u.x = DUK_NTOH32(u.x);
	return u.x;
"
4669,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) fu.uc, (const void *) p, (size_t) 4);",120,1,"DUK_INTERNAL DUK_ALWAYS_INLINE duk_float_t duk_raw_read_float_be(const duk_uint8_t *p) {
	duk_float_union fu;
	duk_memcpy((void *) fu.uc, (const void *) p, (size_t) 4);
	duk_fltunion_big_to_host(&fu);
	return fu.f;
"
4670,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) du.uc, (const void *) p, (size_t) 8);",120,1,"DUK_INTERNAL DUK_ALWAYS_INLINE duk_double_t duk_raw_read_double_be(const duk_uint8_t *p) {
	duk_double_union du;
	duk_memcpy((void *) du.uc, (const void *) p, (size_t) 8);
	duk_dblunion_big_to_host(&du);
	return du.d;
"
4671,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) p, (const void *) u.b, (size_t) 2);",120,1,"	duk__u16_union u;
	u.x = DUK_HTON16(val);
	duk_memcpy((void *) p, (const void *) u.b, (size_t) 2);
}

"
4672,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) p, (const void *) u.b, (size_t) 4);",120,1,"	duk__u32_union u;
	u.x = DUK_HTON32(val);
	duk_memcpy((void *) p, (const void *) u.b, (size_t) 4);
}

"
4673,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) p, (const void *) fu.uc, (size_t) 4);",120,1,"	fu.f = val;
	duk_fltunion_host_to_big(&fu);
	duk_memcpy((void *) p, (const void *) fu.uc, (size_t) 4);
}

"
4674,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) p, (const void *) du.uc, (size_t) 8);",120,1,"	du.d = val;
	duk_dblunion_host_to_big(&du);
	duk_memcpy((void *) p, (const void *) du.uc, (size_t) 8);
}

"
4675,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) buf, (const void *) p, (size_t) len);",120,1,"	buf = (duk_uint8_t *) duk_push_fixed_buffer_nozero(thr, (duk_size_t) len);
	DUK_ASSERT(buf != NULL);
	duk_memcpy((void *) buf, (const void *) p, (size_t) len);
	p += len;
	return p;
"
4678,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) &snapshot->lj, (const void *) lj, sizeof(duk_ljstate));",120,1,"
	/* XXX: creating_error == 0 is asserted above, so no need to store. */
	duk_memcpy((void *) &snapshot->lj, (const void *) lj, sizeof(duk_ljstate));
	snapshot->creating_error = heap->creating_error;
	snapshot->curr_thread = heap->curr_thread;
"
4679,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) &heap->lj, (const void *) &snapshot->lj, sizeof(duk_ljstate));",120,1,"	heap = thr->heap;

	duk_memcpy((void *) &heap->lj, (const void *) &snapshot->lj, sizeof(duk_ljstate));
	heap->creating_error = snapshot->creating_error;
	heap->curr_thread = snapshot->curr_thread;
"
4685,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) to_thr->valstack_top, (const void *) src, (size_t) nbytes);",120,1,"	 */
	DUK_ASSERT(nbytes > 0);
	duk_memcpy((void *) to_thr->valstack_top, (const void *) src, (size_t) nbytes);

	p = to_thr->valstack_top;
"
4699,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy(buf + idx, DUK_HSTRING_GET_DATA(h), DUK_HSTRING_GET_BYTELEN(h));",120,1,"		if (is_join && i != count) {
			h = duk_require_hstring(thr, -((duk_idx_t) count) - 2);  /* extra -1 for buffer */
			duk_memcpy(buf + idx, DUK_HSTRING_GET_DATA(h), DUK_HSTRING_GET_BYTELEN(h));
			idx += DUK_HSTRING_GET_BYTELEN(h);
		}
"
4701,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) buf, (const void *) DUK_HSTRING_GET_DATA(h1), (size_t) len1);",120,1,"	DUK_ASSERT(buf != NULL);

	duk_memcpy((void *) buf, (const void *) DUK_HSTRING_GET_DATA(h1), (size_t) len1);
	duk_memcpy((void *) (buf + len1), (const void *) DUK_HSTRING_GET_DATA(h2), (size_t) len2);
	(void) duk_buffer_to_string(thr, -1);  /* Safe if inputs are safe. */
"
4702,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) (buf + len1), (const void *) DUK_HSTRING_GET_DATA(h2), (size_t) len2);",120,1,"
	duk_memcpy((void *) buf, (const void *) DUK_HSTRING_GET_DATA(h1), (size_t) len1);
	duk_memcpy((void *) (buf + len1), (const void *) DUK_HSTRING_GET_DATA(h2), (size_t) len2);
	(void) duk_buffer_to_string(thr, -1);  /* Safe if inputs are safe. */

"
4703,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) du.uc, (const void *) p, (size_t) elem_size);",120,1,"
	DUK_ASSERT(elem_size > 0);
	duk_memcpy((void *) du.uc, (const void *) p, (size_t) elem_size);

	switch (h_bufobj->elem_type) {
"
4704,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) p, (const void *) du.uc, (size_t) elem_size);",120,1,"
	DUK_ASSERT(elem_size > 0);
	duk_memcpy((void *) p, (const void *) du.uc, (size_t) elem_size);
}

"
4705,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) du.uc, (const void *) (buf + offset), 2);",120,1,"			goto fail_bounds;
		}
		duk_memcpy((void *) du.uc, (const void *) (buf + offset), 2);
		tmp = du.us[0];
		if (endswap) {
"
4706,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) du.uc, (const void *) (buf + offset), 4);",120,1,"			goto fail_bounds;
		}
		duk_memcpy((void *) du.uc, (const void *) (buf + offset), 4);
		tmp = du.ui[0];
		if (endswap) {
"
4708,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) du.uc, (const void *) (buf + offset), 8);",120,1,"			goto fail_bounds;
		}
		duk_memcpy((void *) du.uc, (const void *) (buf + offset), 8);
		if (endswap) {
			DUK_DBLUNION_BSWAP64(&du);
"
4709,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) (buf + offset), (const void *) du.uc, 2);",120,1,"		du.us[0] = tmp;
		/* sign doesn't matter when writing */
		duk_memcpy((void *) (buf + offset), (const void *) du.uc, 2);
		break;
	}
"
4710,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) (buf + offset), (const void *) du.uc, 4);",120,1,"		du.ui[0] = tmp;
		/* sign doesn't matter when writing */
		duk_memcpy((void *) (buf + offset), (const void *) du.uc, 4);
		break;
	}
"
4712,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) (buf + offset), (const void *) du.uc, 8);",120,1,"		}
		/* sign doesn't matter when writing */
		duk_memcpy((void *) (buf + offset), (const void *) du.uc, 8);
		break;
	}
"
4713,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) p, (const void *) str, len);",120,1,"	duk__cbor_encode_ensure(enc_ctx, len);
	p = enc_ctx->ptr;
	duk_memcpy((void *) p, (const void *) str, len);
	p += len;
	enc_ctx->ptr = p;
"
4714,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) p, (const void *) buf, len);",120,1,"		duk__cbor_encode_ensure(enc_ctx, len);
		p = enc_ctx->ptr;
		duk_memcpy((void *) p, (const void *) buf, len);
		p += len;
		enc_ctx->ptr = p;
"
4717,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) buf, (const void *) inp, (size_t) len);",120,1,"	/* XXX: duk_push_fixed_buffer_with_data() would be a nice API addition. */
	buf = (duk_uint8_t *) duk_push_fixed_buffer(dec_ctx->thr, (duk_size_t) len);
	duk_memcpy((void *) buf, (const void *) inp, (size_t) len);
}

"
4718,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) p, (const void *) buf_data, buf_size);",120,1,"			if (p != NULL) {
				if (buf_size > 0U) {
					duk_memcpy((void *) p, (const void *) buf_data, buf_size);
				}
				p += buf_size;
"
4719,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) u.uc, (const void *) inp, 4);",120,1,"	const duk_uint8_t *inp;
	inp = duk__cbor_decode_consume(dec_ctx, 4);
	duk_memcpy((void *) u.uc, (const void *) inp, 4);
	duk_fltunion_big_to_host(&u);
	return (duk_double_t) u.f;
"
4720,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) u.uc, (const void *) inp, 8);",120,1,"	const duk_uint8_t *inp;
	inp = duk__cbor_decode_consume(dec_ctx, 8);
	duk_memcpy((void *) u.uc, (const void *) inp, 8);
	duk_dblunion_big_to_host(&u);
	return u.d;
"
4721,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) &tms[0], tm_ptr, sizeof(struct tm));",120,1,"#elif defined(DUK_USE_DATE_TZO_GMTIME)
	tm_ptr = gmtime(&t);
	duk_memcpy((void *) &tms[0], tm_ptr, sizeof(struct tm));
	tm_ptr = localtime(&t);
	duk_memcpy((void *) &tms[1], tm_ptr, sizeof(struct tm));
"
4722,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) &tms[1], tm_ptr, sizeof(struct tm));",120,1,"	duk_memcpy((void *) &tms[0], tm_ptr, sizeof(struct tm));
	tm_ptr = localtime(&t);
	duk_memcpy((void *) &tms[1], tm_ptr, sizeof(struct tm));
#else
#error internal error
"
4730,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) buf, (const void *) js_ctx->p, src_len);",120,1,"	buf = (duk_uint8_t *) duk_push_fixed_buffer_nozero(thr, src_len);
	DUK_ASSERT(buf != NULL);
	duk_memcpy((void *) buf, (const void *) js_ctx->p, src_len);
	duk_hex_decode(thr, -1);

"
4732,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) q, (const void *) ""{\""_buf\"":\"""", 9);  */",120,1,"	{
		DUK_ASSERT(js_ctx->flag_ext_compatible);
		duk_memcpy((void *) q, (const void *) ""{\""_buf\"":\"""", 9);  /* len: 9 */
		q += 9;
		q = duk__enc_buffer_data_hex(buf_data, buf_len, q);
"
4733,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) p, (const void *) gap_data, (size_t) gap_len);",120,1,"	p_start = p;

	duk_memcpy((void *) p, (const void *) gap_data, (size_t) gap_len);
	p += gap_len;
	avail_bytes = gap_len;
"
4734,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) p, (const void *) p_start, (size_t) avail_bytes);",120,1,"
	while (need_bytes >= avail_bytes) {
		duk_memcpy((void *) p, (const void *) p_start, (size_t) avail_bytes);
		p += avail_bytes;
		need_bytes -= avail_bytes;
"
4735,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) p, (const void *) p_start, (size_t) need_bytes);",120,1,"
	DUK_ASSERT(need_bytes < avail_bytes);  /* need_bytes may be zero */
	duk_memcpy((void *) p, (const void *) p_start, (size_t) need_bytes);
	p += need_bytes;
	/*avail_bytes += need_bytes*/
"
4738,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) p, (const void *) src, input_blen);  */",120,1,"	p = buf;
	while (count-- > 0) {
		duk_memcpy((void *) p, (const void *) src, input_blen);  /* copy size may be zero, but pointers are valid */
		p += input_blen;
	}
"
4739,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) p, (const void *) src, remain);",120,1,"			 * a zero size copy (with valid pointers).
			 */
			duk_memcpy((void *) p, (const void *) src, remain);
			break;
		} else {
"
4740,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) p, (const void *) src, copy_size);",120,1,"			break;
		} else {
			duk_memcpy((void *) p, (const void *) src, copy_size);
			p += copy_size;
		}
"
4848,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy(fmtbuf, p_begfmt, fmtlen);",120,1,"				}
				duk_memzero(fmtbuf, sizeof(fmtbuf));
				duk_memcpy(fmtbuf, p_begfmt, fmtlen);

				/* assume exactly 1 arg, which is why '*' is forbidden; arg size still
"
4863,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy(data_tmp, str, blen);",120,1,"
		data_tmp = (duk_uint8_t *) (res + 1);
		duk_memcpy(data_tmp, str, blen);
		data_tmp[blen] = (duk_uint8_t) 0;
		data = (const duk_uint8_t *) data_tmp;
"
4865,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) props, (const void *) DUK_HOBJECT_GET_PROPS(thr->heap, h_oldglobal), alloc_size);",120,1,"	DUK_ASSERT(props != NULL);
	DUK_ASSERT(DUK_HOBJECT_GET_PROPS(thr->heap, h_oldglobal) != NULL);
	duk_memcpy((void *) props, (const void *) DUK_HOBJECT_GET_PROPS(thr->heap, h_oldglobal), alloc_size);

	/* XXX: keep property attributes or tweak them here?
"
4866,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) new_ptr, (const void *) thr->valstack, alloc_size);",120,1,"	new_ptr = (duk_tval *) DUK_ALLOC_RAW(thr->heap, alloc_size);
	if (new_ptr != NULL) {
		duk_memcpy((void *) new_ptr, (const void *) thr->valstack, alloc_size);
		duk_memset((void *) thr->valstack, 0x55, alloc_size);
		DUK_FREE_CHECKED(thr, (void *) thr->valstack);
"
4868,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy(&comp_ctx->prev_token, &comp_ctx->curr_token, sizeof(duk_token));",120,1,"
	/* make current token the previous; need to fiddle with valstack ""backing store"" */
	duk_memcpy(&comp_ctx->prev_token, &comp_ctx->curr_token, sizeof(duk_token));
	duk_copy(thr, comp_ctx->tok11_idx, comp_ctx->tok21_idx);
	duk_copy(thr, comp_ctx->tok12_idx, comp_ctx->tok22_idx);
"
4869,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy(&old_func, &comp_ctx->curr_func, sizeof(duk_compiler_func));",120,1,"	                     (long) entry_top, (long) comp_ctx->curr_token.start_offset));

	duk_memcpy(&old_func, &comp_ctx->curr_func, sizeof(duk_compiler_func));

	duk_memzero(&comp_ctx->curr_func, sizeof(duk_compiler_func));
"
4870,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) &comp_ctx->curr_func, (void *) &old_func, sizeof(duk_compiler_func));",120,1,"		duk_set_top(thr, entry_top);
	}
	duk_memcpy((void *) &comp_ctx->curr_func, (void *) &old_func, sizeof(duk_compiler_func));

	return fnum;
"
4871,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) tv_dst, (const void *) tv_src, copy_size);",120,1,"	tv_dst = thr->valstack_top;
	copy_size = sizeof(duk_tval) * count;
	duk_memcpy((void *) tv_dst, (const void *) tv_src, copy_size);
	for (i = 0; i < count; i++) {
		DUK_TVAL_INCREF(thr, tv_dst);
"
4872,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy((void *) x->v, (const void *) y->v, (size_t) (sizeof(duk_uint32_t) * (size_t) n));",120,1,"	x->n = n;
	/* No need to special case n == 0. */
	duk_memcpy((void *) x->v, (const void *) y->v, (size_t) (sizeof(duk_uint32_t) * (size_t) n));
}

"
4874,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy(range_save, re_ctx->saved + idx_start, sizeof(duk_uint8_t *) * idx_count);",120,1,"			                                                           sizeof(duk_uint8_t *) * idx_count);
			DUK_ASSERT(range_save != NULL);
			duk_memcpy(range_save, re_ctx->saved + idx_start, sizeof(duk_uint8_t *) * idx_count);
#if defined(DUK_USE_EXPLICIT_NULL_INIT)
			idx_end = idx_start + idx_count;
"
4875,2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\duktape\duktape.c,"duk_memcpy(full_save, re_ctx->saved, sizeof(duk_uint8_t *) * re_ctx->nsaved);",120,1,"			                                                          sizeof(duk_uint8_t *) * re_ctx->nsaved);
			DUK_ASSERT(full_save != NULL);
			duk_memcpy(full_save, re_ctx->saved, sizeof(duk_uint8_t *) * re_ctx->nsaved);

			skip = duk__bc_get_i32(re_ctx, &pc);
"
4895,2021\haas-mini-program\engine\lite_engine\core\be_symbol.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\lite_engine\core\be_symbol.c,"memcpy(&dst->data, &src->data, sizeof(be_symbol_data_t));",120,1,"    if (!dst) return 0; /* out of memory */
    if (!symbol_is_string_ext(src)) {
        memcpy(&dst->data, &src->data, sizeof(be_symbol_data_t));

        dst->last_child   = 0;
"
4911,2021\haas-mini-program\services\app_mgr\app_mgr.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\services\app_mgr\app_mgr.c,"memcpy(&header, ptr, jspacksize);",120,1,"        }

        memcpy(&header, ptr, jspacksize);
        if (jspacksize < JSEPACK_HEADER_SIZE) {
            return 0;
"
4912,2021\haas-mini-program\services\app_mgr\app_mgr.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\services\app_mgr\app_mgr.c,"memcpy(pdst + jspacksize, ptr, len);",120,1,"
        pdst = (uint8_t *)&header;
        memcpy(pdst + jspacksize, ptr, len);
        jspacksize += len;

"
4913,2021\haas-mini-program\services\app_mgr\app_mgr.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\services\app_mgr\app_mgr.c,"memcpy(&fileheader, ptr, len);",120,1,"        }

        memcpy(&fileheader, ptr, len);
        jspackfile_header_offset = len;
        jspacksize += len;
"
4914,2021\haas-mini-program\services\app_mgr\app_mgr.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\services\app_mgr\app_mgr.c,"memcpy(pdst + jspackfile_header_offset, ptr, len);",120,1,"
        pdst = (uint8_t *)&fileheader;
        memcpy(pdst + jspackfile_header_offset, ptr, len);

        jspackfile_header_offset += len;
"
4915,2021\haas-mini-program\services\app_mgr\app_mgr.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\services\app_mgr\app_mgr.c,"memcpy(g_file_name, ptr, len);",120,1,"        }

        memcpy(g_file_name, ptr, len);

        jspackfile_header_offset += len;
"
4916,2021\haas-mini-program\services\app_mgr\app_mgr.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\services\app_mgr\app_mgr.c,"memcpy(g_file_name + offset, ptr, len);",120,1,"        amp_warn(MOD_STR, ""get filename, offset = %d  len = %d"", offset, len);

        memcpy(g_file_name + offset, ptr, len);

        jspackfile_header_offset += len;
"
4932,2021\haas-mini-program\services\app_mgr\app_ntp.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\services\app_mgr\app_ntp.c,"memcpy(pk, meta_info.product_key, IOTX_PRODUCT_KEY_LEN);",120,1,"        char dn[IOTX_DEVICE_NAME_LEN + 1] = {0};

        memcpy(pk, meta_info.product_key, IOTX_PRODUCT_KEY_LEN);
        memcpy(dn, meta_info.device_name, IOTX_DEVICE_NAME_LEN);

"
4933,2021\haas-mini-program\services\app_mgr\app_ntp.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\services\app_mgr\app_ntp.c,"memcpy(dn, meta_info.device_name, IOTX_DEVICE_NAME_LEN);",120,1,"
        memcpy(pk, meta_info.product_key, IOTX_PRODUCT_KEY_LEN);
        memcpy(dn, meta_info.device_name, IOTX_DEVICE_NAME_LEN);

        topic = (char *)IMPL_NTP_MALLOC(topic_len + 1);
"
4937,2021\haas-mini-program\services\board_mgr\board_mgr.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\services\board_mgr\board_mgr.c,"memcpy(new_gpio, &device, sizeof(gpio_dev_t));",120,1,"        device.port = port->valueint;
        char *gpio_id = strdup(id);
        memcpy(new_gpio, &device, sizeof(gpio_dev_t));
        ret = board_add_new_item(MODULE_GPIO, gpio_id, new_gpio);
        if (0 == ret)
"
4959,2021\haas-mini-program\utils\cJSON\cJSON.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\cJSON\cJSON.c,"memcpy(ref, item, sizeof(cJSON));",120,1,"        return NULL;
    }
    memcpy(ref, item, sizeof(cJSON));
    ref->string = NULL;
    ref->type |= cJSON_IsReference;
"
4967,2021\haas-mini-program\utils\mbedtls\library\aes.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\aes.c,"memcpy( ov, iv, 16 );",120,1,"    while( length-- )
    {
        memcpy( ov, iv, 16 );
        mbedtls_aes_crypt_ecb( ctx, MBEDTLS_AES_ENCRYPT, iv, iv );

"
4968,2021\haas-mini-program\utils\mbedtls\library\aes.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\aes.c,"memcpy( iv, ov + 1, 16 );",120,1,"            ov[16] = c;

        memcpy( iv, ov + 1, 16 );
    }

"
4974,2021\haas-mini-program\utils\mbedtls\library\aes.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\aes.c,"memcpy( tmp, prv, 16 );",120,1,"                mbedtls_aes_crypt_cbc( &ctx, v, 16, iv, buf, buf );

                memcpy( tmp, prv, 16 );
                memcpy( prv, buf, 16 );
                memcpy( buf, tmp, 16 );
"
4975,2021\haas-mini-program\utils\mbedtls\library\aes.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\aes.c,"memcpy( prv, buf, 16 );",120,1,"
                memcpy( tmp, prv, 16 );
                memcpy( prv, buf, 16 );
                memcpy( buf, tmp, 16 );
            }
"
4976,2021\haas-mini-program\utils\mbedtls\library\aes.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\aes.c,"memcpy( buf, tmp, 16 );",120,1,"                memcpy( tmp, prv, 16 );
                memcpy( prv, buf, 16 );
                memcpy( buf, tmp, 16 );
            }

"
4977,2021\haas-mini-program\utils\mbedtls\library\aes.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\aes.c,"memcpy( iv,  aes_test_cfb128_iv, 16 );",120,1,"                             ( v == MBEDTLS_AES_DECRYPT ) ? ""dec"" : ""enc"" );

        memcpy( iv,  aes_test_cfb128_iv, 16 );
        memcpy( key, aes_test_cfb128_key[u], 16 + u * 8 );

"
4978,2021\haas-mini-program\utils\mbedtls\library\aes.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\aes.c,"memcpy( key, aes_test_cfb128_key[u], 16 + u * 8 );",120,1,"
        memcpy( iv,  aes_test_cfb128_iv, 16 );
        memcpy( key, aes_test_cfb128_key[u], 16 + u * 8 );

        offset = 0;
"
4979,2021\haas-mini-program\utils\mbedtls\library\aes.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\aes.c,"memcpy( buf, aes_test_cfb128_ct[u], 64 );",120,1,"        if( v == MBEDTLS_AES_DECRYPT )
        {
            memcpy( buf, aes_test_cfb128_ct[u], 64 );
            mbedtls_aes_crypt_cfb128( &ctx, v, 64, &offset, iv, buf, buf );

"
4980,2021\haas-mini-program\utils\mbedtls\library\aes.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\aes.c,"memcpy( buf, aes_test_cfb128_pt, 64 );",120,1,"        else
        {
            memcpy( buf, aes_test_cfb128_pt, 64 );
            mbedtls_aes_crypt_cfb128( &ctx, v, 64, &offset, iv, buf, buf );

"
4981,2021\haas-mini-program\utils\mbedtls\library\aes.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\aes.c,"memcpy( nonce_counter, aes_test_ctr_nonce_counter[u], 16 );",120,1,"                             ( v == MBEDTLS_AES_DECRYPT ) ? ""dec"" : ""enc"" );

        memcpy( nonce_counter, aes_test_ctr_nonce_counter[u], 16 );
        memcpy( key, aes_test_ctr_key[u], 16 );

"
4982,2021\haas-mini-program\utils\mbedtls\library\aes.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\aes.c,"memcpy( key, aes_test_ctr_key[u], 16 );",120,1,"
        memcpy( nonce_counter, aes_test_ctr_nonce_counter[u], 16 );
        memcpy( key, aes_test_ctr_key[u], 16 );

        offset = 0;
"
4983,2021\haas-mini-program\utils\mbedtls\library\aes.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\aes.c,"memcpy( buf, aes_test_ctr_ct[u], len );",120,1,"        {
            len = aes_test_ctr_len[u];
            memcpy( buf, aes_test_ctr_ct[u], len );

            mbedtls_aes_crypt_ctr( &ctx, len, &offset, nonce_counter, stream_block,
"
4984,2021\haas-mini-program\utils\mbedtls\library\aes.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\aes.c,"memcpy( buf, aes_test_ctr_pt[u], len );",120,1,"        {
            len = aes_test_ctr_len[u];
            memcpy( buf, aes_test_ctr_pt[u], len );

            mbedtls_aes_crypt_ctr( &ctx, len, &offset, nonce_counter, stream_block,
"
4986,2021\haas-mini-program\utils\mbedtls\library\bignum.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\bignum.c,"memcpy( p, X->p, X->n * ciL );",120,1,"        if( X->p != NULL )
        {
            memcpy( p, X->p, X->n * ciL );
            mbedtls_mpi_zeroize( X->p, X->n );
            mbedtls_free( X->p );
"
4987,2021\haas-mini-program\utils\mbedtls\library\bignum.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\bignum.c,"memcpy( p, X->p, i * ciL );",120,1,"    if( X->p != NULL )
    {
        memcpy( p, X->p, i * ciL );
        mbedtls_mpi_zeroize( X->p, X->n );
        mbedtls_free( X->p );
"
4989,2021\haas-mini-program\utils\mbedtls\library\bignum.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\bignum.c,"memcpy( X->p, Y->p, i * ciL );",120,1,"
    memset( X->p, 0, X->n * ciL );
    memcpy( X->p, Y->p, i * ciL );

cleanup:
"
4990,2021\haas-mini-program\utils\mbedtls\library\bignum.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\bignum.c,"memcpy( &T,  X, sizeof( mbedtls_mpi ) );",120,1,"    mbedtls_mpi T;

    memcpy( &T,  X, sizeof( mbedtls_mpi ) );
    memcpy(  X,  Y, sizeof( mbedtls_mpi ) );
    memcpy(  Y, &T, sizeof( mbedtls_mpi ) );
"
4991,2021\haas-mini-program\utils\mbedtls\library\bignum.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\bignum.c,"memcpy(  X,  Y, sizeof( mbedtls_mpi ) );",120,1,"
    memcpy( &T,  X, sizeof( mbedtls_mpi ) );
    memcpy(  X,  Y, sizeof( mbedtls_mpi ) );
    memcpy(  Y, &T, sizeof( mbedtls_mpi ) );
}
"
4992,2021\haas-mini-program\utils\mbedtls\library\bignum.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\bignum.c,"memcpy(  Y, &T, sizeof( mbedtls_mpi ) );",120,1,"    memcpy( &T,  X, sizeof( mbedtls_mpi ) );
    memcpy(  X,  Y, sizeof( mbedtls_mpi ) );
    memcpy(  Y, &T, sizeof( mbedtls_mpi ) );
}

"
4999,2021\haas-mini-program\utils\mbedtls\library\bignum.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\bignum.c,"memcpy( A->p, d, ( n + 1 ) * ciL );",120,1,"    }

    memcpy( A->p, d, ( n + 1 ) * ciL );

    if( mbedtls_mpi_cmp_abs( A, N ) >= 0 )
"
5001,2021\haas-mini-program\utils\mbedtls\library\bignum.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\bignum.c,"memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );",120,1,"
        if( _RR != NULL )
            memcpy( _RR, &RR, sizeof( mbedtls_mpi ) );
    }
    else
"
5002,2021\haas-mini-program\utils\mbedtls\library\bignum.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\bignum.c,"memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );",120,1,"    }
    else
        memcpy( &RR, _RR, sizeof( mbedtls_mpi ) );

    /*
"
5005,2021\haas-mini-program\utils\mbedtls\library\cipher.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\cipher.c,"memcpy( ctx->iv, iv, actual_iv_size );",120,1,"    }

    memcpy( ctx->iv, iv, actual_iv_size );
    ctx->iv_size = actual_iv_size;

"
5006,2021\haas-mini-program\utils\mbedtls\library\cipher.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\cipher.c,"memcpy( ctx->unprocessed_data, &( input[ilen - copy_len] ),",120,1,"                copy_len = block_size;

            memcpy( ctx->unprocessed_data, &( input[ilen - copy_len] ),
                    copy_len );

"
5011,2021\haas-mini-program\utils\mbedtls\library\ctr_drbg.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ctr_drbg.c,"memcpy( p, data, data_len );",120,1,"    p += 3;
    *p++ = MBEDTLS_CTR_DRBG_SEEDLEN;
    memcpy( p, data, data_len );
    p[data_len] = 0x80;

"
5013,2021\haas-mini-program\utils\mbedtls\library\ctr_drbg.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ctr_drbg.c,"memcpy( tmp + j, chain, MBEDTLS_CTR_DRBG_BLOCKSIZE );",120,1,"        }

        memcpy( tmp + j, chain, MBEDTLS_CTR_DRBG_BLOCKSIZE );

        /*
"
5014,2021\haas-mini-program\utils\mbedtls\library\ctr_drbg.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ctr_drbg.c,"memcpy( p, iv, MBEDTLS_CTR_DRBG_BLOCKSIZE );",120,1,"    {
        mbedtls_aes_crypt_ecb( &aes_ctx, MBEDTLS_AES_ENCRYPT, iv, iv );
        memcpy( p, iv, MBEDTLS_CTR_DRBG_BLOCKSIZE );
        p += MBEDTLS_CTR_DRBG_BLOCKSIZE;
    }
"
5016,2021\haas-mini-program\utils\mbedtls\library\ctr_drbg.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ctr_drbg.c,"memcpy( ctx->counter, tmp + MBEDTLS_CTR_DRBG_KEYSIZE, MBEDTLS_CTR_DRBG_BLOCKSIZE );",120,1,"     */
    mbedtls_aes_setkey_enc( &ctx->aes_ctx, tmp, MBEDTLS_CTR_DRBG_KEYBITS );
    memcpy( ctx->counter, tmp + MBEDTLS_CTR_DRBG_KEYSIZE, MBEDTLS_CTR_DRBG_BLOCKSIZE );

    return( 0 );
"
5018,2021\haas-mini-program\utils\mbedtls\library\ctr_drbg.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ctr_drbg.c,"memcpy( seed + seedlen, additional, len );",120,1,"    if( additional && len )
    {
        memcpy( seed + seedlen, additional, len );
        seedlen += len;
    }
"
5020,2021\haas-mini-program\utils\mbedtls\library\ctr_drbg.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ctr_drbg.c,"memcpy( p, tmp, use_len );",120,1,"         * Copy random block to destination
         */
        memcpy( p, tmp, use_len );
        p += use_len;
        output_len -= use_len;
"
5022,2021\haas-mini-program\utils\mbedtls\library\ctr_drbg.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ctr_drbg.c,"memcpy( buf, p + test_offset, len );",120,1,"{
    const unsigned char *p = data;
    memcpy( buf, p + test_offset, len );
    test_offset += len;
    return( 0 );
"
5026,2021\haas-mini-program\utils\mbedtls\library\debug.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\debug.c,"memcpy(str, start, len);",120,1,"            }

            memcpy(str, start, len);
            str[len] = '\0';

"
5031,2021\haas-mini-program\utils\mbedtls\library\entropy.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\entropy.c,"memcpy( output, buf, len );",120,1,"        ctx->source[i].size = 0;

    memcpy( output, buf, len );

    ret = 0;
"
5039,2021\haas-mini-program\utils\mbedtls\library\entropy_poll.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\entropy_poll.c,"memcpy( output, &timer, sizeof(unsigned long) );",120,1,"        return( 0 );

    memcpy( output, &timer, sizeof(unsigned long) );
    *olen = sizeof(unsigned long);

"
5041,2021\haas-mini-program\utils\mbedtls\library\entropy_poll.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\entropy_poll.c,"memcpy( output, buf, use_len );",120,1,"      use_len = len;

    memcpy( output, buf, use_len );
    *olen = use_len;

"
5055,2021\haas-mini-program\utils\mbedtls\library\net_sockets.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\net_sockets.c,"memcpy( client_ip, &addr4->sin_addr.s_addr, *ip_len );",120,1,"                return( MBEDTLS_ERR_NET_BUFFER_TOO_SMALL );

            memcpy( client_ip, &addr4->sin_addr.s_addr, *ip_len );
        }
        else
"
5056,2021\haas-mini-program\utils\mbedtls\library\net_sockets.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\net_sockets.c,"memcpy( client_ip, &addr6->sin6_addr.s6_addr, *ip_len);",120,1,"                return( MBEDTLS_ERR_NET_BUFFER_TOO_SMALL );

            memcpy( client_ip, &addr6->sin6_addr.s6_addr, *ip_len);
        }
    }
"
5059,2021\haas-mini-program\utils\mbedtls\library\pem.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\pem.c,"memcpy( key, md5sum, keylen );",120,1,"    if( keylen <= 16 )
    {
        memcpy( key, md5sum, keylen );

        mbedtls_md5_free( &md5_ctx );
"
5060,2021\haas-mini-program\utils\mbedtls\library\pem.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\pem.c,"memcpy( key, md5sum, 16 );",120,1,"    }

    memcpy( key, md5sum, 16 );

    /*
"
5061,2021\haas-mini-program\utils\mbedtls\library\pem.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\pem.c,"memcpy( key + 16, md5sum, use_len );",120,1,"        use_len = keylen - 16;

    memcpy( key + 16, md5sum, use_len );

    mbedtls_md5_free( &md5_ctx );
"
5062,2021\haas-mini-program\utils\mbedtls\library\pem.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\pem.c,"memcpy( p, header, strlen( header ) );",120,1,"    }

    memcpy( p, header, strlen( header ) );
    p += strlen( header );
    c = encode_buf;
"
5063,2021\haas-mini-program\utils\mbedtls\library\pem.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\pem.c,"memcpy( p, c, len );",120,1,"    {
        len = ( use_len > 64 ) ? 64 : use_len;
        memcpy( p, c, len );
        use_len -= len;
        p += len;
"
5064,2021\haas-mini-program\utils\mbedtls\library\pem.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\pem.c,"memcpy( p, footer, strlen( footer ) );",120,1,"    }

    memcpy( p, footer, strlen( footer ) );
    p += strlen( footer );

"
5075,2021\haas-mini-program\utils\mbedtls\library\rsa.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\rsa.c,"memcpy( p, input, ilen );",120,1,"    p += olen - 2 * hlen - 2 - ilen;
    *p++ = 1;
    memcpy( p, input, ilen );

    mbedtls_md_init( &md_ctx );
"
5077,2021\haas-mini-program\utils\mbedtls\library\rsa.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\rsa.c,"memcpy( output, p, *olen );",120,1,"
    *olen = ilen - (p - buf);
    memcpy( output, p, *olen );
    ret = 0;

"
5080,2021\haas-mini-program\utils\mbedtls\library\rsa.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\rsa.c,"memcpy( p, salt, slen );",120,1,"    p += olen - hlen * 2 - 2;
    *p++ = 0x01;
    memcpy( p, salt, slen );
    p += slen;

"
5082,2021\haas-mini-program\utils\mbedtls\library\rsa.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\rsa.c,"memcpy( p, hash, hashlen );",120,1,"    if( md_alg == MBEDTLS_MD_NONE )
    {
        memcpy( p, hash, hashlen );
    }
    else
"
5083,2021\haas-mini-program\utils\mbedtls\library\rsa.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\rsa.c,"memcpy( p, oid, oid_size );",120,1,"        *p++ = MBEDTLS_ASN1_OID;
        *p++ = oid_size & 0xFF;
        memcpy( p, oid, oid_size );
        p += oid_size;
        *p++ = MBEDTLS_ASN1_NULL;
"
5085,2021\haas-mini-program\utils\mbedtls\library\rsa.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\rsa.c,"memcpy( sig, sig_try, ctx->len );",120,1,"    }

    memcpy( sig, sig_try, ctx->len );

cleanup:
"
5087,2021\haas-mini-program\utils\mbedtls\library\rsa.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\rsa.c,"memcpy( rsa_plaintext, RSA_PT, PT_LEN );",120,1,"        mbedtls_printf( ""passed\n  PKCS#1 encryption : "" );

    memcpy( rsa_plaintext, RSA_PT, PT_LEN );

    if( mbedtls_rsa_pkcs1_encrypt( &rsa, myrand, NULL, MBEDTLS_RSA_PUBLIC, PT_LEN,
"
5096,2021\haas-mini-program\utils\mbedtls\library\ssl_cli.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_cli.c,"memcpy( p, ssl->hostname, hostname_len );",120,1,"    *p++ = (unsigned char)( ( hostname_len      ) & 0xFF );

    memcpy( p, ssl->hostname, hostname_len );

    *olen = hostname_len + 9;
"
5097,2021\haas-mini-program\utils\mbedtls\library\ssl_cli.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_cli.c,"memcpy( p, ssl->own_verify_data, ssl->verify_data_len );",120,1,"    *p++ = ssl->verify_data_len & 0xFF;

    memcpy( p, ssl->own_verify_data, ssl->verify_data_len );

    *olen = 5 + ssl->verify_data_len;
"
5098,2021\haas-mini-program\utils\mbedtls\library\ssl_cli.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_cli.c,"memcpy( ssl->handshake->ecjpake_cache, p + 2, kkpp_len );",120,1,"        }

        memcpy( ssl->handshake->ecjpake_cache, p + 2, kkpp_len );
        ssl->handshake->ecjpake_cache_len = kkpp_len;
    }
"
5099,2021\haas-mini-program\utils\mbedtls\library\ssl_cli.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_cli.c,"memcpy( p + 2, ssl->handshake->ecjpake_cache, kkpp_len );",120,1,"        }

        memcpy( p + 2, ssl->handshake->ecjpake_cache, kkpp_len );
    }

"
5100,2021\haas-mini-program\utils\mbedtls\library\ssl_cli.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_cli.c,"memcpy( p, ssl->session_negotiate->ticket, tlen );",120,1,"    MBEDTLS_SSL_DEBUG_MSG( 3, ( ""sending session ticket of length %d"", tlen ) );

    memcpy( p, ssl->session_negotiate->ticket, tlen );

    *olen += tlen;
"
5101,2021\haas-mini-program\utils\mbedtls\library\ssl_cli.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_cli.c,"memcpy( p + 1, *cur, *p );",120,1,"    {
        *p = (unsigned char)( strlen( *cur ) & 0xFF );
        memcpy( p + 1, *cur, *p );
        p += 1 + *p;
    }
"
5102,2021\haas-mini-program\utils\mbedtls\library\ssl_cli.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_cli.c,"memcpy( p, ssl->handshake->randbytes, 32 );",120,1,"    }

    memcpy( p, ssl->handshake->randbytes, 32 );
    MBEDTLS_SSL_DEBUG_BUF( 3, ""client hello, random bytes"", p, 32 );
    p += 32;
"
5103,2021\haas-mini-program\utils\mbedtls\library\ssl_cli.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_cli.c,"memcpy( ssl->handshake->verify_cookie, p, cookie_len );",120,1,"    }

    memcpy( ssl->handshake->verify_cookie, p, cookie_len );
    ssl->handshake->verify_cookie_len = cookie_len;

"
5104,2021\haas-mini-program\utils\mbedtls\library\ssl_cli.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_cli.c,"memcpy( ssl->handshake->randbytes + 32, buf + 2, 32 );",120,1,"#endif

    memcpy( ssl->handshake->randbytes + 32, buf + 2, 32 );

    n = buf[34];
"
5105,2021\haas-mini-program\utils\mbedtls\library\ssl_cli.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_cli.c,"memcpy( ssl->session_negotiate->id, buf + 35, n );",120,1,"        ssl->session_negotiate->compression = comp;
        ssl->session_negotiate->id_len = n;
        memcpy( ssl->session_negotiate->id, buf + 35, n );
    }
    else
"
5106,2021\haas-mini-program\utils\mbedtls\library\ssl_cli.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_cli.c,"memcpy( ssl->out_msg + i, ssl->conf->psk_identity, ssl->conf->psk_identity_len );",120,1,"        ssl->out_msg[i++] = (unsigned char)( n      );

        memcpy( ssl->out_msg + i, ssl->conf->psk_identity, ssl->conf->psk_identity_len );
        i += ssl->conf->psk_identity_len;

"
5107,2021\haas-mini-program\utils\mbedtls\library\ssl_cli.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_cli.c,"memcpy( ticket, msg + 6, ticket_len );",120,1,"    }

    memcpy( ticket, msg + 6, ticket_len );

    ssl->session_negotiate->ticket = ticket;
"
5108,2021\haas-mini-program\utils\mbedtls\library\ssl_cookie.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_cookie.c,"memcpy( *p, hmac_out, COOKIE_HMAC_LEN );",120,1,"    }

    memcpy( *p, hmac_out, COOKIE_HMAC_LEN );
    *p += COOKIE_HMAC_LEN;

"
5109,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( dst, src, sizeof( mbedtls_ssl_session ) );",120,1,"{
    mbedtls_ssl_session_free( dst );
    memcpy( dst, src, sizeof( mbedtls_ssl_session ) );

#if defined(MBEDTLS_X509_CRT_PARSE_C)
"
5110,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( dst->ticket, src->ticket, src->ticket_len );",120,1,"            return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

        memcpy( dst->ticket, src->ticket, src->ticket_len );
    }
#endif /* MBEDTLS_SSL_SESSION_TICKETS && MBEDTLS_SSL_CLI_C */
"
5112,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( tmp + 20, label, nb );",120,1,"
    nb = strlen( label );
    memcpy( tmp + 20, label, nb );
    memcpy( tmp + 20 + nb, random, rlen );
    nb += rlen;
"
5113,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( tmp + 20 + nb, random, rlen );",120,1,"    nb = strlen( label );
    memcpy( tmp + 20, label, nb );
    memcpy( tmp + 20 + nb, random, rlen );
    nb += rlen;

"
5114,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( tmp + md_len, label, nb );",120,1,"
    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
    memcpy( tmp + md_len + nb, random, rlen );
    nb += rlen;
"
5115,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( tmp + md_len + nb, random, rlen );",120,1,"    nb = strlen( label );
    memcpy( tmp + md_len, label, nb );
    memcpy( tmp + md_len + nb, random, rlen );
    nb += rlen;

"
5116,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( tmp, handshake->randbytes, 64 );",120,1,"     * Swap the client and server random values.
     */
    memcpy( tmp, handshake->randbytes, 64 );
    memcpy( handshake->randbytes, tmp + 32, 32 );
    memcpy( handshake->randbytes + 32, tmp, 32 );
"
5117,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( handshake->randbytes, tmp + 32, 32 );",120,1,"     */
    memcpy( tmp, handshake->randbytes, 64 );
    memcpy( handshake->randbytes, tmp + 32, 32 );
    memcpy( handshake->randbytes + 32, tmp, 32 );
    mbedtls_zeroize( tmp, sizeof( tmp ) );
"
5118,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( handshake->randbytes + 32, tmp, 32 );",120,1,"    memcpy( tmp, handshake->randbytes, 64 );
    memcpy( handshake->randbytes, tmp + 32, 32 );
    memcpy( handshake->randbytes + 32, tmp, 32 );
    mbedtls_zeroize( tmp, sizeof( tmp ) );

"
5119,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( transform->iv_enc, key2 + transform->keylen,  iv_copy_len );",120,1,"        iv_copy_len = ( transform->fixed_ivlen ) ?
                            transform->fixed_ivlen : transform->ivlen;
        memcpy( transform->iv_enc, key2 + transform->keylen,  iv_copy_len );
        memcpy( transform->iv_dec, key2 + transform->keylen + iv_copy_len,
                iv_copy_len );
"
5120,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( transform->iv_dec, key1 + transform->keylen,  iv_copy_len );",120,1,"        iv_copy_len = ( transform->fixed_ivlen ) ?
                            transform->fixed_ivlen : transform->ivlen;
        memcpy( transform->iv_dec, key1 + transform->keylen,  iv_copy_len );
        memcpy( transform->iv_enc, key1 + transform->keylen + iv_copy_len,
                iv_copy_len );
"
5121,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( transform->mac_enc, mac_enc, transform->maclen );",120,1,"        }

        memcpy( transform->mac_enc, mac_enc, transform->maclen );
        memcpy( transform->mac_dec, mac_dec, transform->maclen );
    }
"
5122,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( transform->mac_dec, mac_dec, transform->maclen );",120,1,"
        memcpy( transform->mac_enc, mac_enc, transform->maclen );
        memcpy( transform->mac_dec, mac_dec, transform->maclen );
    }
    else
"
5128,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( p, psk, psk_len );",120,1,"        return( MBEDTLS_ERR_SSL_BAD_INPUT_DATA );

    memcpy( p, psk, psk_len );
    p += psk_len;

"
5129,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( header, ctr, 8 );",120,1,"        padlen = 40;

    memcpy( header, ctr, 8 );
    header[ 8] = (unsigned char)  type;
    header[ 9] = (unsigned char)( len >> 8 );
"
5132,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( add_data, ssl->out_ctr, 8 );",120,1,"                               MBEDTLS_CIPHERSUITE_SHORT_TAG ? 8 : 16;

        memcpy( add_data, ssl->out_ctr, 8 );
        add_data[8]  = ssl->out_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
"
5133,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( ssl->out_iv, ssl->out_ctr, 8 );",120,1,"        memcpy( ssl->transform_out->iv_enc + ssl->transform_out->fixed_ivlen,
                             ssl->out_ctr, 8 );
        memcpy( ssl->out_iv, ssl->out_ctr, 8 );

        MBEDTLS_SSL_DEBUG_BUF( 4, ""IV used"", ssl->out_iv,
"
5134,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( pseudo_hdr +  0, ssl->out_ctr, 8 );",120,1,"            MBEDTLS_SSL_DEBUG_MSG( 3, ( ""using encrypt then mac"" ) );

            memcpy( pseudo_hdr +  0, ssl->out_ctr, 8 );
            memcpy( pseudo_hdr +  8, ssl->out_hdr, 3 );
            pseudo_hdr[11] = (unsigned char)( ( ssl->out_msglen >> 8 ) & 0xFF );
"
5135,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( pseudo_hdr +  8, ssl->out_hdr, 3 );",120,1,"
            memcpy( pseudo_hdr +  0, ssl->out_ctr, 8 );
            memcpy( pseudo_hdr +  8, ssl->out_hdr, 3 );
            pseudo_hdr[11] = (unsigned char)( ( ssl->out_msglen >> 8 ) & 0xFF );
            pseudo_hdr[12] = (unsigned char)( ( ssl->out_msglen      ) & 0xFF );
"
5136,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( add_data, ssl->in_ctr, 8 );",120,1,"        ssl->in_msglen = dec_msglen;

        memcpy( add_data, ssl->in_ctr, 8 );
        add_data[8]  = ssl->in_msgtype;
        mbedtls_ssl_write_version( ssl->major_ver, ssl->minor_ver,
"
5137,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( pseudo_hdr +  0, ssl->in_ctr, 8 );",120,1,"            ssl->in_msglen -= ssl->transform_in->maclen;

            memcpy( pseudo_hdr +  0, ssl->in_ctr, 8 );
            memcpy( pseudo_hdr +  8, ssl->in_hdr, 3 );
            pseudo_hdr[11] = (unsigned char)( ( ssl->in_msglen >> 8 ) & 0xFF );
"
5138,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( pseudo_hdr +  8, ssl->in_hdr, 3 );",120,1,"
            memcpy( pseudo_hdr +  0, ssl->in_ctr, 8 );
            memcpy( pseudo_hdr +  8, ssl->in_hdr, 3 );
            pseudo_hdr[11] = (unsigned char)( ( ssl->in_msglen >> 8 ) & 0xFF );
            pseudo_hdr[12] = (unsigned char)( ( ssl->in_msglen      ) & 0xFF );
"
5139,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( tmp, ssl->in_msg + ssl->in_msglen, ssl->transform_in->maclen );",120,1,"        ssl->in_len[1] = (unsigned char)( ssl->in_msglen      );

        memcpy( tmp, ssl->in_msg + ssl->in_msglen, ssl->transform_in->maclen );

#if defined(MBEDTLS_SSL_PROTO_SSL3)
"
5140,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( msg_pre, ssl->out_msg, len_pre );",120,1,"        return( 0 );

    memcpy( msg_pre, ssl->out_msg, len_pre );

    MBEDTLS_SSL_DEBUG_MSG( 3, ( ""before compression: msglen = %d, "",
"
5141,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( msg_pre, ssl->in_msg, len_pre );",120,1,"        return( 0 );

    memcpy( msg_pre, ssl->in_msg, len_pre );

    MBEDTLS_SSL_DEBUG_MSG( 3, ( ""before decompression: msglen = %d, "",
"
5142,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( msg->p, ssl->out_msg, ssl->out_msglen );",120,1,"
    /* Copy current handshake message with headers */
    memcpy( msg->p, ssl->out_msg, ssl->out_msglen );
    msg->len = ssl->out_msglen;
    msg->type = ssl->out_msgtype;
"
5143,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( tmp_out_ctr,                 ssl->out_ctr,                8 );",120,1,"
    /* Swap epoch + sequence_number */
    memcpy( tmp_out_ctr,                 ssl->out_ctr,                8 );
    memcpy( ssl->out_ctr,                ssl->handshake->alt_out_ctr, 8 );
    memcpy( ssl->handshake->alt_out_ctr, tmp_out_ctr,                 8 );
"
5144,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( ssl->out_ctr,                ssl->handshake->alt_out_ctr, 8 );",120,1,"    /* Swap epoch + sequence_number */
    memcpy( tmp_out_ctr,                 ssl->out_ctr,                8 );
    memcpy( ssl->out_ctr,                ssl->handshake->alt_out_ctr, 8 );
    memcpy( ssl->handshake->alt_out_ctr, tmp_out_ctr,                 8 );

"
5145,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( ssl->handshake->alt_out_ctr, tmp_out_ctr,                 8 );",120,1,"    memcpy( tmp_out_ctr,                 ssl->out_ctr,                8 );
    memcpy( ssl->out_ctr,                ssl->handshake->alt_out_ctr, 8 );
    memcpy( ssl->handshake->alt_out_ctr, tmp_out_ctr,                 8 );

    /* Adjust to the newly activated transform */
"
5146,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( ssl->out_msg, cur->p, cur->len );",120,1,"        }

        memcpy( ssl->out_msg, cur->p, cur->len );
        ssl->out_msglen = cur->len;
        ssl->out_msgtype = cur->type;
"
5149,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( ssl->out_msg + 9, ssl->out_msg + 1, 3 );",120,1,"            /* We don't fragment, so frag_offset = 0 and frag_len = len */
            memset( ssl->out_msg + 6, 0x00, 3 );
            memcpy( ssl->out_msg + 9, ssl->out_msg + 1, 3 );
        }
#endif /* MBEDTLS_SSL_PROTO_DTLS */
"
5151,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( ssl->handshake->hs_msg, ssl->in_msg, 6 );",120,1,"        /* Prepare final header: copy msg_type, length and message_seq,
         * then add standardised fragment_offset and fragment_length */
        memcpy( ssl->handshake->hs_msg, ssl->in_msg, 6 );
        memset( ssl->handshake->hs_msg + 6, 0, 3 );
        memcpy( ssl->handshake->hs_msg + 9,
"
5153,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( msg + frag_off, ssl->in_msg + 12, frag_len );",120,1,"                        frag_off, frag_len ) );

    memcpy( msg + frag_off, ssl->in_msg + 12, frag_len );
    ssl_bitmask_set( bitmask, frag_off, frag_len );

"
5155,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( ssl->in_msg, ssl->handshake->hs_msg, ssl->in_hslen );",120,1,"    }

    memcpy( ssl->in_msg, ssl->handshake->hs_msg, ssl->in_hslen );

    mbedtls_free( ssl->handshake->hs_msg );
"
5156,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( obuf, in, 25 );",120,1,"
    /* Copy most fields and adapt others */
    memcpy( obuf, in, 25 );
    obuf[13] = MBEDTLS_SSL_HS_HELLO_VERIFY_REQUEST;
    obuf[25] = 0xfe;
"
5157,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );",120,1,"        ssl->out_msg[i + 2] = (unsigned char)( n       );

        i += 3; memcpy( ssl->out_msg + i, crt->raw.p, n );
        i += n; crt = crt->next;
    }
"
5161,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );",120,1,"#if defined(MBEDTLS_SSL_RENEGOTIATION)
    ssl->verify_data_len = hash_len;
    memcpy( ssl->own_verify_data, ssl->out_msg + 4, hash_len );
#endif

"
5162,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( ssl->handshake->alt_out_ctr, ssl->out_ctr, 8 );",120,1,"        /* Remember current epoch settings for resending */
        ssl->handshake->alt_transform_out = ssl->transform_out;
        memcpy( ssl->handshake->alt_out_ctr, ssl->out_ctr, 8 );

        /* Set sequence_number to zero */
"
5165,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( ssl->peer_verify_data, buf, hash_len );",120,1,"#if defined(MBEDTLS_SSL_RENEGOTIATION)
    ssl->verify_data_len = hash_len;
    memcpy( ssl->peer_verify_data, buf, hash_len );
#endif

"
5174,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( conf->psk, psk, conf->psk_len );",120,1,"    conf->psk_identity_len = psk_identity_len;

    memcpy( conf->psk, psk, conf->psk_len );
    memcpy( conf->psk_identity, psk_identity, conf->psk_identity_len );

"
5175,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( conf->psk_identity, psk_identity, conf->psk_identity_len );",120,1,"
    memcpy( conf->psk, psk, conf->psk_len );
    memcpy( conf->psk_identity, psk_identity, conf->psk_identity_len );

    return( 0 );
"
5176,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( ssl->handshake->psk, psk, ssl->handshake->psk_len );",120,1,"
    ssl->handshake->psk_len = psk_len;
    memcpy( ssl->handshake->psk, psk, ssl->handshake->psk_len );

    return( 0 );
"
5177,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( ssl->hostname, hostname, hostname_len );",120,1,"        return( MBEDTLS_ERR_SSL_ALLOC_FAILED );

    memcpy( ssl->hostname, hostname, hostname_len );

    ssl->hostname[hostname_len] = '\0';
"
5178,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( conf->renego_period, period, 8 );",120,1,"                                   const unsigned char period[8] )
{
    memcpy( conf->renego_period, period, 8 );
}
#endif /* MBEDTLS_SSL_RENEGOTIATION */
"
5179,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( buf, ssl->in_offt, n );",120,1,"        ? len : ssl->in_msglen;

    memcpy( buf, ssl->in_offt, n );
    ssl->in_msglen -= n;

"
5180,2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ssl_tls.c,"memcpy( ssl->out_msg, buf, len );",120,1,"        ssl->out_msglen  = len;
        ssl->out_msgtype = MBEDTLS_SSL_MSG_APPLICATION_DATA;
        memcpy( ssl->out_msg, buf, len );

        if( ( ret = mbedtls_ssl_write_record( ssl ) ) != 0 )
"
5191,2021\haas-mini-program\utils\mbedtls\library\x509_crt.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\x509_crt.c,"memcpy( p, buf, crt->raw.len );",120,1,"        return( MBEDTLS_ERR_X509_ALLOC_FAILED );

    memcpy( p, buf, crt->raw.len );

    // Direct pointers to the new buffer
"
5194,2021\haas-mini-program\utils\mbedtls\library\x509_crt.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\x509_crt.c,"memcpy( filename, path, len );",120,1,"    memset( szDir, 0, sizeof(szDir) );
    memset( filename, 0, MAX_PATH );
    memcpy( filename, path, len );
    filename[len++] = '\\';
    p = filename + len;
"
5201,2021\healthyhome\monitoring-server\include\core\comms\WordPacket.h,Dataset Download,../../Dataset Download/2021\healthyhome\monitoring-server\include\core\comms\WordPacket.h,"memcpy(&value, buffer, getBufferSize());",120,1,"    StatusCode deserialize(const uint8_t* buffer) override
    {
        memcpy(&value, buffer, getBufferSize());
        return SUCCESS;
    }
"
5202,2021\healthyhome\monitoring-server\include\core\comms\WordPacket.h,Dataset Download,../../Dataset Download/2021\healthyhome\monitoring-server\include\core\comms\WordPacket.h,"memcpy(buffer, &value, getBufferSize());",120,1,"    StatusCode serialize(uint8_t* buffer) override
    {
        memcpy(buffer, &value, getBufferSize());
        return SUCCESS;
    }
"
5203,2021\healthyhome\monitoring-server\libs\bme680\include\bme680\AdapterPacket.h,Dataset Download,../../Dataset Download/2021\healthyhome\monitoring-server\libs\bme680\include\bme680\AdapterPacket.h,"std::memcpy(readBuffer, sourceBuffer, size);",120,1,"    Core::StatusCode deserialize(const uint8_t* sourceBuffer) override
    {
        std::memcpy(readBuffer, sourceBuffer, size);
        return Core::SUCCESS;
    }
"
5204,2021\healthyhome\monitoring-server\libs\bme680\include\bme680\AdapterPacket.h,Dataset Download,../../Dataset Download/2021\healthyhome\monitoring-server\libs\bme680\include\bme680\AdapterPacket.h,"std::memcpy(targetBuffer, writeBuffer, size);",120,1,"    Core::StatusCode serialize(uint8_t* targetBuffer) override
    {
        std::memcpy(targetBuffer, writeBuffer, size);
        return Core::SUCCESS;
    }
"
5208,2021\healthyhome\monitoring-server\libs\sn-gcja5\include\sn-gcja5\DensityPacket.h,Dataset Download,../../Dataset Download/2021\healthyhome\monitoring-server\libs\sn-gcja5\include\sn-gcja5\DensityPacket.h,"std::memcpy(&num, buffer, sizeof density);",120,1,"    {
        uint32_t num = 0;
        std::memcpy(&num, buffer, sizeof density);
        density = static_cast<float>(num) / MILLI;
        return Core::SUCCESS;
"
5209,2021\healthyhome\monitoring-server\libs\sn-gcja5\include\sn-gcja5\ParticleCountPacket.h,Dataset Download,../../Dataset Download/2021\healthyhome\monitoring-server\libs\sn-gcja5\include\sn-gcja5\ParticleCountPacket.h,"std::memcpy(&count, buffer, sizeof count);",120,1,"    Core::StatusCode deserialize(const uint8_t* buffer) override
    {
        std::memcpy(&count, buffer, sizeof count);
        return Core::SUCCESS;
    }
"
5274,2021\intelli-switch\stm32\MDK-ARM\esp8266_Driver.c,Dataset Download,../../Dataset Download/2021\intelli-switch\stm32\MDK-ARM\esp8266_Driver.c,"memcpy(torevdata,ESP_RECEIVE_BUFFER+ESP_SERVER_REV_COUNT,ESP_REV_CNT-ESP_SERVER_REV_COUNT+1);",120,1,"				char torevdata[16];
				memset(torevdata,0,sizeof(torevdata));
				memcpy(torevdata,ESP_RECEIVE_BUFFER+ESP_SERVER_REV_COUNT,ESP_REV_CNT-ESP_SERVER_REV_COUNT+1);
				sscanf(torevdata,""+IPD,%hhu,%hu:"",&ESP_CLIENT_REV_INDEX,&ESP_SERVER_REV_COUNT);
				ESP_SERVER_IPD_REV_FLAG=0;
"
5289,2021\intelli-switch\stm32\MDK-ARM\esp8266_Driver.c,Dataset Download,../../Dataset Download/2021\intelli-switch\stm32\MDK-ARM\esp8266_Driver.c,"memcpy(URL,ESP_RECEIVE_BUFFER+url_start,url_end-url_start+1);",120,1,"					char URL[128];
					memset(URL,0,sizeof(URL));
					memcpy(URL,ESP_RECEIVE_BUFFER+url_start,url_end-url_start+1);
					ESP_SERVER_HTTP_HANDLE(i,URL);
				}
"
5302,2021\intelli-switch\stm32\MDK-ARM\esp8266_Driver.c,Dataset Download,../../Dataset Download/2021\intelli-switch\stm32\MDK-ARM\esp8266_Driver.c,"memcpy(temp_url,URL,url_len);",120,1,"		char temp_url[128];
		memset(temp_url,0,sizeof(temp_url));
		memcpy(temp_url,URL,url_len);
		char* token;
		token=strtok(temp_url,split);
"
5304,2021\intelli-switch\stm32\MDK-ARM\esp8266_Driver.c,Dataset Download,../../Dataset Download/2021\intelli-switch\stm32\MDK-ARM\esp8266_Driver.c,"memcpy(ESP_SSID,token,strlen(token));",120,1,"			{
				memset(ESP_SSID,0,sizeof(ESP_SSID));
				memcpy(ESP_SSID,token,strlen(token));
			}
			else if(splitCNT==1)
"
5306,2021\intelli-switch\stm32\MDK-ARM\esp8266_Driver.c,Dataset Download,../../Dataset Download/2021\intelli-switch\stm32\MDK-ARM\esp8266_Driver.c,"memcpy(ESP_PASSWD,token,strlen(token));",120,1,"			{
				memset(ESP_PASSWD,0,sizeof(ESP_PASSWD));
				memcpy(ESP_PASSWD,token,strlen(token));
			}
			else if(splitCNT==2)
"
5308,2021\intelli-switch\stm32\MDK-ARM\esp8266_Driver.c,Dataset Download,../../Dataset Download/2021\intelli-switch\stm32\MDK-ARM\esp8266_Driver.c,"memcpy(ESP_TCP_IPADDR,token,strlen(token));",120,1,"			{
				memset(ESP_TCP_IPADDR,0,sizeof(ESP_TCP_IPADDR));
				memcpy(ESP_TCP_IPADDR,token,strlen(token));
			}
			else if(splitCNT==3)
"
5310,2021\intelli-switch\stm32\MDK-ARM\esp8266_Driver.c,Dataset Download,../../Dataset Download/2021\intelli-switch\stm32\MDK-ARM\esp8266_Driver.c,"memcpy(ESP_TCP_PORT,token,strlen(token));",120,1,"			{
				memset(ESP_TCP_PORT,0,sizeof(ESP_TCP_PORT));
				memcpy(ESP_TCP_PORT,token,strlen(token));
			}
			splitCNT++;
"
5313,2021\intelli-switch\stm32\MDK-ARM\GUI.c,Dataset Download,../../Dataset Download/2021\intelli-switch\stm32\MDK-ARM\GUI.c,"memcpy(buffer,dat+cnt,14);",120,1,"		while(length-cnt>14)
		{
			memcpy(buffer,dat+cnt,14);
			GUI_PrintOnScreen(5,line_ctl*15+5,ForeFont_Color,Backgound_Color,(uint8_t*)&""              "");
			GUI_PrintOnScreen(5,line_ctl*15+5,ForeFont_Color,Backgound_Color,buffer);
"
5315,2021\intelli-switch\stm32\MDK-ARM\GUI.c,Dataset Download,../../Dataset Download/2021\intelli-switch\stm32\MDK-ARM\GUI.c,"memcpy(buffer,dat+cnt,length-cnt);",120,1,"			cnt+=14;
		}
		memcpy(buffer,dat+cnt,length-cnt);
		uint8_t t_buffer[14];
		memset(t_buffer,' ',sizeof(t_buffer));
"
5330,2021\intelli-switch\stm32\Src\main.c,Dataset Download,../../Dataset Download/2021\intelli-switch\stm32\Src\main.c,"memcpy(ESP_SSID,(uint8_t*)temp,16);",120,1,"	memset(ESP_TCP_PORT,0,sizeof(ESP_TCP_PORT));
	
	memcpy(ESP_SSID,(uint8_t*)temp,16);
	memcpy(ESP_PASSWD,(uint8_t*)(temp+16),20);
	memcpy(ESP_TCP_IPADDR,(uint8_t*)(temp+16+20),20);
"
5331,2021\intelli-switch\stm32\Src\main.c,Dataset Download,../../Dataset Download/2021\intelli-switch\stm32\Src\main.c,"memcpy(ESP_PASSWD,(uint8_t*)(temp+16),20);",120,1,"	
	memcpy(ESP_SSID,(uint8_t*)temp,16);
	memcpy(ESP_PASSWD,(uint8_t*)(temp+16),20);
	memcpy(ESP_TCP_IPADDR,(uint8_t*)(temp+16+20),20);
	memcpy(ESP_TCP_PORT,(uint8_t*)(temp+16+20+20),8);
"
5332,2021\intelli-switch\stm32\Src\main.c,Dataset Download,../../Dataset Download/2021\intelli-switch\stm32\Src\main.c,"memcpy(ESP_TCP_IPADDR,(uint8_t*)(temp+16+20),20);",120,1,"	memcpy(ESP_SSID,(uint8_t*)temp,16);
	memcpy(ESP_PASSWD,(uint8_t*)(temp+16),20);
	memcpy(ESP_TCP_IPADDR,(uint8_t*)(temp+16+20),20);
	memcpy(ESP_TCP_PORT,(uint8_t*)(temp+16+20+20),8);
}
"
5333,2021\intelli-switch\stm32\Src\main.c,Dataset Download,../../Dataset Download/2021\intelli-switch\stm32\Src\main.c,"memcpy(ESP_TCP_PORT,(uint8_t*)(temp+16+20+20),8);",120,1,"	memcpy(ESP_PASSWD,(uint8_t*)(temp+16),20);
	memcpy(ESP_TCP_IPADDR,(uint8_t*)(temp+16+20),20);
	memcpy(ESP_TCP_PORT,(uint8_t*)(temp+16+20+20),8);
}

"
5337,2021\intelli-switch\stm32\Src\main.c,Dataset Download,../../Dataset Download/2021\intelli-switch\stm32\Src\main.c,"memcpy(temp_buff,rev_buff+3,strlen((const char*)rev_buff)-3);",120,1,"	uint8_t temp_buff[14];
	memset(temp_buff,0,sizeof(temp_buff));
	memcpy(temp_buff,rev_buff+3,strlen((const char*)rev_buff)-3);
	
	sscanf((char*)temp_buff,""%s %hhu:%hhu:%hhu"",week,&hour,&minute,&second);
"
5342,2021\intelli-switch\stm32\Src\main.c,Dataset Download,../../Dataset Download/2021\intelli-switch\stm32\Src\main.c,"memcpy(scrbuffer,rev_buff+3,14);",120,1,"	
	memset(scrbuffer,0,sizeof(scrbuffer));
	memcpy(scrbuffer,rev_buff+3,14);
	l_print(scrbuffer,0,Left);
	
"
5344,2021\intelli-switch\stm32\Src\main.c,Dataset Download,../../Dataset Download/2021\intelli-switch\stm32\Src\main.c,"memcpy(scrbuffer,rev_buff+3+14,14);",120,1,"	
	memset(scrbuffer,0,sizeof(scrbuffer));
	memcpy(scrbuffer,rev_buff+3+14,14);
	l_print(scrbuffer,1,Left);
	
"
5346,2021\intelli-switch\stm32\Src\main.c,Dataset Download,../../Dataset Download/2021\intelli-switch\stm32\Src\main.c,"memcpy(scrbuffer,rev_buff+3+14+14,14);",120,1,"	
	memset(scrbuffer,0,sizeof(scrbuffer));
	memcpy(scrbuffer,rev_buff+3+14+14,14);
	l_print(scrbuffer,2,Left);
	
"
5348,2021\intelli-switch\stm32\Src\main.c,Dataset Download,../../Dataset Download/2021\intelli-switch\stm32\Src\main.c,"memcpy(scrbuffer,rev_buff+3+14+14+14,14);",120,1,"	
	memset(scrbuffer,0,sizeof(scrbuffer));
	memcpy(scrbuffer,rev_buff+3+14+14+14,14);
	l_print(scrbuffer,3,Left);
	
"
5350,2021\intelli-switch\stm32\Src\main.c,Dataset Download,../../Dataset Download/2021\intelli-switch\stm32\Src\main.c,"memcpy(scrbuffer,rev_buff+3+14+14+14+14,14);",120,1,"	
	memset(scrbuffer,0,sizeof(scrbuffer));
	memcpy(scrbuffer,rev_buff+3+14+14+14+14,14);
	l_print(scrbuffer,4,Left);
	
"
5352,2021\intelli-switch\stm32\Src\main.c,Dataset Download,../../Dataset Download/2021\intelli-switch\stm32\Src\main.c,"memcpy(scrbuffer,rev_buff+3+14+14+14+14+14,14);",120,1,"	
	memset(scrbuffer,0,sizeof(scrbuffer));
	memcpy(scrbuffer,rev_buff+3+14+14+14+14+14,14);
	l_print(scrbuffer,5,Left);
}
"
5373,2021\iot-lab\blink_node\node_modules\nan\nan.h,Dataset Download,../../Dataset Download/2021\iot-lab\blink_node\node_modules\nan\nan.h,"memcpy(errmsg_, msg, size);",120,1,"    size_t size = strlen(msg) + 1;
    errmsg_ = new char[size];
    memcpy(errmsg_, msg, size);
  }

"
5374,2021\iot-lab\blink_node\node_modules\nan\nan_weak.h,Dataset Download,../../Dataset Download/2021\iot-lab\blink_node\node_modules\nan\nan_weak.h,"std::memcpy(&persistent_, persistent, sizeof (v8::Persistent<v8::Value>));",120,1,"    , void *field2 = 0) :
        callback_(callback), isolate_(0), parameter_(parameter) {
    std::memcpy(&persistent_, persistent, sizeof (v8::Persistent<v8::Value>));
    internal_fields_[0] = field1;
    internal_fields_[1] = field2;
"
5410,2021\IOWA_ZephyrOS\iowa_platform.c,Dataset Download,../../Dataset Download/2021\IOWA_ZephyrOS\iowa_platform.c,"memcpy(&pointer, &sock, sizeof(int));",120,1,"    sock += 1;

    memcpy(&pointer, &sock, sizeof(int));

    return pointer;
"
5411,2021\IOWA_ZephyrOS\iowa_platform.c,Dataset Download,../../Dataset Download/2021\IOWA_ZephyrOS\iowa_platform.c,"memcpy(&sock, &pointer, sizeof(int));",120,1,"    int sock;

    memcpy(&sock, &pointer, sizeof(int));

    return sock - 1;
"
5468,2021\Kiss-Light_Hub\src\statejson.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\statejson.c,"memcpy( end, state + t[i + 1].end, strlen(state) - t[i + 1].end );",120,1,"            int str_diff = strlen(elem) - (t[i + 1].end - t[i + 1].start);

            memcpy( end, state + t[i + 1].end, strlen(state) - t[i + 1].end );
            memset( state + t[i + 1].end, 0, strlen(state) - t[i + 1].end );
            memcpy( state + t[i + 1].start, elem, strlen(elem) );
"
5470,2021\Kiss-Light_Hub\src\statejson.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\statejson.c,"memcpy( state + t[i + 1].start, elem, strlen(elem) );",120,1,"            memcpy( end, state + t[i + 1].end, strlen(state) - t[i + 1].end );
            memset( state + t[i + 1].end, 0, strlen(state) - t[i + 1].end );
            memcpy( state + t[i + 1].start, elem, strlen(elem) );
            memcpy( state + t[i + 1].start + strlen(elem), end, strlen(end) );
            memset( end, 0, JSON_LEN );
"
5471,2021\Kiss-Light_Hub\src\statejson.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\statejson.c,"memcpy( state + t[i + 1].start + strlen(elem), end, strlen(end) );",120,1,"            memset( state + t[i + 1].end, 0, strlen(state) - t[i + 1].end );
            memcpy( state + t[i + 1].start, elem, strlen(elem) );
            memcpy( state + t[i + 1].start + strlen(elem), end, strlen(end) );
            memset( end, 0, JSON_LEN );

"
5475,2021\Kiss-Light_Hub\src\mqttc\mqtt.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\mqttc\mqtt.c,"memcpy(buf, will_message, will_message_size);",120,1,"        buf += __mqtt_pack_str(buf, will_topic);
        buf += __mqtt_pack_uint16(buf, (uint16_t)will_message_size);
        memcpy(buf, will_message, will_message_size);
        buf += will_message_size;
    }
"
5476,2021\Kiss-Light_Hub\src\mqttc\mqtt.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\mqttc\mqtt.c,"memcpy(buf, application_message, application_message_size);",120,1,"
    /* pack payload */
    memcpy(buf, application_message, application_message_size);
    buf += application_message_size;

"
5479,2021\Kiss-Light_Hub\src\mqttc\mqtt.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\mqttc\mqtt.c,"memcpy(buf, &integer_htons, 2);",120,1,"{
  uint16_t integer_htons = MQTT_PAL_HTONS(integer);
  memcpy(buf, &integer_htons, 2);
  return 2;
}
"
5480,2021\Kiss-Light_Hub\src\mqttc\mqtt.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\mqttc\mqtt.c,"memcpy(&integer_htons, buf, 2);",120,1,"{
  uint16_t integer_htons;
  memcpy(&integer_htons, buf, 2);
  return MQTT_PAL_NTOHS(integer_htons);
}
"
5481,2021\Kiss-Light_Hub\src\mqttc\mqtt_pal.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\mqttc\mqtt_pal.c,"memcpy(buffer, walker, write);",120,1,"            if (length > 0) {
                size_t write = length >= remaining_bytes? remaining_bytes : length;
                memcpy(buffer, walker, write);
                remaining_bytes -= write;
                walker += write;
"
5482,2021\Kiss-Light_Hub\src\mqttc\mqtt_pal.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\mqttc\mqtt_pal.c,"memcpy(walker, buffer, write);",120,1,"        if (length > 0) {
            size_t write = length >= remaining_bytes? remaining_bytes : length;
            memcpy(walker, buffer, write);
            remaining_bytes -= write;
            walker += write;
"
5483,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"# define memcpy(D,S,N) {char*xxd=(char*)(D);const char*xxs=(const char*)(S);\",120,1,"*/
#ifdef SQLITE_INLINE_MEMCPY
# define memcpy(D,S,N) {char*xxd=(char*)(D);const char*xxs=(const char*)(S);\
                        int xxn=(N);while(xxn-->0)*(xxd++)=*(xxs++);}
#endif
"
5490,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"if( pTm ) memcpy(&sNow, pTm, sizeof(sNow));",120,1,"  sqlite3_mutex_enter(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MAIN));
  pTm = gmtime(&t);
  if( pTm ) memcpy(&sNow, pTm, sizeof(sNow));
  sqlite3_mutex_leave(sqlite3MutexAlloc(SQLITE_MUTEX_STATIC_MAIN));
#endif
"
5492,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(zBufOut, &sqlite3Config.iPrngSeed, nByte);",120,1,"    memset(zBufOut, 0, nByte);
    if( ALWAYS(nByte>(signed)sizeof(unsigned)) ) nByte = sizeof(unsigned int);
    memcpy(zBufOut, &sqlite3Config.iPrngSeed, nByte);
    return SQLITE_OK;
  }else{
"
5493,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pBt, &aAddr[1], pHdr->nBacktrace*sizeof(void*));",120,1,"      void *aAddr[40];
      pHdr->nBacktrace = backtrace(aAddr, mem.nBacktrace+1)-1;
      memcpy(pBt, &aAddr[1], pHdr->nBacktrace*sizeof(void*));
      assert(pBt[0]);
      if( mem.xBacktrace ){
"
5494,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(z, mem.zTitle, mem.nTitle);",120,1,"    }
    if( mem.nTitle ){
      memcpy(z, mem.zTitle, mem.nTitle);
    }
    pHdr->iSize = nByte;
"
5496,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pNew, pPrior, (int)(nByte<pOldHdr->iSize ? nByte : pOldHdr->iSize));",120,1,"  pNew = sqlite3MemMalloc(nByte);
  if( pNew ){
    memcpy(pNew, pPrior, (int)(nByte<pOldHdr->iSize ? nByte : pOldHdr->iSize));
    if( nByte>pOldHdr->iSize ){
      randomFill(&((char*)pNew)[pOldHdr->iSize], nByte - (int)pOldHdr->iSize);
"
5497,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(mem.zTitle, zTitle, n);",120,1,"  sqlite3_mutex_enter(mem.mutex);
  if( n>=sizeof(mem.zTitle) ) n = sizeof(mem.zTitle)-1;
  memcpy(mem.zTitle, zTitle, n);
  mem.zTitle[n] = 0;
  mem.nTitle = ROUND8(n);
"
5498,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(p, pPrior, nOld);",120,1,"  if( p ){
    if( nOld<nBytes ){
      memcpy(p, pPrior, nOld);
    }else{
      memcpy(p, pPrior, nBytes);
"
5499,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(p, pPrior, nBytes);",120,1,"      memcpy(p, pPrior, nOld);
    }else{
      memcpy(p, pPrior, nBytes);
    }
    memsys3FreeUnsafe(pPrior);
"
5510,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pNew, p, lookasideMallocSize(db, p));",120,1,"      pNew = sqlite3DbMallocRawNN(db, n);
      if( pNew ){
        memcpy(pNew, p, lookasideMallocSize(db, p));
        sqlite3DbFree(db, p);
      }
"
5513,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&u, &rx, sizeof(u));",120,1,"          sqlite3_uint64 u;
          int ex;
          memcpy(&u, &rx, sizeof(u));
          ex = -1023 + (int)((u>>52)&0x7ff);
          if( precision+(ex/3) < 15 ) rounder += realvalue*3e-16;
"
5515,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"if( !isMalloced(p) && p->nChar>0 ) memcpy(zNew, p->zText, p->nChar);",120,1,"    if( zNew ){
      assert( p->zText!=0 || p->nChar==0 );
      if( !isMalloced(p) && p->nChar>0 ) memcpy(zNew, p->zText, p->nChar);
      p->zText = zNew;
      p->nAlloc = sqlite3DbMallocSize(p->db, zNew);
"
5518,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(zText, p->zText, p->nChar+1);",120,1,"  zText = sqlite3DbMallocRaw(p->db, p->nChar+1 );
  if( zText ){
    memcpy(zText, p->zText, p->nChar+1);
    p->printfFlags |= SQLITE_PRINTF_MALLOCED;
  }else{
"
5525,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&y,&x,sizeof(y));",120,1,"SQLITE_PRIVATE int sqlite3IsNaN(double x){
  u64 y;
  memcpy(&y,&x,sizeof(y));
  return IsNaN(y);
}
"
5526,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(zOut, &zTemp[i+1], sizeof(zTemp)-1-i);",120,1,"  }while( x );
  if( v<0 ) zTemp[i--] = '-';
  memcpy(zOut, &zTemp[i+1], sizeof(zTemp)-1-i);
}

"
5532,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(p,&v,4);",120,1,"SQLITE_PRIVATE void sqlite3Put4byte(unsigned char *p, u32 v){
#if SQLITE_BYTEORDER==4321
  memcpy(p,&v,4);
#elif SQLITE_BYTEORDER==1234 && GCC_VERSION>=4003000
  u32 x = __builtin_bswap32(v);
"
5537,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(z, zName, nName);",120,1,"  pIn[1] = i+nInt;
  assert( pIn[1]<=pIn[0] );
  memcpy(z, zName, nName);
  z[nName] = 0;
  return pIn;
"
5539,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pNew->zCanonicalName, zAbsoluteName, n+1);",120,1,"  if( pNew==0 ) return 0;
  pNew->zCanonicalName = (char*)&pNew[1];
  memcpy(pNew->zCanonicalName, zAbsoluteName, n+1);
  n = vxworksSimplifyName(pNew->zCanonicalName, n);

"
5548,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&((u8 *)(pFile->pMapRegion))[offset], pBuf, amt);",120,1,"  if( offset<pFile->mmapSize ){
    if( offset+amt <= pFile->mmapSize ){
      memcpy(&((u8 *)(pFile->pMapRegion))[offset], pBuf, amt);
      return SQLITE_OK;
    }else{
"
5549,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&((u8 *)(pFile->pMapRegion))[offset], pBuf, nCopy);",120,1,"    }else{
      int nCopy = pFile->mmapSize - offset;
      memcpy(&((u8 *)(pFile->pMapRegion))[offset], pBuf, nCopy);
      pBuf = &((u8 *)pBuf)[nCopy];
      amt -= nCopy;
"
5566,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(lockPath, &readBuf[PROXY_PATHINDEX], pathLen);",120,1,"              pathLen=MAXPATHLEN-1;
            }
            memcpy(lockPath, &readBuf[PROXY_PATHINDEX], pathLen);
            lockPath[pathLen] = 0;
            tempLockPath = lockPath;
"
5567,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&writeBuffer[PROXY_HEADERLEN], myHostID, PROXY_HOSTIDLEN);",120,1,"
        writeBuffer[0] = (char)PROXY_CONCHVERSION;
        memcpy(&writeBuffer[PROXY_HEADERLEN], myHostID, PROXY_HOSTIDLEN);
        if( pCtx->lockProxyPath!=NULL ){
          strlcpy(&writeBuffer[PROXY_PATHINDEX], pCtx->lockProxyPath,
"
5568,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(conchPath, dbPath, len+1);",120,1,"    return SQLITE_NOMEM_BKPT;
  }
  memcpy(conchPath, dbPath, len+1);

  /* now insert a ""."" before the last / character */
"
5569,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&conchPath[i+1], ""-conch"", 7);",120,1,"
  /* append the ""-conch"" suffix to the file */
  memcpy(&conchPath[i+1], ""-conch"", 7);
  assert( (int)strlen(conchPath) == len+7 );

"
5570,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(dbPath, (char *)pFile->lockingContext, len + 1);",120,1,"    ** file path */
    int len = strlen((char *)pFile->lockingContext) - strlen(DOTLOCK_SUFFIX);
    memcpy(dbPath, (char *)pFile->lockingContext, len + 1);
  }else{
    /* all other styles use the locking context to store the db file path */
"
5573,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(zDbgBuf, zBuf, nMin);",120,1,"  if( nMin>0 ){
    memset(zDbgBuf, 0, SQLITE_WIN32_DBG_BUF_SIZE);
    memcpy(zDbgBuf, zBuf, nMin);
    osOutputDebugStringA(zDbgBuf);
  }else{
"
5599,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"if( iOfst<p->sz ) memcpy(zBuf, p->aData+iOfst, p->sz - iOfst);",120,1,"  if( iOfst+iAmt>p->sz ){
    memset(zBuf, 0, iAmt);
    if( iOfst<p->sz ) memcpy(zBuf, p->aData+iOfst, p->sz - iOfst);
    return SQLITE_IOERR_SHORT_READ;
  }
"
5600,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(zBuf, p->aData+iOfst, iAmt);",120,1,"    return SQLITE_IOERR_SHORT_READ;
  }
  memcpy(zBuf, p->aData+iOfst, iAmt);
  return SQLITE_OK;
}
"
5602,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(p->aData+iOfst, z, iAmt);",120,1,"    p->sz = iOfst+iAmt;
  }
  memcpy(p->aData+iOfst, z, iAmt);
  return SQLITE_OK;
}
"
5604,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"if( pOut ) memcpy(pOut, p->aData, p->sz);",120,1,"    }else{
      pOut = sqlite3_malloc64( p->sz );
      if( pOut ) memcpy(pOut, p->aData, p->sz);
    }
    return pOut;
"
5605,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pTo, sqlite3PagerGetData(pPage), szPage);",120,1,"          rc = sqlite3PagerGet(pPager, pgno, (DbPage**)&pPage, 0);
          if( rc==SQLITE_OK ){
            memcpy(pTo, sqlite3PagerGetData(pPage), szPage);
          }else{
            memset(pTo, 0, szPage);
"
5632,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pPtr, &pPager, sizeof(pPager));  pPtr += sizeof(pPager);",120,1,"  pPager->jfd =  (sqlite3_file*)pPtr;     pPtr += journalFileSize;
  assert( EIGHT_BYTE_ALIGNMENT(pPager->jfd) );
  memcpy(pPtr, &pPager, sizeof(pPager));  pPtr += sizeof(pPager);

  /* Fill in the Pager.zFilename and pPager.zQueryParam fields */
"
5633,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pPtr, zPathname, nPathname);   pPtr += nPathname + 1;",120,1,"  pPager->zFilename = (char*)pPtr;
  if( nPathname>0 ){
    memcpy(pPtr, zPathname, nPathname);   pPtr += nPathname + 1;
    if( zUri ){
      memcpy(pPtr, zUri, nUriByte);       pPtr += nUriByte;
"
5634,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pPtr, zUri, nUriByte);       pPtr += nUriByte;",120,1,"    memcpy(pPtr, zPathname, nPathname);   pPtr += nPathname + 1;
    if( zUri ){
      memcpy(pPtr, zUri, nUriByte);       pPtr += nUriByte;
    }else{
                                          pPtr++;
"
5635,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pPtr, zPathname, nPathname);   pPtr += nPathname;",120,1,"  if( nPathname>0 ){
    pPager->zJournal = (char*)pPtr;
    memcpy(pPtr, zPathname, nPathname);   pPtr += nPathname;
    memcpy(pPtr, ""-journal"",8);           pPtr += 8 + 1;
#ifdef SQLITE_ENABLE_8_3_NAMES
"
5636,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pPtr, ""-journal"",8);           pPtr += 8 + 1;",120,1,"    pPager->zJournal = (char*)pPtr;
    memcpy(pPtr, zPathname, nPathname);   pPtr += nPathname;
    memcpy(pPtr, ""-journal"",8);           pPtr += 8 + 1;
#ifdef SQLITE_ENABLE_8_3_NAMES
    sqlite3FileSuffix3(zFilename,pPager->zJournal);
"
5638,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pPtr, ""-wal"", 4);              pPtr += 4 + 1;",120,1,"    pPager->zWal = (char*)pPtr;
    memcpy(pPtr, zPathname, nPathname);   pPtr += nPathname;
    memcpy(pPtr, ""-wal"", 4);              pPtr += 4 + 1;
#ifdef SQLITE_ENABLE_8_3_NAMES
    sqlite3FileSuffix3(zFilename, pPager->zWal);
"
5651,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&aShare[nHdr32], &aPrivate[nHdr32], WALINDEX_PGSZ-nHdr);",120,1,"      ** is safe for this.  Memcpy() is certainly a lot faster.
      */
      memcpy(&aShare[nHdr32], &aPrivate[nHdr32], WALINDEX_PGSZ-nHdr);
#else
      /* In the event that some platform is found for which memcpy()
"
5656,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&h1, (void *)&aHdr[0], sizeof(h1)); */",120,1,"  */
  aHdr = walIndexHdr(pWal);
  memcpy(&h1, (void *)&aHdr[0], sizeof(h1)); /* Possible TSAN false-positive */
  walShmBarrier(pWal);
  memcpy(&h2, (void *)&aHdr[1], sizeof(h2));
"
5659,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&pWal->hdr, (void*)walIndexHdr(pWal), sizeof(WalIndexHdr));",120,1,"  ** into pWal->hdr.
  */
  memcpy(&pWal->hdr, (void*)walIndexHdr(pWal), sizeof(WalIndexHdr));

  /* Make sure some writer hasn't come in and changed the WAL file out
"
5660,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&pWal->hdr, pSnapshot, sizeof(WalIndexHdr));",120,1,"      ){
        assert( pWal->readLock>0 );
        memcpy(&pWal->hdr, pSnapshot, sizeof(WalIndexHdr));
        *pChanged = bChanged;
      }else{
"
5664,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pRet, &pWal->hdr, sizeof(WalIndexHdr));",120,1,"    rc = SQLITE_NOMEM_BKPT;
  }else{
    memcpy(pRet, &pWal->hdr, sizeof(WalIndexHdr));
    *ppSnapshot = (sqlite3_snapshot*)pRet;
  }
"
5684,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(aSave, aWrite, 4);",120,1,"          u8 *aWrite = &pBuf[-4];
          assert( aWrite>=pBufStart );                         /* due to (6) */
          memcpy(aSave, aWrite, 4);
          rc = sqlite3OsRead(fd, aWrite, a+4, (i64)pBt->pageSize*(nextPage-1));
          if( rc && nextPage>pBt->nPage ) rc = SQLITE_CORRUPT_BKPT;
"
5685,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(aWrite, aSave, 4);",120,1,"          if( rc && nextPage>pBt->nPage ) rc = SQLITE_CORRUPT_BKPT;
          nextPage = get4byte(aWrite);
          memcpy(aWrite, aSave, 4);
        }else
#endif
"
5694,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pPayload, pSrc, nSrc);",120,1,"    assert( nSrc<=nPayload );
    testcase( nSrc<nPayload );
    memcpy(pPayload, pSrc, nSrc);
    memset(pPayload+nSrc, 0, nPayload-nSrc);
    return SQLITE_OK;
"
5702,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&data[idx+4], pCell+4, sz-4);",120,1,"      ** the source page.  Make sure this does not cause problems by not
      ** reading the first 4 bytes */
      memcpy(&data[idx+4], pCell+4, sz-4);
      put4byte(&data[idx], iChild);
    }else{
"
5705,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&pTmp[j], &aData[j], usableSize - j);",120,1,"  j = get2byte(&aData[hdr+5]);
  if( NEVER(j>(u32)usableSize) ){ j = 0; }
  memcpy(&pTmp[j], &aData[j], usableSize - j);

  for(k=0; pCArray->ixNx[k]<=i && ALWAYS(k<NB*2); k++){}
"
5706,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pData, pCell, sz);",120,1,"    pCellptr += 2;
    if( pData < pCellptr ) return SQLITE_CORRUPT_BKPT;
    memcpy(pData, pCell, sz);
    assert( sz==pPg->xCellSize(pPg, pCell) || CORRUPT_DB );
    testcase( sz!=pPg->xCellSize(pPg,pCell) )
"
5708,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pTmp, aData, pPg->pBt->usableSize);",120,1,"#ifdef SQLITE_DEBUG
  u8 *pTmp = sqlite3PagerTempSpace(pPg->pBt->pPager);
  memcpy(pTmp, aData, pPg->pBt->usableSize);
#endif

"
5727,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(oldCell, newCell, szNew);",120,1,"        return SQLITE_CORRUPT_BKPT;
      }
      memcpy(oldCell, newCell, szNew);
      return SQLITE_OK;
    }
"
5728,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pCur->pKey, pX->pKey, pX->nKey);",120,1,"          rc = SQLITE_NOMEM;
        }else{
          memcpy(pCur->pKey, pX->pKey, pX->nKey);
        }
      }
"
5732,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&x, (char*)&p->u, (p->flags&MEM_Int)*2);",120,1,"    i64 x;
    assert( (p->flags&MEM_Int)*2==sizeof(x) );
    memcpy(&x, (char*)&p->u, (p->flags&MEM_Int)*2);
    sqlite3Int64ToText(x, zBuf);
#else
"
5739,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pTo, pFrom, MEMCELLSIZE);",120,1,"  assert( pTo->db==pFrom->db );
  if( VdbeMemDynamic(pTo) ){ vdbeClrCopy(pTo,pFrom,srcType); return; }
  memcpy(pTo, pFrom, MEMCELLSIZE);
  if( (pFrom->flags&MEM_Static)==0 ){
    pTo->flags &= ~(MEM_Dyn|MEM_Static|MEM_Ephem);
"
5745,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pStr->z, z, n+1);",120,1,"      pStr->pNextStr = p->pDblStr;
      p->pDblStr = pStr;
      memcpy(pStr->z, z, n+1);
    }
  }
"
5746,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pB->aCounter, pA->aCounter, sizeof(pB->aCounter));",120,1,"  pB->expmask = pA->expmask;
  pB->prepFlags = pA->prepFlags;
  memcpy(pB->aCounter, pA->aCounter, sizeof(pB->aCounter));
  pB->aCounter[SQLITE_STMTSTATUS_REPREPARE]++;
}
"
5756,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pNew, pOrig, MEMCELLSIZE);",120,1,"  if( pNew==0 ) return 0;
  memset(pNew, 0, sizeof(*pNew));
  memcpy(pNew, pOrig, MEMCELLSIZE);
  pNew->flags &= ~MEM_Dyn;
  pNew->db = 0;
"
5762,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pOut, pVar, MEMCELLSIZE);",120,1,"  pOut = &aMem[pOp->p2];
  if( VdbeMemDynamic(pOut) ) sqlite3VdbeMemSetNull(pOut);
  memcpy(pOut, pVar, MEMCELLSIZE);
  pOut->flags &= ~(MEM_Dyn|MEM_Ephem);
  pOut->flags |= MEM_Static|MEM_FromBind;
"
5784,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(SRVAL(pNew), pVal->z, pVal->n);",120,1,"  }

  memcpy(SRVAL(pNew), pVal->z, pVal->n);
  pNew->nVal = pVal->n;
  pSorter->list.pList = pNew;
"
5790,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy((u8*)p->pFirst->zChunk, zBuf, iAmt);",120,1,"    if( iOfst==0 && p->pFirst ){
      assert( p->nChunkSize>iAmt );
      memcpy((u8*)p->pFirst->zChunk, zBuf, iAmt);
    }else
#else
"
5821,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(zOut, zSql, nSql);",120,1,"  if( zOut ){
    int nOut = nSql;
    memcpy(zOut, zSql, nSql);
    while( pRename->pList ){
      int iOff;                   /* Offset of token to replace in zOut */
"
5822,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&zOut[iOff], zReplace, nReplace);",120,1,"        zOut[nOut] = '\0';
      }
      memcpy(&zOut[iOff], zReplace, nReplace);
      sqlite3DbFree(db, pBest);
    }
"
5830,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(p->u.aRowid, pData, n);",120,1,"  if( p->u.aRowid ){
    p->nRowid = n;
    memcpy(p->u.aRowid, pData, n);
  }else{
    p->nRowid = 0;
"
5831,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pTo->anEq, pFrom->anEq, sizeof(tRowcnt)*p->nCol);",120,1,"  pTo->iCol = pFrom->iCol;
  pTo->iHash = pFrom->iHash;
  memcpy(pTo->anEq, pFrom->anEq, sizeof(tRowcnt)*p->nCol);
  memcpy(pTo->anLt, pFrom->anLt, sizeof(tRowcnt)*p->nCol);
  memcpy(pTo->anDLt, pFrom->anDLt, sizeof(tRowcnt)*p->nCol);
"
5832,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pTo->anLt, pFrom->anLt, sizeof(tRowcnt)*p->nCol);",120,1,"  pTo->iHash = pFrom->iHash;
  memcpy(pTo->anEq, pFrom->anEq, sizeof(tRowcnt)*p->nCol);
  memcpy(pTo->anLt, pFrom->anLt, sizeof(tRowcnt)*p->nCol);
  memcpy(pTo->anDLt, pFrom->anDLt, sizeof(tRowcnt)*p->nCol);
  if( pFrom->nRowid ){
"
5833,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pTo->anDLt, pFrom->anDLt, sizeof(tRowcnt)*p->nCol);",120,1,"  memcpy(pTo->anEq, pFrom->anEq, sizeof(tRowcnt)*p->nCol);
  memcpy(pTo->anLt, pFrom->anLt, sizeof(tRowcnt)*p->nCol);
  memcpy(pTo->anDLt, pFrom->anDLt, sizeof(tRowcnt)*p->nCol);
  if( pFrom->nRowid ){
    sampleSetRowid(p->db, pTo, pFrom->nRowid, pFrom->u.aRowid);
"
5836,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pStat1->zName, ""sqlite_stat1"", 13);",120,1,"    if( pStat1==0 ) return;
    pStat1->zName = (char*)&pStat1[1];
    memcpy(pStat1->zName, ""sqlite_stat1"", 13);
    pStat1->nCol = 3;
    pStat1->iPKey = -1;
"
5837,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pSample->p, sqlite3_column_blob(pStmt, 4), pSample->n);",120,1,"    }
    if( pSample->n ){
      memcpy(pSample->p, sqlite3_column_blob(pStmt, 4), pSample->n);
    }
    pIdx->nSample++;
"
5841,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(saveBuf, PARSE_TAIL(pParse), PARSE_TAIL_SZ);",120,1,"  }
  pParse->nested++;
  memcpy(saveBuf, PARSE_TAIL(pParse), PARSE_TAIL_SZ);
  memset(PARSE_TAIL(pParse), 0, PARSE_TAIL_SZ);
  sqlite3RunParser(pParse, zSql, &zErrMsg);
"
5843,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(PARSE_TAIL(pParse), saveBuf, PARSE_TAIL_SZ);",120,1,"  sqlite3DbFree(db, zErrMsg);
  sqlite3DbFree(db, zSql);
  memcpy(PARSE_TAIL(pParse), saveBuf, PARSE_TAIL_SZ);
  pParse->nested--;
}
"
5851,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(zExtra, pIdx->aiRowLogEst, sizeof(LogEst)*(pIdx->nKeyCol+1));",120,1,"  pIdx->azColl = (const char**)zExtra;
  zExtra += sizeof(char*)*N;
  memcpy(zExtra, pIdx->aiRowLogEst, sizeof(LogEst)*(pIdx->nKeyCol+1));
  pIdx->aiRowLogEst = (LogEst*)zExtra;
  zExtra += sizeof(LogEst)*N;
"
5856,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(z, pToCol->a[i].zEName, n);",120,1,"        sqlite3RenameTokenRemap(pParse, z, pToCol->a[i].zEName);
      }
      memcpy(z, pToCol->a[i].zEName, n);
      z[n] = 0;
      z += n+1;
"
5863,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&p1->a[1], p2->a, p2->nSrc*sizeof(struct SrcList_item));",120,1,"    }else{
      p1 = pNew;
      memcpy(&p1->a[1], p2->a, p2->nSrc*sizeof(struct SrcList_item));
      sqlite3DbFree(pParse->db, p2);
    }
"
5870,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&backupInfo, pInfo, sizeof(backupInfo));",120,1,"    escape = sqlite3Utf8Read(&zEsc);
    if( escape==pInfo->matchAll || escape==pInfo->matchOne ){
      memcpy(&backupInfo, pInfo, sizeof(backupInfo));
      pInfo = &backupInfo;
      if( escape==pInfo->matchAll ) pInfo->matchAll = 0;
"
5890,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&pCol->zName[n+1], zType, m+1);",120,1,"      pCol->zName = sqlite3DbReallocOrFree(db, pCol->zName, n+m+2);
      if( pCol->zName ){
        memcpy(&pCol->zName[n+1], zType, m+1);
        pCol->colFlags |= COLFLAG_HASTYPE;
      }
"
5914,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&pNew->orig, pExpr, sizeof(*pExpr));",120,1,"  pTrans->pWInfo->pExprMods = pNew;
  pNew->pExpr = pExpr;
  memcpy(&pNew->orig, pExpr, sizeof(*pExpr));
}

"
5923,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(zType, ""...."", 5);",120,1,"    char zType[8];
    char zLeft[50];
    memcpy(zType, ""...."", 5);
    if( pTerm->wtFlags & TERM_VIRTUAL ) zType[0] = 'V';
    if( pTerm->eOperator & WO_EQUIV  ) zType[1] = 'E';
"
5926,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pTo, pFrom, WHERE_LOOP_XFER_SZ);",120,1,"    return SQLITE_NOMEM_BKPT;
  }
  memcpy(pTo, pFrom, WHERE_LOOP_XFER_SZ);
  memcpy(pTo->aLTerm, pFrom->aLTerm, pTo->nLTerm*sizeof(pTo->aLTerm[0]));
  if( pFrom->wsFlags & WHERE_VIRTUALTABLE ){
"
5940,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(p->pExpr, &p->orig, sizeof(p->orig));",120,1,"    WhereExprMod *p = pWInfo->pExprMods;
    pWInfo->pExprMods = p->pNext;
    memcpy(p->pExpr, &p->orig, sizeof(p->orig));
    sqlite3DbFree(db, p);
  }
"
5944,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pTab, pTab2, sizeof(Table));",120,1,"        rc = SQLITE_NOMEM;
      }else{
        memcpy(pTab, pTab2, sizeof(Table));
        pTab->tabFlags |= TF_Ephemeral;
        p->pSrc->a[0].pTab = pTab;
"
5947,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(p->u.zToken, t.z, t.n);",120,1,"      p->iColumn = 0;
      p->u.zToken = (char*)&p[1];
      memcpy(p->u.zToken, t.z, t.n);
      p->u.zToken[t.n] = 0;
      if( sqlite3Isquote(p->u.zToken[0]) ){
"
5949,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&y, &x, 8);",120,1,"    assert(sizeof(x)==8);
    assert(sizeof(x)==sizeof(y));
    memcpy(&y, &x, 8);
    assert( sqlite3IsNaN(y) );
  }
"
5957,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(p, z, n+1);",120,1,"static char *appendText(char *p, const char *z){
  size_t n = strlen(z);
  memcpy(p, z, n+1);
  return p+n+1;
}
"
5959,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pNew, aArg, nArg*sizeof(void *));",120,1,"        void **pNew = (void **)sqlite3Malloc(nArg*sizeof(void *)*2);
        if( pNew ){
          memcpy(pNew, aArg, nArg*sizeof(void *));
          sqlite3_free(aDyn);
          aDyn = aArg = pNew;
"
5961,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(p, zCol, n);",120,1,"        const char *zCol = sqlite3_column_name(pStmt, i);
        int n = (int)strlen(zCol)+1;
        memcpy(p, zCol, n);
        azCol[i] = p;
        p += n;
"
5965,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(p->aIndex, aIndex, sizeof(struct Fts3Index) * nIndex);",120,1,"
  p->aIndex = (struct Fts3Index *)&p->azColumn[nCol];
  memcpy(p->aIndex, aIndex, sizeof(struct Fts3Index) * nIndex);
  p->nIndex = nIndex;
  for(i=0; i<nIndex; i++){
"
5966,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(zCsr, argv[2], nName);",120,1,"  zCsr = (char *)&p->abNotindexed[nCol];
  p->zName = zCsr;
  memcpy(zCsr, argv[2], nName);
  zCsr += nName;
  p->zDb = zCsr;
"
5967,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(zCsr, argv[1], nDb);",120,1,"  zCsr += nName;
  p->zDb = zCsr;
  memcpy(zCsr, argv[1], nDb);
  zCsr += nDb;

"
5968,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(zCsr, z, n);",120,1,"    z = (char *)sqlite3Fts3NextToken(aCol[iCol], &n);
    if( n>0 ){
      memcpy(zCsr, z, n);
    }
    zCsr[n] = '\0';
"
5971,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&zBuffer[nPrefix], zCsr, nSuffix);",120,1,"    }
    assert( zBuffer );
    memcpy(&zBuffer[nPrefix], zCsr, nSuffix);
    nBuffer = nPrefix + nSuffix;
    zCsr += nSuffix;
"
5972,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(p, *ppPoslist, n);",120,1,"    int n = (int)(pEnd - *ppPoslist);
    char *p = *pp;
    memcpy(p, *ppPoslist, n);
    p += n;
    *pp = p;
"
5975,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pTS->aaOutput[0], aDoclist, nDoclist);",120,1,"    pTS->anOutput[0] = nDoclist;
    if( pTS->aaOutput[0] ){
      memcpy(pTS->aaOutput[0], aDoclist, nDoclist);
      memset(&pTS->aaOutput[0][nDoclist], 0, FTS3_VARINT_MAX);
    }else{
"
5980,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(aDoclist, a[p->nToken-1].pList, nByte+1);",120,1,"        char *aDoclist = sqlite3_malloc(nByte+FTS3_BUFFER_PADDING);
        if( !aDoclist ) return SQLITE_NOMEM;
        memcpy(aDoclist, a[p->nToken-1].pList, nByte+1);
        memset(&aDoclist[nByte], 0, FTS3_BUFFER_PADDING);

"
5988,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy((char *)p->pFts3Tab->zDb, zDb, nDb);",120,1,"  p->pFts3Tab->nIndex = 1;

  memcpy((char *)p->pFts3Tab->zDb, zDb, nDb);
  memcpy((char *)p->pFts3Tab->zName, zFts3, nFts3);
  sqlite3Fts3Dequote((char *)p->pFts3Tab->zName);
"
5989,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy((char *)p->pFts3Tab->zName, zFts3, nFts3);",120,1,"
  memcpy((char *)p->pFts3Tab->zDb, zDb, nDb);
  memcpy((char *)p->pFts3Tab->zName, zFts3, nFts3);
  sqlite3Fts3Dequote((char *)p->pFts3Tab->zName);

"
5994,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pRet->pPhrase->aToken[0].z, zToken, nToken);",120,1,"        pRet->pPhrase->aToken[0].n = nToken;
        pRet->pPhrase->aToken[0].z = (char *)&pRet->pPhrase[1];
        memcpy(pRet->pPhrase->aToken[0].z, zToken, nToken);

        if( iEnd<n && z[iEnd]=='*' ){
"
5996,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&zTemp[nTemp], zByte, nByte);",120,1,"        memset(pToken, 0, sizeof(Fts3PhraseToken));

        memcpy(&zTemp[nTemp], zByte, nByte);
        nTemp += nByte;

"
5998,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(zBuf, zTemp, nTemp);",120,1,"    zBuf = (char *)&p->pPhrase->aToken[nToken];
    if( zTemp ){
      memcpy(zBuf, zTemp, nTemp);
      sqlite3_free(zTemp);
    }else{
"
6002,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy((void*)new_elem->pKey, pKey, nKey);",120,1,"      return data;
    }
    memcpy((void*)new_elem->pKey, pKey, nKey);
  }else{
    new_elem->pKey = (void*)pKey;
"
6005,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy((void *)pp, sqlite3_column_blob(pStmt, 0), sizeof(*pp));",120,1,"     && sqlite3_column_bytes(pStmt, 0)==sizeof(*pp)
    ){
      memcpy((void *)pp, sqlite3_column_blob(pStmt, 0), sizeof(*pp));
    }
  }
"
6007,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pSpace, argv[i], n+1);",120,1,"        int n = (int)strlen(argv[i]);
        azDequote[i] = pSpace;
        memcpy(pSpace, argv[i], n+1);
        sqlite3Fts3Dequote(pSpace);
        pSpace += (n+1);
"
6010,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"if( nByte>0 ) memcpy(pCsr->zInput, zByte, nByte);",120,1,"      rc = SQLITE_NOMEM;
    }else{
      if( nByte>0 ) memcpy(pCsr->zInput, zByte, nByte);
      pCsr->zInput[nByte] = 0;
      rc = pTab->pMod->xOpen(pTab->pTok, pCsr->zInput, nByte, &pCsr->pCsr);
"
6013,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(aCopy, pList->aData, nCopy);",120,1,"        aCopy = (char*)sqlite3_malloc(nCopy);
        if( !aCopy ) return SQLITE_NOMEM;
        memcpy(aCopy, pList->aData, nCopy);
        pReader->nNode = pReader->nDoclist = nCopy;
        pReader->aNode = pReader->aDoclist = aCopy;
"
6014,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&pReader->zTerm[nPrefix], pNext, nSuffix);",120,1,"  if( rc!=SQLITE_OK ) return rc;

  memcpy(&pReader->zTerm[nPrefix], pNext, nSuffix);
  pReader->nTerm = nPrefix+nSuffix;
  pNext += nSuffix;
"
6016,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"if( nRoot ) memcpy(pReader->aNode, zRoot, nRoot);",120,1,"    pReader->rootOnly = 1;
    pReader->nNode = nRoot;
    if( nRoot ) memcpy(pReader->aNode, zRoot, nRoot);
    memset(&pReader->aNode[nRoot], 0, FTS3_NODE_PADDING);
  }else{
"
6019,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pReader->ppNextElem, aElem, nElem*sizeof(Fts3HashElem *));",120,1,"      pReader->iIdx = 0x7FFFFFFF;
      pReader->ppNextElem = (Fts3HashElem **)&pReader[1];
      memcpy(pReader->ppNextElem, aElem, nElem*sizeof(Fts3HashElem *));
    }
  }
"
6020,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&pTree->aData[nData], &zTerm[nPrefix], nSuffix);",120,1,"
      nData += sqlite3Fts3PutVarint(&pTree->aData[nData], nSuffix);
      memcpy(&pTree->aData[nData], &zTerm[nPrefix], nSuffix);
      pTree->nData = nData + nSuffix;
      pTree->nEntry++;
"
6021,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pTree->zTerm, zTerm, nTerm);",120,1,"        }
        pTree->zTerm = pTree->zMalloc;
        memcpy(pTree->zTerm, zTerm, nTerm);
        pTree->nTerm = nTerm;
      }else{
"
6024,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&pWriter->aData[nData], &zTerm[nPrefix], nSuffix);",120,1,"  nData += sqlite3Fts3PutVarint(&pWriter->aData[nData], nSuffix);
  assert( nSuffix>0 );
  memcpy(&pWriter->aData[nData], &zTerm[nPrefix], nSuffix);
  nData += nSuffix;
  nData += sqlite3Fts3PutVarint(&pWriter->aData[nData], nDoclist);
"
6025,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&pWriter->aData[nData], aDoclist, nDoclist);",120,1,"  nData += sqlite3Fts3PutVarint(&pWriter->aData[nData], nDoclist);
  assert( nDoclist>0 );
  memcpy(&pWriter->aData[nData], aDoclist, nDoclist);
  pWriter->nData = nData + nDoclist;

"
6026,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pWriter->zTerm, zTerm, nTerm);",120,1,"    assert( pWriter->zTerm==pWriter->zMalloc );
    assert( nTerm>0 );
    memcpy(pWriter->zTerm, zTerm, nTerm);
  }else{
    pWriter->zTerm = (char *)zTerm;
"
6028,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pMsr->aBuffer, pList, nList);",120,1,"
  assert( nList>0 );
  memcpy(pMsr->aBuffer, pList, nList);
  return SQLITE_OK;
}
"
6029,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&pCsr->aBuffer[nDoclist], pList, nList);",120,1,"            iPrev = iDocid;
            if( isRequirePos ){
              memcpy(&pCsr->aBuffer[nDoclist], pList, nList);
              nDoclist += nList;
              pCsr->aBuffer[nDoclist++] = '\0';
"
6037,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&p->term.a[nPrefix], &p->aNode[p->iOff], nSuffix);",120,1,"    blobGrowBuffer(&p->term, nPrefix+nSuffix, &rc);
    if( rc==SQLITE_OK ){
      memcpy(&p->term.a[nPrefix], &p->aNode[p->iOff], nSuffix);
      p->term.n = nPrefix+nSuffix;
      p->iOff += nSuffix;
"
6039,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&pBlk->a[pBlk->n], &zTerm[nPrefix], nSuffix);",120,1,"        }
        pBlk->n += sqlite3Fts3PutVarint(&pBlk->a[pBlk->n], nSuffix);
        memcpy(&pBlk->a[pBlk->n], &zTerm[nPrefix], nSuffix);
        pBlk->n += nSuffix;

"
6040,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pNode->key.a, zTerm, nTerm);",120,1,"        pBlk->n += nSuffix;

        memcpy(pNode->key.a, zTerm, nTerm);
        pNode->key.n = nTerm;
      }
"
6041,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pPrev->a, zTerm, nTerm);",120,1,"  nSuffix = nTerm - nPrefix;
  if( nSuffix<=0 ) return FTS_CORRUPT_VTAB;
  memcpy(pPrev->a, zTerm, nTerm);
  pPrev->n = nTerm;

"
6042,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&pNode->a[pNode->n], &zTerm[nPrefix], nSuffix);",120,1,"  }
  pNode->n += sqlite3Fts3PutVarint(&pNode->a[pNode->n], nSuffix);
  memcpy(&pNode->a[pNode->n], &zTerm[nPrefix], nSuffix);
  pNode->n += nSuffix;

"
6043,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&pNode->a[pNode->n], aDoclist, nDoclist);",120,1,"  if( aDoclist ){
    pNode->n += sqlite3Fts3PutVarint(&pNode->a[pNode->n], nDoclist);
    memcpy(&pNode->a[pNode->n], aDoclist, nDoclist);
    pNode->n += nDoclist;
  }
"
6044,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pNode->block.a, aRoot, nRoot);",120,1,"      );
      if( rc==SQLITE_OK ){
        memcpy(pNode->block.a, aRoot, nRoot);
        pNode->block.n = nRoot;
        memset(&pNode->block.a[nRoot], 0, FTS3_NODE_PADDING);
"
6046,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pNode->key.a, reader.term.a, reader.term.n);",120,1,"          blobGrowBuffer(&pNode->key, reader.term.n, &rc);
          if( rc==SQLITE_OK ){
            memcpy(pNode->key.a, reader.term.a, reader.term.n);
            pNode->key.n = reader.term.n;
            if( i>0 ){
"
6047,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pNode->block.a, aBlock, nBlock);",120,1,"              );
              if( rc==SQLITE_OK ){
                memcpy(pNode->block.a, aBlock, nBlock);
                pNode->block.n = nBlock;
                memset(&pNode->block.a[nBlock], 0, FTS3_NODE_PADDING);
"
6049,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pHint->a, aHint, nHint);",120,1,"        blobGrowBuffer(pHint, nHint, &rc);
        if( rc==SQLITE_OK ){
          memcpy(pHint->a, aHint, nHint);
          pHint->n = nHint;
        }
"
6053,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pRet, &p->pList->aData[nSkip], *pnData);",120,1,"  *ppData = pRet;

  memcpy(pRet, &p->pList->aData[nSkip], *pnData);
  return SQLITE_OK;
}
"
6058,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pRet->zMatchinfo, zMatchinfo, nStr+1);",120,1,"    pRet->nElem = (int)nElem;
    pRet->zMatchinfo = ((char*)pRet) + nByte;
    memcpy(pRet->zMatchinfo, zMatchinfo, nStr+1);
    pRet->aRef[0] = 1;
  }
"
6059,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"if( p->bGlobal ) memcpy(aOut, &p->aMatchinfo[1], p->nElem*sizeof(u32));",120,1,"    if( aOut ){
      xRet = sqlite3_free;
      if( p->bGlobal ) memcpy(aOut, &p->aMatchinfo[1], p->nElem*sizeof(u32));
    }
  }
"
6060,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&p->aMatchinfo[2+p->nElem], &p->aMatchinfo[1], p->nElem*sizeof(u32));",120,1,"static void fts3MIBufferSetGlobal(MatchinfoBuffer *p){
  p->bGlobal = 1;
  memcpy(&p->aMatchinfo[2+p->nElem], &p->aMatchinfo[1], p->nElem*sizeof(u32));
}

"
6063,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&pStr->z[pStr->n], zAppend, nAppend);",120,1,"
  /* Append the data to the string buffer. */
  memcpy(&pStr->z[pStr->n], zAppend, nAppend);
  pStr->n += nAppend;
  pStr->z[pStr->n] = '\0';
"
6071,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(zNew, p->zBuf, (size_t)p->nUsed);",120,1,"      return SQLITE_NOMEM;
    }
    memcpy(zNew, p->zBuf, (size_t)p->nUsed);
    p->zBuf = zNew;
    p->bStatic = 0;
"
6072,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(p->zBuf+p->nUsed, zIn, N);",120,1,"  if( N==0 ) return;
  if( (N+p->nUsed >= p->nAlloc) && jsonGrow(p,N)!=0 ) return;
  memcpy(p->zBuf+p->nUsed, zIn, N);
  p->nUsed += N;
}
"
6075,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy((char*)p->zJson, zJson, nJson+1);",120,1,"  memset(p, 0, sizeof(*p));
  p->zJson = (char*)&p[1];
  memcpy((char*)p->zJson, zJson, nJson+1);
  if( jsonParse(p, pErrCtx, p->zJson) ){
    sqlite3_free(p);
"
6079,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(p->zJson, z, (size_t)n+1);",120,1,"  p->zJson = sqlite3_malloc64( n+1 );
  if( p->zJson==0 ) return SQLITE_NOMEM;
  memcpy(p->zJson, z, (size_t)n+1);
  if( jsonParse(&p->sParse, 0, p->zJson) ){
    int rc = SQLITE_NOMEM;
"
6080,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(p->zRoot, zRoot, (size_t)n+1);",120,1,"      p->zRoot = sqlite3_malloc64( n+1 );
      if( p->zRoot==0 ) return SQLITE_NOMEM;
      memcpy(p->zRoot, zRoot, (size_t)n+1);
      if( zRoot[0]!='$' ){
        zErr = zRoot;
"
6081,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&x, p, 8);",120,1,"#if SQLITE_BYTEORDER==1234 && MSVC_VERSION>=1300
  u64 x;
  memcpy(&x, p, 8);
  return (i64)_byteswap_uint64(x);
#elif SQLITE_BYTEORDER==1234 && GCC_VERSION>=4003000
"
6084,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(p, &i, 4);",120,1,"#if SQLITE_BYTEORDER==1234 && GCC_VERSION>=4003000
  i = __builtin_bswap32(pCoord->u);
  memcpy(p, &i, 4);
#elif SQLITE_BYTEORDER==1234 && MSVC_VERSION>=1300
  i = _byteswap_ulong(pCoord->u);
"
6087,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(p, &i, 8);",120,1,"#if SQLITE_BYTEORDER==1234 && GCC_VERSION>=4003000
  i = (i64)__builtin_bswap64((u64)i);
  memcpy(p, &i, 8);
#elif SQLITE_BYTEORDER==1234 && MSVC_VERSION>=1300
  i = (i64)_byteswap_uint64((u64)i);
"
6095,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&c.u,a,4);                                           \",120,1,"#define RTREE_DECODE_COORD(eInt, a, r) {                        \
    RtreeCoord c;    /* Coordinate decoded */                   \
    memcpy(&c.u,a,4);                                           \
    c.u = ((c.u>>24)&0xff)|((c.u>>8)&0xff00)|                   \
          ((c.u&0xff)<<24)|((c.u&0xff00)<<8);                   \
"
6098,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pBlob, pSrc, pSrc->iSize);",120,1,"  memset(pInfo, 0, sizeof(*pInfo));
  pBlob = (RtreeMatchArg*)&pInfo[1];
  memcpy(pBlob, pSrc, pSrc->iSize);
  pInfo->pContext = pBlob->cb.pContext;
  pInfo->nParam = pBlob->nParam;
"
6102,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&cell, p, sizeof(RtreeCell));",120,1,"  RtreeDValue area;
  RtreeCell cell;
  memcpy(&cell, p, sizeof(RtreeCell));
  area = cellArea(pRtree, &cell);
  cellUnion(pRtree, &cell, pCell);
"
6103,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(aSpare, aLeft, sizeof(int)*nLeft);",120,1,"    SortByDistance(aRight, nRight, aDistance, aSpare);

    memcpy(aSpare, aLeft, sizeof(int)*nLeft);
    aLeft = aSpare;

"
6106,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&left, &aCell[aaSorted[ii][0]], sizeof(RtreeCell));",120,1,"      RtreeDValue area;

      memcpy(&left, &aCell[aaSorted[ii][0]], sizeof(RtreeCell));
      memcpy(&right, &aCell[aaSorted[ii][nCell-1]], sizeof(RtreeCell));
      for(kk=1; kk<(nCell-1); kk++){
"
6107,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&right, &aCell[aaSorted[ii][nCell-1]], sizeof(RtreeCell));",120,1,"
      memcpy(&left, &aCell[aaSorted[ii][0]], sizeof(RtreeCell));
      memcpy(&right, &aCell[aaSorted[ii][nCell-1]], sizeof(RtreeCell));
      for(kk=1; kk<(nCell-1); kk++){
        if( kk<nLeft ){
"
6108,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pBboxLeft, &aCell[aaSorted[iBestDim][0]], sizeof(RtreeCell));",120,1,"  }

  memcpy(pBboxLeft, &aCell[aaSorted[iBestDim][0]], sizeof(RtreeCell));
  memcpy(pBboxRight, &aCell[aaSorted[iBestDim][iBestSplit]], sizeof(RtreeCell));
  for(ii=0; ii<nCell; ii++){
"
6109,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pBboxRight, &aCell[aaSorted[iBestDim][iBestSplit]], sizeof(RtreeCell));",120,1,"
  memcpy(pBboxLeft, &aCell[aaSorted[iBestDim][0]], sizeof(RtreeCell));
  memcpy(pBboxRight, &aCell[aaSorted[iBestDim][iBestSplit]], sizeof(RtreeCell));
  for(ii=0; ii<nCell; ii++){
    RtreeNode *pTarget = (ii<iBestSplit)?pLeft:pRight;
"
6111,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&aCell[nCell], pCell, sizeof(RtreeCell));",120,1,"  }
  nodeZero(pRtree, pNode);
  memcpy(&aCell[nCell], pCell, sizeof(RtreeCell));
  nCell++;

"
6115,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&aCell[ii], pCell, sizeof(RtreeCell));",120,1,"  for(ii=0; ii<nCell; ii++){
    if( ii==(nCell-1) ){
      memcpy(&aCell[ii], pCell, sizeof(RtreeCell));
    }else{
      nodeGetCell(pRtree, pNode, ii, &aCell[ii]);
"
6117,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pRtree->zDb, argv[1], nDb);",120,1,"  pRtree->zName = &pRtree->zDb[nDb+1];
  pRtree->eCoordType = (u8)eCoordType;
  memcpy(pRtree->zDb, argv[1], nDb);
  memcpy(pRtree->zName, argv[2], nName);

"
6118,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pRtree->zName, argv[2], nName);",120,1,"  pRtree->eCoordType = (u8)eCoordType;
  memcpy(pRtree->zDb, argv[1], nDb);
  memcpy(pRtree->zName, argv[2], nName);


"
6121,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pRet, pNode, nNode);",120,1,"        pCheck->rc = SQLITE_NOMEM;
      }else{
        memcpy(pRet, pNode, nNode);
        *pnNode = nNode;
      }
"
6124,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pOut->a, s.a, s.nVertex*2*sizeof(GeoCoord));",120,1,"      if( pOut==0 ) goto parse_json_err;
      pOut->nVertex = s.nVertex;
      memcpy(pOut->a, s.a, s.nVertex*2*sizeof(GeoCoord));
      pOut->hdr[0] = *(unsigned char*)&x;
      pOut->hdr[1] = (s.nVertex>>16)&0xff;
"
6125,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(p->hdr, a, nByte);",120,1,"        int x = 1;
        p->nVertex = nVertex;
        memcpy(p->hdr, a, nByte);
        if( a[0] != *(unsigned char*)&x ){
          int ii;
"
6127,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pBBox->a, a, sizeof(RtreeCoord)*4);",120,1,"    if( pBBox->isInit==0 ){
      pBBox->isInit = 1;
      memcpy(pBBox->a, a, sizeof(RtreeCoord)*4);
    }else{
      if( a[0].f < pBBox->a[0].f ) pBBox->a[0] = a[0];
"
6135,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(p->zLocale, argv[0], n);",120,1,"  if( n ){
    p->zLocale = (char *)&p[1];
    memcpy(p->zLocale, argv[0], n);
  }

"
6137,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(zOut, &zSrc[ofst], cnt);",120,1,"          return -1;
        }
        memcpy(zOut, &zSrc[ofst], cnt);
        zOut += cnt;
        break;
"
6138,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(zOut, zDelta, cnt);",120,1,"          return -1;
        }
        memcpy(zOut, zDelta, cnt);
        zOut += cnt;
        zDelta += cnt;
"
6142,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(zRet, zStr, nCopy);",120,1,"      zRet = (char*)sqlite3_malloc64(nCopy);
      if( zRet ){
        memcpy(zRet, zStr, nCopy);
      }else{
        *pRc = SQLITE_NOMEM;
"
6143,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pIter->abIndexed, pIter->abTblPk, sizeof(u8)*pIter->nTblCol);",120,1,"
  if( p->rc==SQLITE_OK ){
    memcpy(pIter->abIndexed, pIter->abTblPk, sizeof(u8)*pIter->nTblCol);
    p->rc = prepareFreeAndCollectError(p->dbMain, &pList, &p->zErrmsg,
        sqlite3_mprintf(""PRAGMA main.index_list = %Q"", pIter->zTbl)
"
6146,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pUp->zMask, zMask, pIter->nTblCol);",120,1,"
    pUp->zMask = (char*)&pUp[1];
    memcpy(pUp->zMask, zMask, pIter->nTblCol);
    pUp->pNext = pIter->pRbuUpdate;
    pIter->pRbuUpdate = pUp;
"
6147,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(p->zStateDb, ""stat"", 4);",120,1,"  if( p->zState ){
    rbuMPrintfExec(p, p->dbRbu, ""ATTACH %Q AS stat"", p->zState);
    memcpy(p->zStateDb, ""stat"", 4);
  }else{
    memcpy(p->zStateDb, ""main"", 4);
"
6148,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(p->zStateDb, ""main"", 4);",120,1,"    memcpy(p->zStateDb, ""stat"", 4);
  }else{
    memcpy(p->zStateDb, ""main"", 4);
  }

"
6153,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(p->zTarget, zTarget, nTarget+1);",120,1,"      if( zTarget ){
        p->zTarget = pCsr;
        memcpy(p->zTarget, zTarget, nTarget+1);
        pCsr += nTarget+1;
      }
"
6154,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(p->zRbu, zRbu, nRbu+1);",120,1,"      }
      p->zRbu = pCsr;
      memcpy(p->zRbu, zRbu, nRbu+1);
      pCsr += nRbu+1;
      if( zState ){
"
6162,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(zCopy, zBase, nCopy);",120,1,"          zCopy = sqlite3_malloc64(nCopy+2);
          if( zCopy ){
            memcpy(zCopy, zBase, nCopy);
            zCopy[nCopy-3] = 'o';
            zCopy[nCopy] = '\0';
"
6164,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&pNew->base, &vfs_template, sizeof(sqlite3_vfs));",120,1,"    }else{
      char *zSpace;
      memcpy(&pNew->base, &vfs_template, sizeof(sqlite3_vfs));
      pNew->base.mxPathname = pParent->mxPathname;
      pNew->base.szOsFile = sizeof(rbu_file) + pParent->szOsFile;
"
6165,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(zSpace, zName, nName);",120,1,"      pNew->pRealVfs = pParent;
      pNew->base.zName = (const char*)(zSpace = (char*)&pNew[1]);
      memcpy(zSpace, zName, nName);

      /* Allocate the mutex and register the new VFS (not as the default) */
"
6172,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&i, &r, 8);",120,1,"            assert( sizeof(double)==8 && sizeof(u64)==8 );
            r = sqlite3_value_double(pValue);
            memcpy(&i, &r, 8);
          }
          sessionPutI64(&aBuf[1], i);
"
6173,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"if( n ) memcpy(&aBuf[nVarint + 1], z, n);",120,1,"        if( aBuf ){
          sessionVarintPut(&aBuf[1], n);
          if( n ) memcpy(&aBuf[nVarint + 1], z, n);
        }

"
6174,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&iVal, &rVal, 8);",120,1,"          double rVal = sqlite3_value_double(pVal);
          assert( sizeof(iVal)==8 && sizeof(rVal)==8 );
          memcpy(&iVal, &rVal, 8);
        }
        h = sessionHashAppendI64(h, iVal);
"
6175,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(aOut, a2, n2);",120,1,"    int n2 = sessionSerialLen(a2);
    if( *a2 ){
      memcpy(aOut, a2, n2);
      aOut += n2;
    }else{
"
6176,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(aOut, a1, n1);",120,1,"      aOut += n2;
    }else{
      memcpy(aOut, a1, n1);
      aOut += n1;
    }
"
6177,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(aOut, aOld, nOld);",120,1,"      if( pTab->abPK[i] || nOld!=nNew || memcmp(aOld, aNew, nNew) ){
        if( pTab->abPK[i]==0 ) bRequired = 1;
        memcpy(aOut, aOld, nOld);
        aOut += nOld;
      }else{
"
6178,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(aOut, aNew, nNew);",120,1,"      *(aOut++) = '\0';
    }else{
      memcpy(aOut, aNew, nNew);
      aOut += nNew;
    }
"
6179,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&rVal, &iVal, 8);",120,1,"          double rVal;
          assert( sizeof(iVal)==8 && sizeof(rVal)==8 );
          memcpy(&rVal, &iVal, 8);
          if( sqlite3_value_double(pVal)!=rVal ) return 0;
        }
"
6181,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pAlloc, zThis, nThis+1);",120,1,"    pAlloc = &abPK[nDbCol];
    if( pzTab ){
      memcpy(pAlloc, zThis, nThis+1);
      *pzTab = (char *)pAlloc;
      pAlloc += nThis+1;
"
6182,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pAlloc, zName, nName+1);",120,1,"      const unsigned char *zName = sqlite3_column_text(pStmt, 1);
      if( zName==0 ) break;
      memcpy(pAlloc, zName, nName+1);
      azCol[i] = (char *)pAlloc;
      pAlloc += nName+1;
"
6186,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pNew->zDb, zDb, nDb+1);",120,1,"  pNew->zDb = (char *)&pNew[1];
  pNew->bEnable = 1;
  memcpy(pNew->zDb, zDb, nDb+1);
  sessionPreupdateHooks(pNew);

"
6188,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pTab->zName, zName, nName+1);",120,1,"        memset(pTab, 0, sizeof(SessionTable));
        pTab->zName = (char *)&pTab[1];
        memcpy(pTab->zName, zName, nName+1);
        for(ppTab=&pSession->pTable; *ppTab; ppTab=&(*ppTab)->pNext);
        *ppTab = pTab;
"
6189,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&p->aBuf[p->nBuf], aBlob, nBlob);",120,1,"){
  if( nBlob>0 && 0==sessionBufferGrow(p, nBlob, pRc) ){
    memcpy(&p->aBuf[p->nBuf], aBlob, nBlob);
    p->nBuf += nBlob;
  }
"
6190,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&p->aBuf[p->nBuf], zStr, nStr);",120,1,"  int nStr = sqlite3Strlen30(zStr);
  if( 0==sessionBufferGrow(p, nStr, pRc) ){
    memcpy(&p->aBuf[p->nBuf], zStr, nStr);
    p->nBuf += nStr;
  }
"
6192,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&dVal, &iVal, 8);",120,1,"          }else{
            double dVal;
            memcpy(&dVal, &iVal, 8);
            if( dVal==sqlite3_column_double(pStmt, i) ) break;
          }
"
6196,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(aCopy, aData, nData);",120,1,"  u8 *aCopy = sqlite3_malloc64((sqlite3_int64)nData+1);
  if( aCopy==0 ) return SQLITE_NOMEM;
  memcpy(aCopy, aData, nData);
  sqlite3ValueSetStr(pVal, nData, (char*)aCopy, enc, sqlite3_free);
  return SQLITE_OK;
"
6197,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&d, &v, 8);",120,1,"        }else{
          double d;
          memcpy(&d, &v, 8);
          sqlite3VdbeMemSetDouble(apOut[i], d);
        }
"
6199,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&p->tblhdr.aBuf[iPK], &p->in.aData[p->in.iNext], nCopy);",120,1,"    size_t iPK = sizeof(sqlite3_value*)*p->nCol*2;
    memset(p->tblhdr.aBuf, 0, iPK);
    memcpy(&p->tblhdr.aBuf[iPK], &p->in.aData[p->in.iNext], nCopy);
    p->in.iNext += nCopy;
  }
"
6212,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pNew->aRecord, aRec, nRec);",120,1,"    if( bIndirect==0 || bRebase==0 ){
      pNew->nRecord = nRec;
      memcpy(pNew->aRecord, aRec, nRec);
    }else{
      int i;
"
6213,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pOut, pIn, nIn);",120,1,"          *pOut++ = 0xFF;
        }else{
          memcpy(pOut, pIn, nIn);
          pOut += nIn;
        }
"
6215,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pOut, a1, n1);",120,1,"            *pOut++ = 0xFF;
          }else if( *a2==0 ){
            memcpy(pOut, a1, n1);
            pOut += n1;
          }else{
"
6216,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pOut, a2, n2);",120,1,"            pOut += n1;
          }else{
            memcpy(pOut, a2, n2);
            pOut += n2;
          }
"
6218,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(aCsr, aRec, nRec);",120,1,"        pNew->op = SQLITE_UPDATE;
        if( bPatchset ){
          memcpy(aCsr, aRec, nRec);
          aCsr += nRec;
        }else{
"
6221,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pTab->abPK, abPK, nCol);",120,1,"        pTab->nCol = nCol;
        pTab->abPK = (u8*)&pTab[1];
        memcpy(pTab->abPK, abPK, nCol);
        pTab->zName = (char*)&pTab->abPK[nCol];
        memcpy(pTab->zName, zNew, nNew+1);
"
6222,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pTab->zName, zNew, nNew+1);",120,1,"        memcpy(pTab->abPK, abPK, nCol);
        pTab->zName = (char*)&pTab->abPK[nCol];
        memcpy(pTab->zName, zNew, nNew+1);

        /* The new object must be linked on to the end of the list, not
"
6224,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pOut, a2, nn2);",120,1,"      int nn2 = sessionSerialLen(a2);
      if( *a1==0 || *a1==0xFF ){
        memcpy(pOut, a2, nn2);
        pOut += nn2;
      }else{
"
6225,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pOut, a1, nn1);",120,1,"        pOut += nn2;
      }else{
        memcpy(pOut, a1, nn1);
        pOut += nn1;
      }
"
6239,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&pBuf->p[pBuf->n], pData, nData);",120,1,"  if( nData ){
    if( fts5BufferGrow(pRc, pBuf, nData) ) return;
    memcpy(&pBuf->p[pBuf->n], pData, nData);
    pBuf->n += nData;
  }
"
6243,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(zRet, pIn, nIn);",120,1,"    zRet = (char*)sqlite3_malloc(nIn+1);
    if( zRet ){
      memcpy(zRet, pIn, nIn);
      zRet[nIn] = '\0';
    }else{
"
6244,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pEntry->pTerm, pTerm, nTerm);",120,1,"        pEntry->nTerm = nTerm;
        pEntry->iIdx = iIdx;
        memcpy(pEntry->pTerm, pTerm, nTerm);
        pEntry->pNext = p->apHash[hash];
        p->apHash[hash] = pEntry;
"
6245,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pSpace, p2, p-p2);",120,1,"          }
          if( p ){
            memcpy(pSpace, p2, p-p2);
            azArg[nArg] = pSpace;
            sqlite3Fts5Dequote(pSpace);
"
6246,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(zOut, zIn, (size_t)(nIn+1));",120,1,"    *pRc = SQLITE_NOMEM;
  }else{
    memcpy(zOut, zIn, (size_t)(nIn+1));
    if( fts5_isopenquote(zOut[0]) ){
      int ii = fts5Dequote(zOut);
"
6248,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"if( zRank ) memcpy(zRank, pRank, p-pRank);",120,1,"    if( p ){
      zRank = sqlite3Fts5MallocZero(&rc, 1 + p - pRank);
      if( zRank ) memcpy(zRank, pRank, p-pRank);
    }else{
      rc = SQLITE_ERROR;
"
6249,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"if( zRankArgs ) memcpy(zRankArgs, pArgs, p-pArgs);",120,1,"        }else{
          zRankArgs = sqlite3Fts5MallocZero(&rc, 1 + p - pArgs);
          if( zRankArgs ) memcpy(zRankArgs, pArgs, p-pArgs);
        }
      }
"
6253,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(aNew, aIter, sizeof(Fts5PoslistReader) * nIter);",120,1,"          goto synonym_poslist_out;
        }
        memcpy(aNew, aIter, sizeof(Fts5PoslistReader) * nIter);
        nAlloc = nAlloc*2;
        if( aIter!=aStatic ) sqlite3_free(aIter);
"
6259,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pSyn->zTerm, pToken, nToken);",120,1,"      memset(pSyn, 0, (size_t)nByte);
      pSyn->zTerm = ((char*)pSyn) + sizeof(Fts5ExprTerm) + sizeof(Fts5Buffer);
      memcpy(pSyn->zTerm, pToken, nToken);
      pSyn->pSynonym = pPhrase->aTerm[pPhrase->nTerm-1].pSynonym;
      pPhrase->aTerm[pPhrase->nTerm-1].pSynonym = pSyn;
"
6263,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pColset, pColsetOrig, (size_t)nByte);",120,1,"      pColset = (Fts5Colset*)sqlite3Fts5MallocZero(&rc, nByte);
      if( pColset ){
        memcpy(pColset, pColsetOrig, (size_t)nByte);
      }
      pNew->pRoot->pNear->pColset = pColset;
"
6264,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pRet, pOrig, (size_t)nByte);",120,1,"    pRet = (Fts5Colset*)sqlite3Fts5MallocZero(pRc, nByte);
    if( pRet ){
      memcpy(pRet, pOrig, (size_t)nByte);
    }
  }else{
"
6265,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&p->apChild[p->nChild], pSub->apChild, nByte);",120,1,"  if( p->eType!=FTS5_NOT && pSub->eType==p->eType ){
    int nByte = sizeof(Fts5ExprNode*) * pSub->nChild;
    memcpy(&p->apChild[p->nChild], pSub->apChild, nByte);
    p->nChild += pSub->nChild;
    sqlite3_free(pSub);
"
6275,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&zKey[1], pToken, nToken);",120,1,"    zKey = fts5EntryKey(p);
    zKey[0] = bByte;
    memcpy(&zKey[1], pToken, nToken);
    assert( iHash==fts5HashKey(pHash->nSlot, (u8*)zKey, nToken+1) );
    p->nKey = nToken;
"
6277,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&pRet[nPre], &((u8*)p)[nHashPre], nList);",120,1,"    if( pRet ){
      Fts5HashEntry *pFaux = (Fts5HashEntry*)&pRet[nPre-nHashPre];
      memcpy(&pRet[nPre], &((u8*)p)[nHashPre], nList);
      nList += fts5HashAddPoslistSize(pHash, p, pFaux);
      *pnDoclist = nList;
"
6283,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&(pBuf)->p[(pBuf)->n], pBlob, nBlob);             \",120,1,"#define fts5BufferSafeAppendBlob(pBuf, pBlob, nBlob) {     \
  assert( (pBuf)->nSpace>=((pBuf)->n+nBlob) );             \
  memcpy(&(pBuf)->p[(pBuf)->n], pBlob, nBlob);             \
  (pBuf)->n += nBlob;                                      \
}
"
6286,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pOut->aSeg, &pLvl->aSeg[is], sizeof(Fts5StructureSegment));",120,1,"        fts5StructureExtendLevel(&p->rc, pStruct, iPromote, 1, 1);
        if( p->rc ) return;
        memcpy(pOut->aSeg, &pLvl->aSeg[is], sizeof(Fts5StructureSegment));
        pOut->nSeg++;
        pLvl->nSeg--;
"
6310,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"if( doclist.n ) memcpy(pData->p, doclist.p, doclist.n);",120,1,"      pData->p = (u8*)&pData[1];
      pData->nn = pData->szLeaf = doclist.n;
      if( doclist.n ) memcpy(pData->p, doclist.p, doclist.n);
      fts5MultiIterNew2(p, pData, bDesc, ppIter);
    }
"
6312,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"if( nToken ) memcpy(&buf.p[1], pToken, nToken);",120,1,"  if( sqlite3Fts5BufferSize(&p->rc, &buf, nToken+1)==0 ){
    int iIdx = 0;                 /* Index to search */
    if( nToken ) memcpy(&buf.p[1], pToken, nToken);

    /* Figure out which index to search and set iIdx accordingly. If this
"
6315,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"if( n>0 ) memcpy(a, aBlob, n);",120,1,"  a = (u8*)sqlite3Fts5MallocZero(&rc, nSpace);
  if( a==0 ) goto decode_out;
  if( n>0 ) memcpy(a, aBlob, n);

  fts5DecodeRowid(iRowid, &iSegid, &bDlidx, &iHeight, &iPgno);
"
6325,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pAux->zFunc, zName, nName);",120,1,"      memset(pAux, 0, (size_t)nByte);
      pAux->zFunc = (char*)&pAux[1];
      memcpy(pAux->zFunc, zName, nName);
      pAux->pGlobal = pGlobal;
      pAux->pUserData = pUserData;
"
6327,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pNew->zName, zName, nName);",120,1,"    memset(pNew, 0, (size_t)nByte);
    pNew->zName = (char*)&pNew[1];
    memcpy(pNew->zName, zName, nName);
    pNew->pUserData = pUserData;
    pNew->x = *pTokenizer;
"
6337,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(p->aTokenChar, aAsciiTokenChar, sizeof(aAsciiTokenChar));",120,1,"      int i;
      memset(p, 0, sizeof(AsciiTokenizer));
      memcpy(p->aTokenChar, aAsciiTokenChar, sizeof(aAsciiTokenChar));
      for(i=0; rc==SQLITE_OK && i<nArg; i+=2){
        const char *zArg = azArg[i+1];
"
6340,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(aFold, p->aFold, nFold);",120,1,"        }
        zOut = &aFold[zOut - p->aFold];
        memcpy(aFold, p->aFold, nFold);
        sqlite3_free(p->aFold);
        p->aFold = aFold;
"
6342,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&aBuf[nStem], p->zOutput, p->nOutput);",120,1,"    int nStem = nBuf - p->nSuffix;
    if( p->xCond==0 || p->xCond(aBuf, nStem) ){
      memcpy(&aBuf[nStem], p->zOutput, p->nOutput);
      *pnBuf = nStem + p->nOutput;
      ret = p - aRule;
"
6343,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&aBuf[nBuf-2], ""ate"", 3);",120,1,"    case 'a':
      if( nBuf>2 && 0==memcmp(""at"", &aBuf[nBuf-2], 2) ){
        memcpy(&aBuf[nBuf-2], ""ate"", 3);
        *pnBuf = nBuf - 2 + 3;
        ret = 1;
"
6344,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&aBuf[nBuf-2], ""ble"", 3);",120,1,"    case 'b':
      if( nBuf>2 && 0==memcmp(""bl"", &aBuf[nBuf-2], 2) ){
        memcpy(&aBuf[nBuf-2], ""ble"", 3);
        *pnBuf = nBuf - 2 + 3;
        ret = 1;
"
6345,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&aBuf[nBuf-2], ""ize"", 3);",120,1,"    case 'i':
      if( nBuf>2 && 0==memcmp(""iz"", &aBuf[nBuf-2], 2) ){
        memcpy(&aBuf[nBuf-2], ""ize"", 3);
        *pnBuf = nBuf - 2 + 3;
        ret = 1;
"
6346,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&aBuf[nBuf-7], ""ate"", 3);",120,1,"      if( nBuf>7 && 0==memcmp(""ational"", &aBuf[nBuf-7], 7) ){
        if( fts5Porter_MGt0(aBuf, nBuf-7) ){
          memcpy(&aBuf[nBuf-7], ""ate"", 3);
          *pnBuf = nBuf - 7 + 3;
        }
"
6347,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&aBuf[nBuf-6], ""tion"", 4);",120,1,"      }else if( nBuf>6 && 0==memcmp(""tional"", &aBuf[nBuf-6], 6) ){
        if( fts5Porter_MGt0(aBuf, nBuf-6) ){
          memcpy(&aBuf[nBuf-6], ""tion"", 4);
          *pnBuf = nBuf - 6 + 4;
        }
"
6348,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&aBuf[nBuf-4], ""ence"", 4);",120,1,"      if( nBuf>4 && 0==memcmp(""enci"", &aBuf[nBuf-4], 4) ){
        if( fts5Porter_MGt0(aBuf, nBuf-4) ){
          memcpy(&aBuf[nBuf-4], ""ence"", 4);
          *pnBuf = nBuf - 4 + 4;
        }
"
6349,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&aBuf[nBuf-4], ""ance"", 4);",120,1,"      }else if( nBuf>4 && 0==memcmp(""anci"", &aBuf[nBuf-4], 4) ){
        if( fts5Porter_MGt0(aBuf, nBuf-4) ){
          memcpy(&aBuf[nBuf-4], ""ance"", 4);
          *pnBuf = nBuf - 4 + 4;
        }
"
6350,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&aBuf[nBuf-4], ""ize"", 3);",120,1,"      if( nBuf>4 && 0==memcmp(""izer"", &aBuf[nBuf-4], 4) ){
        if( fts5Porter_MGt0(aBuf, nBuf-4) ){
          memcpy(&aBuf[nBuf-4], ""ize"", 3);
          *pnBuf = nBuf - 4 + 3;
        }
"
6351,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&aBuf[nBuf-4], ""log"", 3);",120,1,"      if( nBuf>4 && 0==memcmp(""logi"", &aBuf[nBuf-4], 4) ){
        if( fts5Porter_MGt0(aBuf, nBuf-4) ){
          memcpy(&aBuf[nBuf-4], ""log"", 3);
          *pnBuf = nBuf - 4 + 3;
        }
"
6352,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&aBuf[nBuf-3], ""ble"", 3);",120,1,"      if( nBuf>3 && 0==memcmp(""bli"", &aBuf[nBuf-3], 3) ){
        if( fts5Porter_MGt0(aBuf, nBuf-3) ){
          memcpy(&aBuf[nBuf-3], ""ble"", 3);
          *pnBuf = nBuf - 3 + 3;
        }
"
6353,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&aBuf[nBuf-4], ""al"", 2);",120,1,"      }else if( nBuf>4 && 0==memcmp(""alli"", &aBuf[nBuf-4], 4) ){
        if( fts5Porter_MGt0(aBuf, nBuf-4) ){
          memcpy(&aBuf[nBuf-4], ""al"", 2);
          *pnBuf = nBuf - 4 + 2;
        }
"
6354,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&aBuf[nBuf-5], ""ent"", 3);",120,1,"      }else if( nBuf>5 && 0==memcmp(""entli"", &aBuf[nBuf-5], 5) ){
        if( fts5Porter_MGt0(aBuf, nBuf-5) ){
          memcpy(&aBuf[nBuf-5], ""ent"", 3);
          *pnBuf = nBuf - 5 + 3;
        }
"
6355,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&aBuf[nBuf-3], ""e"", 1);",120,1,"      }else if( nBuf>3 && 0==memcmp(""eli"", &aBuf[nBuf-3], 3) ){
        if( fts5Porter_MGt0(aBuf, nBuf-3) ){
          memcpy(&aBuf[nBuf-3], ""e"", 1);
          *pnBuf = nBuf - 3 + 1;
        }
"
6356,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&aBuf[nBuf-5], ""ous"", 3);",120,1,"      }else if( nBuf>5 && 0==memcmp(""ousli"", &aBuf[nBuf-5], 5) ){
        if( fts5Porter_MGt0(aBuf, nBuf-5) ){
          memcpy(&aBuf[nBuf-5], ""ous"", 3);
          *pnBuf = nBuf - 5 + 3;
        }
"
6357,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&aBuf[nBuf-7], ""ize"", 3);",120,1,"      if( nBuf>7 && 0==memcmp(""ization"", &aBuf[nBuf-7], 7) ){
        if( fts5Porter_MGt0(aBuf, nBuf-7) ){
          memcpy(&aBuf[nBuf-7], ""ize"", 3);
          *pnBuf = nBuf - 7 + 3;
        }
"
6358,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&aBuf[nBuf-5], ""ate"", 3);",120,1,"      }else if( nBuf>5 && 0==memcmp(""ation"", &aBuf[nBuf-5], 5) ){
        if( fts5Porter_MGt0(aBuf, nBuf-5) ){
          memcpy(&aBuf[nBuf-5], ""ate"", 3);
          *pnBuf = nBuf - 5 + 3;
        }
"
6359,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&aBuf[nBuf-4], ""ate"", 3);",120,1,"      }else if( nBuf>4 && 0==memcmp(""ator"", &aBuf[nBuf-4], 4) ){
        if( fts5Porter_MGt0(aBuf, nBuf-4) ){
          memcpy(&aBuf[nBuf-4], ""ate"", 3);
          *pnBuf = nBuf - 4 + 3;
        }
"
6360,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&aBuf[nBuf-5], ""al"", 2);",120,1,"      if( nBuf>5 && 0==memcmp(""alism"", &aBuf[nBuf-5], 5) ){
        if( fts5Porter_MGt0(aBuf, nBuf-5) ){
          memcpy(&aBuf[nBuf-5], ""al"", 2);
          *pnBuf = nBuf - 5 + 2;
        }
"
6361,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&aBuf[nBuf-7], ""ive"", 3);",120,1,"      }else if( nBuf>7 && 0==memcmp(""iveness"", &aBuf[nBuf-7], 7) ){
        if( fts5Porter_MGt0(aBuf, nBuf-7) ){
          memcpy(&aBuf[nBuf-7], ""ive"", 3);
          *pnBuf = nBuf - 7 + 3;
        }
"
6362,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&aBuf[nBuf-7], ""ful"", 3);",120,1,"      }else if( nBuf>7 && 0==memcmp(""fulness"", &aBuf[nBuf-7], 7) ){
        if( fts5Porter_MGt0(aBuf, nBuf-7) ){
          memcpy(&aBuf[nBuf-7], ""ful"", 3);
          *pnBuf = nBuf - 7 + 3;
        }
"
6363,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&aBuf[nBuf-7], ""ous"", 3);",120,1,"      }else if( nBuf>7 && 0==memcmp(""ousness"", &aBuf[nBuf-7], 7) ){
        if( fts5Porter_MGt0(aBuf, nBuf-7) ){
          memcpy(&aBuf[nBuf-7], ""ous"", 3);
          *pnBuf = nBuf - 7 + 3;
        }
"
6365,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&aBuf[nBuf-5], ""ive"", 3);",120,1,"      }else if( nBuf>5 && 0==memcmp(""iviti"", &aBuf[nBuf-5], 5) ){
        if( fts5Porter_MGt0(aBuf, nBuf-5) ){
          memcpy(&aBuf[nBuf-5], ""ive"", 3);
          *pnBuf = nBuf - 5 + 3;
        }
"
6366,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&aBuf[nBuf-6], ""ble"", 3);",120,1,"      }else if( nBuf>6 && 0==memcmp(""biliti"", &aBuf[nBuf-6], 6) ){
        if( fts5Porter_MGt0(aBuf, nBuf-6) ){
          memcpy(&aBuf[nBuf-6], ""ble"", 3);
          *pnBuf = nBuf - 6 + 3;
        }
"
6367,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&aBuf[nBuf-4], ""ic"", 2);",120,1,"      if( nBuf>4 && 0==memcmp(""ical"", &aBuf[nBuf-4], 4) ){
        if( fts5Porter_MGt0(aBuf, nBuf-4) ){
          memcpy(&aBuf[nBuf-4], ""ic"", 2);
          *pnBuf = nBuf - 4 + 2;
        }
"
6368,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&aBuf[nBuf-5], ""ic"", 2);",120,1,"      if( nBuf>5 && 0==memcmp(""icate"", &aBuf[nBuf-5], 5) ){
        if( fts5Porter_MGt0(aBuf, nBuf-5) ){
          memcpy(&aBuf[nBuf-5], ""ic"", 2);
          *pnBuf = nBuf - 5 + 2;
        }
"
6371,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(&aBuf[nBuf-3], ""ee"", 2);",120,1,"      if( nBuf>3 && 0==memcmp(""eed"", &aBuf[nBuf-3], 3) ){
        if( fts5Porter_MGt0(aBuf, nBuf-3) ){
          memcpy(&aBuf[nBuf-3], ""ee"", 2);
          *pnBuf = nBuf - 3 + 2;
        }
"
6372,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(aBuf, pToken, nBuf);",120,1,"  aBuf = p->aBuf;
  nBuf = nToken;
  memcpy(aBuf, pToken, nBuf);

  /* Step 1. */
"
6373,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pRet->zFts5Tbl, zTab, nTab);",120,1,"      pRet->zFts5Tbl = (char*)&pRet[1];
      pRet->zFts5Db = &pRet->zFts5Tbl[nTab];
      memcpy(pRet->zFts5Tbl, zTab, nTab);
      memcpy(pRet->zFts5Db, zDb, nDb);
      sqlite3Fts5Dequote(pRet->zFts5Tbl);
"
6374,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pRet->zFts5Db, zDb, nDb);",120,1,"      pRet->zFts5Db = &pRet->zFts5Tbl[nTab];
      memcpy(pRet->zFts5Tbl, zTab, nTab);
      memcpy(pRet->zFts5Db, zDb, nDb);
      sqlite3Fts5Dequote(pRet->zFts5Tbl);
      sqlite3Fts5Dequote(pRet->zFts5Db);
"
6377,2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,Dataset Download,../../Dataset Download/2021\Kiss-Light_Hub\src\sqlite3\sqlite3.c,"memcpy(pCsr->zLeTerm, zCopy, pCsr->nLeTerm+1);",120,1,"        rc = SQLITE_NOMEM;
      }else{
        memcpy(pCsr->zLeTerm, zCopy, pCsr->nLeTerm+1);
      }
    }
"
6382,2021\Lumi-Router-JN5169\Source\app_zcl_task.c,Dataset Download,../../Dataset Download/2021\Lumi-Router-JN5169\Source\app_zcl_task.c,"memcpy(sLumiRouter.sBasicServerCluster.au8ManufacturerName, BAS_MANUF_NAME_STRING, CLD_BAS_MANUF_NAME_SIZE);",120,1,"PRIVATE void APP_ZCL_vDeviceSpecific_Init(void)
{
    memcpy(sLumiRouter.sBasicServerCluster.au8ManufacturerName, BAS_MANUF_NAME_STRING, CLD_BAS_MANUF_NAME_SIZE);
    memcpy(sLumiRouter.sBasicServerCluster.au8ModelIdentifier, BAS_MODEL_ID_STRING, CLD_BAS_MODEL_ID_SIZE);
    memcpy(sLumiRouter.sBasicServerCluster.au8DateCode, BAS_DATE_STRING, CLD_BAS_DATE_SIZE);
"
6383,2021\Lumi-Router-JN5169\Source\app_zcl_task.c,Dataset Download,../../Dataset Download/2021\Lumi-Router-JN5169\Source\app_zcl_task.c,"memcpy(sLumiRouter.sBasicServerCluster.au8ModelIdentifier, BAS_MODEL_ID_STRING, CLD_BAS_MODEL_ID_SIZE);",120,1,"{
    memcpy(sLumiRouter.sBasicServerCluster.au8ManufacturerName, BAS_MANUF_NAME_STRING, CLD_BAS_MANUF_NAME_SIZE);
    memcpy(sLumiRouter.sBasicServerCluster.au8ModelIdentifier, BAS_MODEL_ID_STRING, CLD_BAS_MODEL_ID_SIZE);
    memcpy(sLumiRouter.sBasicServerCluster.au8DateCode, BAS_DATE_STRING, CLD_BAS_DATE_SIZE);
    memcpy(sLumiRouter.sBasicServerCluster.au8SWBuildID, BAS_SW_BUILD_STRING, CLD_BAS_SW_BUILD_SIZE);
"
6384,2021\Lumi-Router-JN5169\Source\app_zcl_task.c,Dataset Download,../../Dataset Download/2021\Lumi-Router-JN5169\Source\app_zcl_task.c,"memcpy(sLumiRouter.sBasicServerCluster.au8DateCode, BAS_DATE_STRING, CLD_BAS_DATE_SIZE);",120,1,"    memcpy(sLumiRouter.sBasicServerCluster.au8ManufacturerName, BAS_MANUF_NAME_STRING, CLD_BAS_MANUF_NAME_SIZE);
    memcpy(sLumiRouter.sBasicServerCluster.au8ModelIdentifier, BAS_MODEL_ID_STRING, CLD_BAS_MODEL_ID_SIZE);
    memcpy(sLumiRouter.sBasicServerCluster.au8DateCode, BAS_DATE_STRING, CLD_BAS_DATE_SIZE);
    memcpy(sLumiRouter.sBasicServerCluster.au8SWBuildID, BAS_SW_BUILD_STRING, CLD_BAS_SW_BUILD_SIZE);

"
6385,2021\Lumi-Router-JN5169\Source\app_zcl_task.c,Dataset Download,../../Dataset Download/2021\Lumi-Router-JN5169\Source\app_zcl_task.c,"memcpy(sLumiRouter.sBasicServerCluster.au8SWBuildID, BAS_SW_BUILD_STRING, CLD_BAS_SW_BUILD_SIZE);",120,1,"    memcpy(sLumiRouter.sBasicServerCluster.au8ModelIdentifier, BAS_MODEL_ID_STRING, CLD_BAS_MODEL_ID_SIZE);
    memcpy(sLumiRouter.sBasicServerCluster.au8DateCode, BAS_DATE_STRING, CLD_BAS_DATE_SIZE);
    memcpy(sLumiRouter.sBasicServerCluster.au8SWBuildID, BAS_SW_BUILD_STRING, CLD_BAS_SW_BUILD_SIZE);

    sLumiRouter.sDeviceTemperatureConfigurationServerCluster.i16CurrentTemperature = 0;
"
6391,2021\netifyd\include\nd-netlink.h,Dataset Download,../../Dataset Download/2021\netifyd\include\nd-netlink.h,"length(length) { memcpy(&address, addr, sizeof(struct sockaddr_storage)); }",120,1,"        length(0) { memset(&address, 0, sizeof(struct sockaddr_storage)); }
    ndNetlinkNetworkAddr(const struct sockaddr_storage *addr, uint8_t length = 0) :
        length(length) { memcpy(&address, addr, sizeof(struct sockaddr_storage)); }

    uint8_t length;
"
6393,2021\netifyd\src\nd-capture.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-capture.cpp,"memcpy(ph, pkt_header, sizeof(struct pcap_pkthdr));",120,1,"    struct pcap_pkthdr *ph = new struct pcap_pkthdr;
    if (ph == NULL) throw ndCaptureThreadException(strerror(ENOMEM));
    memcpy(ph, pkt_header, sizeof(struct pcap_pkthdr));

    uint8_t *pd = new uint8_t[pkt_header->caplen];
"
6394,2021\netifyd\src\nd-capture.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-capture.cpp,"memcpy(pd, pkt_data, pkt_header->caplen);",120,1,"    uint8_t *pd = new uint8_t[pkt_header->caplen];
    if (pd == NULL) throw ndCaptureThreadException(strerror(ENOMEM));
    memcpy(pd, pkt_data, pkt_header->caplen);

    pkt_queue.push(make_pair(ph, pd));
"
6396,2021\netifyd\src\nd-capture.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-capture.cpp,"memcpy(this->dev_mac, dev_mac, ETH_ALEN);",120,1,"    nd_private_ipaddr(private_addr, private_addrs.second);

    memcpy(this->dev_mac, dev_mac, ETH_ALEN);
    nd_debug_printf(
        ""%s: hwaddr: %02hhx:%02hhx:%02hhx:%02hhx:%02hx:%02hhx\n"",
"
6400,2021\netifyd\src\nd-capture.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-capture.cpp,"memcpy(flow.lower_mac, hdr_eth->ether_shost, ETH_ALEN);",120,1,"            flow.upper_addr4->sin_addr.s_addr = hdr_ip->ip_dst.s_addr;
            if (pcap_datalink_type == DLT_EN10MB) {
                memcpy(flow.lower_mac, hdr_eth->ether_shost, ETH_ALEN);
                memcpy(flow.upper_mac, hdr_eth->ether_dhost, ETH_ALEN);
            }
"
6401,2021\netifyd\src\nd-capture.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-capture.cpp,"memcpy(flow.upper_mac, hdr_eth->ether_dhost, ETH_ALEN);",120,1,"            if (pcap_datalink_type == DLT_EN10MB) {
                memcpy(flow.lower_mac, hdr_eth->ether_shost, ETH_ALEN);
                memcpy(flow.upper_mac, hdr_eth->ether_dhost, ETH_ALEN);
            }
        }
"
6402,2021\netifyd\src\nd-capture.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-capture.cpp,"memcpy(flow.lower_mac, hdr_eth->ether_dhost, ETH_ALEN);",120,1,"            flow.upper_addr4->sin_addr.s_addr = hdr_ip->ip_src.s_addr;
            if (pcap_datalink_type == DLT_EN10MB) {
                memcpy(flow.lower_mac, hdr_eth->ether_dhost, ETH_ALEN);
                memcpy(flow.upper_mac, hdr_eth->ether_shost, ETH_ALEN);
            }
"
6403,2021\netifyd\src\nd-capture.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-capture.cpp,"memcpy(flow.upper_mac, hdr_eth->ether_shost, ETH_ALEN);",120,1,"            if (pcap_datalink_type == DLT_EN10MB) {
                memcpy(flow.lower_mac, hdr_eth->ether_dhost, ETH_ALEN);
                memcpy(flow.upper_mac, hdr_eth->ether_shost, ETH_ALEN);
            }
        }
"
6404,2021\netifyd\src\nd-capture.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-capture.cpp,"memcpy(&flow.lower_addr6->sin6_addr, &hdr_ip6->ip6_src, sizeof(struct in6_addr));",120,1,"
        if (addr_cmp < 0) {
            memcpy(&flow.lower_addr6->sin6_addr, &hdr_ip6->ip6_src, sizeof(struct in6_addr));
            memcpy(&flow.upper_addr6->sin6_addr, &hdr_ip6->ip6_dst, sizeof(struct in6_addr));
            if (pcap_datalink_type == DLT_EN10MB) {
"
6405,2021\netifyd\src\nd-capture.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-capture.cpp,"memcpy(&flow.upper_addr6->sin6_addr, &hdr_ip6->ip6_dst, sizeof(struct in6_addr));",120,1,"        if (addr_cmp < 0) {
            memcpy(&flow.lower_addr6->sin6_addr, &hdr_ip6->ip6_src, sizeof(struct in6_addr));
            memcpy(&flow.upper_addr6->sin6_addr, &hdr_ip6->ip6_dst, sizeof(struct in6_addr));
            if (pcap_datalink_type == DLT_EN10MB) {
                memcpy(flow.lower_mac, hdr_eth->ether_shost, ETH_ALEN);
"
6408,2021\netifyd\src\nd-capture.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-capture.cpp,"memcpy(&flow.lower_addr6->sin6_addr, &hdr_ip6->ip6_dst, sizeof(struct in6_addr));",120,1,"        }
        else {
            memcpy(&flow.lower_addr6->sin6_addr, &hdr_ip6->ip6_dst, sizeof(struct in6_addr));
            memcpy(&flow.upper_addr6->sin6_addr, &hdr_ip6->ip6_src, sizeof(struct in6_addr));
            if (pcap_datalink_type == DLT_EN10MB) {
"
6409,2021\netifyd\src\nd-capture.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-capture.cpp,"memcpy(&flow.upper_addr6->sin6_addr, &hdr_ip6->ip6_src, sizeof(struct in6_addr));",120,1,"        else {
            memcpy(&flow.lower_addr6->sin6_addr, &hdr_ip6->ip6_dst, sizeof(struct in6_addr));
            memcpy(&flow.upper_addr6->sin6_addr, &hdr_ip6->ip6_src, sizeof(struct in6_addr));
            if (pcap_datalink_type == DLT_EN10MB) {
                memcpy(flow.lower_mac, hdr_eth->ether_dhost, ETH_ALEN);
"
6412,2021\netifyd\src\nd-capture.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-capture.cpp,"memcpy(&addr4, ns_rr_rdata(rr), sizeof(struct in_addr));",120,1,"
        if (ns_rr_type(rr) == ns_t_a) {
            memcpy(&addr4, ns_rr_rdata(rr), sizeof(struct in_addr));
            inet_ntop(AF_INET, &addr4, addr, INET_ADDRSTRLEN);
        }
"
6413,2021\netifyd\src\nd-capture.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-capture.cpp,"memcpy(&addr6, ns_rr_rdata(rr), sizeof(struct in6_addr));",120,1,"        }
        else {
            memcpy(&addr6, ns_rr_rdata(rr), sizeof(struct in6_addr));
            inet_ntop(AF_INET6, &addr6, addr, INET6_ADDRSTRLEN);
        }
"
6418,2021\netifyd\src\nd-conntrack.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-conntrack.cpp,"memcpy(&sa->sin_addr, src, sizeof(struct in_addr));",120,1,"    switch (af) {
    case AF_INET:
        memcpy(&sa->sin_addr, src, sizeof(struct in_addr));
        break;
    case AF_INET6:
"
6419,2021\netifyd\src\nd-conntrack.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-conntrack.cpp,"memcpy(&sa6->sin6_addr, src, sizeof(struct in6_addr));",120,1,"        break;
    case AF_INET6:
        memcpy(&sa6->sin6_addr, src, sizeof(struct in6_addr));
        break;
    }
"
6420,2021\netifyd\src\nd-detection.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-detection.cpp,"memcpy(this->pkt_data, pkt_data, pkt_length);",120,1,"        this->pkt_data = new uint8_t[pkt_length];
        if (this->pkt_data == NULL) throw ndDetectionThreadException(strerror(ENOMEM));
        memcpy(this->pkt_data, pkt_data, pkt_length);
    }
}
"
6425,2021\netifyd\src\nd-detection.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-detection.cpp,"memcpy(entry->flow->digest_mdata, flow_digest_mdata.c_str(),",120,1,"                        tag.c_str());
#endif
                    memcpy(entry->flow->digest_mdata, flow_digest_mdata.c_str(),
                        SHA1_DIGEST_LENGTH);
                }
"
6428,2021\netifyd\src\nd-flow.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-flow.cpp,"memcpy(lower_mac, flow.lower_mac, ETH_ALEN);",120,1,"    capture_filename{}
{
    memcpy(lower_mac, flow.lower_mac, ETH_ALEN);
    memcpy(upper_mac, flow.upper_mac, ETH_ALEN);

"
6429,2021\netifyd\src\nd-flow.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-flow.cpp,"memcpy(upper_mac, flow.upper_mac, ETH_ALEN);",120,1,"{
    memcpy(lower_mac, flow.lower_mac, ETH_ALEN);
    memcpy(upper_mac, flow.upper_mac, ETH_ALEN);

    memcpy(digest_lower, flow.digest_lower, SHA1_DIGEST_LENGTH);
"
6430,2021\netifyd\src\nd-flow.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-flow.cpp,"memcpy(digest_lower, flow.digest_lower, SHA1_DIGEST_LENGTH);",120,1,"    memcpy(upper_mac, flow.upper_mac, ETH_ALEN);

    memcpy(digest_lower, flow.digest_lower, SHA1_DIGEST_LENGTH);
    memset(digest_mdata, 0, SHA1_DIGEST_LENGTH);

"
6432,2021\netifyd\src\nd-flow.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-flow.cpp,"memcpy(header, pkt_header, sizeof(struct pcap_pkthdr));",120,1,"        throw ndSystemException(__PRETTY_FUNCTION__, ""new data"", ENOMEM);

    memcpy(header, pkt_header, sizeof(struct pcap_pkthdr));
    memcpy(data, pkt_data, pkt_header->caplen);

"
6433,2021\netifyd\src\nd-flow.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-flow.cpp,"memcpy(data, pkt_data, pkt_header->caplen);",120,1,"
    memcpy(header, pkt_header, sizeof(struct pcap_pkthdr));
    memcpy(data, pkt_data, pkt_header->caplen);

    capture.push_back(make_pair(header, data));
"
6434,2021\netifyd\src\nd-flow.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-flow.cpp,"memcpy(p, ND_FLOW_CAPTURE_TEMPLATE, sizeof(ND_FLOW_CAPTURE_TEMPLATE));",120,1,"{
    char *p = capture_filename;
    memcpy(p, ND_FLOW_CAPTURE_TEMPLATE, sizeof(ND_FLOW_CAPTURE_TEMPLATE));

    p += ND_FLOW_CAPTURE_SUB_OFFSET;
"
6440,2021\netifyd\src\nd-inotify.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-inotify.cpp,"memcpy(i->second->digest, digest, SHA1_DIGEST_LENGTH);",120,1,"        if (i->second->digest == NULL) {
            i->second->digest = new uint8_t[SHA1_DIGEST_LENGTH];
            memcpy(i->second->digest, digest, SHA1_DIGEST_LENGTH);
        }
        else {
"
6446,2021\netifyd\src\nd-netlink.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-netlink.cpp,"memcpy(&saddr_ip4->sin_addr, src, sizeof(struct in_addr));",120,1,"    case AF_INET:
        saddr_ip4 = reinterpret_cast<struct sockaddr_in *>(&dst);
        memcpy(&saddr_ip4->sin_addr, src, sizeof(struct in_addr));
        dst.ss_family = family;
        return true;
"
6447,2021\netifyd\src\nd-netlink.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-netlink.cpp,"memcpy(&saddr_ip6->sin6_addr, src, sizeof(struct in6_addr));",120,1,"    case AF_INET6:
        saddr_ip6 = reinterpret_cast<struct sockaddr_in6 *>(&dst);
        memcpy(&saddr_ip6->sin6_addr, src, sizeof(struct in6_addr));
        dst.ss_family = family;
        return true;
"
6452,2021\netifyd\src\nd-sha1.c,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-sha1.c,"memcpy (cp, &v, sizeof v);",120,1,"static void set_uint32(char *cp, uint32_t v)
{
  memcpy (cp, &v, sizeof v);
}

"
6453,2021\netifyd\src\nd-sha1.c,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-sha1.c,"memcpy (&((char *) ctx->buffer)[bytes], fillbuf, (size - 2) * 4 - bytes);",120,1,"  ctx->buffer[size - 1] = SWAP (ctx->total[0] << 3);

  memcpy (&((char *) ctx->buffer)[bytes], fillbuf, (size - 2) * 4 - bytes);

  /* Process last bytes.  */
"
6454,2021\netifyd\src\nd-sha1.c,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-sha1.c,"memcpy (&((char *) ctx->buffer)[left_over], buffer, add);",120,1,"      size_t add = 128 - left_over > len ? len : 128 - left_over;

      memcpy (&((char *) ctx->buffer)[left_over], buffer, add);
      ctx->buflen += add;

"
6455,2021\netifyd\src\nd-sha1.c,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-sha1.c,"sha1_write_block (ctx, memcpy(ctx->buffer, buffer, 64), 64);",120,1,"        while (len > 64)
          {
            sha1_write_block (ctx, memcpy(ctx->buffer, buffer, 64), 64);
            buffer = (const char *) buffer + 64;
            len -= 64;
"
6456,2021\netifyd\src\nd-sha1.c,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-sha1.c,"memcpy (&((char *) ctx->buffer)[left_over], buffer, len);",120,1,"      size_t left_over = ctx->buflen;

      memcpy (&((char *) ctx->buffer)[left_over], buffer, len);
      left_over += len;
      if (left_over >= 64)
"
6457,2021\netifyd\src\nd-sha1.c,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-sha1.c,"memcpy (ctx->buffer, &ctx->buffer[16], left_over);",120,1,"          /* The regions in the following copy operation cannot overlap,
             because left_over ≤ 64.  */
          memcpy (ctx->buffer, &ctx->buffer[16], left_over);
        }
      ctx->buflen = left_over;
"
6462,2021\netifyd\src\nd-socket.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-socket.cpp,"memcpy(sa, rp->ai_addr, sa_size);",120,1,"        sa_size = rp->ai_addrlen;
        sa = new struct sockaddr_storage;
        memcpy(sa, rp->ai_addr, sa_size);

        freeaddrinfo(result);
"
6466,2021\netifyd\src\nd-util.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-util.cpp,"memcpy(digest, sha1_result(&ctx, _digest), SHA1_DIGEST_LENGTH);",120,1,"
    close(fd);
    memcpy(digest, sha1_result(&ctx, _digest), SHA1_DIGEST_LENGTH);

    return 0;
"
6474,2021\netifyd\src\nd-util.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-util.cpp,"memcpy(addr->mac, s->sll_addr, ETH_ALEN);",120,1,"            {
                struct sockaddr_ll *s = (struct sockaddr_ll*)ifa->ifa_addr;
                memcpy(addr->mac, s->sll_addr, ETH_ALEN);
            }
#elif defined(BSD4_4)
"
6475,2021\netifyd\src\nd-util.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-util.cpp,"memcpy(addr->mac, s->sdl_data + s->sdl_nlen, ETH_ALEN);",120,1,"            {
                struct sockaddr_dl *s = (struct sockaddr_dl *)ifa->ifa_addr;
                memcpy(addr->mac, s->sdl_data + s->sdl_nlen, ETH_ALEN);
            }
#endif
"
6476,2021\netifyd\src\nd-util.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-util.cpp,"memcpy(&addr->ip, ifa->ifa_addr, sizeof(struct sockaddr_in));",120,1,"            break;
        case AF_INET:
            memcpy(&addr->ip, ifa->ifa_addr, sizeof(struct sockaddr_in));
            addrs->push_back(addr);
            count++;
"
6477,2021\netifyd\src\nd-util.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-util.cpp,"memcpy(&addr->ip, ifa->ifa_addr, sizeof(struct sockaddr_in6));",120,1,"            break;
        case AF_INET6:
            memcpy(&addr->ip, ifa->ifa_addr, sizeof(struct sockaddr_in6));
            addrs->push_back(addr);
            count++;
"
6478,2021\netifyd\src\nd-util.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-util.cpp,"memcpy(addr, (*a)->mac, ETH_ALEN);",120,1,"    for (a = i->second->begin(); a != i->second->end(); a++) {
        if ((*a)->family == AF_LINK) {
            memcpy(addr, (*a)->mac, ETH_ALEN);
            return true;
        }
"
6481,2021\netifyd\src\netifyd.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\netifyd.cpp,"memcpy(p, mac, ETH_ALEN);",120,1,"            sscanf(a + j, ""%2hhx"", p);
        p = new uint8_t[ETH_ALEN];
        memcpy(p, mac, ETH_ALEN);
        nd_config.privacy_filter_mac.push_back(p);
    }
"
6483,2021\netifyd\src\netifyd.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\netifyd.cpp,"memcpy(saddr, rp->ai_addr, rp->ai_addrlen);",120,1,"            if (! saddr)
                throw ndSystemException(__PRETTY_FUNCTION__, ""new"", ENOMEM);
            memcpy(saddr, rp->ai_addr, rp->ai_addrlen);
            nd_config.privacy_filter_host.push_back(saddr);
        }
"
6486,2021\netifyd\src\netifyd.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\netifyd.cpp,"memcpy(mac_src, i->first.c_str(), ETH_ALEN);",120,1,"
        uint8_t mac_src[ETH_ALEN];
        memcpy(mac_src, i->first.c_str(), ETH_ALEN);
        char mac_dst[ND_STR_ETHALEN + 1];

"
6489,2021\netifyd\src\netifyd.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\netifyd.cpp,"memcpy(&nda_stats.ts_now, &nda_stats.ts_epoch, sizeof(struct timespec));",120,1,"
    if (clock_gettime(CLOCK_MONOTONIC_RAW, &nda_stats.ts_now) != 0)
        memcpy(&nda_stats.ts_now, &nda_stats.ts_epoch, sizeof(struct timespec));

    if (ND_USE_DHC) {
"
6494,2021\netifyd\src\ns-parse.c,Dataset Download,../../Dataset Download/2021\netifyd\src\ns-parse.c,"memcpy(dstp, srcp, l);",120,1,"			checked += l + 1;
			*dstp++ = n;
			memcpy(dstp, srcp, l);
			dstp += l;
			srcp += l;
"
6496,2021\Oscar\Program\Project_Template\BSP\Lib\Ring_Buffer\ring_buffer.c,Dataset Download,../../Dataset Download/2021\Oscar\Program\Project_Template\BSP\Lib\Ring_Buffer\ring_buffer.c,"memcpy(ring_buffer_handle->array_addr + ring_buffer_handle->tail, input_addr, write_size_a);",120,1,"        {
            //分别拷贝a、b段数据到储存数组中
            memcpy(ring_buffer_handle->array_addr + ring_buffer_handle->tail, input_addr, write_size_a);
            memcpy(ring_buffer_handle->array_addr, input_addr + write_size_a , write_size_b);
            ring_buffer_handle->lenght += write_lenght ;//记录新存储了多少数据量
"
6497,2021\Oscar\Program\Project_Template\BSP\Lib\Ring_Buffer\ring_buffer.c,Dataset Download,../../Dataset Download/2021\Oscar\Program\Project_Template\BSP\Lib\Ring_Buffer\ring_buffer.c,"memcpy(ring_buffer_handle->array_addr, input_addr + write_size_a , write_size_b);",120,1,"            //分别拷贝a、b段数据到储存数组中
            memcpy(ring_buffer_handle->array_addr + ring_buffer_handle->tail, input_addr, write_size_a);
            memcpy(ring_buffer_handle->array_addr, input_addr + write_size_a , write_size_b);
            ring_buffer_handle->lenght += write_lenght ;//记录新存储了多少数据量
            ring_buffer_handle->tail = write_size_b ;//重新定位尾指针位置
"
6499,2021\Oscar\Program\Project_Template\BSP\Lib\Ring_Buffer\ring_buffer.c,Dataset Download,../../Dataset Download/2021\Oscar\Program\Project_Template\BSP\Lib\Ring_Buffer\ring_buffer.c,"memcpy(output_addr, ring_buffer_handle->array_addr + ring_buffer_handle->head, Read_size_a);",120,1,"        if(Read_size_b != 0)//需要读取两次
        {
            memcpy(output_addr, ring_buffer_handle->array_addr + ring_buffer_handle->head, Read_size_a);
            memcpy(output_addr + Read_size_a, ring_buffer_handle->array_addr, Read_size_b);
            ring_buffer_handle->lenght -= read_lenght ;//记录剩余数据量
"
6500,2021\Oscar\Program\Project_Template\BSP\Lib\Ring_Buffer\ring_buffer.c,Dataset Download,../../Dataset Download/2021\Oscar\Program\Project_Template\BSP\Lib\Ring_Buffer\ring_buffer.c,"memcpy(output_addr + Read_size_a, ring_buffer_handle->array_addr, Read_size_b);",120,1,"        {
            memcpy(output_addr, ring_buffer_handle->array_addr + ring_buffer_handle->head, Read_size_a);
            memcpy(output_addr + Read_size_a, ring_buffer_handle->array_addr, Read_size_b);
            ring_buffer_handle->lenght -= read_lenght ;//记录剩余数据量
            ring_buffer_handle->head = Read_size_b ;//重新定位头指针位置
"
6502,2021\Oscar\Program\Project_Template\BSP\Lib\sfud\src\sfud.c,Dataset Download,../../Dataset Download/2021\Oscar\Program\Project_Template\BSP\Lib\sfud\src\sfud.c,"memcpy(&cmd_data[cmd_size], data, data_size);",120,1,"        addr += data_size;

        memcpy(&cmd_data[cmd_size], data, data_size);

        result = spi->wr(spi, cmd_data, cmd_size + data_size, NULL, 0);
"
6504,2021\pear\examples\gstreamer\main.c,Dataset Download,../../Dataset Download/2021\pear\examples\gstreamer\main.c,"memcpy(rtp_packet, info.data, info.size);",120,1,"
    memset(rtp_packet, 0, sizeof(rtp_packet));
    memcpy(rtp_packet, info.data, info.size);
    bytes = info.size;

"
6506,2021\pear\examples\local_file\h264_parser.c,Dataset Download,../../Dataset Download/2021\pear\examples\local_file\h264_parser.c,"memcpy(h264_frame->buf, buf + prev, h264_frame->size);",120,1,"      h264_frame->size = pos - prev;
      h264_frame->buf = (uint8_t*)calloc(size, sizeof(uint8_t));
      memcpy(h264_frame->buf, buf + prev, h264_frame->size);
      return h264_frame;
    }
"
6508,2021\pear\examples\local_file\main.c,Dataset Download,../../Dataset Download/2021\pear\examples\local_file\main.c,"memcpy(sps_frame.buf, h264_frame->buf, h264_frame->size);",120,1,"      sps_frame.size = h264_frame->size;
      sps_frame.buf = (uint8_t*)malloc(h264_frame->size);
      memcpy(sps_frame.buf, h264_frame->buf, h264_frame->size);
      continue;
    }
"
6509,2021\pear\examples\local_file\main.c,Dataset Download,../../Dataset Download/2021\pear\examples\local_file\main.c,"memcpy(pps_frame.buf, h264_frame->buf, h264_frame->size);",120,1,"      pps_frame.size = h264_frame->size;
      pps_frame.buf = (uint8_t*)malloc(h264_frame->size);
      memcpy(pps_frame.buf, h264_frame->buf, h264_frame->size);
      continue;
    }
"
6510,2021\pear\examples\local_file\main.c,Dataset Download,../../Dataset Download/2021\pear\examples\local_file\main.c,"memcpy(buf_tmp, h264_frame->buf, size_tmp);",120,1,"      uint8_t *buf_tmp = NULL;
      buf_tmp = (uint8_t*)malloc(size_tmp);
      memcpy(buf_tmp, h264_frame->buf, size_tmp);

      h264_frame->size = size_tmp + sps_frame.size + pps_frame.size;
"
6511,2021\pear\examples\local_file\main.c,Dataset Download,../../Dataset Download/2021\pear\examples\local_file\main.c,"memcpy(h264_frame->buf, sps_frame.buf, sps_frame.size);",120,1,"      h264_frame->size = size_tmp + sps_frame.size + pps_frame.size;
      h264_frame->buf = (uint8_t*)realloc(h264_frame->buf, size_tmp + sps_frame.size + pps_frame.size);
      memcpy(h264_frame->buf, sps_frame.buf, sps_frame.size);
      memcpy(h264_frame->buf + sps_frame.size, pps_frame.buf, pps_frame.size);
      memcpy(h264_frame->buf + sps_frame.size + pps_frame.size, buf_tmp, size_tmp);
"
6512,2021\pear\examples\local_file\main.c,Dataset Download,../../Dataset Download/2021\pear\examples\local_file\main.c,"memcpy(h264_frame->buf + sps_frame.size, pps_frame.buf, pps_frame.size);",120,1,"      h264_frame->buf = (uint8_t*)realloc(h264_frame->buf, size_tmp + sps_frame.size + pps_frame.size);
      memcpy(h264_frame->buf, sps_frame.buf, sps_frame.size);
      memcpy(h264_frame->buf + sps_frame.size, pps_frame.buf, pps_frame.size);
      memcpy(h264_frame->buf + sps_frame.size + pps_frame.size, buf_tmp, size_tmp);
      free(buf_tmp);
"
6513,2021\pear\examples\local_file\main.c,Dataset Download,../../Dataset Download/2021\pear\examples\local_file\main.c,"memcpy(h264_frame->buf + sps_frame.size + pps_frame.size, buf_tmp, size_tmp);",120,1,"      memcpy(h264_frame->buf, sps_frame.buf, sps_frame.size);
      memcpy(h264_frame->buf + sps_frame.size, pps_frame.buf, pps_frame.size);
      memcpy(h264_frame->buf + sps_frame.size + pps_frame.size, buf_tmp, size_tmp);
      free(buf_tmp);
    }
"
6518,2021\pear\src\dtls_transport.c,Dataset Download,../../Dataset Download/2021\pear\src\dtls_transport.c,"memcpy(dtls_transport->remote_policy.key, remote_key, SRTP_MASTER_KEY_LENGTH);",120,1,"  unsigned char remote_policy_key[SRTP_MASTER_LENGTH];
  dtls_transport->remote_policy.key = (unsigned char *)&remote_policy_key;
  memcpy(dtls_transport->remote_policy.key, remote_key, SRTP_MASTER_KEY_LENGTH);
  memcpy(dtls_transport->remote_policy.key + SRTP_MASTER_KEY_LENGTH, remote_salt, SRTP_MASTER_SALT_LENGTH);
  dtls_transport->remote_policy.next = NULL;
"
6519,2021\pear\src\dtls_transport.c,Dataset Download,../../Dataset Download/2021\pear\src\dtls_transport.c,"memcpy(dtls_transport->remote_policy.key + SRTP_MASTER_KEY_LENGTH, remote_salt, SRTP_MASTER_SALT_LENGTH);",120,1,"  dtls_transport->remote_policy.key = (unsigned char *)&remote_policy_key;
  memcpy(dtls_transport->remote_policy.key, remote_key, SRTP_MASTER_KEY_LENGTH);
  memcpy(dtls_transport->remote_policy.key + SRTP_MASTER_KEY_LENGTH, remote_salt, SRTP_MASTER_SALT_LENGTH);
  dtls_transport->remote_policy.next = NULL;
  srtp_crypto_policy_set_rtp_default(&(dtls_transport->local_policy.rtp));
"
6520,2021\pear\src\dtls_transport.c,Dataset Download,../../Dataset Download/2021\pear\src\dtls_transport.c,"memcpy(dtls_transport->local_policy.key, local_key, SRTP_MASTER_KEY_LENGTH);",120,1,"  unsigned char local_policy_key[SRTP_MASTER_LENGTH];
  dtls_transport->local_policy.key = (unsigned char *)&local_policy_key;
  memcpy(dtls_transport->local_policy.key, local_key, SRTP_MASTER_KEY_LENGTH);
  memcpy(dtls_transport->local_policy.key + SRTP_MASTER_KEY_LENGTH, local_salt, SRTP_MASTER_SALT_LENGTH);
  dtls_transport->local_policy.next = NULL;
"
6521,2021\pear\src\dtls_transport.c,Dataset Download,../../Dataset Download/2021\pear\src\dtls_transport.c,"memcpy(dtls_transport->local_policy.key + SRTP_MASTER_KEY_LENGTH, local_salt, SRTP_MASTER_SALT_LENGTH);",120,1,"  dtls_transport->local_policy.key = (unsigned char *)&local_policy_key;
  memcpy(dtls_transport->local_policy.key, local_key, SRTP_MASTER_KEY_LENGTH);
  memcpy(dtls_transport->local_policy.key + SRTP_MASTER_KEY_LENGTH, local_salt, SRTP_MASTER_SALT_LENGTH);
  dtls_transport->local_policy.next = NULL;

"
6537,2021\Powergy-Medusa-FW-Basic-Auth\lib\ArduinoJson\extras\tests\JsonDocument\shrinkToFit.cpp,Dataset Download,../../Dataset Download/2021\Powergy-Medusa-FW-Basic-Auth\lib\ArduinoJson\extras\tests\JsonDocument\shrinkToFit.cpp,"memcpy(new_ptr, _ptr, std::min(new_size, _size));",120,1,"    // this way we make sure we support relocation
    void* new_ptr = malloc(new_size);
    memcpy(new_ptr, _ptr, std::min(new_size, _size));
    memset(_ptr, '#', _size);  // erase
    free(_ptr);
"
6567,2021\Powergy-Medusa-FW-Basic-Auth\lib\ArduinoJson\extras\tests\MsgPackDeserializer\input_types.cpp,Dataset Download,../../Dataset Download/2021\Powergy-Medusa-FW-Basic-Auth\lib\ArduinoJson\extras\tests\MsgPackDeserializer\input_types.cpp,"memcpy(vla, ""\xDE\x00\x01\xA5Hello\xA5world"", 15);",120,1,"  int i = 16;
  char vla[i];
  memcpy(vla, ""\xDE\x00\x01\xA5Hello\xA5world"", 15);

  StaticJsonDocument<JSON_OBJECT_SIZE(1)> doc;
"
6589,2021\Powergy-Medusa-FW-Basic-Auth\lib\WiFiManager\WiFiManager.cpp,Dataset Download,../../Dataset Download/2021\Powergy-Medusa-FW-Basic-Auth\lib\WiFiManager\WiFiManager.cpp,"memcpy(tmp, conf.ssid, sizeof(conf.ssid));",120,1,"
    char tmp[33]; //ssid can be up to 32chars, => plus null term
    memcpy(tmp, conf.ssid, sizeof(conf.ssid));
    tmp[32] = 0; //nullterm in case of 32 char ssid
    return String(reinterpret_cast<char*>(tmp));
"
6590,2021\Powergy-Medusa-FW-Basic-Auth\lib\WiFiManager\WiFiManager.cpp,Dataset Download,../../Dataset Download/2021\Powergy-Medusa-FW-Basic-Auth\lib\WiFiManager\WiFiManager.cpp,"memcpy(tmp, conf.password, sizeof(conf.password));",120,1,"
    char tmp[65]; //psk is 64 bytes hex => plus null term
    memcpy(tmp, conf.password, sizeof(conf.password));
    tmp[64] = 0; //null term in case of 64 byte psk
    return String(reinterpret_cast<char*>(tmp));
"
6595,2021\Projekt-IoT-AiR\src\mqtt.cpp,Dataset Download,../../Dataset Download/2021\Projekt-IoT-AiR\src\mqtt.cpp,"memcpy(completedTopic, ns, strlen(ns));",120,1,"    // Prepare topic.
    memset(completedTopic, 0, sizeof(completedTopic)); // Zero just in case.
    memcpy(completedTopic, ns, strlen(ns));            // Prepend namespace.
    strcat(completedTopic, ""/"");                       // Append slash.
    strcat(completedTopic, topic);                     // Append topic.
"
6599,2021\Projekt-IoT-AiR\src\wifi.cpp,Dataset Download,../../Dataset Download/2021\Projekt-IoT-AiR\src\wifi.cpp,"memcpy(wc->sta.ssid, sc->ssid, sizeof(wc->sta.ssid));",120,1,"{
    bzero(wc, sizeof(wifi_config_t));
    memcpy(wc->sta.ssid, sc->ssid, sizeof(wc->sta.ssid));
    memcpy(wc->sta.password, sc->password, sizeof(wc->sta.password));
    wc->sta.bssid_set = sc->bssid_set;
"
6600,2021\Projekt-IoT-AiR\src\wifi.cpp,Dataset Download,../../Dataset Download/2021\Projekt-IoT-AiR\src\wifi.cpp,"memcpy(wc->sta.password, sc->password, sizeof(wc->sta.password));",120,1,"    bzero(wc, sizeof(wifi_config_t));
    memcpy(wc->sta.ssid, sc->ssid, sizeof(wc->sta.ssid));
    memcpy(wc->sta.password, sc->password, sizeof(wc->sta.password));
    wc->sta.bssid_set = sc->bssid_set;
    if (wc->sta.bssid_set == true)
"
6601,2021\Projekt-IoT-AiR\src\wifi.cpp,Dataset Download,../../Dataset Download/2021\Projekt-IoT-AiR\src\wifi.cpp,"memcpy(wc->sta.bssid, sc->bssid, sizeof(wc->sta.bssid));",120,1,"    if (wc->sta.bssid_set == true)
    {
        memcpy(wc->sta.bssid, sc->bssid, sizeof(wc->sta.bssid));
    }
}
"
6603,2021\riotos-apps\tft_mqtts\main.c,Dataset Download,../../Dataset Download/2021\riotos-apps\tft_mqtts\main.c,"memcpy(subbuff, &in[last_pos], tot_chars);",120,1,"        // Get substring based on maximum chars that fit on TFT screen
        char subbuff[tot_chars + 1];
        memcpy(subbuff, &in[last_pos], tot_chars);
        subbuff[tot_chars] = '\0';
        len_remaining -= tot_chars;
"
6621,2021\secure-iot-analysis-ecoin-platform\collector\collector.c,Dataset Download,../../Dataset Download/2021\secure-iot-analysis-ecoin-platform\collector\collector.c,"memcpy(pkt->service,serviceProvider,strlen(serviceProvider));",120,1,"	pkt = calloc(1,sizeof(dataPacket));
	printf(""service provider: %s\n"",serviceProvider);
	memcpy(pkt->service,serviceProvider,strlen(serviceProvider));
	pkt->service[strlen(serviceProvider)] = '\0';
	pkt->packet_type = SERVICE_OPERATION;
"
6622,2021\secure-iot-analysis-ecoin-platform\collector\collector.c,Dataset Download,../../Dataset Download/2021\secure-iot-analysis-ecoin-platform\collector\collector.c,"memcpy(encHead->sk,&coinIn,32);",120,1,"	}
	// copy coin into the payload headers symmetric key
	memcpy(encHead->sk,&coinIn,32);

	unsigned char *payloadHead; /** THE YING **/
"
6623,2021\secure-iot-analysis-ecoin-platform\collector\collector.c,Dataset Download,../../Dataset Download/2021\secure-iot-analysis-ecoin-platform\collector\collector.c,"memcpy(pkt->data,payloadHead,payloadHeadSize);",120,1,"	// the size of the entire message frame
	pkt->length = payloadDataSize + payloadHeadSize + SERVICE_NAME_SIZE;
	memcpy(pkt->data,payloadHead,payloadHeadSize);
	memcpy(pkt->data+payloadHeadSize,payloadData,payloadDataSize);

"
6624,2021\secure-iot-analysis-ecoin-platform\collector\collector.c,Dataset Download,../../Dataset Download/2021\secure-iot-analysis-ecoin-platform\collector\collector.c,"memcpy(pkt->data+payloadHeadSize,payloadData,payloadDataSize);",120,1,"	pkt->length = payloadDataSize + payloadHeadSize + SERVICE_NAME_SIZE;
	memcpy(pkt->data,payloadHead,payloadHeadSize);
	memcpy(pkt->data+payloadHeadSize,payloadData,payloadDataSize);

	if (send_all(c,pkt,pkt->length+PACKET_HEADER_SIZE) < 0){
"
6632,2021\Smartdoor-Lock-System-using-Fingerprint-and-Camera\Fingerprint\Adafruit-Fingerprint-Sensor-Library-master\Adafruit_Fingerprint.h,Dataset Download,../../Dataset Download/2021\Smartdoor-Lock-System-using-Fingerprint-and-Camera\Fingerprint\Adafruit-Fingerprint-Sensor-Library-master\Adafruit_Fingerprint.h,"memcpy(this->data, data, length);",120,1,"    address[3] = 0xFF;
    if (length < 64)
      memcpy(this->data, data, length);
    else
      memcpy(this->data, data, 64);
"
6633,2021\Smartdoor-Lock-System-using-Fingerprint-and-Camera\Fingerprint\Adafruit-Fingerprint-Sensor-Library-master\Adafruit_Fingerprint.h,Dataset Download,../../Dataset Download/2021\Smartdoor-Lock-System-using-Fingerprint-and-Camera\Fingerprint\Adafruit-Fingerprint-Sensor-Library-master\Adafruit_Fingerprint.h,"memcpy(this->data, data, 64);",120,1,"      memcpy(this->data, data, length);
    else
      memcpy(this->data, data, 64);
  }
  uint16_t start_code; ///< ""Wakeup"" code for packet detection
"
6634,2021\stm32-rtc-scheduler\lib\FreeRTOS\queue.c,Dataset Download,../../Dataset Download/2021\stm32-rtc-scheduler\lib\FreeRTOS\queue.c,"( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); */",120,1,"	else if( xPosition == queueSEND_TO_BACK )
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
"
6635,2021\stm32-rtc-scheduler\lib\FreeRTOS\queue.c,Dataset Download,../../Dataset Download/2021\stm32-rtc-scheduler\lib\FreeRTOS\queue.c,"( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); */",120,1,"	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
"
6636,2021\stm32-rtc-scheduler\lib\FreeRTOS\queue.c,Dataset Download,../../Dataset Download/2021\stm32-rtc-scheduler\lib\FreeRTOS\queue.c,"( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); */",120,1,"			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
	}
}
"
6637,2021\stm32-rtc-scheduler\lib\FreeRTOS\queue.c,Dataset Download,../../Dataset Download/2021\stm32-rtc-scheduler\lib\FreeRTOS\queue.c,"( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );",120,1,"				}
				--( pxQueue->uxMessagesWaiting );
				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );

				xReturn = pdPASS;
"
6640,2021\stm32-rtc-scheduler\lib\FreeRTOS\stream_buffer.c,Dataset Download,../../Dataset Download/2021\stm32-rtc-scheduler\lib\FreeRTOS\stream_buffer.c,"( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); */",120,1,"	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */

	/* If the number of bytes written was less than the number that could be
"
6641,2021\stm32-rtc-scheduler\lib\FreeRTOS\stream_buffer.c,Dataset Download,../../Dataset Download/2021\stm32-rtc-scheduler\lib\FreeRTOS\stream_buffer.c,"( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); */",120,1,"		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
	}
	else
"
6642,2021\stm32-rtc-scheduler\lib\FreeRTOS\stream_buffer.c,Dataset Download,../../Dataset Download/2021\stm32-rtc-scheduler\lib\FreeRTOS\stream_buffer.c,"( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); */",120,1,"		configASSERT( xFirstLength <= xMaxCount );
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */

		/* If the total number of wanted bytes is greater than the number
"
6643,2021\stm32-rtc-scheduler\lib\FreeRTOS\stream_buffer.c,Dataset Download,../../Dataset Download/2021\stm32-rtc-scheduler\lib\FreeRTOS\stream_buffer.c,"( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); */",120,1,"			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
		}
		else
"
6666,2021\tuya-iotos-embeded-demo-wifi-ble-smart-planter\src\plant_soc\soc_i2c.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-demo-wifi-ble-smart-planter\src\plant_soc\soc_i2c.c,"memcpy(&g_i2c_gpio, i2c_pin, SIZEOF(i2c_pin_t));",120,1,"    
    memset(&g_i2c_gpio, 0, SIZEOF(i2c_pin_t));
    memcpy(&g_i2c_gpio, i2c_pin, SIZEOF(i2c_pin_t));

    i2c_init_flag = TRUE;
"
6680,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\common\device_config_load.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\common\device_config_load.c,"memcpy(temp_value, p_start, len);",120,1,"        }
        
        memcpy(temp_value, p_start, len);
        temp_value[len] = '\0';

"
6681,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\common\device_config_load.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\common\device_config_load.c,"memcpy(g_json_table[i].value, &temp, dec_len);",120,1,"            dec_len = tuya_light_tool_str_to_dec(temp_value, len, &temp);     

            memcpy(g_json_table[i].value, &temp, dec_len);
        } else {
    #if ((LIGHT_CFG_ENABLE_GAMMA == 1) & (LIGHT_CFG_GAMMA_CAL == 0))
"
6683,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\common\device_config_load.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\common\device_config_load.c,"memcpy(&sg_device_cfg, p_config, SIZEOF(device_config_t));",120,1,"    _device_cfg_data_init();

    memcpy(&sg_device_cfg, p_config, SIZEOF(device_config_t));

    sg_oem_config_load_flag = TRUE;
"
6684,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\common\device_config_load.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\common\device_config_load.c,"memcpy(p_json_ver, sg_device_cfg.Jsonver, SIZEOF(sg_device_cfg.Jsonver));",120,1,"    CHECK_LOAD_FINISH();

    memcpy(p_json_ver, sg_device_cfg.Jsonver, SIZEOF(sg_device_cfg.Jsonver));
    
    return LIGHT_OK;
"
6685,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\common\device_config_load.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\common\device_config_load.c,"memcpy(p_category, sg_device_cfg.category, 5);",120,1,"    CHECK_LOAD_FINISH();

    memcpy(p_category, sg_device_cfg.category, 5);
    
    return LIGHT_OK;
"
6686,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\common\device_config_load.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\common\device_config_load.c,"memcpy(p_module, &sg_device_cfg.module[0], strlen(sg_device_cfg.module));",120,1,"    *p_len = strlen(sg_device_cfg.module);

    memcpy(p_module, &sg_device_cfg.module[0], strlen(sg_device_cfg.module));

    return LIGHT_OK;
"
6702,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_control.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_control.c,"memcpy(sg_light_ctrl_data.scene, SCENE_DATA_DEFAULT_C, strlen(SCENE_DATA_DEFAULT_C));",120,1,"    switch (sg_light_cfg_data.light_way) {
        case LIGHT_C:
            memcpy(sg_light_ctrl_data.scene, SCENE_DATA_DEFAULT_C, strlen(SCENE_DATA_DEFAULT_C));
            break;

"
6703,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_control.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_control.c,"memcpy(sg_light_ctrl_data.scene, SCENE_DATA_DEFAULT_CW, strlen(SCENE_DATA_DEFAULT_CW));",120,1,"
        case LIGHT_CW:
            memcpy(sg_light_ctrl_data.scene, SCENE_DATA_DEFAULT_CW, strlen(SCENE_DATA_DEFAULT_CW));
            break;

"
6704,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_control.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_control.c,"memcpy(sg_light_ctrl_data.scene, SCENE_DATA_DEFAULT_RGB, strlen(SCENE_DATA_DEFAULT_RGB));",120,1,"
        case LIGHT_RGB:
            memcpy(sg_light_ctrl_data.scene, SCENE_DATA_DEFAULT_RGB, strlen(SCENE_DATA_DEFAULT_RGB));
            break;

"
6708,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_control.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_control.c,"memcpy(&sg_light_cfg_data, config_data, SIZEOF(light_ctrl_cfg_t));",120,1,"
    memset(&sg_light_cfg_data, 0, SIZEOF(light_ctrl_cfg_t));
    memcpy(&sg_light_cfg_data, config_data, SIZEOF(light_ctrl_cfg_t));
    memset(&sg_light_ctrl_handle, 0, SIZEOF(light_ctrl_handle_t));

"
6712,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_control.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_control.c,"memcpy(&sg_light_ctrl_data.scene, &app_data.scene, SIZEOF(app_data.scene));",120,1,"        sg_light_ctrl_data.color_origin.value = app_data.color_origin.value;
        strcpy((CHAR_T*)&sg_light_ctrl_data.color_origin.color_str, (CHAR_T*)&app_data.color_origin.color_str);
        memcpy(&sg_light_ctrl_data.scene, &app_data.scene, SIZEOF(app_data.scene));
        sg_light_ctrl_data.scene_first_set = TRUE;
        sg_light_ctrl_data.countdown = 0;
"
6715,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_control.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_control.c,"memcpy(&sg_light_ctrl_data.color_origin, color_origin, SIZEOF(color_origin_t));",120,1,"    //as exist realtime control dp, the ightCtrlData.color will equal to the control data
    if (color_origin != NULL) {
        memcpy(&sg_light_ctrl_data.color_origin, color_origin, SIZEOF(color_origin_t));    //must save the origin data 
    }

"
6716,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_control.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_control.c,"memcpy(&sg_light_ctrl_data.color, color, SIZEOF(color_rgb_t));",120,1,"    }

    memcpy(&sg_light_ctrl_data.color, color, SIZEOF(color_rgb_t));

    tuya_light_ctrl_data_rgb_response(color_origin);
"
6719,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_control.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_control.c,"memcpy(original_color, &sg_light_ctrl_data.color_origin, SIZEOF(color_origin_t));",120,1,"
    PR_DEBUG(""color original %s"", sg_light_ctrl_data.color_origin.color_str);
    memcpy(original_color, &sg_light_ctrl_data.color_origin, SIZEOF(color_origin_t));

    return LIGHT_OK;
"
6722,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_control.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_control.c,"memcpy(&sg_light_ctrl_handle.current_val, &sg_light_ctrl_handle.target_val, SIZEOF(sg_light_ctrl_handle.target_val));",120,1,"
        case SCENE_JUMP:
            memcpy(&sg_light_ctrl_handle.current_val, &sg_light_ctrl_handle.target_val, SIZEOF(sg_light_ctrl_handle.target_val));

            ret = tuya_light_set_rgbcw(sg_light_ctrl_handle.current_val.red, sg_light_ctrl_handle.current_val.green, sg_light_ctrl_handle.current_val.blue, \
"
6724,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_control.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_control.c,"memcpy(&sg_light_ctrl_handle.current_val, &sg_light_ctrl_handle.target_val, SIZEOF(bright_data_t));",120,1,"
        //make sure current value = target value
        memcpy(&sg_light_ctrl_handle.current_val, &sg_light_ctrl_handle.target_val, SIZEOF(bright_data_t));
        if (ret != OPRT_OK) {
                PR_ERR(""Light ctrl turn on set RGBCW error!"");
"
6725,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_control.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_control.c,"memcpy(&sg_light_ctrl_data.color_origin, &(extend_data->color_origin), SIZEOF(color_origin_t));",120,1,"        sg_light_ctrl_data.mode = COLOR_MODE;    //change mode to color mode

        memcpy(&sg_light_ctrl_data.color_origin, &(extend_data->color_origin), SIZEOF(color_origin_t));    //must save the origin data

        memcpy(&sg_light_ctrl_data.color, &(extend_data->color), SIZEOF(color_rgb_t));
"
6726,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_control.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_control.c,"memcpy(&sg_light_ctrl_data.color, &(extend_data->color), SIZEOF(color_rgb_t));",120,1,"        memcpy(&sg_light_ctrl_data.color_origin, &(extend_data->color_origin), SIZEOF(color_origin_t));    //must save the origin data

        memcpy(&sg_light_ctrl_data.color, &(extend_data->color), SIZEOF(color_rgb_t));

        if (active_immed) {
"
6732,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_control.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_control.c,"memcpy(&music_ctrl_data, &sg_light_ctrl_data, SIZEOF(light_ctrl_data_t));",120,1,"            light_ctrl_data_t music_ctrl_data;
            memset(&music_ctrl_data, 0, sizeof(light_ctrl_data_t));
            memcpy(&music_ctrl_data, &sg_light_ctrl_data, SIZEOF(light_ctrl_data_t));     //make sure music mode restart as red color

            music_ctrl_data.color.red = CTRL_RGB_BRIGHT_VALUE_MAX;
"
6741,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_control.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_control.c,"memcpy(&save_data.scene, &sg_light_ctrl_data.scene, SIZEOF(sg_light_ctrl_data.scene));",120,1,"    save_data.color_origin.value  = sg_light_ctrl_data.color_origin.value;
    strcpy((CHAR_T*)&save_data.color_origin.color_str, (CHAR_T*)&sg_light_ctrl_data.color_origin.color_str);
    memcpy(&save_data.scene, &sg_light_ctrl_data.scene, SIZEOF(sg_light_ctrl_data.scene));

#if 0
"
6747,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_prod.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_prod.c,"memcpy(s_aging_time_list, target_time[light_num], 3 * (SIZEOF(UCHAR_T)));",120,1,"
        light_num = sg_prod_config_data.light_way - 1;     //attention: light way range from 1 to 5!
        memcpy(s_aging_time_list, target_time[light_num], 3 * (SIZEOF(UCHAR_T)));

        PR_NOTICE(""Aging time C --> %d W --> %d RGB --> %d"", s_aging_time_list[0], s_aging_time_list[1], s_aging_time_list[2]);
"
6748,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_driver\user_pwm.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_driver\user_pwm.c,"memcpy(&sg_pwm_init_config, pwm_init, SIZEOF(user_pwm_init_t));",120,1,"    }
    
    memcpy(&sg_pwm_init_config, pwm_init, SIZEOF(user_pwm_init_t));

    switch (sg_pwm_init_config.channel_num) {
"
6749,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_driver\user_pwm.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_driver\user_pwm.c,"memcpy(sg_pwm_init_config.list, list_temp, SIZEOF(sg_pwm_init_config.list));",120,1,"        case 1: // 1 way -- C 
            list_temp[0] = sg_pwm_init_config.list[3];
            memcpy(sg_pwm_init_config.list, list_temp, SIZEOF(sg_pwm_init_config.list));
            break;

"
6758,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_system\light_init.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_system\light_init.c,"memcpy(device_cfg.cmod, ""c"", sizeof(device_cfg.cmod));",120,1,"#if (DEMO_LIGHT_WAY == CMOD_C)
    //light C                       
    memcpy(device_cfg.cmod, ""c"", sizeof(device_cfg.cmod)); // don't modify! 
    device_cfg.dmod = DMOD_PWM;                     // don't modify! 
    device_cfg.cwtype = CW_TYPE;                    // don't modify! 
"
6760,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_system\light_init.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_system\light_init.c,"memcpy(device_cfg.wfcfg, ""spcl"", strlen(""spcl""));",120,1,"    
    memset(device_cfg.wfcfg, 0, SIZEOF(device_cfg.wfcfg));
    memcpy(device_cfg.wfcfg, ""spcl"", strlen(""spcl""));                      //GWCM_SPCL_MODE
    device_cfg.remdmode = 0;                        //blink mode
    device_cfg.rstnum = 3;                          //The number of resets triggers the distribution network
"
6761,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_system\light_init.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_system\light_init.c,"memcpy(device_cfg.cmod, ""cw"", sizeof(device_cfg.cmod));",120,1,"#if (DEMO_LIGHT_WAY == CMOD_CW)
    // light CW
    memcpy(device_cfg.cmod, ""cw"", sizeof(device_cfg.cmod));                     // don't modify! 
    device_cfg.dmod = DMOD_PWM;                     // don't modify! 
    device_cfg.cwtype = CW_TYPE;                    //CCT_TYPE;  // CW or CCT 
"
6764,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_system\light_init.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_system\light_init.c,"memcpy(device_cfg.cmod, ""rgbcw"", sizeof(device_cfg.cmod));",120,1,"    #if (DEMO_LIHGT_DRIVE_MODE == DMOD_PWM)
        // light RGB
        memcpy(device_cfg.cmod, ""rgbcw"", sizeof(device_cfg.cmod));                  // don't modify! 
        device_cfg.dmod = DMOD_PWM;                    
        device_cfg.cwtype = CW_TYPE;//CCT_TYPE;         
"
6767,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_system\light_system.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_system\light_system.c,"memcpy(color_origin.color_str, root->value.dp_str, SIZEOF(color_origin.color_str));",120,1,"        //灯要显示的颜色转换为RGB数据
        _light_sys_color_to_rgb(root->value.dp_str, &color_data.red, &color_data.green, &color_data.blue);
        memcpy(color_origin.color_str, root->value.dp_str, SIZEOF(color_origin.color_str));

        //设置灯的RGB数据 
"
6768,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_system\light_system.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_system\light_system.c,"memcpy(p_config, DEFAULT_CONFIG, strlen(DEFAULT_CONFIG));",120,1,"                p_config = (CHAR_T *)Malloc(1024);
                if (p_config != NULL) {
                    memcpy(p_config, DEFAULT_CONFIG, strlen(DEFAULT_CONFIG));
                }
                /* load default oem cfg!!!! */
"
6771,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\airkiss\airkiss.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\airkiss\airkiss.c,"akconf->memcpy(_akcontext->usr_data + seq*4, data, 4);",120,1,"            if((_akcontext->seq_success_map & (1 << seq)) == 0)  
            { 
                akconf->memcpy(_akcontext->usr_data + seq*4, data, 4); 
                _akcontext->seq_success_map |= (1 << seq); 
            } 
"
6773,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\airkiss\airkiss.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\airkiss\airkiss.c,"memcpy(result, _akcontext, sizeof(airkiss_result_t));",120,1,"                            airkiss_result_t* result) 
{ 
    memcpy(result, _akcontext, sizeof(airkiss_result_t)); 
    return 0; 
} 
"
6779,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\airkiss\airkiss_main.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\airkiss\airkiss_main.c,"os_memcpy(airkiss_read_buf, read_buf, AIRKISS_RECV_BUFSIZE);",120,1,"
        GLOBAL_INT_DISABLE();
        os_memcpy(airkiss_read_buf, read_buf, AIRKISS_RECV_BUFSIZE);
        airkiss_read_size = read_size;
        GLOBAL_INT_RESTORE();
"
6780,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\config\param_config.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\config\param_config.c,"os_memcpy(mac, DEFAULT_MAC_ADDR, 6);",120,1,"    int val = 0;

    os_memcpy(mac, DEFAULT_MAC_ADDR, 6);
    val = prandom_get();

"
6782,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\config\param_config.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\config\param_config.c,"os_memcpy(mac, system_mac, 6);",120,1,"        u8 mac_low;

        os_memcpy(mac, system_mac, 6);
        mac_low = mac[5];

"
6784,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\config\param_config.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\config\param_config.c,"os_memcpy(system_mac, mac, 6);",120,1,"	if(1 == ret)
	{
		os_memcpy(system_mac, mac, 6);
	}
	
"
6786,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\ftp\ftpd.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\ftp\ftpd.c,"memcpy(f->buffer + i, buf, f->size - i);",120,1,"    if(i + len > f->size)
    {
        memcpy(f->buffer + i, buf, f->size - i);
        buf += f->size - i;
        len -= f->size - i;
"
6787,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\ftp\ftpd.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\ftp\ftpd.c,"memcpy(f->buffer + i, buf, len);",120,1,"        i = 0;
    }
    memcpy(f->buffer + i, buf, len);
    f->writepos = i + len;

"
6797,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\ftp\vfs.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\ftp\vfs.c,"memcpy(dir_ent.name, fi.fname, sizeof(fi.fname));",120,1,"    if (r != FR_OK) return NULL;
    if (fi.fname[0] == 0) return NULL;
    memcpy(dir_ent.name, fi.fname, sizeof(fi.fname));
    return &dir_ent;
}
"
6802,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\http\utils_httpc.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\http\utils_httpc.c,"os_memcpy(scheme, scheme_ptr, host_ptr - scheme_ptr);",120,1,"        return ERROR_HTTP_PARSE;
    }
    os_memcpy(scheme, scheme_ptr, host_ptr - scheme_ptr);
    scheme[host_ptr - scheme_ptr] = '\0';

"
6803,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\http\utils_httpc.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\http\utils_httpc.c,"os_memcpy(host, host_ptr, host_len);",120,1,"        return ERROR_HTTP_PARSE;
    }
    os_memcpy(host, host_ptr, host_len);
    host[host_len] = '\0';

"
6804,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\http\utils_httpc.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\http\utils_httpc.c,"os_memcpy(path, path_ptr, path_len);",120,1,"        return ERROR_HTTP_PARSE;
    }
    os_memcpy(path, path_ptr, path_len);
    path[path_len] = '\0';

"
6806,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\http\utils_httpc.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\http\utils_httpc.c,"os_memcpy(send_buf + idx, buf, cp_len);",120,1,"        }

        os_memcpy(send_buf + idx, buf, cp_len);
        idx += cp_len;
        len -= cp_len;
"
6810,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\http\utils_httpc.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\http\utils_httpc.c,"os_memcpy(bk_http_ptr->wr_buf+bk_http_ptr->wr_last_len,tmp+i,w_l);",120,1,"    {
        w_l = min(len - i, HTTP_FLASH_WR_BUF_MAX-bk_http_ptr->wr_last_len);
        os_memcpy(bk_http_ptr->wr_buf+bk_http_ptr->wr_last_len,tmp+i,w_l);
        i+=w_l;
        bk_http_ptr->wr_last_len+=w_l;
"
6811,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\http\utils_httpc.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\http\utils_httpc.c,"os_memcpy(client_data->response_buf + count, data, len);",120,1,"            int ret, max_len;
            if (count + len < client_data->response_buf_len - 1) {
                os_memcpy(client_data->response_buf + count, data, len);
                count += len;
                client_data->response_buf[count] = '\0';
"
6812,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\http\utils_httpc.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\http\utils_httpc.c,"os_memcpy(client_data->response_buf + count, data, client_data->response_buf_len - 1 - count);",120,1,"                client_data->response_buf[count] = '\0';
            } else {
                os_memcpy(client_data->response_buf + count, data, client_data->response_buf_len - 1 - count);
                client_data->response_buf[client_data->response_buf_len - 1] = '\0';
                return HTTP_RETRIEVE_MORE_DATA;
"
6831,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\net_work\app_drone.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\net_work\app_drone.c,"os_memcpy(ap_info.ssid.array, APP_DRONE_DEF_SSID, os_strlen(APP_DRONE_DEF_SSID));",120,1,"        ap_info.chann = APP_DRONE_DEF_CHANNEL;
        ap_info.cipher_suite = 0;
        os_memcpy(ap_info.ssid.array, APP_DRONE_DEF_SSID, os_strlen(APP_DRONE_DEF_SSID));
        ap_info.key_len = 0;
        os_memset(&ap_info.key, 0, 65);   
"
6835,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\standalone-station\sa_station.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\standalone-station\sa_station.c,"os_memcpy(g_sta_param_ptr->key, g_sta_param_ptr->orig_key, g_sta_param_ptr->orig_key_len);",120,1,"            os_null_printf(""%s:%d %d vs %d\n"", __FUNCTION__, __LINE__, g_sta_param_ptr->key_len, g_sta_param_ptr->orig_key_len);
            g_sta_param_ptr->key_len = g_sta_param_ptr->orig_key_len;
            os_memcpy(g_sta_param_ptr->key, g_sta_param_ptr->orig_key, g_sta_param_ptr->orig_key_len);
        }
        connect_param->chan.freq = rw_ieee80211_get_centre_frequency(g_sta_param_ptr->fast_connect.chann);
"
6845,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\tftp\tftpclient.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\tftp\tftpclient.c,"os_memcpy(&send_hd, src, sizeof(send_hd));",120,1,"    TFTP_WARN (""p_len%d \r\n"", len);

    os_memcpy(&send_hd, src, sizeof(send_hd));
    TFTP_WARN (""seq%d t_seq:%d\r\n"", send_hd.seq, send_hd.total_seq);
    if((block + 1  != send_hd.seq))
"
6846,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\tftp\tftpclient.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\tftp\tftpclient.c,"os_memcpy(&send_hd_bk, &send_hd, sizeof(send_hd));",120,1,"        tftp_crc = 0;
    }
    os_memcpy(&send_hd_bk, &send_hd, sizeof(send_hd));

    if(os_data_addr % 0x1000 == 0)
"
6847,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\tftp\tftpclient.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\tftp\tftpclient.c,"os_memcpy(&or_crc, src + len - TFTP_ALL_CRC_LEN, TFTP_ALL_CRC_LEN);",120,1,"        {
            TFTP_WARN (""seq%d  send over\n"", send_hd.seq);
            os_memcpy(&or_crc, src + len - TFTP_ALL_CRC_LEN, TFTP_ALL_CRC_LEN);
            tftp_crc = co_crc32((UINT32)src, len - TFTP_ALL_CRC_LEN, tftp_crc);
            if(tftp_crc == or_crc)
"
6848,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\common\fifo.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\common\fifo.h,"os_memcpy(fifo->buffer + (fifo->in & (fifo->size - 1)), buffer, l);",120,1,"	/* first put the data starting from fifo->in to buffer end */
	l = min(len, fifo->size - (fifo->in & (fifo->size - 1)));
	os_memcpy(fifo->buffer + (fifo->in & (fifo->size - 1)), buffer, l);

	/* then put the rest (if any) at the beginning of the buffer */
"
6849,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\common\fifo.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\common\fifo.h,"os_memcpy(fifo->buffer, buffer + l, len - l);",120,1,"
	/* then put the rest (if any) at the beginning of the buffer */
	os_memcpy(fifo->buffer, buffer + l, len - l);

	fifo->in += len;
"
6850,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\common\fifo.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\common\fifo.h,"os_memcpy(buffer, fifo->buffer + (fifo->out & (fifo->size - 1)), l);",120,1,"	/* first get the data from fifo->out until the end of the buffer */
	l = min(len, fifo->size - (fifo->out & (fifo->size - 1)));
	os_memcpy(buffer, fifo->buffer + (fifo->out & (fifo->size - 1)), l);

	/* then get the rest (if any) from the beginning of the buffer */
"
6851,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\common\fifo.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\common\fifo.h,"os_memcpy(buffer + l, fifo->buffer, len - l);",120,1,"
	/* then get the rest (if any) from the beginning of the buffer */
	os_memcpy(buffer + l, fifo->buffer, len - l);

	fifo->out += len;
"
6852,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\common\fifo.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\common\fifo.h,"os_memcpy(dst, (void *)(fifo->buffer + off), l);",120,1,"	l = min(len, size - off);

	os_memcpy(dst, (void *)(fifo->buffer + off), l);
	os_memcpy((void *)((unsigned int)dst + l), (void *)fifo->buffer, len - l);
	/*
"
6853,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\common\fifo.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\common\fifo.h,"os_memcpy((void *)((unsigned int)dst + l), (void *)fifo->buffer, len - l);",120,1,"
	os_memcpy(dst, (void *)(fifo->buffer + off), l);
	os_memcpy((void *)((unsigned int)dst + l), (void *)fifo->buffer, len - l);
	/*
	 * make sure that the data is copied before
"
6854,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\demo\ieee802_11_demo.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\demo\ieee802_11_demo.c,"os_memcpy(apList.ApList[i].ssid, scan_rst->res[i]->ssid, 32);",120,1,"        for( i = 0; i < scan_rst->scanu_num; i++ )
        {
            os_memcpy(apList.ApList[i].ssid, scan_rst->res[i]->ssid, 32);
            apList.ApList[i].ApPower = scan_rst->res[i]->level;
        }
"
6856,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\demo\ieee802_11_demo.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\demo\ieee802_11_demo.c,"os_memcpy(temp_ssid, apList.ApList[i].ssid, 32);",120,1,"			char temp_ssid[33];
			os_memset(temp_ssid, 0, 33);
			os_memcpy(temp_ssid, apList.ApList[i].ssid, 32);
			bk_printf(""    %s, RSSI=%d\r\n"", temp_ssid, apList.ApList[i].ApPower);
		}
"
6884,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\demo\ieee802_11_demo.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\demo\ieee802_11_demo.c,"os_memcpy(ssid, linkStatus.ssid, 32);",120,1,"    	os_memset(&linkStatus, 0x0, sizeof(LinkStatusTypeDef));
    	bk_wlan_get_link_status(&linkStatus);
        os_memcpy(ssid, linkStatus.ssid, 32);

    	bk_printf(""sta:rssi=%d,ssid=%s,bssid="" MACSTR "",channel=%d,cipher_type:"",
"
6886,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\demo\ieee802_11_demo.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\demo\ieee802_11_demo.c,"os_memcpy(ssid, ap_info.wifi_ssid, 32);",120,1,"    	os_memset(&ap_info, 0x0, sizeof(network_InitTypeDef_ap_st));
    	bk_wlan_ap_para_info_get(&ap_info);
        os_memcpy(ssid, ap_info.wifi_ssid, 32);
        bk_printf(""softap:ssid=%s,channel=%d,dhcp=%d,cipher_type:"",
    		ssid, ap_info.channel,ap_info.dhcp_mode);
"
6894,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble.c,"memcpy(&common_default_bdaddr, &ble_cfg.mac, sizeof(struct bd_addr));",120,1,"static void ble_main( void *arg )
{
    memcpy(&common_default_bdaddr, &ble_cfg.mac, sizeof(struct bd_addr));
    memcpy(&app_dflt_dev_name, &ble_cfg.name, APP_DEVICE_NAME_LENGTH_MAX); 

"
6895,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble.c,"memcpy(&app_dflt_dev_name, &ble_cfg.name, APP_DEVICE_NAME_LENGTH_MAX);",120,1,"{
    memcpy(&common_default_bdaddr, &ble_cfg.mac, sizeof(struct bd_addr));
    memcpy(&app_dflt_dev_name, &ble_cfg.name, APP_DEVICE_NAME_LENGTH_MAX); 

    if(!ble_dut_flag)
"
6897,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble.c,"memcpy(&ble_cfg.name, ble_name, len);",120,1,"    len = strlen(ble_name);
    len = (len > APP_DEVICE_NAME_LENGTH_MAX)? APP_DEVICE_NAME_LENGTH_MAX:len;
    memcpy(&ble_cfg.name, ble_name, len);
    
    ble_thread_start();
"
6899,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_lib\ip\ble\ll\src\llm\llm_util.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_lib\ip\ble\ll\src\llm\llm_util.h,"memcpy(&adv_device->adv_addr.addr[0], &adv_bd_addr->addr[0], BD_ADDR_LEN);",120,1,"
            // Saves the bd address in the adv filter list
            memcpy(&adv_device->adv_addr.addr[0], &adv_bd_addr->addr[0], BD_ADDR_LEN);
            // Save the type of the device address
            adv_device->adv_type = adv_type;
"
6903,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\ip\ble\profiles\comm\src\comm_task.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\ip\ble\profiles\comm\src\comm_task.c,"memcpy(&ntf_value->value[0],param->value,ntf_value->length);",120,1,"  
    //UART_PRINTF(""fed6_value->handle = 0x%x\r\n"",fed6_value->handle);
    memcpy(&ntf_value->value[0],param->value,ntf_value->length);

    //send notification to peer device
"
6905,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\ip\ble\profiles\comm\src\comm_task.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\ip\ble\profiles\comm\src\comm_task.c,"memcpy(cfm->value,read_req.value,cfm->length);",120,1,"	cfm->handle = param->handle;
	cfm->status = status;
	memcpy(cfm->value,read_req.value,cfm->length);
    
	kernel_msg_send(cfm);
"
6906,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\ip\ble\profiles\comm\src\comm_task.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\ip\ble\profiles\comm\src\comm_task.c,"memcpy(ind->value,&param->value[0],param->length);",120,1,"		
    	// Fill in the parameter structure	
		memcpy(ind->value,&param->value[0],param->length);
        ind->att_id = param->handle - ble_env->start_hdl;;
        ind->prf_id = prf_env->id - TASK_ID_COMMON;
"
6908,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\app\src\app_ble.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\app\src\app_ble.c,"memcpy(app_env.dev_name, APP_DFLT_DEVICE_NAME, APP_DFLT_DEVICE_NAME_LEN);",120,1,"    {
        // Get default Device Name (No name if not enough space)
        memcpy(app_env.dev_name, APP_DFLT_DEVICE_NAME, APP_DFLT_DEVICE_NAME_LEN);
        app_env.dev_name_len = APP_DFLT_DEVICE_NAME_LEN;

"
6909,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\app\src\app_ble.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\app\src\app_ble.c,"os_memcpy(cmd->info.host.adv_data, adv_info.advData, cmd->info.host.adv_data_len);",120,1,"        // Flag value is set by the GAP
        cmd->info.host.adv_data_len       = adv_info.advDataLen;
		os_memcpy(cmd->info.host.adv_data, adv_info.advData, cmd->info.host.adv_data_len);
        cmd->info.host.scan_rsp_data_len  = adv_info.respDataLen;
		os_memcpy(cmd->info.host.scan_rsp_data, adv_info.respData, cmd->info.host.scan_rsp_data_len);
"
6910,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\app\src\app_ble.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\app\src\app_ble.c,"os_memcpy(cmd->info.host.scan_rsp_data, adv_info.respData, cmd->info.host.scan_rsp_data_len);",120,1,"		os_memcpy(cmd->info.host.adv_data, adv_info.advData, cmd->info.host.adv_data_len);
        cmd->info.host.scan_rsp_data_len  = adv_info.respDataLen;
		os_memcpy(cmd->info.host.scan_rsp_data, adv_info.respData, cmd->info.host.scan_rsp_data_len);
        
        
"
6911,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\app\src\app_ble.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\app\src\app_ble.c,"memcpy(&cmd->adv_data[0], adv_buff, adv_len);",120,1,"
        //memcpy
        memcpy(&cmd->adv_data[0], adv_buff, adv_len);
        memcpy(&cmd->scan_rsp_data[0], scan_buff, scan_len);

"
6912,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\app\src\app_ble.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\app\src\app_ble.c,"memcpy(&cmd->scan_rsp_data[0], scan_buff, scan_len);",120,1,"        //memcpy
        memcpy(&cmd->adv_data[0], adv_buff, adv_len);
        memcpy(&cmd->scan_rsp_data[0], scan_buff, scan_len);

        // Send the message
"
6913,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\app\src\app_ble.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\app\src\app_ble.c,"memcpy(name, app_env.dev_name, app_env.dev_name_len);",120,1,"{
    // copy name to provided pointer
    memcpy(name, app_env.dev_name, app_env.dev_name_len);
    // return name length
    return app_env.dev_name_len;
"
6914,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\app\src\app_ble.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\app\src\app_ble.c,"memcpy(dh_key_cmd->operand_1, p_pub_key, GAP_P256_KEY_LEN);",120,1,"                                                            gapm_gen_dh_key_cmd);
    dh_key_cmd->operation = GAPM_GEN_DH_KEY;
    memcpy(dh_key_cmd->operand_1, p_pub_key, GAP_P256_KEY_LEN);
    memcpy(dh_key_cmd->operand_2, p_pub_key + GAP_P256_KEY_LEN, GAP_P256_KEY_LEN);

"
6915,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\app\src\app_ble.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\app\src\app_ble.c,"memcpy(dh_key_cmd->operand_2, p_pub_key + GAP_P256_KEY_LEN, GAP_P256_KEY_LEN);",120,1,"    dh_key_cmd->operation = GAPM_GEN_DH_KEY;
    memcpy(dh_key_cmd->operand_1, p_pub_key, GAP_P256_KEY_LEN);
    memcpy(dh_key_cmd->operand_2, p_pub_key + GAP_P256_KEY_LEN, GAP_P256_KEY_LEN);

    kernel_msg_send(dh_key_cmd);
"
6916,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\app\src\app_comm.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\app\src\app_comm.c,"memcpy(db_cfg, ble_db_cfg, sizeof(struct bk_ble_db_cfg));",120,1,"        //Set parameters
        db_cfg = (struct bk_ble_db_cfg* ) req->param;
        memcpy(db_cfg, ble_db_cfg, sizeof(struct bk_ble_db_cfg));

        kernel_state_set(TASK_APP, APPM_CREATE_DB);
"
6917,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\app\src\app_comm.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\app\src\app_comm.c,"memcpy(req->value, buf, len);",120,1,"
        req->length = len;
        memcpy(req->value, buf, len);
        req->att_id = att_idx;
        req->conidx = 0;
"
6919,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\app\src\app_sdp.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\app\src\app_sdp.c,"memcpy(&cmd->peers[0].addr.addr[0],&ble_scan_list.info[id].adv_addr.addr[0],6);",120,1,"
        cmd->peers[0].addr_type = 0;
        memcpy(&cmd->peers[0].addr.addr[0],&ble_scan_list.info[id].adv_addr.addr[0],6);

		bk_printf(""conn addr = %02x:%02x:%02x:%02x:%02x:%02x\r\n"",cmd->peers[0].addr.addr[0],
"
6920,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\app\src\app_sdp.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\app\src\app_sdp.c,"memcpy(&cmd->peers[0].addr.addr[0],bdaddr,6);",120,1,"
        cmd->peers[0].addr_type = 0;
        memcpy(&cmd->peers[0].addr.addr[0],bdaddr,6);

		bk_printf(""conn addr = %02x:%02x:%02x:%02x:%02x:%02x\r\n"",cmd->peers[0].addr.addr[0],
"
6921,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\app\src\app_sdp.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\app\src\app_sdp.c,"memcpy(req->data,data,len);",120,1,"        req->uuid = uuid;
        req->length = len;
        memcpy(req->data,data,len);
        // Send the message
        kernel_msg_send(req);
"
6922,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\app\src\app_sec.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\app\src\app_sec.c,"memcpy(cfm->data.irk.irk.key, app_env.loc_irk, KEY_LEN);",120,1,"
            // Load IRK
            memcpy(cfm->data.irk.irk.key, app_env.loc_irk, KEY_LEN);
            // load device address
            cfm->data.irk.addr.addr_type = ADDR_PUBLIC;
"
6923,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\app\src\app_sec.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\app\src\app_sec.c,"memcpy(cfm->data.irk.addr.addr.addr,(uint8_t *)&common_default_bdaddr,BD_ADDR_LEN);",120,1,"            // load device address
            cfm->data.irk.addr.addr_type = ADDR_PUBLIC;
            memcpy(cfm->data.irk.addr.addr.addr,(uint8_t *)&common_default_bdaddr,BD_ADDR_LEN);
        } break;

"
6925,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\app\src\app_sec.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\app\src\app_sec.c,"memcpy(&app_env.peer_irk,&param->data.irk.irk.key[0],sizeof(struct gapc_irk));",120,1,"           #endif // (NVDS_SUPPORT)
					 
					memcpy(&app_env.peer_irk,&param->data.irk.irk.key[0],sizeof(struct gapc_irk));
					for(int i = 0;i<sizeof(struct gap_sec_key);i++)
					{
"
6926,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\app\src\app_sec.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\app\src\app_sec.c,"memcpy(&cfm->ltk, &ltk.ltk, sizeof(struct gap_sec_key));",120,1,"                cfm->found    = true;
                cfm->key_size = 16;
                memcpy(&cfm->ltk, &ltk.ltk, sizeof(struct gap_sec_key));
            }
            /*
"
6927,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\app\src\app_task.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\app\src\app_task.c,"memcpy(cmd->irk.key, app_env.loc_irk, KEY_LEN);",120,1,"
                // load IRK
                memcpy(cmd->irk.key, app_env.loc_irk, KEY_LEN);

				// Send message
"
6933,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\app\src\app_task.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\app\src\app_task.c,"memcpy(&ble_scan_list.info[adv_count].adv_addr.addr[0],param->adv_addr.addr, 6);",120,1,"            ble_scan_list.info[adv_count].number = adv_count;
            ble_scan_list.info[adv_count].rssi = param->rssi;
            memcpy(&ble_scan_list.info[adv_count].adv_addr.addr[0],param->adv_addr.addr, 6);
            bk_printf(""adv number = %d\r\n"", ble_scan_list.info[adv_count].number);
            bk_printf(""adv type = %x  :%s\r\n"",ble_scan_list.info[adv_count].adv_type, 
"
6934,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\common\src\common_list.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\common\src\common_list.c,"memcpy(pool, default_value, elmt_size);",120,1,"        if (default_value)
        {
            memcpy(pool, default_value, elmt_size);
        }
        if((i == (elmt_cnt - 1)) && (list_type != POOL_LINKED_LIST))
"
6936,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\common\src\RomCallFlash.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\common\src\RomCallFlash.c,"memcpy(&common_default_bdaddr, addr, sizeof(struct bd_addr));",120,1,"		if(addr != NULL)
		{
			memcpy(&common_default_bdaddr, addr, sizeof(struct bd_addr));
		}
	  
"
6937,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\dbg\src\dbg_task.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\dbg\src\dbg_task.c,"memcpy(meminfo_msg, &meminfo, sizeof(struct hci_dbg_rd_mem_info_cmd_cmp_evt));",120,1,"
    #if (KERNEL_PROFILING)
    memcpy(meminfo_msg, &meminfo, sizeof(struct hci_dbg_rd_mem_info_cmd_cmp_evt));
    meminfo_msg->status = COMMON_ERROR_NO_ERROR;
    #else
"
6939,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\ecc_p256\src\ecc_p256.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\ecc_p256\src\ecc_p256.c,"memcpy(tmpResult2.num, tmpResult.num + i, sizeof(tmpResult2.num));",120,1,"            }
        }
        memcpy(tmpResult2.num, tmpResult.num + i, sizeof(tmpResult2.num));
        setBigNumberLength256(&tmpResult2);

"
6940,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\ecc_p256\src\ecc_p256.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\ecc_p256\src\ecc_p256.c,"memcpy(input->num, (input->num + 1), (8 * sizeof(u_int32)));",120,1,"__INLINE__ void shiftLeftOneArrayElement256(bigHex256 *input)
{
    memcpy(input->num, (input->num + 1), (8 * sizeof(u_int32)));
}

"
6941,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\ecc_p256\src\ecc_p256.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\modules\ecc_p256\src\ecc_p256.c,"memcpy(destination->num, source->num, sizeof(destination->num));",120,1,"__RAM_ECDH __INLINE__ void copyBigHex256(const bigHex256 *source, bigHex256 *destination)
{
    memcpy(destination->num, source->num, sizeof(destination->num)); //for P256 max_octets = 36

    destination->len = source->len;
"
6947,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\plf\refip\src\bim\bim_com.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\plf\refip\src\bim\bim_com.c,"void *udi_memcpy(void *dest, const void *src, size_t count)",120,1,"uint32_t flash_mid = 0;

void *udi_memcpy(void *dest, const void *src, size_t count)
{
    char *tmp = dest;
"
6948,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\plf\refip\src\bim\bim_com.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\plf\refip\src\bim\bim_com.c,"udi_memcpy(&buffer[k], buf, 32);",120,1,"        if(len > 32 * (j + 1))
        {
            udi_memcpy(&buffer[k], buf, 32);
        }
        else
"
6949,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\plf\refip\src\bim\bim_com.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\plf\refip\src\bim\bim_com.c,"udi_memcpy(&buffer[k], buf, len - k);",120,1,"        else
        {
            udi_memcpy(&buffer[k], buf, len - k);
        }
        k += 32;
"
6950,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\plf\refip\src\bim\bim_com.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\plf\refip\src\bim\bim_com.c,"udi_memcpy(buf, &buffer[k], 32);",120,1,"        if(len > 32 * (j + 1))
        {
            udi_memcpy(buf, &buffer[k], 32);
        }
        else
"
6951,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\plf\refip\src\bim\bim_com.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\plf\refip\src\bim\bim_com.c,"udi_memcpy(buf, &buffer[k], len-k);",120,1,"            for(i=0;i<8;i++)
                buf[i]=0xffffffff;
            udi_memcpy(buf, &buffer[k], len-k);      
        }
 
"
6953,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\plf\refip\src\driver\reg\ble_reg_access.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\plf\refip\src\driver\reg\ble_reg_access.h,"memcpy(sys_addr, (void *)(em_addr + EM_BASE_ADDR), len);",120,1,"__INLINE void em_rd(void *sys_addr, uint16_t em_addr, uint16_t len)
{
    memcpy(sys_addr, (void *)(em_addr + EM_BASE_ADDR), len);
}
/// Write bytes to EM
"
6954,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\plf\refip\src\driver\reg\ble_reg_access.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\plf\refip\src\driver\reg\ble_reg_access.h,"memcpy((void *)(em_addr + EM_BASE_ADDR), sys_addr, len);",120,1,"__INLINE void em_wr(void const *sys_addr, uint16_t em_addr, uint16_t len)
{
    memcpy((void *)(em_addr + EM_BASE_ADDR), sys_addr, len);
}

"
6956,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\plf\refip\src\driver\uart\uart.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble\ble_pub\plf\refip\src\driver\uart\uart.c,"memcpy(buf, &(uart_rx_buf[cur_read_buf_idx]), len);",120,1,"{

    memcpy(buf, &(uart_rx_buf[cur_read_buf_idx]), len);
    cur_read_buf_idx+= len;
    return len;
"
6961,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble_5_x_rw\ble_pub\app\src\app_ble.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble_5_x_rw\ble_pub\app\src\app_ble.c,"memcpy(&p_cmd->data[0], adv_buff, adv_len);",120,1,"    {
        // Copy adv data
        memcpy(&p_cmd->data[0], adv_buff, adv_len);
        // Update advertising data length
        p_cmd->length = adv_len;
"
6962,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble_5_x_rw\ble_pub\app\src\app_ble.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble_5_x_rw\ble_pub\app\src\app_ble.c,"memcpy(&p_cmd->data[0], scan_buff, scan_len);",120,1,"
    p_cmd->length = scan_len;
    memcpy(&p_cmd->data[0], scan_buff, scan_len);
	
	// And the next expected operation code for the command completed event
"
6966,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble_5_x_rw\ble_pub\app\src\app_ble_task.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble_5_x_rw\ble_pub\app\src\app_ble_task.c,"memcpy(p_buf + 2, app_ble_ctx.dev_name, dev_name_length);",120,1,"        *(p_buf + 1) = (dev_name_length == app_ble_ctx.dev_name_len) ? '\x09' : '\x08';
        // Copy device name
        memcpy(p_buf + 2, app_ble_ctx.dev_name, dev_name_length);

        // Update advertising data length
"
6970,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble_5_x_rw\ble_pub\app\src\app_task.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble_5_x_rw\ble_pub\app\src\app_task.c,"memcpy(&cmd->addr.addr[0],&co_default_bdaddr.addr[0],BD_ADDR_LEN);",120,1,"                }else
                {
                    memcpy(&cmd->addr.addr[0],&co_default_bdaddr.addr[0],BD_ADDR_LEN);
                    if (cmd->addr.addr[5] & 0xC0)
                    {
"
6971,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble_5_x_rw\ble_pub\app\src\app_task.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble_5_x_rw\ble_pub\app\src\app_task.c,"memcpy(cmd->irk.key, app_ble_ctx.loc_irk, 16);",120,1,"                    (nvds_get(NVDS_TAG_LOC_IRK, &key_len, app_ble_ctx.loc_irk) == NVDS_OK))
                {
                    memcpy(cmd->irk.key, app_ble_ctx.loc_irk, 16);
                }
                else
"
6973,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble_5_x_rw\ble_pub\app\src\app_task.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble_5_x_rw\ble_pub\app\src\app_task.c,"memcpy(&cmd->irk.key[0], &app_ble_ctx.loc_irk[0], KEY_LEN);",120,1,"                ///  - GAPM_SET_IRK
                cmd->operation = GAPM_SET_IRK;
                memcpy(&cmd->irk.key[0], &app_ble_ctx.loc_irk[0], KEY_LEN);
                kernel_msg_send(cmd);
            }
"
6975,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble_5_x_rw\ble_pub\app\src\app_task.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble_5_x_rw\ble_pub\app\src\app_task.c,"memcpy(app_ble_ctx.con_dev_addr[get_app_ble_conidx()].addr.addr,param->peer_addr.addr,6);",120,1,"        app_ble_ctx.conn_intv = param->con_interval;
        app_ble_ctx.con_dev_addr[get_app_ble_conidx()].addr_type = param->peer_addr_type;
        memcpy(app_ble_ctx.con_dev_addr[get_app_ble_conidx()].addr.addr,param->peer_addr.addr,6);
        app_ble_ctx.role[get_app_ble_conidx()] = param->role;
        
"
6976,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble_5_x_rw\ble_pub\app\src\app_task.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble_5_x_rw\ble_pub\app\src\app_task.c,"memcpy(&app_ble_ctx.loc_irk[0], &param->randnb.nb[0], 8);",120,1,"    if (app_ble_ctx.rand_cnt==1)      // First part of IRK
    {
        memcpy(&app_ble_ctx.loc_irk[0], &param->randnb.nb[0], 8);
    }
    else if (app_ble_ctx.rand_cnt==2) // Second part of IRK
"
6977,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble_5_x_rw\ble_pub\app\src\app_task.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble_5_x_rw\ble_pub\app\src\app_task.c,"memcpy(&app_ble_ctx.loc_irk[8], &param->randnb.nb[0], 8);",120,1,"    else if (app_ble_ctx.rand_cnt==2) // Second part of IRK
    {
        memcpy(&app_ble_ctx.loc_irk[8], &param->randnb.nb[0], 8);
    }

"
6978,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble_5_x_rw\ble_pub\app\src\app_task.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble_5_x_rw\ble_pub\app\src\app_task.c,"memcpy(adv_param.adv_addr, param->trans_addr.addr.addr, GAP_BD_ADDR_LEN);",120,1,"	adv_param.rssi = param->rssi;
	adv_param.adv_addr_type = param->trans_addr.addr_type;
	memcpy(adv_param.adv_addr, param->trans_addr.addr.addr, GAP_BD_ADDR_LEN);

    ble_recv_adv_cb_handler(&adv_param);
"
6979,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble_5_x_rw\ble_pub\prf\prf_utils.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble_5_x_rw\ble_pub\prf\prf_utils.c,"memcpy(&(svc_req->uuid[0]), uuid,ATT_UUID_128_LEN);",120,1,"
    //set the first two bytes to the value array, LSB to MSB:Health Thermometer Service UUID first
    memcpy(&(svc_req->uuid[0]), uuid,ATT_UUID_128_LEN);

    //send the message to GATT, which will send back the response when it gets it
"
6980,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble_5_x_rw\ble_pub\prf\prf_utils.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble_5_x_rw\ble_pub\prf\prf_utils.c,"memcpy(&wr_char->value[0], value, length);",120,1,"        wr_char->auto_execute   = true;
        // Value
        memcpy(&wr_char->value[0], value, length);

        // Send the message
"
6981,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble_5_x_rw\ble_pub\prf\prf_utils.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble_5_x_rw\ble_pub\prf\prf_utils.c,"memcpy(&(rsp->value[0]), &(read_ind->value[0]), length);",120,1,"    {
        rsp->handle = read_ind->handle;
        memcpy(&(rsp->value[0]), &(read_ind->value[0]), length);
    }

"
6987,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble_5_x_rw\ble_pub\ui\ble_ui.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble_5_x_rw\ble_pub\ui\ble_ui.c,"memcpy(name, app_ble_ctx.dev_name, app_ble_ctx.dev_name_len);",120,1,"{
    // copy name to provided pointer
    memcpy(name, app_ble_ctx.dev_name, app_ble_ctx.dev_name_len);
    // return name length
    return app_ble_ctx.dev_name_len;
"
6988,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble_5_x_rw\ble_pub\ui\ble_ui.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble_5_x_rw\ble_pub\ui\ble_ui.c,"memcpy(app_ble_ctx.dev_name, name, len);",120,1,"    {   
        app_ble_ctx.dev_name_len = len;
        memcpy(app_ble_ctx.dev_name, name, len);
        // return name length
        return app_ble_ctx.dev_name_len;
"
6991,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble_5_x_rw\platform\7231n\driver\reg\ble_reg_access.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble_5_x_rw\platform\7231n\driver\reg\ble_reg_access.h,"memcpy((void *)(dst_em_addr + EM_BASE_ADDR), (void *)(src_em_addr + EM_BASE_ADDR), len);",120,1,"__INLINE void em_cpy(uint16_t dst_em_addr, uint16_t src_em_addr, uint16_t len)
{
    memcpy((void *)(dst_em_addr + EM_BASE_ADDR), (void *)(src_em_addr + EM_BASE_ADDR), len);
}

"
6995,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble_5_x_rw\platform\7231n\driver\uart\uart_ble.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble_5_x_rw\platform\7231n\driver\uart\uart_ble.c,"memcpy((void *)&host_cmd_data.data_buf[0], bufptr, length);",120,1,"	BLE_ASSERT_ERR(length <= HCI_DATA_BUF_SIZE);
	host_cmd_data.callback = NULL;		////Test Only
	memcpy((void *)&host_cmd_data.data_buf[0], bufptr, length);
	host_cmd_data.data_len = length;
	ble_send_msg(BLE_MSG_DUT);
"
6996,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble_5_x_rw\platform\7231n\driver\uart\uart_ble.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble_5_x_rw\platform\7231n\driver\uart\uart_ble.c,"memcpy((void *)&host_event_data.data_buf[data_len], uart_env.uart_tx_buf, uart_env.uart_tx_length);",120,1,"
        uart_env.uart_tx_enable = 0;
        memcpy((void *)&host_event_data.data_buf[data_len], uart_env.uart_tx_buf, uart_env.uart_tx_length);
        data_len += uart_env.uart_tx_length;
        host_event_data.data_len += uart_env.uart_tx_length;
"
6997,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble_5_x_rw\platform\7231n\driver\uart\uart_ble.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\ble_5_x_rw\platform\7231n\driver\uart\uart_ble.c,"memcpy((void *)uart_env.uart_rx_buf, (void *)&host_cmd_data.data_buf[data_len], uart_env.uart_rx_length);",120,1,"            uart_env.uart_rx_enable = 0;

            memcpy((void *)uart_env.uart_rx_buf, (void *)&host_cmd_data.data_buf[data_len], uart_env.uart_rx_length);

            data_len += uart_env.uart_rx_length;
"
7005,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\dma\dma.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\dma\dma.c,"gdma_memcpy((void *)ddesc->dest, (void *)ddesc->src, ddesc->length);",120,1,"        ASSERT(ddesc->length < 2300);
#if  CFG_GENERAL_DMA
        gdma_memcpy((void *)ddesc->dest, (void *)ddesc->src, ddesc->length);
#else
        os_memcpy((void *)ddesc->dest, (void *)ddesc->src, ddesc->length);
"
7006,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\dma\dma.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\dma\dma.c,"os_memcpy((void *)ddesc->dest, (void *)ddesc->src, ddesc->length);",120,1,"        gdma_memcpy((void *)ddesc->dest, (void *)ddesc->src, ddesc->length);
#else
        os_memcpy((void *)ddesc->dest, (void *)ddesc->src, ddesc->length);
#endif
        push_len += ddesc->length;
"
7010,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\general_dma\general_dma.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\general_dma\general_dma.c,"void *gdma_memcpy(void *out, const void *in, UINT32 n)",120,1,"
/*Before using this fuction, please config general dma moudule first*/
void *gdma_memcpy(void *out, const void *in, UINT32 n)
{
    GLOBAL_INT_DECLARATION();
"
7013,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\include\general_dma_pub.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\include\general_dma_pub.h,"void *gdma_memcpy(void *out, const void *in, UINT32 n);",120,1,"void gdma_init(void);
void gdma_exit(void);
void *gdma_memcpy(void *out, const void *in, UINT32 n);

#endif  // CFG_GENERAL_DMA
"
7019,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\sdio\sdio.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\sdio\sdio.c,"os_memcpy(user_buf, mem_node_ptr->addr, len);",120,1,"        {
            len = MIN(count, mem_node_ptr->length);
            os_memcpy(user_buf, mem_node_ptr->addr, len);
            ret = mem_node_ptr->length;

"
7021,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\sdio\sdio.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\sdio\sdio.c,"os_memcpy(mem_node_ptr->addr, user_buf, count);",120,1,"        if(mem_node_ptr)
        {
            os_memcpy(mem_node_ptr->addr, user_buf, count);
            su_push_node(&sdio.tx_dat, mem_node_ptr);
            sdio_ctrl(SDIO_CMD_SET_TX_VALID, 0);
"
7023,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\sdio\sdma.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\driver\sdio\sdma.c,"os_memcpy(buf, src, len);",120,1,"
    src = (UINT8 *)REG_SDMA_CMD_BA;
    os_memcpy(buf, src, len);

    return;
"
7048,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\bk7221U_cal.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\bk7221U_cal.c,"os_memcpy(grc_reg_map, bk7011_trx_val, sizeof(INT32) * 29);",120,1,"#endif

    os_memcpy(grc_reg_map, bk7011_trx_val, sizeof(INT32) * 29);
    while(BK7011RCBEKEN.REG0x1->value & 0x0FFFFFFF)
    {
"
7051,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\bk7221U_cal.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\bk7221U_cal.c,"os_memcpy(i_tbl_addr, (UINT16 *)&i_table_val[0], 256 * 2);",120,1,"    BK7011RCBEKEN.REG0x4C->bits.DPDEN = 0;

    os_memcpy(i_tbl_addr, (UINT16 *)&i_table_val[0], 256 * 2);
    os_memcpy(q_tbl_addr, (UINT16 *)&q_table_val[0], 256 * 2);

"
7052,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\bk7221U_cal.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\bk7221U_cal.c,"os_memcpy(q_tbl_addr, (UINT16 *)&q_table_val[0], 256 * 2);",120,1,"
    os_memcpy(i_tbl_addr, (UINT16 *)&i_table_val[0], 256 * 2);
    os_memcpy(q_tbl_addr, (UINT16 *)&q_table_val[0], 256 * 2);

#if 1
"
7053,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\bk7221U_cal.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\bk7221U_cal.c,"memcpy(cTemp, bk7011_rc_val, sizeof(bk7011_rc_val));",120,1,"	flash_erase_sector(CAL_RESULT_FLASH_ADDR);

	memcpy(cTemp, bk7011_rc_val, sizeof(bk7011_rc_val));
	memcpy(cTemp+sizeof(bk7011_rc_val), bk7011_trx_val, sizeof(bk7011_trx_val));
//	memset(cTemp, 0, sizeof(cTemp));
"
7054,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\bk7221U_cal.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\bk7221U_cal.c,"memcpy(cTemp+sizeof(bk7011_rc_val), bk7011_trx_val, sizeof(bk7011_trx_val));",120,1,"
	memcpy(cTemp, bk7011_rc_val, sizeof(bk7011_rc_val));
	memcpy(cTemp+sizeof(bk7011_rc_val), bk7011_trx_val, sizeof(bk7011_trx_val));
//	memset(cTemp, 0, sizeof(cTemp));
	flash_write(cTemp, sizeof(cTemp), CAL_RESULT_FLASH_ADDR);
"
7056,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\bk7221U_cal.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\bk7221U_cal.c,"memcpy(bk7011_rc_val, cTemp, sizeof(bk7011_rc_val));",120,1,"	else
	{
		memcpy(bk7011_rc_val, cTemp, sizeof(bk7011_rc_val));
		memcpy(bk7011_trx_val, cTemp+sizeof(bk7011_rc_val), sizeof(bk7011_trx_val));
		rwnx_cal_load_default_result();
"
7057,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\bk7221U_cal.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\bk7221U_cal.c,"memcpy(bk7011_trx_val, cTemp+sizeof(bk7011_rc_val), sizeof(bk7011_trx_val));",120,1,"	{
		memcpy(bk7011_rc_val, cTemp, sizeof(bk7011_rc_val));
		memcpy(bk7011_trx_val, cTemp+sizeof(bk7011_rc_val), sizeof(bk7011_trx_val));
		rwnx_cal_load_default_result();
		rwnx_cal_load_trx_rcbekn_reg_val();
"
7059,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\bk7221U_cal.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\bk7221U_cal.c,"memcpy(bk7011_trx_val, bk7011_trx_val1, sizeof(bk7011_trx_val));",120,1,"    
//    printf(""calibration_main: %s %s\r\n"", __DATE__, __TIME__);
    memcpy(bk7011_trx_val, bk7011_trx_val1, sizeof(bk7011_trx_val));
    memcpy(bk7011_rc_val, bk7011_rc_val1, sizeof(bk7011_rc_val));

"
7060,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\bk7221U_cal.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\bk7221U_cal.c,"memcpy(bk7011_rc_val, bk7011_rc_val1, sizeof(bk7011_rc_val));",120,1,"//    printf(""calibration_main: %s %s\r\n"", __DATE__, __TIME__);
    memcpy(bk7011_trx_val, bk7011_trx_val1, sizeof(bk7011_trx_val));
    memcpy(bk7011_rc_val, bk7011_rc_val1, sizeof(bk7011_rc_val));

    //REG_WRITE((0x0802800 + (18 * 4)), 0x02);
"
7061,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\bk7231N_cal.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\bk7231N_cal.c,"memcpy(cali_result, &gcali_result, sizeof(gcali_result));",120,1,"void rwnx_cal_read_current_cal_result(BK7011_CALI_RESULT *cali_result)
{
    memcpy(cali_result, &gcali_result, sizeof(gcali_result));
}

"
7063,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\bk7231N_cal.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\bk7231N_cal.c,"os_memcpy(rx_dc_gain_tab, gcali_result.g_rx_dc_gain_tab, sizeof(gcali_result.g_rx_dc_gain_tab));",120,1,"    *rx_phase_err_wr = gcali_result.grx_phase_err_wr;
    *rx_amp_err_wr = gcali_result.grx_amp_err_wr;
    os_memcpy(rx_dc_gain_tab, gcali_result.g_rx_dc_gain_tab, sizeof(gcali_result.g_rx_dc_gain_tab));
}

"
7066,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\bk7231N_cal.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\bk7231N_cal.c,"memcpy(cTemp, BK7231N_RC_RAM, sizeof(BK7231N_RC_RAM));",120,1,"	flash_erase_sector(CAL_RESULT_FLASH_ADDR);

	memcpy(cTemp, BK7231N_RC_RAM, sizeof(BK7231N_RC_RAM));
	memcpy(cTemp+sizeof(BK7231N_RC_RAM), BK7231N_TRX_RAM, sizeof(BK7231N_TRX_RAM));
//	memset(cTemp, 0, sizeof(cTemp));
"
7067,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\bk7231N_cal.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\bk7231N_cal.c,"memcpy(cTemp+sizeof(BK7231N_RC_RAM), BK7231N_TRX_RAM, sizeof(BK7231N_TRX_RAM));",120,1,"
	memcpy(cTemp, BK7231N_RC_RAM, sizeof(BK7231N_RC_RAM));
	memcpy(cTemp+sizeof(BK7231N_RC_RAM), BK7231N_TRX_RAM, sizeof(BK7231N_TRX_RAM));
//	memset(cTemp, 0, sizeof(cTemp));
	flash_write(cTemp, sizeof(cTemp), CAL_RESULT_FLASH_ADDR);
"
7069,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\bk7231N_cal.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\bk7231N_cal.c,"memcpy(BK7231N_RC_RAM, cTemp, sizeof(BK7231N_RC_RAM));",120,1,"	else
	{
		memcpy(BK7231N_RC_RAM, cTemp, sizeof(BK7231N_RC_RAM));
		memcpy(BK7231N_TRX_RAM, cTemp+sizeof(BK7231N_RC_RAM), sizeof(BK7231N_TRX_RAM));
		rwnx_cal_load_default_result();
"
7070,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\bk7231N_cal.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\bk7231N_cal.c,"memcpy(BK7231N_TRX_RAM, cTemp+sizeof(BK7231N_RC_RAM), sizeof(BK7231N_TRX_RAM));",120,1,"	{
		memcpy(BK7231N_RC_RAM, cTemp, sizeof(BK7231N_RC_RAM));
		memcpy(BK7231N_TRX_RAM, cTemp+sizeof(BK7231N_RC_RAM), sizeof(BK7231N_TRX_RAM));
		rwnx_cal_load_default_result();
		rwnx_cal_load_trx_rcbekn_reg_val();
"
7072,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\bk7231N_cal.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\bk7231N_cal.c,"memcpy(&BK7231N_TRX_RAM, BK7231N_TRX_ROM, sizeof(BK7231N_TRX_RAM));",120,1,"#endif

    memcpy(&BK7231N_TRX_RAM, BK7231N_TRX_ROM, sizeof(BK7231N_TRX_RAM));
    memcpy(&BK7231N_RC_RAM, BK7231N_RC_ROM, sizeof(BK7231N_RC_RAM));

"
7073,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\bk7231N_cal.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\bk7231N_cal.c,"memcpy(&BK7231N_RC_RAM, BK7231N_RC_ROM, sizeof(BK7231N_RC_RAM));",120,1,"
    memcpy(&BK7231N_TRX_RAM, BK7231N_TRX_ROM, sizeof(BK7231N_TRX_RAM));
    memcpy(&BK7231N_RC_RAM, BK7231N_RC_ROM, sizeof(BK7231N_RC_RAM));

    //REG_WRITE((0x0802800 + (18 * 4)), 0x02);
"
7094,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\bk7231_cal.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\bk7231_cal.c,"memcpy(cTemp + sizeof(bk7011_rc_val), bk7011_trx_val, sizeof(bk7011_trx_val));",120,1,"
    memcpy(cTemp, bk7011_rc_val, sizeof(bk7011_rc_val));
    memcpy(cTemp + sizeof(bk7011_rc_val), bk7011_trx_val, sizeof(bk7011_trx_val));

    flash_write(cTemp, sizeof(cTemp), CAL_RESULT_FLASH_ADDR);
"
7097,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\bk7231_cal.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\bk7231_cal.c,"memcpy(bk7011_trx_val, cTemp + sizeof(bk7011_rc_val), sizeof(bk7011_trx_val));",120,1,"    {
        memcpy(bk7011_rc_val, cTemp, sizeof(bk7011_rc_val));
        memcpy(bk7011_trx_val, cTemp + sizeof(bk7011_rc_val), sizeof(bk7011_trx_val));
        rwnx_cal_load_default_result();
        rwnx_cal_load_trx_rcbekn_reg_val();
"
7099,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231.c,"os_memcpy(&gtxpwr_tab_n[channel], &gtxpwr_tab_g[channel], sizeof(TXPWR_ST));",120,1,"    if(is_g_rate) {
        // need save n20 
        os_memcpy(&gtxpwr_tab_n[channel], &gtxpwr_tab_g[channel], sizeof(TXPWR_ST));
        manual_cal_adjust_fitting(&gtxpwr_tab_n[channel], g_dif_g_n20);
        MCAL_PRT(""fit n20 tab with dist:%d\r\n"", g_dif_g_n20);
"
7100,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231.c,"os_memcpy(&tab_ptr[i], &tab_ptr_temp[i], sizeof(TXPWR_ST));",120,1,"    
    for(i=0; i<WLAN_2_4_G_CHANNEL_NUM; i++) {
        os_memcpy(&tab_ptr[i], &tab_ptr_temp[i], sizeof(TXPWR_ST));
        manual_cal_adjust_fitting(&tab_ptr[i], differ);
    }
"
7102,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231.c,"os_memcpy(read_buf+addr_offset, buf, len);",120,1,"    }

    os_memcpy(read_buf+addr_offset, buf, len);

	hal_flash_lock();
"
7104,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231.c,"os_memcpy(gtxpwr_tab_b, gtxpwr_tab_def_b, sizeof(gtxpwr_tab_def_b));",120,1,"    #if TXPWR_DEFAULT_TAB
    if(!(is_ready_flash & TXPWR_TAB_B_RD)) {
        os_memcpy(gtxpwr_tab_b, gtxpwr_tab_def_b, sizeof(gtxpwr_tab_def_b));
        MCAL_WARN(""Load default txpwr for b:%p\r\n"", gtxpwr_tab_def_b);
    }
"
7105,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231.c,"os_memcpy(gtxpwr_tab_g, gtxpwr_tab_def_g, sizeof(gtxpwr_tab_def_g));",120,1,"
    if(!(is_ready_flash & TXPWR_TAB_G_RD)) {
        os_memcpy(gtxpwr_tab_g, gtxpwr_tab_def_g, sizeof(gtxpwr_tab_def_g));
        MCAL_WARN(""Load default txpwr for g:%p\r\n"", gtxpwr_tab_def_g);

"
7106,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231.c,"os_memcpy(gtxpwr_tab_n_40, gtxpwr_tab_def_n_40, sizeof(gtxpwr_tab_def_n_40));",120,1,"    
    if(!(is_ready_flash & TXPWR_TAB_N_RD)) {
        os_memcpy(gtxpwr_tab_n_40, gtxpwr_tab_def_n_40, sizeof(gtxpwr_tab_def_n_40));
        MCAL_WARN(""Load default txpwr for n40:%p\r\n"", gtxpwr_tab_def_n_40);
    }
"
7107,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231.c,"os_memcpy(tag_txpwr_ptr, &tag_txpwr, sizeof(TAG_TXPWR_ST));",120,1,"            tag_txpwr.head.type= BK_FLASH_OPT_TLV_HEADER;
            tag_txpwr.head.len = len - sizeof(TAG_TXPWR_ST);;
            os_memcpy(tag_txpwr_ptr, &tag_txpwr, sizeof(TAG_TXPWR_ST));

            txpwr_buf = (UINT8 *)(buf + flash_len);
"
7109,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231.c,"os_memcpy(tag_enable_ptr, &tag_enable, sizeof(TAG_ENABLE_ST));",120,1,"    tag_enable.head.len = sizeof(tag_enable.flag);
    tag_enable.flag = (UINT32)is_ready;
    os_memcpy(tag_enable_ptr, &tag_enable, sizeof(TAG_ENABLE_ST));
    txpwr_buf = (UINT8*)(txpwr_buf + sizeof(TAG_ENABLE_ST));    
    
"
7110,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231.c,"os_memcpy(&tag_tab.tab[0], gtxpwr_tab_b, tag_tab.head.len);",120,1,"    tag_tab.head.len = sizeof(TXPWR_ST)*WLAN_2_4_G_CHANNEL_NUM; 
    if(is_ready & TXPWR_TAB_B_RD) {
        os_memcpy(&tag_tab.tab[0], gtxpwr_tab_b, tag_tab.head.len);
    } else if(is_ready_flash & TXPWR_TAB_B_RD) {
        addr = manual_cal_search_txpwr_tab(TXPWR_TAB_B_ID, addr_start);
"
7111,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231.c,"os_memcpy(tag_tab_ptr, &tag_tab, sizeof(TAG_TXPWR_TAB_ST));",120,1,"        }
    }
    os_memcpy(tag_tab_ptr, &tag_tab, sizeof(TAG_TXPWR_TAB_ST));
    txpwr_buf = (UINT8*)(txpwr_buf + sizeof(TAG_TXPWR_TAB_ST));      
    
"
7112,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231.c,"os_memcpy(&tag_tab.tab[0], gtxpwr_tab_g, tag_tab.head.len);",120,1,"    tag_tab.head.len = sizeof(TXPWR_ST)*WLAN_2_4_G_CHANNEL_NUM;
    if(is_ready & TXPWR_TAB_G_RD) {
        os_memcpy(&tag_tab.tab[0], gtxpwr_tab_g, tag_tab.head.len);
    } else if(is_ready_flash & TXPWR_TAB_G_RD) {
        addr = manual_cal_search_txpwr_tab(TXPWR_TAB_G_ID, addr_start);
"
7114,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231.c,"os_memcpy(&tag_tab.tab[0], gtxpwr_tab_n_40, tag_tab.head.len);",120,1,"    tag_tab.head.len = sizeof(TXPWR_ST)*WLAN_2_4_G_CHANNEL_NUM;
    if(is_ready & TXPWR_TAB_N_RD) {
        os_memcpy(&tag_tab.tab[0], gtxpwr_tab_n_40, tag_tab.head.len);
    } else if(is_ready_flash & TXPWR_TAB_N_RD) {
        addr = manual_cal_search_txpwr_tab(TXPWR_TAB_N_ID, addr_start);
"
7116,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231.c,"os_memcpy(tag_dif_ptr, &tag_dif, sizeof(TAG_DIF_ST));",120,1,"    tag_dif.head.len = sizeof(UINT32);
    tag_dif.differ = g_dif_g_n20;
    os_memcpy(tag_dif_ptr, &tag_dif, sizeof(TAG_DIF_ST)); 
    txpwr_buf = (UINT8*)(txpwr_buf + sizeof(TAG_DIF_ST)); 

"
7121,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231.c,"os_memcpy(tag_com_ptr, &tag_com, sizeof(TAG_COMM_ST));",120,1,"    tag_com.head.len = sizeof(tag_com.value);
    tag_com.value = (UINT32)DEFAULT_TXID_ID;
    os_memcpy(tag_com_ptr, &tag_com, sizeof(TAG_COMM_ST));

#if MCAL_SAVE_MAC_ADDR
"
7122,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231.c,"os_memcpy(&tag_mac.arry[0], system_mac, 6);",120,1,"    tag_mac.head.type = TXID_MAC;
    tag_mac.head.len = 6;
    os_memcpy(&tag_mac.arry[0], system_mac, 6);
    os_memcpy(tag_mac_ptr, &tag_mac, sizeof(TAG_CHIPMAC_ST));
    info_buf = (UINT8 *)(info_buf + sizeof(TAG_CHIPMAC_ST)); 
"
7123,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231.c,"os_memcpy(tag_mac_ptr, &tag_mac, sizeof(TAG_CHIPMAC_ST));",120,1,"    tag_mac.head.len = 6;
    os_memcpy(&tag_mac.arry[0], system_mac, 6);
    os_memcpy(tag_mac_ptr, &tag_mac, sizeof(TAG_CHIPMAC_ST));
    info_buf = (UINT8 *)(info_buf + sizeof(TAG_CHIPMAC_ST)); 
#else
"
7132,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231U.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231U.c,"os_memcpy(&tab_ptr[i], base, sizeof(TXPWR_ST));",120,1,"                    
                    // ch19 -ch39 are same with ch20
                    os_memcpy(&tab_ptr[i], base, sizeof(TXPWR_ST));
                    SET_TXPWR_FLAG(&tab_ptr[i], TXPWR_ELEM_UNUSED);
                }            
"
7141,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231U.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231U.c,"os_memcpy(gtxpwr_tab_ble, gtxpwr_tab_def_ble, sizeof(gtxpwr_tab_def_ble));",120,1,"
    if(!(is_ready_flash & TXPWR_TAB_BLE)) {
        os_memcpy(gtxpwr_tab_ble, gtxpwr_tab_def_ble, sizeof(gtxpwr_tab_def_ble));
        MCAL_WARN(""Load default txpwr for ble:%p\r\n"", gtxpwr_tab_def_ble);
    }
"
7153,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231U.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231U.c,"os_memcpy(&tag_tab_ble.tab[0], gtxpwr_tab_ble, tag_tab_ble.head.len);",120,1,"    tag_tab_ble.head.len = sizeof(TXPWR_ST)*BLE_2_4_G_CHANNEL_NUM;
    if(is_ready & TXPWR_TAB_BLE) {
        os_memcpy(&tag_tab_ble.tab[0], gtxpwr_tab_ble, tag_tab_ble.head.len);
    } else if(is_ready_flash & TXPWR_TAB_BLE) {
        addr = manual_cal_search_txpwr_tab(TXPWR_TAB_BLE_ID, addr_start);
"
7154,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231U.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231U.c,"os_memcpy(tag_tab_ble_ptr, &tag_tab_ble, sizeof(TAG_TXPWR_TAB_BLE_ST));",120,1,"        }
    }
    os_memcpy(tag_tab_ble_ptr, &tag_tab_ble, sizeof(TAG_TXPWR_TAB_BLE_ST));
    txpwr_buf = (UINT8*)(txpwr_buf + sizeof(TAG_TXPWR_TAB_BLE_ST)); 

"
7166,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231U.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231U.c,"os_memcpy(tag_lpf_iq_ptr, &tag_lpf_iq, sizeof(TAG_LPF_IQ_ST));",120,1,"    tag_lpf_iq.lpf_q = g_lpf_cal_q; 
    os_printf(""%x, %d, %d, %d\r\n"", TXID_LPFCAP, tag_lpf_iq.head.len, g_lpf_cal_i, g_lpf_cal_q);
    os_memcpy(tag_lpf_iq_ptr, &tag_lpf_iq, sizeof(TAG_LPF_IQ_ST));

    manual_cal_update_flash_area(0, (char *)buf, len);
"
7171,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231U.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231U.c,"os_memcpy(tag_comm_ptr, &tag_comm, sizeof(TAG_COMM_ST));",120,1,"    tag_comm.head.len = sizeof(tag_comm.value);
    tag_comm.value = (UINT32)gtx_dcorMod;
    os_memcpy(tag_comm_ptr, &tag_comm, sizeof(TAG_COMM_ST));
    txpwr_buf = (UINT8*)(txpwr_buf + sizeof(TAG_COMM_ST));

"
7184,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231U.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\bk7011_cal\manual_cal_bk7231U.c,"os_memcpy(tag_rx_dc_ptr, &tag_rx_dc, sizeof(TAG_RX_DC_ST));",120,1,"    tag_rx_dc.value[6] = rx_dc_gain_tab[6];
    tag_rx_dc.value[7] = rx_dc_gain_tab[7];
    os_memcpy(tag_rx_dc_ptr, &tag_rx_dc, sizeof(TAG_RX_DC_ST));
    txpwr_buf = (UINT8*)(txpwr_buf + sizeof(TAG_RX_DC_ST));

"
7190,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\camera_intf\camera_inft.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\camera_intf\camera_inft.c,"os_memcpy(&ejpeg_cfg, data, sizeof(TVIDEO_DESC_ST));",120,1,"{   
    os_memset(&ejpeg_cfg, 0, sizeof(DJPEG_DESC_ST));
    os_memcpy(&ejpeg_cfg, data, sizeof(TVIDEO_DESC_ST));

    ejpeg_cfg.x_pixel = X_PIXEL_640;
"
7196,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,"memcpy(dst, src, 11);",120,1,"

    memcpy(dst, src, 11);

    if (seq > 5)  	/* In case of many collisions, generate a hash number instead of sequential number */
"
7197,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,"memcpy(dirb + 0, dp->dir, SZDIRE);",120,1,"    if (res != FR_OK) return res;
    if (dp->dir[XDIR_Type] != 0x85) return FR_INT_ERR;
    memcpy(dirb + 0, dp->dir, SZDIRE);
    sz_ent = (dirb[XDIR_NumSec] + 1) * SZDIRE;
    if (sz_ent < 3 * SZDIRE || sz_ent > 19 * SZDIRE) return FR_INT_ERR;
"
7198,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,"memcpy(dirb + SZDIRE, dp->dir, SZDIRE);",120,1,"    if (res != FR_OK) return res;
    if (dp->dir[XDIR_Type] != 0xC0) return FR_INT_ERR;
    memcpy(dirb + SZDIRE, dp->dir, SZDIRE);
    if (MAXDIRB(dirb[XDIR_NumName]) > sz_ent) return FR_INT_ERR;

"
7199,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,"if (i < MAXDIRB(_MAX_LFN)) memcpy(dirb + i, dp->dir, SZDIRE);",120,1,"        if (res != FR_OK) return res;
        if (dp->dir[XDIR_Type] != 0xC1) return FR_INT_ERR;
        if (i < MAXDIRB(_MAX_LFN)) memcpy(dirb + i, dp->dir, SZDIRE);
    }
    while ((i += SZDIRE) < sz_ent);
"
7200,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,"memcpy(dp->dir, dirb, SZDIRE);",120,1,"        res = move_window(dp->obj.fs, dp->sect);
        if (res != FR_OK) break;
        memcpy(dp->dir, dirb, SZDIRE);
        dp->obj.fs->wflag = 1;
        if (--nent == 0) break;
"
7202,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,"memcpy(sn, dp->fn, 12);",120,1,"#endif
    /* On the FAT12/16/32 volume */
    memcpy(sn, dp->fn, 12);
    if (sn[NSFLAG] & NS_LOSS)  			/* When LFN is out of 8.3 format, generate a numbered name */
    {
"
7204,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,"memcpy(dp->dir + DIR_Name, dp->fn, 11);	*/",120,1,"        {
            memset(dp->dir, 0, SZDIRE);	/* Clean the entry */
            memcpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
#if _USE_LFN != 0
            dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
"
7208,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,"memcpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));",120,1,"                if (fs->wflag && fs->winsect - sect < cc)
                {
                    memcpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
                }
#else
"
7209,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,"memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));",120,1,"                if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc)
                {
                    memcpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
                }
#endif
"
7210,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,"memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	*/",120,1,"#if _FS_TINY
        if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
        memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
        memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
"
7211,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,"memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	*/",120,1,"        memcpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
        memcpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#endif
    }
"
7212,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,"memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));",120,1,"                if (fs->winsect - sect < cc)  	/* Refill sector cache if it gets invalidated by the direct write */
                {
                    memcpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
                    fs->wflag = 0;
                }
"
7213,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,"memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));",120,1,"                if (fp->sect - sect < cc)   /* Refill sector cache if it gets invalidated by the direct write */
                {
                    memcpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
                    fp->flag &= (BYTE)~FA_DIRTY;
                }
"
7214,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,"memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	*/",120,1,"#if _FS_TINY
        if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
        memcpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
        fs->wflag = 1;
#else
"
7215,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,"memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	*/",120,1,"        fs->wflag = 1;
#else
        memcpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
        fp->flag |= FA_DIRTY;
#endif
"
7218,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,"memcpy(dir + SZDIRE, dir, SZDIRE); 	*/",120,1,"                    st_dword(dir + DIR_ModTime, tm);
                    st_clust(fs, dir, dcl);
                    memcpy(dir + SZDIRE, dir, SZDIRE); 	/* Create "".."" entry */
                    dir[SZDIRE + 1] = '.';
                    pcl = dj.obj.sclust;
"
7220,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,"memcpy(buf, fs->dirbuf, SZDIRE * 2);	*/",120,1,"                WORD nh;

                memcpy(buf, fs->dirbuf, SZDIRE * 2);	/* Save 85+C0 entry of old object */
                memcpy(&djn, &djo, sizeof djo);
                res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
"
7221,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,"memcpy(&djn, &djo, sizeof djo);",120,1,"
                memcpy(buf, fs->dirbuf, SZDIRE * 2);	/* Save 85+C0 entry of old object */
                memcpy(&djn, &djo, sizeof djo);
                res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
                if (res == FR_OK)  						/* Is new name already in use by any other object? */
"
7222,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,"memcpy(fs->dirbuf, buf, SZDIRE * 2);",120,1,"                        nn = fs->dirbuf[XDIR_NumName];
                        nh = ld_word(fs->dirbuf + XDIR_NameHash);
                        memcpy(fs->dirbuf, buf, SZDIRE * 2);
                        fs->dirbuf[XDIR_NumSec] = nf;
                        fs->dirbuf[XDIR_NumName] = nn;
"
7223,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,"memcpy(buf, djo.dir + DIR_Attr, 21);	*/",120,1,"            {
                /* At FAT12/FAT16/FAT32 */
                memcpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
                memcpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
                res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
"
7224,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,"memcpy(&djn, &djo, sizeof (DIR));		*/",120,1,"                /* At FAT12/FAT16/FAT32 */
                memcpy(buf, djo.dir + DIR_Attr, 21);	/* Save information about the object except name */
                memcpy(&djn, &djo, sizeof (DIR));		/* Duplicate the directory object */
                res = follow_path(&djn, path_new);		/* Make sure if new object name is not in use */
                if (res == FR_OK)  						/* Is new name already in use by any other object? */
"
7225,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,"memcpy(dir + 13, buf + 2, 19);",120,1,"                    {
                        dir = djn.dir;					/* Copy information about object except name */
                        memcpy(dir + 13, buf + 2, 19);
                        dir[DIR_Attr] = buf[0] | AM_ARC;
                        fs->wflag = 1;
"
7226,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,"memcpy(dj.dir + XDIR_Label, dirvn, slen);",120,1,"            {
                dj.dir[XDIR_NumLabel] = (BYTE)(slen / 2);	/* Change the volume label */
                memcpy(dj.dir + XDIR_Label, dirvn, slen);
            }
            else
"
7227,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,"memcpy(dj.dir, dirvn, 11);	*/",120,1,"                if (slen)
                {
                    memcpy(dj.dir, dirvn, 11);	/* Change the volume label */
                }
                else
"
7230,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,"memcpy(dj.dir, dirvn, 11);",120,1,"                        {
                            dj.dir[DIR_Attr] = AM_VOL;		/* Create volume label entry */
                            memcpy(dj.dir, dirvn, 11);
                        }
                        fs->wflag = 1;
"
7236,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,"memcpy(buf + BS_JmpBoot, ""\xEB\x76\x90"" ""EXFAT   "", 11);	*/",120,1,"            /* Main record (+0) */
            memset(buf, 0, ss);
            memcpy(buf + BS_JmpBoot, ""\xEB\x76\x90"" ""EXFAT   "", 11);	/* Boot jump code (x86), OEM name */
            st_dword(buf + BPB_VolOfsEx, b_vol);					/* Volume offset in the physical drive [sector] */
            st_dword(buf + BPB_TotSecEx, sz_vol);					/* Volume size [sector] */
"
7240,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,"memcpy(buf + BS_JmpBoot, ""\xEB\xFE\x90"" ""MSDOS5.0"", 11);*/",120,1,"        /* Create FAT VBR */
        memset(buf, 0, ss);
        memcpy(buf + BS_JmpBoot, ""\xEB\xFE\x90"" ""MSDOS5.0"", 11);/* Boot jump code (x86), OEM name */
        st_word(buf + BPB_BytsPerSec, ss);				/* Sector size [byte] */
        buf[BPB_SecPerClus] = (BYTE)pau;				/* Cluster size [sector] */
"
7241,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,"memcpy(buf + BS_VolLab32, ""NO NAME    "" ""FAT32   "", 19);	*/",120,1,"            buf[BS_DrvNum32] = 0x80;					/* Drive number (for int13) */
            buf[BS_BootSig32] = 0x29;					/* Extended boot signature */
            memcpy(buf + BS_VolLab32, ""NO NAME    "" ""FAT32   "", 19);	/* Volume label, FAT signature */
        }
        else
"
7242,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\fatfs\ff.c,"memcpy(buf + BS_VolLab, ""NO NAME    "" ""FAT     "", 19);	*/",120,1,"            buf[BS_DrvNum] = 0x80;						/* Drive number (for int13) */
            buf[BS_BootSig] = 0x29;						/* Extended boot signature */
            memcpy(buf + BS_VolLab, ""NO NAME    "" ""FAT     "", 19);	/* Volume label, FAT signature */
        }
        st_word(buf + BS_55AA, 0xAA55);					/* Signature (offset is fixed here regardless of sector size) */
"
7255,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\bk_patch\fake_socket.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\bk_patch\fake_socket.c,"os_memcpy(sk_msg->msg, buf, len);",120,1,"	sk_msg->msg = data_buf;
	
	os_memcpy(sk_msg->msg, buf, len);

	GLOBAL_INT_DISABLE();
"
7256,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\bk_patch\fake_socket.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\bk_patch\fake_socket.c,"os_memcpy((void *)buf, (void *)sk_msg->msg, count);",120,1,"		ASSERT(sk_msg);
		SK_PRT(""r1:%d,buf:0x%x, len:%d\r\n"", sk, buf, count);
		os_memcpy((void *)buf, (void *)sk_msg->msg, count);

		ret = count;
"
7261,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\hostapd\main_none.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\hostapd\main_none.c,"os_memcpy(bss->ssid.ssid, g_ap_param_ptr->ssid.array, bss->ssid.ssid_len);",120,1,"
	bss->ssid.ssid_len = g_ap_param_ptr->ssid.length;
	os_memcpy(bss->ssid.ssid, g_ap_param_ptr->ssid.array, bss->ssid.ssid_len);
	bss->max_listen_interval = 65535;
	bss->ieee802_1x = 0;	
"
7262,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\hostapd\main_none.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\hostapd\main_none.c,"os_memcpy(bss->ssid.wep.key[0], wep_key, g_ap_param_ptr->key_len);",120,1,"			const char *wep_key = (char *)g_ap_param_ptr->key;
			if(g_ap_param_ptr->key_len == 5){
				os_memcpy(bss->ssid.wep.key[0], wep_key, g_ap_param_ptr->key_len);
			}else if(g_ap_param_ptr->key_len == 10){
				for(i = 0; i < bss->ssid.wep.len[0]; i ++){
"
7264,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\hostapd\main_none.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\hostapd\main_none.c,"os_memcpy(hapd->own_addr, b, ETH_ALEN);",120,1,"	}

    os_memcpy(hapd->own_addr, b, ETH_ALEN);
	params.own_addr = hapd->own_addr;

"
7266,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\hostapd\main_none.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\hostapd\main_none.c,"os_memcpy(ap_iface_buf, CFG_AP_IFACE_CONFIG,(strlen(CFG_AP_IFACE_CONFIG) + 1));",120,1,"		return -1;
	
	os_memcpy(ap_iface_buf, CFG_AP_IFACE_CONFIG,(strlen(CFG_AP_IFACE_CONFIG) + 1));
	if (os_program_init())
	{
"
7271,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ap_list.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ap_list.c,"os_memcpy(ap->addr, addr, ETH_ALEN);",120,1,"
	/* initialize AP info data */
	os_memcpy(ap->addr, addr, ETH_ALEN);
	ap_ap_list_add(iface, ap);
	iface->num_ap++;
"
7272,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\beacon.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\beacon.c,"os_memcpy(eid, hapd->conf->bss_load_test, 5);",120,1,"		*eid++ = WLAN_EID_BSS_LOAD;
		*eid++ = 5;
		os_memcpy(eid, hapd->conf->bss_load_test, 5);
		eid += 5;
		return eid;
"
7273,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\beacon.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\beacon.c,"os_memcpy(pos, hapd->iconf->country, 3); */",120,1,"	*pos++ = WLAN_EID_COUNTRY;
	pos++; /* length will be set later */
	os_memcpy(pos, hapd->iconf->country, 3); /* e.g., 'US ' */
	pos += 3;

"
7274,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\beacon.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\beacon.c,"os_memcpy(eid, ie, ielen);",120,1,"		return eid;

	os_memcpy(eid, ie, ielen);
	return eid + ielen;
}
"
7275,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\beacon.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\beacon.c,"os_memcpy(resp->da, req->sa, ETH_ALEN);",120,1,"					   WLAN_FC_STYPE_PROBE_RESP);
	if (req)
		os_memcpy(resp->da, req->sa, ETH_ALEN);
	os_memcpy(resp->sa, hapd->own_addr, ETH_ALEN);

"
7276,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\beacon.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\beacon.c,"os_memcpy(resp->sa, hapd->own_addr, ETH_ALEN);",120,1,"	if (req)
		os_memcpy(resp->da, req->sa, ETH_ALEN);
	os_memcpy(resp->sa, hapd->own_addr, ETH_ALEN);

	os_memcpy(resp->bssid, hapd->own_addr, ETH_ALEN);
"
7277,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\beacon.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\beacon.c,"os_memcpy(resp->bssid, hapd->own_addr, ETH_ALEN);",120,1,"	os_memcpy(resp->sa, hapd->own_addr, ETH_ALEN);

	os_memcpy(resp->bssid, hapd->own_addr, ETH_ALEN);
	resp->u.probe_resp.beacon_int =
		host_to_le16(hapd->iconf->beacon_int);
"
7278,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\beacon.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\beacon.c,"os_memcpy(pos, hapd->conf->ssid.ssid, hapd->conf->ssid.ssid_len);",120,1,"	*pos++ = WLAN_EID_SSID;
	*pos++ = hapd->conf->ssid.ssid_len;
	os_memcpy(pos, hapd->conf->ssid.ssid, hapd->conf->ssid.ssid_len);
	pos += hapd->conf->ssid.ssid_len;

"
7279,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\beacon.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\beacon.c,"os_memcpy(pos, wpabuf_head(hapd->iface->fst_ies),",120,1,"#ifdef CONFIG_FST
	if (hapd->iface->fst_ies) {
		os_memcpy(pos, wpabuf_head(hapd->iface->fst_ies),
			  wpabuf_len(hapd->iface->fst_ies));
		pos += wpabuf_len(hapd->iface->fst_ies);
"
7280,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\beacon.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\beacon.c,"os_memcpy(pos, wpabuf_head(hapd->wps_probe_resp_ie),",120,1,"#ifdef CONFIG_WPS
	if (hapd->conf->wps_state && hapd->wps_probe_resp_ie) {
		os_memcpy(pos, wpabuf_head(hapd->wps_probe_resp_ie),
			  wpabuf_len(hapd->wps_probe_resp_ie));
		pos += wpabuf_len(hapd->wps_probe_resp_ie);
"
7281,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\beacon.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\beacon.c,"os_memcpy(pos, wpabuf_head(hapd->p2p_probe_resp_ie),",120,1,"	if ((hapd->conf->p2p & P2P_ENABLED) && is_p2p &&
	    hapd->p2p_probe_resp_ie) {
		os_memcpy(pos, wpabuf_head(hapd->p2p_probe_resp_ie),
			  wpabuf_len(hapd->p2p_probe_resp_ie));
		pos += wpabuf_len(hapd->p2p_probe_resp_ie);
"
7282,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\beacon.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\beacon.c,"os_memcpy(pos, wpabuf_head(hapd->conf->vendor_elements),",120,1,"
	if (hapd->conf->vendor_elements) {
		os_memcpy(pos, wpabuf_head(hapd->conf->vendor_elements),
			  wpabuf_len(hapd->conf->vendor_elements));
		pos += wpabuf_len(hapd->conf->vendor_elements);
"
7283,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\beacon.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\beacon.c,"os_memcpy(info->addr, addr, ETH_ALEN);",120,1,"	/* Add a new entry */
	info = os_zalloc(sizeof(*info));
	os_memcpy(info->addr, addr, ETH_ALEN);
	os_get_reltime(&info->last_seen);

"
7285,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\beacon.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\beacon.c,"os_memcpy(head->sa, hapd->own_addr, ETH_ALEN);",120,1,"	os_memset(head->da, 0xff, ETH_ALEN);

	os_memcpy(head->sa, hapd->own_addr, ETH_ALEN);
	os_memcpy(head->bssid, hapd->own_addr, ETH_ALEN);
	head->u.beacon.beacon_int =
"
7286,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\beacon.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\beacon.c,"os_memcpy(head->bssid, hapd->own_addr, ETH_ALEN);",120,1,"
	os_memcpy(head->sa, hapd->own_addr, ETH_ALEN);
	os_memcpy(head->bssid, hapd->own_addr, ETH_ALEN);
	head->u.beacon.beacon_int =
		host_to_le16(hapd->iconf->beacon_int);
"
7289,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\beacon.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\beacon.c,"os_memcpy(tailpos, wpabuf_head(hapd->conf->vendor_elements),",120,1,"
	if (hapd->conf->vendor_elements) {
		os_memcpy(tailpos, wpabuf_head(hapd->conf->vendor_elements),
			  wpabuf_len(hapd->conf->vendor_elements));
		tailpos += wpabuf_len(hapd->conf->vendor_elements);
"
7294,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\hostapd.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\hostapd.c,"os_memcpy(hapd->own_addr, conf->bssid, ETH_ALEN);",120,1,"		} else {
			/* Allocate the configured BSSID. */
			os_memcpy(hapd->own_addr, conf->bssid, ETH_ALEN);

			if (hostapd_mac_comp(hapd->own_addr,
"
7295,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\hostapd.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\hostapd.c,"os_memcpy(conf->ssid.ssid, ssid, conf->ssid.ssid_len);",120,1,"		set_ssid = 0;
		conf->ssid.ssid_len = ssid_len;
		os_memcpy(conf->ssid.ssid, ssid, conf->ssid.ssid_len);
	}

"
7297,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\hostapd.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\hostapd.c,"os_memcpy(country, hapd->iconf->country, 3);",120,1,"			previous_country[0] = '\0';

		os_memcpy(country, hapd->iconf->country, 3);
		country[3] = '\0';
		if (hostapd_set_country(hapd, country) < 0) {
"
7298,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\hostapd.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\hostapd.c,"os_memcpy(hapd->own_addr, prev_addr, ETH_ALEN);",120,1,"		hapd = iface->bss[j];
		if (j)
			os_memcpy(hapd->own_addr, prev_addr, ETH_ALEN);
		if (hostapd_setup_bss(hapd, j == 0)) {
			do {
"
7300,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\hostapd.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\hostapd.c,"os_memcpy(beacon->head, params.head, params.head_len);",120,1,"		goto free_ap_extra_ies;

	os_memcpy(beacon->head, params.head, params.head_len);
	beacon->head_len = params.head_len;

"
7301,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\hostapd.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\hostapd.c,"os_memcpy(beacon->tail, params.tail, params.tail_len);",120,1,"		goto free_beacon;

	os_memcpy(beacon->tail, params.tail, params.tail_len);
	beacon->tail_len = params.tail_len;

"
7304,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\hw_features.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\hw_features.c,"os_memcpy(iface->basic_rates, basic_rates, i * sizeof(int));",120,1,"	iface->basic_rates = os_malloc(i * sizeof(int));
	if (iface->basic_rates)
		os_memcpy(iface->basic_rates, basic_rates, i * sizeof(int));

    if(iface->current_rates)
"
7307,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11.c,"os_memcpy(key, &now.sec, 4);",120,1,"			os_get_time(&now);
			r = os_random();
			os_memcpy(key, &now.sec, 4);
			os_memcpy(key + 4, &r, 4);
			rc4_skip(key, sizeof(key), 0, sta->challenge, WLAN_AUTH_CHALLENGE_LEN);
"
7308,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11.c,"os_memcpy(key + 4, &r, 4);",120,1,"			r = os_random();
			os_memcpy(key, &now.sec, 4);
			os_memcpy(key + 4, &r, 4);
			rc4_skip(key, sizeof(key), 0, sta->challenge, WLAN_AUTH_CHALLENGE_LEN);
		}
"
7309,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11.c,"os_memcpy(reply->da, dst, ETH_ALEN);",120,1,"	reply->frame_control = IEEE80211_FC(WLAN_FC_TYPE_MGMT,
					    WLAN_FC_STYPE_AUTH);
	os_memcpy(reply->da, dst, ETH_ALEN);
	os_memcpy(reply->sa, hapd->own_addr, ETH_ALEN);
	os_memcpy(reply->bssid, bssid, ETH_ALEN);
"
7310,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11.c,"os_memcpy(reply->sa, hapd->own_addr, ETH_ALEN);",120,1,"					    WLAN_FC_STYPE_AUTH);
	os_memcpy(reply->da, dst, ETH_ALEN);
	os_memcpy(reply->sa, hapd->own_addr, ETH_ALEN);
	os_memcpy(reply->bssid, bssid, ETH_ALEN);

"
7311,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11.c,"os_memcpy(reply->bssid, bssid, ETH_ALEN);",120,1,"	os_memcpy(reply->da, dst, ETH_ALEN);
	os_memcpy(reply->sa, hapd->own_addr, ETH_ALEN);
	os_memcpy(reply->bssid, bssid, ETH_ALEN);

	reply->u.auth.auth_alg = host_to_le16(auth_alg);
"
7312,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11.c,"os_memcpy(reply->u.auth.variable, ies, ies_len);",120,1,"
	if (ies && ies_len)
		os_memcpy(reply->u.auth.variable, ies, ies_len);

	wpa_printf(MSG_DEBUG, ""authentication reply: STA="" MACSTR
"
7313,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11.c,"os_memcpy(pos, other->own_addr, ETH_ALEN);",120,1,"			*pos++ = WLAN_EID_NEIGHBOR_REPORT;
			*pos++ = 13;
			os_memcpy(pos, other->own_addr, ETH_ALEN);
			pos += ETH_ALEN;
			info = 0; /* TODO: BSSID Information */
"
7315,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11.c,"os_memcpy(reply.da, addr, ETH_ALEN);",120,1,"	reply.frame_control =
		IEEE80211_FC(WLAN_FC_TYPE_MGMT, WLAN_FC_STYPE_DEAUTH);
	os_memcpy(reply.da, addr, ETH_ALEN);
	os_memcpy(reply.sa, hapd->own_addr, ETH_ALEN);
	os_memcpy(reply.bssid, hapd->own_addr, ETH_ALEN);
"
7316,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11.c,"os_memcpy(reply.sa, hapd->own_addr, ETH_ALEN);",120,1,"		IEEE80211_FC(WLAN_FC_TYPE_MGMT, WLAN_FC_STYPE_DEAUTH);
	os_memcpy(reply.da, addr, ETH_ALEN);
	os_memcpy(reply.sa, hapd->own_addr, ETH_ALEN);
	os_memcpy(reply.bssid, hapd->own_addr, ETH_ALEN);

"
7317,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11.c,"os_memcpy(reply.bssid, hapd->own_addr, ETH_ALEN);",120,1,"	os_memcpy(reply.da, addr, ETH_ALEN);
	os_memcpy(reply.sa, hapd->own_addr, ETH_ALEN);
	os_memcpy(reply.bssid, hapd->own_addr, ETH_ALEN);

	send_len = IEEE80211_HDRLEN + sizeof(reply.u.deauth) - VARIABLE_ARRAY_SPARE;
"
7319,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11.c,"os_memcpy(reply->da, sta->addr, ETH_ALEN);",120,1,"			     (reassoc ? WLAN_FC_STYPE_REASSOC_RESP :
			      WLAN_FC_STYPE_ASSOC_RESP));
	os_memcpy(reply->da, sta->addr, ETH_ALEN);
	os_memcpy(reply->sa, hapd->own_addr, ETH_ALEN);
	os_memcpy(reply->bssid, hapd->own_addr, ETH_ALEN);
"
7321,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11.c,"os_memcpy(reply->bssid, hapd->own_addr, ETH_ALEN);",120,1,"	os_memcpy(reply->da, sta->addr, ETH_ALEN);
	os_memcpy(reply->sa, hapd->own_addr, ETH_ALEN);
	os_memcpy(reply->bssid, hapd->own_addr, ETH_ALEN);

	send_len = IEEE80211_HDRLEN;
"
7322,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11.c,"os_memcpy(p, wpabuf_head(hapd->iface->fst_ies),",120,1,"#ifdef CONFIG_FST
	if (hapd->iface->fst_ies) {
		os_memcpy(p, wpabuf_head(hapd->iface->fst_ies),
			  wpabuf_len(hapd->iface->fst_ies));
		p += wpabuf_len(hapd->iface->fst_ies);
"
7323,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11.c,"os_memcpy(p, wpabuf_head(wps), wpabuf_len(wps));",120,1,"		struct wpabuf *wps = wps_build_assoc_resp_ie();
		if (wps) {
			os_memcpy(p, wpabuf_head(wps), wpabuf_len(wps));
			p += wpabuf_len(wps);
			wpabuf_free(wps);
"
7324,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11.c,"os_memcpy(p, wpabuf_head(p2p_resp_ie),",120,1,"		p2p_resp_ie = p2p_group_assoc_resp_ie(hapd->p2p_group, status);
		if (p2p_resp_ie) {
			os_memcpy(p, wpabuf_head(p2p_resp_ie),
				  wpabuf_len(p2p_resp_ie));
			p += wpabuf_len(p2p_resp_ie);
"
7325,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11.c,"os_memcpy(resp, mgmt, len);",120,1,"		if (resp == NULL)
			return 0;
		os_memcpy(resp, mgmt, len);
		os_memcpy(resp->da, resp->sa, ETH_ALEN);
		os_memcpy(resp->sa, hapd->own_addr, ETH_ALEN);
"
7326,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11.c,"os_memcpy(resp->da, resp->sa, ETH_ALEN);",120,1,"			return 0;
		os_memcpy(resp, mgmt, len);
		os_memcpy(resp->da, resp->sa, ETH_ALEN);
		os_memcpy(resp->sa, hapd->own_addr, ETH_ALEN);
		os_memcpy(resp->bssid, hapd->own_addr, ETH_ALEN);
"
7329,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11_auth.c,"os_memcpy(query->addr, addr, ETH_ALEN);",120,1,"		}
		os_get_reltime(&query->timestamp);
		os_memcpy(query->addr, addr, ETH_ALEN);
		if (hostapd_radius_acl_query(hapd, addr, query)) {
			wpa_printf(MSG_DEBUG, ""Failed to send Access-Request ""
"
7330,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11_auth.c,"os_memcpy(query->auth_msg, msg, len);",120,1,"			return HOSTAPD_ACL_REJECT;
		}
		os_memcpy(query->auth_msg, msg, len);
		query->auth_msg_len = len;
		query->next = hapd->acl_queries;
"
7331,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11_auth.c,"os_memcpy(strpassphrase, passphrase, passphraselen);",120,1,"		psk = os_zalloc(sizeof(struct hostapd_sta_wpa_psk_short));
		if (strpassphrase && psk) {
			os_memcpy(strpassphrase, passphrase, passphraselen);
			pbkdf2_sha1(strpassphrase,
				    hapd->conf->ssid.ssid,
"
7332,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11_auth.c,"os_memcpy(cache->addr, query->addr, sizeof(cache->addr));",120,1,"	}
	os_get_reltime(&cache->timestamp);
	os_memcpy(cache->addr, query->addr, sizeof(cache->addr));
	if (hdr->code == RADIUS_CODE_ACCESS_ACCEPT) {
		u8 *buf;
"
7333,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11_auth.c,"os_memcpy(cache->identity, buf, len);",120,1,"			cache->identity = os_zalloc(len + 1);
			if (cache->identity)
				os_memcpy(cache->identity, buf, len);
		}
		if (radius_msg_get_attr_ptr(
"
7334,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11_auth.c,"os_memcpy(cache->radius_cui, buf, len);",120,1,"			cache->radius_cui = os_zalloc(len + 1);
			if (cache->radius_cui)
				os_memcpy(cache->radius_cui, buf, len);
		}

"
7338,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11_ht.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11_ht.c,"os_memcpy(neg_ht_cap, ht_cap, sizeof(*neg_ht_cap));",120,1,"	if (ht_cap == NULL)
		return;
	os_memcpy(neg_ht_cap, ht_cap, sizeof(*neg_ht_cap));
	cap = le_to_host16(neg_ht_cap->ht_capabilities_info);

"
7340,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11_shared.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11_shared.c,"os_memcpy(mgmt.da, addr, ETH_ALEN);",120,1,"	mgmt.frame_control = IEEE80211_FC(WLAN_FC_TYPE_MGMT,
					  WLAN_FC_STYPE_ACTION);
	os_memcpy(mgmt.da, addr, ETH_ALEN);
	os_memcpy(mgmt.sa, hapd->own_addr, ETH_ALEN);
	os_memcpy(mgmt.bssid, hapd->own_addr, ETH_ALEN);
"
7341,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11_shared.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11_shared.c,"os_memcpy(mgmt.sa, hapd->own_addr, ETH_ALEN);",120,1,"					  WLAN_FC_STYPE_ACTION);
	os_memcpy(mgmt.da, addr, ETH_ALEN);
	os_memcpy(mgmt.sa, hapd->own_addr, ETH_ALEN);
	os_memcpy(mgmt.bssid, hapd->own_addr, ETH_ALEN);
	mgmt.u.action.category = WLAN_ACTION_SA_QUERY;
"
7342,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11_shared.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11_shared.c,"os_memcpy(mgmt.bssid, hapd->own_addr, ETH_ALEN);",120,1,"	os_memcpy(mgmt.da, addr, ETH_ALEN);
	os_memcpy(mgmt.sa, hapd->own_addr, ETH_ALEN);
	os_memcpy(mgmt.bssid, hapd->own_addr, ETH_ALEN);
	mgmt.u.action.category = WLAN_ACTION_SA_QUERY;
	mgmt.u.action.u.sa_query_req.action = WLAN_SA_QUERY_REQUEST;
"
7344,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11_shared.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11_shared.c,"os_memcpy(resp.da, sa, ETH_ALEN);",120,1,"	resp.frame_control = IEEE80211_FC(WLAN_FC_TYPE_MGMT,
					  WLAN_FC_STYPE_ACTION);
	os_memcpy(resp.da, sa, ETH_ALEN);
	os_memcpy(resp.sa, hapd->own_addr, ETH_ALEN);
	os_memcpy(resp.bssid, hapd->own_addr, ETH_ALEN);
"
7345,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11_shared.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11_shared.c,"os_memcpy(resp.sa, hapd->own_addr, ETH_ALEN);",120,1,"					  WLAN_FC_STYPE_ACTION);
	os_memcpy(resp.da, sa, ETH_ALEN);
	os_memcpy(resp.sa, hapd->own_addr, ETH_ALEN);
	os_memcpy(resp.bssid, hapd->own_addr, ETH_ALEN);
	resp.u.action.category = WLAN_ACTION_SA_QUERY;
"
7346,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11_shared.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11_shared.c,"os_memcpy(resp.bssid, hapd->own_addr, ETH_ALEN);",120,1,"	os_memcpy(resp.da, sa, ETH_ALEN);
	os_memcpy(resp.sa, hapd->own_addr, ETH_ALEN);
	os_memcpy(resp.bssid, hapd->own_addr, ETH_ALEN);
	resp.u.action.category = WLAN_ACTION_SA_QUERY;
	resp.u.action.u.sa_query_req.action = WLAN_SA_QUERY_RESPONSE;
"
7347,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11_shared.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11_shared.c,"os_memcpy(pos, hapd->conf->qos_map_set, len);",120,1,"	*pos++ = WLAN_EID_QOS_MAP_SET;
	*pos++ = len;
	os_memcpy(pos, hapd->conf->qos_map_set, len);
	pos += len;

"
7348,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11_shared.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11_shared.c,"os_memcpy(pos, hapd->conf->hessid, ETH_ALEN);",120,1,"
	if (!is_zero_ether_addr(hapd->conf->hessid)) {
		os_memcpy(pos, hapd->conf->hessid, ETH_ALEN);
		pos += ETH_ALEN;
	}
"
7349,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11_shared.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11_shared.c,"os_memcpy(eid, wpabuf_head(hapd->time_adv),",120,1,"		return eid;

	os_memcpy(eid, wpabuf_head(hapd->time_adv),
		  wpabuf_len(hapd->time_adv));
	eid += wpabuf_len(hapd->time_adv);
"
7350,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11_shared.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\ieee802_11_shared.c,"os_memcpy(eid, hapd->conf->time_zone, len);",120,1,"	*eid++ = WLAN_EID_TIME_ZONE;
	*eid++ = len;
	os_memcpy(eid, hapd->conf->time_zone, len);
	eid += len;

"
7351,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\sta_info.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\sta_info.c,"os_memcpy(sta->addr, addr, ETH_ALEN);",120,1,"
	/* initialize STA info data */
	os_memcpy(sta->addr, addr, ETH_ALEN);
	sta->next = hapd->sta_list;
	hapd->sta_list = sta;
"
7353,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wmm.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wmm.c,"os_memcpy(m->da, addr, ETH_ALEN);",120,1,"	m->frame_control = IEEE80211_FC(WLAN_FC_TYPE_MGMT,
					WLAN_FC_STYPE_ACTION);
	os_memcpy(m->da, addr, ETH_ALEN);
	os_memcpy(m->sa, hapd->own_addr, ETH_ALEN);
	os_memcpy(m->bssid, hapd->own_addr, ETH_ALEN);
"
7354,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wmm.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wmm.c,"os_memcpy(m->sa, hapd->own_addr, ETH_ALEN);",120,1,"					WLAN_FC_STYPE_ACTION);
	os_memcpy(m->da, addr, ETH_ALEN);
	os_memcpy(m->sa, hapd->own_addr, ETH_ALEN);
	os_memcpy(m->bssid, hapd->own_addr, ETH_ALEN);
	m->u.action.category = WLAN_ACTION_WMM;
"
7355,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wmm.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wmm.c,"os_memcpy(m->bssid, hapd->own_addr, ETH_ALEN);",120,1,"	os_memcpy(m->da, addr, ETH_ALEN);
	os_memcpy(m->sa, hapd->own_addr, ETH_ALEN);
	os_memcpy(m->bssid, hapd->own_addr, ETH_ALEN);
	m->u.action.category = WLAN_ACTION_WMM;
	m->u.action.u.wmm_action.action_code = action_code;
"
7356,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wmm.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wmm.c,"os_memcpy(t, tspec, sizeof(struct wmm_tspec_element));",120,1,"	m->u.action.u.wmm_action.dialog_token = dialogue_token;
	m->u.action.u.wmm_action.status_code = status_code;
	os_memcpy(t, tspec, sizeof(struct wmm_tspec_element));
	len = ((u8 *) (t + 1)) - buf;

"
7357,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,"os_memcpy(buf, wpa_auth->addr, ETH_ALEN);",120,1,"	 *                   Local MAC Address || Time)
	 */
	os_memcpy(buf, wpa_auth->addr, ETH_ALEN);
	wpa_get_ntp_timestamp(buf + ETH_ALEN);
	ptr = (unsigned long) group;
"
7358,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,"os_memcpy(buf + ETH_ALEN + 8, &ptr, sizeof(ptr));",120,1,"	wpa_get_ntp_timestamp(buf + ETH_ALEN);
	ptr = (unsigned long) group;
	os_memcpy(buf + ETH_ALEN + 8, &ptr, sizeof(ptr));
	if (random_get_bytes(rkey, sizeof(rkey)) < 0)
		return -1;
"
7359,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,"os_memcpy(wpa_auth->addr, addr, ETH_ALEN);",120,1,"	if (wpa_auth == NULL)
		return NULL;
	os_memcpy(wpa_auth->addr, addr, ETH_ALEN);
	os_memcpy(&wpa_auth->conf, conf, sizeof(*conf));
	os_memcpy(&wpa_auth->cb, cb, sizeof(*cb));
"
7360,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,"os_memcpy(&wpa_auth->conf, conf, sizeof(*conf));",120,1,"		return NULL;
	os_memcpy(wpa_auth->addr, addr, ETH_ALEN);
	os_memcpy(&wpa_auth->conf, conf, sizeof(*conf));
	os_memcpy(&wpa_auth->cb, cb, sizeof(*cb));

"
7361,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,"os_memcpy(&wpa_auth->cb, cb, sizeof(*cb));",120,1,"	os_memcpy(wpa_auth->addr, addr, ETH_ALEN);
	os_memcpy(&wpa_auth->conf, conf, sizeof(*conf));
	os_memcpy(&wpa_auth->cb, cb, sizeof(*cb));

	if (wpa_auth_gen_wpa_ie(wpa_auth)) {
"
7363,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,"os_memcpy(sm->addr, addr, ETH_ALEN);",120,1,"	if (sm == NULL)
		return NULL;
	os_memcpy(sm->addr, addr, ETH_ALEN);
	if (p2p_dev_addr)
		os_memcpy(sm->p2p_dev_addr, p2p_dev_addr, ETH_ALEN);
"
7364,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,"os_memcpy(sm->p2p_dev_addr, p2p_dev_addr, ETH_ALEN);",120,1,"	os_memcpy(sm->addr, addr, ETH_ALEN);
	if (p2p_dev_addr)
		os_memcpy(sm->p2p_dev_addr, p2p_dev_addr, ETH_ALEN);

	sm->wpa_auth = wpa_auth;
"
7366,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,"os_memcpy(sm->sup_pmk_r1_name, ie.pmkid, PMKID_LEN);",120,1,"	}

	os_memcpy(sm->sup_pmk_r1_name, ie.pmkid, PMKID_LEN);
	wpa_hexdump(MSG_DEBUG, ""FT: PMKR1Name from Supplicant"",
		    sm->sup_pmk_r1_name, PMKID_LEN);
"
7367,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,"os_memcpy(sm->SNonce, sm->alt_SNonce, WPA_NONCE_LEN);",120,1,"		   ""WPA: Earlier SNonce resulted in matching MIC"");
	sm->alt_snonce_valid = 0;
	os_memcpy(sm->SNonce, sm->alt_SNonce, WPA_NONCE_LEN);
	os_memcpy(&sm->PTK, &PTK, sizeof(PTK));
	sm->PTK_valid = TRUE;
"
7368,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,"os_memcpy(&sm->PTK, &PTK, sizeof(PTK));",120,1,"	sm->alt_snonce_valid = 0;
	os_memcpy(sm->SNonce, sm->alt_SNonce, WPA_NONCE_LEN);
	os_memcpy(&sm->PTK, &PTK, sizeof(PTK));
	sm->PTK_valid = TRUE;

"
7369,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,"os_memcpy(sm->alt_SNonce, sm->SNonce, WPA_NONCE_LEN);",120,1,"					 ""1/4"");
			sm->update_snonce = 1;
			os_memcpy(sm->alt_SNonce, sm->SNonce, WPA_NONCE_LEN);
			sm->alt_snonce_valid = TRUE;
			os_memcpy(sm->alt_replay_counter,
"
7370,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,"os_memcpy(sm->last_rx_eapol_key, data, data_len);",120,1,"	if (sm->last_rx_eapol_key == NULL)
		return;
	os_memcpy(sm->last_rx_eapol_key, data, data_len);
	sm->last_rx_eapol_key_len = data_len;

"
7371,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,"os_memcpy(sm->SNonce, key->key_nonce, WPA_NONCE_LEN);",120,1,"	sm->EAPOLKeyRequest = (Boolean)!!(key_info & WPA_KEY_INFO_REQUEST);

	os_memcpy(sm->SNonce, key->key_nonce, WPA_NONCE_LEN);
	wpa_sm_step(sm);
}
"
7372,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,"os_memcpy(data, addr, ETH_ALEN);",120,1,"	 * exactly same.
	 */
	os_memcpy(data, addr, ETH_ALEN);
	os_memcpy(data + ETH_ALEN, gnonce, WPA_NONCE_LEN);
	pos = data + ETH_ALEN + WPA_NONCE_LEN;
"
7373,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,"os_memcpy(data + ETH_ALEN, gnonce, WPA_NONCE_LEN);",120,1,"	 */
	os_memcpy(data, addr, ETH_ALEN);
	os_memcpy(data + ETH_ALEN, gnonce, WPA_NONCE_LEN);
	pos = data + ETH_ALEN + WPA_NONCE_LEN;
	wpa_get_ntp_timestamp(pos);
"
7374,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,"os_memcpy(key->key_nonce, nonce, WPA_NONCE_LEN);",120,1,"
	if (nonce)
		os_memcpy(key->key_nonce, nonce, WPA_NONCE_LEN);

	if (key_rsc)
"
7375,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,"os_memcpy(key->key_rsc, key_rsc, WPA_KEY_RSC_LEN);",120,1,"
	if (key_rsc)
		os_memcpy(key->key_rsc, key_rsc, WPA_KEY_RSC_LEN);

	if (kde && !encr) {
"
7376,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,"os_memcpy(key_data, kde, kde_len);",120,1,"
	if (kde && !encr) {
		os_memcpy(key_data, kde, kde_len);
		if (mic_len == 24)
			WPA_PUT_BE16(key192->key_data_length, kde_len);
"
7377,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,"os_memcpy(pos, kde, kde_len);",120,1,"		}
		pos = buf;
		os_memcpy(pos, kde, kde_len);
		pos += kde_len;

"
7378,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,"os_memcpy(ek, key->key_iv, 16);",120,1,"				  sm->group->Counter + WPA_NONCE_LEN - 16, 16);
			inc_byte_array(sm->group->Counter, WPA_NONCE_LEN);
			os_memcpy(ek, key->key_iv, 16);
			os_memcpy(ek + 16, sm->PTK.kek, sm->PTK.kek_len);
			os_memcpy(key_data, buf, key_data_len);
"
7379,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,"os_memcpy(ek + 16, sm->PTK.kek, sm->PTK.kek_len);",120,1,"			inc_byte_array(sm->group->Counter, WPA_NONCE_LEN);
			os_memcpy(ek, key->key_iv, 16);
			os_memcpy(ek + 16, sm->PTK.kek, sm->PTK.kek_len);
			os_memcpy(key_data, buf, key_data_len);
			rc4_skip(ek, 32, 256, key_data, key_data_len);
"
7380,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,"os_memcpy(key_data, buf, key_data_len);",120,1,"			os_memcpy(ek, key->key_iv, 16);
			os_memcpy(ek + 16, sm->PTK.kek, sm->PTK.kek_len);
			os_memcpy(key_data, buf, key_data_len);
			rc4_skip(ek, 32, 256, key_data, key_data_len);
			if (mic_len == 24)
"
7381,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,"os_memcpy(mic, key192->key_mic, mic_len);",120,1,"	key192 = (struct wpa_eapol_key_192 *) (hdr + 1);
	key_info = WPA_GET_BE16(key->key_info);
	os_memcpy(mic, key192->key_mic, mic_len);
	os_memset(key192->key_mic, 0, mic_len);
	if (wpa_eapol_key_mic(PTK->kck, PTK->kck_len, akmp,
"
7383,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,"os_memcpy(key192->key_mic, mic, mic_len);",120,1,"	    os_memcmp_const(mic, key192->key_mic, mic_len) != 0)
		ret = -1;
	os_memcpy(key192->key_mic, mic, mic_len);
	return ret;
}
"
7387,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,"os_memcpy(sm->PMK, msk, PMK_LEN);",120,1,"		wpa_printf(MSG_DEBUG, ""WPA: PMK from EAPOL state machine ""
			   ""(len=%lu)"", (unsigned long) len);
		os_memcpy(sm->PMK, msk, PMK_LEN);
#ifdef CONFIG_IEEE80211R
		if (len >= 2 * PMK_LEN) {
"
7388,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,"os_memcpy(sm->xxkey, msk + PMK_LEN, PMK_LEN);",120,1,"#ifdef CONFIG_IEEE80211R
		if (len >= 2 * PMK_LEN) {
			os_memcpy(sm->xxkey, msk + PMK_LEN, PMK_LEN);
			sm->xxkey_len = PMK_LEN;
		}
"
7390,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,"os_memcpy(sm->PMK, psk, PMK_LEN);",120,1,"	psk = wpa_auth_get_psk(sm->wpa_auth, sm->addr, sm->p2p_dev_addr, NULL);
	if (psk) {
		os_memcpy(sm->PMK, psk, PMK_LEN);
#ifdef CONFIG_IEEE80211R
		os_memcpy(sm->xxkey, psk, PMK_LEN);
"
7391,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,"os_memcpy(sm->xxkey, psk, PMK_LEN);",120,1,"		os_memcpy(sm->PMK, psk, PMK_LEN);
#ifdef CONFIG_IEEE80211R
		os_memcpy(sm->xxkey, psk, PMK_LEN);
		sm->xxkey_len = PMK_LEN;
#endif /* CONFIG_IEEE80211R */
"
7392,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,"os_memcpy(sm->PMK, pmk, PMK_LEN);",120,1,"		 * state machine data based on whatever PSK was selected here.
		 */
		os_memcpy(sm->PMK, pmk, PMK_LEN);
	}

"
7395,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,"os_memcpy(igtk.pn, rsc, sizeof(igtk.pn));",120,1,"		os_memset(igtk.pn, 0, sizeof(igtk.pn));
	else
		os_memcpy(igtk.pn, rsc, sizeof(igtk.pn));
	os_memcpy(igtk.igtk, gsm->IGTK[gsm->GN_igtk - 4], len);
	if (sm->wpa_auth->conf.disable_gtk) {
"
7396,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,"os_memcpy(igtk.igtk, gsm->IGTK[gsm->GN_igtk - 4], len);",120,1,"	else
		os_memcpy(igtk.pn, rsc, sizeof(igtk.pn));
	os_memcpy(igtk.igtk, gsm->IGTK[gsm->GN_igtk - 4], len);
	if (sm->wpa_auth->conf.disable_gtk) {
		/*
"
7398,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,"os_memcpy(pos, wpa_ie, wpa_ie_len);",120,1,"
	pos = kde;
	os_memcpy(pos, wpa_ie, wpa_ie_len);
	pos += wpa_ie_len;
#ifdef CONFIG_IEEE80211R
"
7399,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,"os_memcpy(addr, sm->ip_addr, 4);",120,1,"	if (WPA_GET_BE32(sm->ip_addr) > 0) {
		u8 addr[3 * 4];
		os_memcpy(addr, sm->ip_addr, 4);
		os_memcpy(addr + 4, sm->wpa_auth->conf.ip_addr_mask, 4);
		os_memcpy(addr + 8, sm->wpa_auth->conf.ip_addr_go, 4);
"
7400,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,"os_memcpy(addr + 4, sm->wpa_auth->conf.ip_addr_mask, 4);",120,1,"		u8 addr[3 * 4];
		os_memcpy(addr, sm->ip_addr, 4);
		os_memcpy(addr + 4, sm->wpa_auth->conf.ip_addr_mask, 4);
		os_memcpy(addr + 8, sm->wpa_auth->conf.ip_addr_go, 4);
		pos = wpa_add_kde(pos, WFA_KEY_DATA_IP_ADDR_ALLOC,
"
7401,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,"os_memcpy(addr + 8, sm->wpa_auth->conf.ip_addr_go, 4);",120,1,"		os_memcpy(addr, sm->ip_addr, 4);
		os_memcpy(addr + 4, sm->wpa_auth->conf.ip_addr_mask, 4);
		os_memcpy(addr + 8, sm->wpa_auth->conf.ip_addr_go, 4);
		pos = wpa_add_kde(pos, WFA_KEY_DATA_IP_ADDR_ALLOC,
				  addr, sizeof(addr), NULL, 0);
"
7403,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,"os_memcpy(group->GNonce, group->Counter, WPA_NONCE_LEN);",120,1,"	int ret = 0;

	os_memcpy(group->GNonce, group->Counter, WPA_NONCE_LEN);
	inc_byte_array(group->Counter, WPA_NONCE_LEN);
	if (wpa_gmk_to_gtk(group->GMK, ""Group key expansion"",
"
7406,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,"os_memcpy(pos, gsm->GTK[gsm->GN - 1], gsm->GTK_len);",120,1,"		return 0;
	pos += 8;
	os_memcpy(pos, gsm->GTK[gsm->GN - 1], gsm->GTK_len);
	pos += gsm->GTK_len;

"
7407,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth.c,"os_memcpy(pos, gsm->IGTK[gsm->GN_igtk - 4], len);",120,1,"	pos += 6;

	os_memcpy(pos, gsm->IGTK[gsm->GN_igtk - 4], len);
	pos += len;

"
7410,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth_glue.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth_glue.c,"os_memcpy(wconf->ssid, conf->ssid.ssid, wconf->ssid_len);",120,1,"	if (wconf->ssid_len > SSID_MAX_LEN)
		wconf->ssid_len = SSID_MAX_LEN;
	os_memcpy(wconf->ssid, conf->ssid.ssid, wconf->ssid_len);
	os_memcpy(wconf->mobility_domain, conf->mobility_domain,
		  MOBILITY_DOMAIN_ID_LEN);
"
7411,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth_glue.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth_glue.c,"os_memcpy(wconf->r1_key_holder, conf->r1_key_holder, FT_R1KH_ID_LEN);",120,1,"			  wconf->r0_key_holder_len);
	}
	os_memcpy(wconf->r1_key_holder, conf->r1_key_holder, FT_R1KH_ID_LEN);
	wconf->r0_key_lifetime = conf->r0_key_lifetime;
	wconf->reassociation_deadline = conf->reassociation_deadline;
"
7412,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth_glue.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth_glue.c,"os_memcpy(wconf->ip_addr_go, conf->ip_addr_go, 4);",120,1,"#endif /* CONFIG_TESTING_OPTIONS */
#ifdef CONFIG_P2P
	os_memcpy(wconf->ip_addr_go, conf->ip_addr_go, 4);
	os_memcpy(wconf->ip_addr_mask, conf->ip_addr_mask, 4);
	os_memcpy(wconf->ip_addr_start, conf->ip_addr_start, 4);
"
7413,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth_glue.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth_glue.c,"os_memcpy(wconf->ip_addr_mask, conf->ip_addr_mask, 4);",120,1,"#ifdef CONFIG_P2P
	os_memcpy(wconf->ip_addr_go, conf->ip_addr_go, 4);
	os_memcpy(wconf->ip_addr_mask, conf->ip_addr_mask, 4);
	os_memcpy(wconf->ip_addr_start, conf->ip_addr_start, 4);
	os_memcpy(wconf->ip_addr_end, conf->ip_addr_end, 4);
"
7414,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth_glue.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth_glue.c,"os_memcpy(wconf->ip_addr_start, conf->ip_addr_start, 4);",120,1,"	os_memcpy(wconf->ip_addr_go, conf->ip_addr_go, 4);
	os_memcpy(wconf->ip_addr_mask, conf->ip_addr_mask, 4);
	os_memcpy(wconf->ip_addr_start, conf->ip_addr_start, 4);
	os_memcpy(wconf->ip_addr_end, conf->ip_addr_end, 4);
#endif /* CONFIG_P2P */
"
7415,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth_glue.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth_glue.c,"os_memcpy(wconf->ip_addr_end, conf->ip_addr_end, 4);",120,1,"	os_memcpy(wconf->ip_addr_mask, conf->ip_addr_mask, 4);
	os_memcpy(wconf->ip_addr_start, conf->ip_addr_start, 4);
	os_memcpy(wconf->ip_addr_end, conf->ip_addr_end, 4);
#endif /* CONFIG_P2P */
}
"
7416,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth_glue.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth_glue.c,"os_memcpy(buf->h_dest, dst, ETH_ALEN);",120,1,"	if (buf == NULL)
		return -1;
	os_memcpy(buf->h_dest, dst, ETH_ALEN);
	os_memcpy(buf->h_source, hapd->own_addr, ETH_ALEN);
	buf->h_proto = host_to_be16(proto);
"
7417,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth_glue.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth_glue.c,"os_memcpy(buf->h_source, hapd->own_addr, ETH_ALEN);",120,1,"		return -1;
	os_memcpy(buf->h_dest, dst, ETH_ALEN);
	os_memcpy(buf->h_source, hapd->own_addr, ETH_ALEN);
	buf->h_proto = host_to_be16(proto);
	os_memcpy(buf + 1, data, data_len);
"
7418,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth_glue.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth_glue.c,"os_memcpy(buf + 1, data, data_len);",120,1,"	os_memcpy(buf->h_source, hapd->own_addr, ETH_ALEN);
	buf->h_proto = host_to_be16(proto);
	os_memcpy(buf + 1, data, data_len);
	ret = l2_packet_send(hapd->l2, dst, proto, (u8 *) buf,
			     sizeof(*buf) + data_len);
"
7419,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth_glue.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth_glue.c,"os_memcpy(m->da, dst, ETH_ALEN);",120,1,"	m->frame_control = IEEE80211_FC(WLAN_FC_TYPE_MGMT,
					WLAN_FC_STYPE_ACTION);
	os_memcpy(m->da, dst, ETH_ALEN);
	os_memcpy(m->sa, hapd->own_addr, ETH_ALEN);
	os_memcpy(m->bssid, hapd->own_addr, ETH_ALEN);
"
7422,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth_glue.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth_glue.c,"os_memcpy(&m->u, data, data_len);",120,1,"	os_memcpy(m->sa, hapd->own_addr, ETH_ALEN);
	os_memcpy(m->bssid, hapd->own_addr, ETH_ALEN);
	os_memcpy(&m->u, data, data_len);

	res = hostapd_drv_send_mlme(hapd, (u8 *) m, mlen, 0);
"
7424,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth_ie.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth_ie.c,"os_memcpy(pos, pmkid, PMKID_LEN);",120,1,"		WPA_PUT_LE16(pos, 1);
		pos += 2;
		os_memcpy(pos, pmkid, PMKID_LEN);
		pos += PMKID_LEN;
	}
"
7426,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth_ie.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth_ie.c,"os_memcpy(wpa_auth->wpa_ie, buf, pos - buf);",120,1,"	if (wpa_auth->wpa_ie == NULL)
		return -1;
	os_memcpy(wpa_auth->wpa_ie, buf, pos - buf);
	wpa_auth->wpa_ie_len = pos - buf;

"
7427,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth_ie.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth_ie.c,"os_memcpy(pos, data, data_len);",120,1,"	RSN_SELECTOR_PUT(pos, kde);
	pos += RSN_SELECTOR_LEN;
	os_memcpy(pos, data, data_len);
	pos += data_len;
	if (data2) {
"
7428,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth_ie.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth_ie.c,"os_memcpy(pos, data2, data2_len);",120,1,"	pos += data_len;
	if (data2) {
		os_memcpy(pos, data2, data2_len);
		pos += data2_len;
	}
"
7429,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth_ie.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\ap\wpa_auth_ie.c,"os_memcpy(sm->wpa_ie, wpa_ie, wpa_ie_len);",120,1,"			return WPA_ALLOC_FAIL;
	}
	os_memcpy(sm->wpa_ie, wpa_ie, wpa_ie_len);
	sm->wpa_ie_len = wpa_ie_len;

"
7434,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\common\wpa_common.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\common\wpa_common.c,"os_memcpy(mic, hash, MD5_MAC_LEN);",120,1,"		if (hmac_sha1(key, key_len, buf, len, hash))
			return -1;
		os_memcpy(mic, hash, MD5_MAC_LEN);
		break;
#if defined(CONFIG_IEEE80211R) || defined(CONFIG_IEEE80211W)
"
7436,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\common\wpa_common.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\common\wpa_common.c,"os_memcpy(mic, hash, 24);",120,1,"			if (hmac_sha384(key, key_len, buf, len, hash))
				return -1;
			os_memcpy(mic, hash, 24);
			break;
#endif /* CONFIG_SUITEB192 */
"
7437,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\common\wpa_common.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\common\wpa_common.c,"os_memcpy(data, addr1, ETH_ALEN);",120,1,"
	if (os_memcmp(addr1, addr2, ETH_ALEN) < 0) {
		os_memcpy(data, addr1, ETH_ALEN);
		os_memcpy(data + ETH_ALEN, addr2, ETH_ALEN);
	} else {
"
7438,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\common\wpa_common.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\common\wpa_common.c,"os_memcpy(data + ETH_ALEN, addr2, ETH_ALEN);",120,1,"	if (os_memcmp(addr1, addr2, ETH_ALEN) < 0) {
		os_memcpy(data, addr1, ETH_ALEN);
		os_memcpy(data + ETH_ALEN, addr2, ETH_ALEN);
	} else {
		os_memcpy(data, addr2, ETH_ALEN);
"
7439,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\common\wpa_common.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\common\wpa_common.c,"os_memcpy(data, addr2, ETH_ALEN);",120,1,"		os_memcpy(data + ETH_ALEN, addr2, ETH_ALEN);
	} else {
		os_memcpy(data, addr2, ETH_ALEN);
		os_memcpy(data + ETH_ALEN, addr1, ETH_ALEN);
	}
"
7440,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\common\wpa_common.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\common\wpa_common.c,"os_memcpy(data + ETH_ALEN, addr1, ETH_ALEN);",120,1,"	} else {
		os_memcpy(data, addr2, ETH_ALEN);
		os_memcpy(data + ETH_ALEN, addr1, ETH_ALEN);
	}

"
7441,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\common\wpa_common.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\common\wpa_common.c,"os_memcpy(data + 2 * ETH_ALEN, nonce1, WPA_NONCE_LEN);",120,1,"
	if (os_memcmp(nonce1, nonce2, WPA_NONCE_LEN) < 0) {
		os_memcpy(data + 2 * ETH_ALEN, nonce1, WPA_NONCE_LEN);
		os_memcpy(data + 2 * ETH_ALEN + WPA_NONCE_LEN, nonce2,
			  WPA_NONCE_LEN);
"
7442,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\common\wpa_common.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\common\wpa_common.c,"os_memcpy(data + 2 * ETH_ALEN, nonce2, WPA_NONCE_LEN);",120,1,"			  WPA_NONCE_LEN);
	} else {
		os_memcpy(data + 2 * ETH_ALEN, nonce2, WPA_NONCE_LEN);
		os_memcpy(data + 2 * ETH_ALEN + WPA_NONCE_LEN, nonce1,
			  WPA_NONCE_LEN);
"
7443,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\common\wpa_common.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\common\wpa_common.c,"os_memcpy(ptk->kck, tmp, ptk->kck_len);",120,1,"	wpa_hexdump_key(MSG_DEBUG, ""WPA: PTK"", tmp, ptk_len);

	os_memcpy(ptk->kck, tmp, ptk->kck_len);
	wpa_hexdump_key(MSG_DEBUG, ""WPA: KCK"", ptk->kck, ptk->kck_len);

"
7444,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\common\wpa_common.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\common\wpa_common.c,"os_memcpy(ptk->kek, tmp + ptk->kck_len, ptk->kek_len);",120,1,"	wpa_hexdump_key(MSG_DEBUG, ""WPA: KCK"", ptk->kck, ptk->kck_len);

	os_memcpy(ptk->kek, tmp + ptk->kck_len, ptk->kek_len);
	wpa_hexdump_key(MSG_DEBUG, ""WPA: KEK"", ptk->kek, ptk->kek_len);

"
7445,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\common\wpa_common.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\common\wpa_common.c,"os_memcpy(ptk->tk, tmp + ptk->kck_len + ptk->kek_len, ptk->tk_len);",120,1,"	wpa_hexdump_key(MSG_DEBUG, ""WPA: KEK"", ptk->kek, ptk->kek_len);

	os_memcpy(ptk->tk, tmp + ptk->kck_len + ptk->kek_len, ptk->tk_len);
	wpa_hexdump_key(MSG_DEBUG, ""WPA: TK"", ptk->tk, ptk->tk_len);

"
7449,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\common\wpa_common.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\common\wpa_common.c,"os_memcpy(pmkid, hash, PMKID_LEN);",120,1,"#endif /* CONFIG_IEEE80211W */
		hmac_sha1_vector(pmk, pmk_len, 3, addr, len, hash);
	os_memcpy(pmkid, hash, PMKID_LEN);
}

"
7452,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\common\wpa_common.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\common\wpa_common.c,"os_memcpy(rpos, pmkid, PMKID_LEN);",120,1,"		WPA_PUT_LE16(rpos, 1);
		rpos += 2;
		os_memcpy(rpos, pmkid, PMKID_LEN);
		added += 2 + PMKID_LEN;
		start[1] += 2 + PMKID_LEN;
"
7457,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\aes-unwrap.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\aes-unwrap.c,"os_memcpy(a, cipher, 8);",120,1,"
	/* 1) Initialize variables. */
	os_memcpy(a, cipher, 8);
	r = plain;
	os_memcpy(r, cipher + 8, 8 * n);
"
7458,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\aes-unwrap.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\aes-unwrap.c,"os_memcpy(r, cipher + 8, 8 * n);",120,1,"	os_memcpy(a, cipher, 8);
	r = plain;
	os_memcpy(r, cipher + 8, 8 * n);

	ctx = aes_decrypt_init(kek, kek_len);
"
7459,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\aes-unwrap.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\aes-unwrap.c,"os_memcpy(b, a, 8);",120,1,"		r = plain + (n - 1) * 8;
		for (i = n; i >= 1; i--) {
			os_memcpy(b, a, 8);
			t = n * j + i;
			b[7] ^= t;
"
7460,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\aes-unwrap.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\aes-unwrap.c,"os_memcpy(b + 8, r, 8);",120,1,"			b[4] ^= t >> 24;

			os_memcpy(b + 8, r, 8);
			aes_decrypt(ctx, b, b);
			os_memcpy(a, b, 8);
"
7461,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\aes-unwrap.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\aes-unwrap.c,"os_memcpy(a, b, 8);",120,1,"			os_memcpy(b + 8, r, 8);
			aes_decrypt(ctx, b, b);
			os_memcpy(a, b, 8);
			os_memcpy(r, b + 8, 8);
			r -= 8;
"
7462,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\aes-unwrap.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\aes-unwrap.c,"os_memcpy(r, b + 8, 8);",120,1,"			aes_decrypt(ctx, b, b);
			os_memcpy(a, b, 8);
			os_memcpy(r, b + 8, 8);
			r -= 8;
		}
"
7464,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\aes-wrap.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\aes-wrap.c,"os_memcpy(r, plain, 8 * n);",120,1,"	/* 1) Initialize variables. */
	os_memset(a, 0xa6, 8);
	os_memcpy(r, plain, 8 * n);

	ctx = aes_encrypt_init(kek, kek_len);
"
7470,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\bk_md5.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\bk_md5.c,"os_memcpy(k_pad, key, key_len);",120,1,"	/* start out by storing key in ipad */
	os_memset(k_pad, 0, sizeof(k_pad));
	os_memcpy(k_pad, key, key_len);

	/* XOR key with ipad values */
"
7486,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\md5-internal.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\md5-internal.c,"os_memcpy(p, buf, len);",120,1,"	t = 64 - t;
	if (len < t) {
	    os_memcpy(p, buf, len);
	    return;
	}
"
7487,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\md5-internal.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\md5-internal.c,"os_memcpy(p, buf, t);",120,1,"	    return;
	}
	os_memcpy(p, buf, t);
	byteReverse(ctx->in, 16);
	MD5Transform(ctx->buf, (u32 *) ctx->in);
"
7488,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\md5-internal.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\md5-internal.c,"os_memcpy(ctx->in, buf, 64);",120,1,"
    while (len >= 64) {
	os_memcpy(ctx->in, buf, 64);
	byteReverse(ctx->in, 16);
	MD5Transform(ctx->buf, (u32 *) ctx->in);
"
7489,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\md5-internal.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\md5-internal.c,"os_memcpy(ctx->in, buf, len);",120,1,"    /* Handle any remaining bytes of data. */

    os_memcpy(ctx->in, buf, len);
}

"
7493,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\md5-internal.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\md5-internal.c,"os_memcpy(digest, ctx->buf, 16);",120,1,"    MD5Transform(ctx->buf, (u32 *) ctx->in);
    byteReverse((unsigned char *) ctx->buf, 4);
    os_memcpy(digest, ctx->buf, 16);
    os_memset(ctx, 0, sizeof(*ctx));	/* In case it's sensitive */
}
"
7495,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\sha1-internal.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\sha1-internal.c,"os_memcpy(block, buffer, 64);",120,1,"	CHAR64LONG16 workspace;
	block = &workspace;
	os_memcpy(block, buffer, 64);
#else
	block = (CHAR64LONG16 *) buffer;
"
7497,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\sha1-internal.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\sha1-internal.c,"os_memcpy(&context->buffer[j], data, (i = 64-j));",120,1,"	context->count[1] += (len >> 29);
	if ((j + len) > 63) {
		os_memcpy(&context->buffer[j], data, (i = 64-j));
		SHA1Transform(context->state, context->buffer);
		for ( ; i + 63 < len; i += 64) {
"
7498,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\sha1-internal.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\sha1-internal.c,"os_memcpy(&context->buffer[j], &data[i], len - i);",120,1,"	}
	else i = 0;
	os_memcpy(&context->buffer[j], &data[i], len - i);
#ifdef VERBOSE
	SHAPrintContext(context, ""after "");
"
7503,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\sha1-pbkdf2.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\sha1-pbkdf2.c,"os_memcpy(digest, tmp, SHA1_MAC_LEN);",120,1,"			     tmp))
		return -1;
	os_memcpy(digest, tmp, SHA1_MAC_LEN);

	for (i = 1; i < iterations; i++) {
"
7504,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\sha1-pbkdf2.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\sha1-pbkdf2.c,"os_memcpy(tmp, tmp2, SHA1_MAC_LEN);",120,1,"			      SHA1_MAC_LEN, tmp2))
			return -1;
		os_memcpy(tmp, tmp2, SHA1_MAC_LEN);
		for (j = 0; j < SHA1_MAC_LEN; j++)
			digest[j] ^= tmp2[j];
"
7505,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\sha1-pbkdf2.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\sha1-pbkdf2.c,"os_memcpy(pos, digest, plen);",120,1,"			return -1;
		plen = left > SHA1_MAC_LEN ? SHA1_MAC_LEN : left;
		os_memcpy(pos, digest, plen);
		pos += plen;
		left -= plen;
"
7506,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\sha1-prf.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\crypto\sha1-prf.c,"os_memcpy(&buf[pos], hash, plen);",120,1,"					     hash))
				return -1;
			os_memcpy(&buf[pos], hash, plen);
			break;
		}
"
7515,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,"memcpy(param.sta_addr, addr, ETH_ALEN);",120,1,"    memset(&param, 0, sizeof(param));
    param.cmd = PRISM2_HOSTAPD_SET_FLAGS_STA;
    memcpy(param.sta_addr, addr, ETH_ALEN);
    param.u.set_flags_sta.flags_or = flags_or;
    param.u.set_flags_sta.flags_and = flags_and;
"
7518,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,"memcpy(param->sta_addr, addr, ETH_ALEN);",120,1,"        memset(param->sta_addr, 0xff, ETH_ALEN);
    else
        memcpy(param->sta_addr, addr, ETH_ALEN);
    
    switch (alg)
"
7519,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,"memcpy((u8 *) (param + 1), key, key_len);",120,1,"    param->vif_idx = drv->vif_index;
    
    memcpy((u8 *) (param + 1), key, key_len);

    if (hostapd_ioctl(drv, param, blen))
"
7521,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,"os_memcpy(param->sta_addr, addr, ETH_ALEN);",120,1,"        os_memset(param->sta_addr, 0xff, ETH_ALEN);
    else
        os_memcpy(param->sta_addr, addr, ETH_ALEN);
    param->u.crypt.idx = idx;

"
7522,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,"os_memcpy(seq, param->u.crypt.seq, 8);",120,1,"    else
    {
        os_memcpy(seq, param->u.crypt.seq, 8);
    }
    os_free(buf);
"
7527,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,"memcpy(param.sta_addr, drv->own_addr, ETH_ALEN);",120,1,"    memset(&param, 0, sizeof(param));
    param.cmd = PRISM2_HOSTAPD_WPA_INIT_VIF;
    memcpy(param.sta_addr, drv->own_addr, ETH_ALEN);
    param.u.add_if.indx_ptr = &drv->vif_index;
    param.u.add_if.type = type;
"
7535,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,"memcpy(param.sta_addr, params->addr, ETH_ALEN);",120,1,"    memset(&param, 0, sizeof(param));
    param.cmd = PRISM2_HOSTAPD_ADD_STA;
    memcpy(param.sta_addr, params->addr, ETH_ALEN);
    param.u.add_sta.aid = params->aid;
    param.u.add_sta.capability = params->capability;
"
7542,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,"os_memcpy(drv->generic_ie, elem, elem_len);",120,1,"        if (drv->generic_ie == NULL)
            return -1;
        os_memcpy(drv->generic_ie, elem, elem_len);
        drv->generic_ie_len = elem_len;
    }
"
7543,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,"os_memcpy(drv->wps_ie, wpabuf_head(proberesp),",120,1,"        if (drv->wps_ie == NULL)
            return -1;
        os_memcpy(drv->wps_ie, wpabuf_head(proberesp),
                  wpabuf_len(proberesp));
        drv->wps_ie_len = wpabuf_len(proberesp);
"
7545,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,"memcpy(&iwe_buf, pos, IW_EV_LCP_LEN);",120,1,"        /* Event data may be unaligned, so make a local, aligned copy
         * before processing. */
        memcpy(&iwe_buf, pos, IW_EV_LCP_LEN);
        wpa_printf(MSG_DEBUG, ""Wireless event: cmd=0x%x len=%d"",
                   iwe->cmd, iwe->len);
"
7546,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,"memcpy(&iwe_buf, pos, sizeof(struct iw_event));",120,1,"        else
        {
            memcpy(&iwe_buf, pos, sizeof(struct iw_event));
            custom += IW_EV_POINT_OFF;
        }
"
7547,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,"memcpy(buf, custom, iwe->u.data.length);",120,1,"            if (buf == NULL)
                return;
            memcpy(buf, custom, iwe->u.data.length);
            buf[iwe->u.data.length] = '\0';
            hostapd_wireless_event_wireless_custom(drv, buf);
"
7549,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,"os_memcpy(drv->iface, params->ifname, sizeof(drv->iface));",120,1,"    drv->ioctl_sock = -1;
    drv->sock = -1;
    os_memcpy(drv->iface, params->ifname, sizeof(drv->iface));
    os_memcpy(drv->own_addr, params->own_addr, ETH_ALEN);

"
7550,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,"os_memcpy(drv->own_addr, params->own_addr, ETH_ALEN);",120,1,"    drv->sock = -1;
    os_memcpy(drv->iface, params->ifname, sizeof(drv->iface));
    os_memcpy(drv->own_addr, params->own_addr, ETH_ALEN);

    ret = wpa_driver_hostap_init_vif(drv, NL80211_IFTYPE_AP);
"
7552,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,"memcpy(mgmt.da, addr, ETH_ALEN);",120,1,"    mgmt.frame_control = IEEE80211_FC(WLAN_FC_TYPE_MGMT,
                                      WLAN_FC_STYPE_DEAUTH);
    memcpy(mgmt.da, addr, ETH_ALEN);
    memcpy(mgmt.sa, own_addr, ETH_ALEN);
    memcpy(mgmt.bssid, own_addr, ETH_ALEN);
"
7553,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,"memcpy(mgmt.sa, own_addr, ETH_ALEN);",120,1,"                                      WLAN_FC_STYPE_DEAUTH);
    memcpy(mgmt.da, addr, ETH_ALEN);
    memcpy(mgmt.sa, own_addr, ETH_ALEN);
    memcpy(mgmt.bssid, own_addr, ETH_ALEN);
    mgmt.u.deauth.reason_code = host_to_le16(reason);
"
7554,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,"memcpy(mgmt.bssid, own_addr, ETH_ALEN);",120,1,"    memcpy(mgmt.da, addr, ETH_ALEN);
    memcpy(mgmt.sa, own_addr, ETH_ALEN);
    memcpy(mgmt.bssid, own_addr, ETH_ALEN);
    mgmt.u.deauth.reason_code = host_to_le16(reason);
    return hostap_send_mlme(drv, (u8 *) &mgmt, IEEE80211_HDRLEN +
"
7561,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,"os_memcpy(pos, params->head, params->head_len);",120,1,"
    pos = beacon;
    os_memcpy(pos, params->head, params->head_len);
    pos = pos + params->head_len;

"
7562,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,"os_memcpy(pos, params->tail, params->tail_len);",120,1,"    *pos++ = 0;

    os_memcpy(pos, params->tail, params->tail_len);
    pos = pos + params->tail_len;

"
7564,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,"os_memcpy(hdr.IEEE80211_DA_FROMDS, addr, ETH_ALEN);",120,1,"    hdr.frame_control |= host_to_le16(WLAN_FC_FROMDS);

    os_memcpy(hdr.IEEE80211_DA_FROMDS, addr, ETH_ALEN);
    os_memcpy(hdr.IEEE80211_BSSID_FROMDS, own_addr, ETH_ALEN);
    os_memcpy(hdr.IEEE80211_SA_FROMDS, own_addr, ETH_ALEN);
"
7565,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,"os_memcpy(hdr.IEEE80211_BSSID_FROMDS, own_addr, ETH_ALEN);",120,1,"
    os_memcpy(hdr.IEEE80211_DA_FROMDS, addr, ETH_ALEN);
    os_memcpy(hdr.IEEE80211_BSSID_FROMDS, own_addr, ETH_ALEN);
    os_memcpy(hdr.IEEE80211_SA_FROMDS, own_addr, ETH_ALEN);

"
7566,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,"os_memcpy(hdr.IEEE80211_SA_FROMDS, own_addr, ETH_ALEN);",120,1,"    os_memcpy(hdr.IEEE80211_DA_FROMDS, addr, ETH_ALEN);
    os_memcpy(hdr.IEEE80211_BSSID_FROMDS, own_addr, ETH_ALEN);
    os_memcpy(hdr.IEEE80211_SA_FROMDS, own_addr, ETH_ALEN);

    hostap_send_mlme(priv, (u8 *)&hdr, sizeof(hdr), 0, 0);
"
7567,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,"os_memcpy(drv->iface, ifname, sizeof(drv->iface));",120,1,"
    drv->wpa_s = ctx;
    os_memcpy(drv->iface, ifname, sizeof(drv->iface));
	wifi_get_mac_address((char *)drv->own_addr, CONFIG_ROLE_STA);

"
7568,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,"os_memcpy(param->u.scan_req.ssids[i].ssid, params->ssids[i].ssid, param->u.scan_req.ssids[i].ssid_len);",120,1,"    {
        param->u.scan_req.ssids[i].ssid_len = params->ssids[i].ssid_len;
        os_memcpy(param->u.scan_req.ssids[i].ssid, params->ssids[i].ssid, param->u.scan_req.ssids[i].ssid_len);
    }

"
7569,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,"os_memcpy(param->u.assoc_req.bssid, params->bssid, ETH_ALEN);",120,1,"		param->u.assoc_req.auth_alg = HOSTAP_AUTH_SHARED;
	}
    os_memcpy(param->u.assoc_req.bssid, params->bssid, ETH_ALEN);
    param->u.assoc_req.ssid_len = params->ssid_len;
    os_memcpy(param->u.assoc_req.ssid, params->ssid, param->u.assoc_req.ssid_len);
"
7570,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,"os_memcpy(param->u.assoc_req.ssid, params->ssid, param->u.assoc_req.ssid_len);",120,1,"    os_memcpy(param->u.assoc_req.bssid, params->bssid, ETH_ALEN);
    param->u.assoc_req.ssid_len = params->ssid_len;
    os_memcpy(param->u.assoc_req.ssid, params->ssid, param->u.assoc_req.ssid_len);
    param->u.assoc_req.proto = params->wpa_proto;
    param->u.assoc_req.ie_len = params->wpa_ie_len;
"
7571,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,"os_memcpy((u8 *)param->u.assoc_req.ie_buf, params->wpa_ie, param->u.assoc_req.ie_len);",120,1,"    param->u.assoc_req.proto = params->wpa_proto;
    param->u.assoc_req.ie_len = params->wpa_ie_len;
    os_memcpy((u8 *)param->u.assoc_req.ie_buf, params->wpa_ie, param->u.assoc_req.ie_len);

    if(hostapd_ioctl(drv, param, blen))
"
7572,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,"os_memcpy(bssid, param->u.bss_info.bssid, ETH_ALEN);",120,1,"        return -1;
    }
    os_memcpy(bssid, param->u.bss_info.bssid, ETH_ALEN);
    os_free(buf);

"
7573,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\drivers\driver_beken.c,"os_memcpy(ssid, param->u.bss_info.ssid, len);",120,1,"
	len = MIN(SSID_MAX_LEN, os_strlen((char*)param->u.bss_info.ssid));
    os_memcpy(ssid, param->u.bss_info.ssid, len);
    os_free(buf);

"
7575,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\l2_packet\l2_packet_none.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\l2_packet\l2_packet_none.c,"os_memcpy(addr, l2->own_addr, ETH_ALEN);",120,1,"int l2_packet_get_own_addr(struct l2_packet_data *l2, u8 *addr)
{
	os_memcpy(addr, l2->own_addr, ETH_ALEN);
	return 0;
}
"
7576,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\l2_packet\l2_packet_none.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\l2_packet\l2_packet_none.c,"os_memcpy(eth->h_dest, dst_addr, ETH_ALEN);",120,1,"
	eth = (struct l2_ethhdr *) data_buf;
	os_memcpy(eth->h_dest, dst_addr, ETH_ALEN);
	os_memcpy(eth->h_source, l2->own_addr, ETH_ALEN);
	eth->h_proto = host_to_be16(proto);
"
7577,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\l2_packet\l2_packet_none.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\l2_packet\l2_packet_none.c,"os_memcpy(eth->h_source, l2->own_addr, ETH_ALEN);",120,1,"	eth = (struct l2_ethhdr *) data_buf;
	os_memcpy(eth->h_dest, dst_addr, ETH_ALEN);
	os_memcpy(eth->h_source, l2->own_addr, ETH_ALEN);
	eth->h_proto = host_to_be16(proto);
	os_memcpy(eth+1, buf, len);
"
7578,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\l2_packet\l2_packet_none.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\l2_packet\l2_packet_none.c,"os_memcpy(eth+1, buf, len);",120,1,"	os_memcpy(eth->h_source, l2->own_addr, ETH_ALEN);
	eth->h_proto = host_to_be16(proto);
	os_memcpy(eth+1, buf, len);

    type_ptr->type = HOSTAPD_DATA;
"
7579,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\l2_packet\l2_packet_none.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\l2_packet\l2_packet_none.c,"os_memcpy(l2->own_addr, own_addr, ETH_ALEN);",120,1,"		return NULL;
	os_strlcpy(l2->ifname, ifname, sizeof(l2->ifname));
	os_memcpy(l2->own_addr, own_addr, ETH_ALEN);

    l2->vif_index = rwm_mgmt_vif_mac2idx((void*)own_addr);
"
7580,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,"os_memcpy(reply->key_length, key->key_length, 2);",120,1,"		WPA_PUT_BE16(reply->key_length, 0);
	else
		os_memcpy(reply->key_length, key->key_length, 2);
	os_memcpy(reply->replay_counter, key->replay_counter,
		  WPA_REPLAY_COUNTER_LEN);
"
7581,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,"os_memcpy(reply192 + 1, wpa_ie, wpa_ie_len);",120,1,"	if (mic_len == 24) {
		WPA_PUT_BE16(reply192->key_data_length, wpa_ie_len);
		os_memcpy(reply192 + 1, wpa_ie, wpa_ie_len);
	} else {
		WPA_PUT_BE16(reply->key_data_length, wpa_ie_len);
"
7582,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,"os_memcpy(reply + 1, wpa_ie, wpa_ie_len);",120,1,"	} else {
		WPA_PUT_BE16(reply->key_data_length, wpa_ie_len);
		os_memcpy(reply + 1, wpa_ie, wpa_ie_len);
	}
	os_free(rsn_ie_buf);
"
7583,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,"os_memcpy(reply->key_nonce, nonce, WPA_NONCE_LEN);",120,1,"	os_free(rsn_ie_buf);

	os_memcpy(reply->key_nonce, nonce, WPA_NONCE_LEN);

	wpa_dbg(sm->ctx->msg_ctx, MSG_DEBUG, ""WPA: Sending EAPOL-Key 2/4"");
"
7585,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,"os_memcpy(buf, &ptk->tk[16], 8);",120,1,"		u8 buf[8];
		/* Supplicant: swap tx/rx Mic keys */
		os_memcpy(buf, &ptk->tk[16], 8);
		os_memcpy(&ptk->tk[16], &ptk->tk[24], 8);
		os_memcpy(&ptk->tk[24], buf, 8);
"
7586,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,"os_memcpy(&ptk->tk[16], &ptk->tk[24], 8);",120,1,"		/* Supplicant: swap tx/rx Mic keys */
		os_memcpy(buf, &ptk->tk[16], 8);
		os_memcpy(&ptk->tk[16], &ptk->tk[24], 8);
		os_memcpy(&ptk->tk[24], buf, 8);
		os_memset(buf, 0, sizeof(buf));
"
7587,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,"os_memcpy(&ptk->tk[24], buf, 8);",120,1,"		os_memcpy(buf, &ptk->tk[16], 8);
		os_memcpy(&ptk->tk[16], &ptk->tk[24], 8);
		os_memcpy(&ptk->tk[24], buf, 8);
		os_memset(buf, 0, sizeof(buf));
	}
"
7589,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,"os_memcpy(kde_buf, kde, kde_len);",120,1,"			wpa_printf(MSG_DEBUG, ""P2P: Add IP Address Request KDE ""
				   ""into EAPOL-Key 2/4"");
			os_memcpy(kde_buf, kde, kde_len);
			kde = kde_buf;
			pos = kde + kde_len;
"
7590,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,"os_memcpy(sm->anonce, key->key_nonce, WPA_NONCE_LEN);",120,1,"
	os_free(kde_buf);
	os_memcpy(sm->anonce, key->key_nonce, WPA_NONCE_LEN);
	return;

"
7592,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,"os_memcpy(gtk_buf, gd->gtk, 16);",120,1,"	if (sm->group_cipher == WPA_CIPHER_TKIP) {
		/* Swap Tx/Rx keys for Michael MIC */
		os_memcpy(gtk_buf, gd->gtk, 16);
		os_memcpy(gtk_buf + 16, gd->gtk + 24, 8);
		os_memcpy(gtk_buf + 24, gd->gtk + 16, 8);
"
7593,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,"os_memcpy(gtk_buf + 16, gd->gtk + 24, 8);",120,1,"		/* Swap Tx/Rx keys for Michael MIC */
		os_memcpy(gtk_buf, gd->gtk, 16);
		os_memcpy(gtk_buf + 16, gd->gtk + 24, 8);
		os_memcpy(gtk_buf + 24, gd->gtk + 16, 8);
		_gtk = gtk_buf;
"
7594,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,"os_memcpy(gtk_buf + 24, gd->gtk + 16, 8);",120,1,"		os_memcpy(gtk_buf, gd->gtk, 16);
		os_memcpy(gtk_buf + 16, gd->gtk + 24, 8);
		os_memcpy(gtk_buf + 24, gd->gtk + 16, 8);
		_gtk = gtk_buf;
	}
"
7598,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,"os_memcpy(sm->gtk.gtk, gd->gtk, sm->gtk.gtk_len);",120,1,"	} else {
		sm->gtk.gtk_len = gd->gtk_len;
		os_memcpy(sm->gtk.gtk, gd->gtk, sm->gtk.gtk_len);
	}

"
7600,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,"os_memcpy(gd.gtk, gtk, gtk_len);",120,1,"	gtk_len -= 2;

	os_memcpy(gd.gtk, gtk, gtk_len);
	gd.gtk_len = gtk_len;

"
7603,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,"os_memcpy(sm->igtk.igtk, igtk->igtk, sm->igtk.igtk_len);",120,1,"	} else {
		sm->igtk.igtk_len = len;
		os_memcpy(sm->igtk.igtk, igtk->igtk, sm->igtk.igtk_len);
	}

"
7605,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,"os_memcpy(sm->p2p_ip_addr, ie.ip_addr_alloc, 3 * 4);",120,1,"#ifdef CONFIG_P2P
	if (ie.ip_addr_alloc) {
		os_memcpy(sm->p2p_ip_addr, ie.ip_addr_alloc, 3 * 4);
		wpa_hexdump(MSG_DEBUG, ""P2P: IP address info"",
			    sm->p2p_ip_addr, sizeof(sm->p2p_ip_addr));
"
7606,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,"os_memcpy(gd->gtk, ie.gtk + 2, ie.gtk_len - 2);",120,1,"		return -1;
	}
	os_memcpy(gd->gtk, ie.gtk + 2, ie.gtk_len - 2);

	if (ieee80211w_set_keys(sm, &ie) < 0)
"
7608,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,"os_memcpy(ek + 16, sm->ptk.kek, sm->ptk.kek_len);",120,1,"		}
		os_memcpy(ek, key->key_iv, 16);
		os_memcpy(ek + 16, sm->ptk.kek, sm->ptk.kek_len);
		os_memcpy(gd->gtk, key_data, key_data_len);
		if (rc4_skip(ek, 32, 256, gd->gtk, key_data_len)) {
"
7609,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,"os_memcpy(gd->gtk, key_data, key_data_len);",120,1,"		os_memcpy(ek, key->key_iv, 16);
		os_memcpy(ek + 16, sm->ptk.kek, sm->ptk.kek_len);
		os_memcpy(gd->gtk, key_data, key_data_len);
		if (rc4_skip(ek, 32, 256, gd->gtk, key_data_len)) {
			os_memset(ek, 0, sizeof(ek));
"
7616,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,"os_memcpy(mic, key->key_mic, mic_len);",120,1,"	size_t mic_len = wpa_mic_len(sm->key_mgmt);

	os_memcpy(mic, key->key_mic, mic_len);
	if (sm->tptk_set) {
		os_memset(key->key_mic, 0, mic_len);
"
7618,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,"os_memcpy(&sm->ptk, &sm->tptk, sizeof(sm->ptk));",120,1,"			sm->tptk_set = 0;
			sm->ptk_set = 1;
			os_memcpy(&sm->ptk, &sm->tptk, sizeof(sm->ptk));
			os_memset(&sm->tptk, 0, sizeof(sm->tptk));
		}
"
7625,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,"os_memcpy(key_data, buf, *key_data_len);",120,1,"			return -1;
		}
		os_memcpy(key_data, buf, *key_data_len);
		os_free(buf);
		WPA_PUT_BE16(key->key_data_length, *key_data_len);
"
7626,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,"os_memcpy(tmp, buf, data_len);",120,1,"	if (tmp == NULL)
		goto out;
	os_memcpy(tmp, buf, data_len);
	key = (struct wpa_eapol_key *) (tmp + sizeof(struct ieee802_1x_hdr));
	key192 = (struct wpa_eapol_key_192 *)
"
7627,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,"os_memcpy(sm->bssid, bssid, ETH_ALEN);",120,1,"	wpa_dbg(sm->ctx->msg_ctx, MSG_DEBUG,
		""WPA: Association event - clear replay counter"");
	os_memcpy(sm->bssid, bssid, ETH_ALEN);
	os_memset(sm->rx_replay_counter, 0, WPA_REPLAY_COUNTER_LEN);
	sm->rx_replay_counter_set = 0;
"
7636,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,"os_memcpy(sm->pmk, pmk, pmk_len);",120,1,"
	sm->pmk_len = pmk_len;
	os_memcpy(sm->pmk, pmk, pmk_len);

	if (bssid) {
"
7638,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,"os_memcpy(sm->ssid, config->ssid, config->ssid_len);",120,1,"		sm->eap_conf_ctx = config->eap_conf_ctx;
		if (config->ssid) {
			os_memcpy(sm->ssid, config->ssid, config->ssid_len);
			sm->ssid_len = config->ssid_len;
		} else
"
7639,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,"os_memcpy(sm->own_addr, addr, ETH_ALEN);",120,1,"{
	if (sm)
		os_memcpy(sm->own_addr, addr, ETH_ALEN);
}

"
7640,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,"os_memcpy(sm->assoc_wpa_ie, wpa_ie, *wpa_ie_len);",120,1,"			return -1;

		os_memcpy(sm->assoc_wpa_ie, wpa_ie, *wpa_ie_len);
		sm->assoc_wpa_ie_len = *wpa_ie_len;
	}
"
7641,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,"os_memcpy(sm->assoc_wpa_ie, ie, len);",120,1,"			return -1;

		os_memcpy(sm->assoc_wpa_ie, ie, len);
		sm->assoc_wpa_ie_len = len;
	}
"
7642,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,"os_memcpy(sm->ap_wpa_ie, ie, len);",120,1,"			return -1;

		os_memcpy(sm->ap_wpa_ie, ie, len);
		sm->ap_wpa_ie_len = len;
	}
"
7643,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,"os_memcpy(sm->ap_rsn_ie, ie, len);",120,1,"			return -1;

		os_memcpy(sm->ap_rsn_ie, ie, len);
		sm->ap_rsn_ie_len = len;
	}
"
7654,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,"os_memcpy(sm->rx_replay_counter, replay_ctr, WPA_REPLAY_COUNTER_LEN);",120,1,"void wpa_sm_update_replay_ctr(struct wpa_sm *sm, const u8 *replay_ctr)
{
	os_memcpy(sm->rx_replay_counter, replay_ctr, WPA_REPLAY_COUNTER_LEN);
}

"
7655,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,"os_memcpy(buf, sm->p2p_ip_addr, 3 * 4);",120,1,"	if (sm == NULL || WPA_GET_BE32(sm->p2p_ip_addr) == 0)
		return -1;
	os_memcpy(buf, sm->p2p_ip_addr, 3 * 4);
	return 0;
}
"
7656,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,"os_memcpy(sm->ptk.kck, ptk_kck, ptk_kck_len);",120,1,"{
	if (ptk_kck && ptk_kck_len <= WPA_KCK_MAX_LEN) {
		os_memcpy(sm->ptk.kck, ptk_kck, ptk_kck_len);
		sm->ptk.kck_len = ptk_kck_len;
		wpa_printf(MSG_DEBUG, ""Updated PTK KCK"");
"
7657,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\rsn_supp\wpa.c,"os_memcpy(sm->ptk.kek, ptk_kek, ptk_kek_len);",120,1,"	}
	if (ptk_kek && ptk_kek_len <= WPA_KEK_MAX_LEN) {
		os_memcpy(sm->ptk.kek, ptk_kek, ptk_kek_len);
		sm->ptk.kek_len = ptk_kek_len;
		wpa_printf(MSG_DEBUG, ""Updated PTK KEK"");
"
7660,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\utils\common.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\utils\common.c,"os_memcpy(buf, (u8 *) &tmp, 4);",120,1,"	usec = 4295 * usec - (usec >> 5) - (usec >> 9);
	tmp = host_to_be32(sec);
	os_memcpy(buf, (u8 *) &tmp, 4);
	tmp = host_to_be32(usec);
	os_memcpy(buf + 4, (u8 *) &tmp, 4);
"
7661,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\utils\common.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\utils\common.c,"os_memcpy(buf + 4, (u8 *) &tmp, 4);",120,1,"	os_memcpy(buf, (u8 *) &tmp, 4);
	tmp = host_to_be32(usec);
	os_memcpy(buf + 4, (u8 *) &tmp, 4);
}

"
7665,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\utils\common.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\utils\common.c,"os_memcpy(res, src1, res_len);",120,1,"	if (src1) {
		if (src1_len >= res_len) {
			os_memcpy(res, src1, res_len);
			return res_len;
		}
"
7666,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\utils\common.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\utils\common.c,"os_memcpy(res, src1, src1_len);",120,1,"		}

		os_memcpy(res, src1, src1_len);
		len += src1_len;
	}
"
7667,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\utils\common.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\utils\common.c,"os_memcpy(res + len, src2, res_len - len);",120,1,"	if (src2) {
		if (len + src2_len >= res_len) {
			os_memcpy(res + len, src2, res_len - len);
			return res_len;
		}
"
7668,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\utils\common.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\utils\common.c,"os_memcpy(res + len, src2, src2_len);",120,1,"		}

		os_memcpy(res + len, src2, src2_len);
		len += src2_len;
	}
"
7669,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\utils\common.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\src\utils\common.c,"os_memcpy(res, src, len);",120,1,"	if (res == NULL)
		return NULL;
	os_memcpy(res, src, len);
	res[len] = '\0';

"
7679,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\bss.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\bss.c,"os_memcpy(bss->hessid, ie + 3, ETH_ALEN);",120,1,"	}
	if (ie[1] == 7)
		os_memcpy(bss->hessid, ie + 3, ETH_ALEN);
	else
		os_memcpy(bss->hessid, ie + 5, ETH_ALEN);
"
7680,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\bss.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\bss.c,"os_memcpy(bss->hessid, ie + 5, ETH_ALEN);",120,1,"		os_memcpy(bss->hessid, ie + 3, ETH_ALEN);
	else
		os_memcpy(bss->hessid, ie + 5, ETH_ALEN);
#endif /* CONFIG_INTERWORKING */
}
"
7681,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\bss.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\bss.c,"os_memcpy(dst->bssid, src->bssid, ETH_ALEN);",120,1,"{
	dst->flags = src->flags;
	os_memcpy(dst->bssid, src->bssid, ETH_ALEN);
	dst->freq = src->freq;
	dst->beacon_int = src->beacon_int;
"
7682,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\bss.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\bss.c,"os_memcpy(bss->ssid, ssid, ssid_len);",120,1,"	bss->last_update_idx = wpa_s->bss_update_idx;
	wpa_bss_copy_res(bss, res, fetch_time);
	os_memcpy(bss->ssid, ssid, ssid_len);
	bss->ssid_len = ssid_len;
	bss->ie_len = res->ie_len;
"
7683,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\bss.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\bss.c,"os_memcpy(bss + 1, res + 1, res->ie_len + res->beacon_ie_len);",120,1,"	bss->ie_len = res->ie_len;
	bss->beacon_ie_len = res->beacon_ie_len;
	os_memcpy(bss + 1, res + 1, res->ie_len + res->beacon_ie_len);
	wpa_bss_set_hessid(bss);

"
7685,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\config.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\config.c,"os_memcpy(buf + 1, value, len);",120,1,"		return NULL;
	buf[0] = '""';
	os_memcpy(buf + 1, value, len);
	buf[len + 1] = '""';
	buf[len + 2] = '\0';
"
7686,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\config.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\config.c,"os_memcpy(buf, addr, 2 * ETH_ALEN);",120,1,"			os_memmove(buf + 2 * ETH_ALEN, buf,
				   count * 2 * ETH_ALEN);
			os_memcpy(buf, addr, 2 * ETH_ALEN);
			count++;
			wpa_printf(MSG_MSGDUMP,
"
7687,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\config.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\config.c,"os_memcpy(buf, ""ext:"", 4);",120,1,"		if (buf == NULL)
			return NULL;
		os_memcpy(buf, ""ext:"", 4);
		os_memcpy(buf + 4, ssid->eap.password, ssid->eap.password_len);
		return buf;
"
7688,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\config.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\config.c,"os_memcpy(buf + 4, ssid->eap.password, ssid->eap.password_len);",120,1,"			return NULL;
		os_memcpy(buf, ""ext:"", 4);
		os_memcpy(buf + 4, ssid->eap.password, ssid->eap.password_len);
		return buf;
	}
"
7689,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\config.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\config.c,"os_memcpy(buf, ""hash:"", 5);",120,1,"		return NULL;

	os_memcpy(buf, ""hash:"", 5);
	wpa_snprintf_hex(buf + 5, 32 + 1, ssid->eap.password, 16);

"
7690,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\config.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\config.c,"os_memcpy(key, buf, *len);",120,1,"			   line, (unsigned int) *len);
	}
	os_memcpy(key, buf, *len);
	str_clear_free(buf);
	res = os_snprintf(title, sizeof(title), ""wep_key%d"", idx);
"
7693,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\config.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\config.c,"os_memcpy(cred->roaming_consortium, val, len);",120,1,"			return -1;
		}
		os_memcpy(cred->roaming_consortium, val, len);
		cred->roaming_consortium_len = len;
		os_free(val);
"
7694,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\config.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\config.c,"os_memcpy(cred->required_roaming_consortium, val, len);",120,1,"			return -1;
		}
		os_memcpy(cred->required_roaming_consortium, val, len);
		cred->required_roaming_consortium_len = len;
		os_free(val);
"
7695,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\config.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\config.c,"os_memcpy(e->ssid, val, len);",120,1,"
		e = &cred->excluded_ssid[cred->num_excluded_ssid++];
		os_memcpy(e->ssid, val, len);
		e->ssid_len = len;

"
7696,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\config.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\config.c,"os_memcpy(p->fqdn, val, pos - val);",120,1,"			return -1;
		}
		os_memcpy(p->fqdn, val, pos - val);

		p->exact_match = atoi(pos);
"
7697,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\config.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\config.c,"os_memcpy(p->country, pos, os_strlen(pos) + 1);",120,1,"			return -1;
		}
		os_memcpy(p->country, pos, os_strlen(pos) + 1);

		cred->num_roaming_partner++;
"
7698,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\config.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\config.c,"os_memcpy(dst, &addr.u.v4.s_addr, 4);",120,1,"
	dst = (u32 *) (((u8 *) config) + (long) data->param1);
	os_memcpy(dst, &addr.u.v4.s_addr, 4);
	wpa_printf(MSG_DEBUG, ""%s = 0x%x"", data->name,
		   WPA_GET_BE32((u8 *) dst));
"
7699,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\config_none.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\config_none.c,"os_memcpy(ssid->wep_key[0], (char *)g_sta_param_ptr->key, g_sta_param_ptr->key_len);",120,1,"	if(g_sta_param_ptr->key_len == 5 ||
		g_sta_param_ptr->key_len == 13){
		os_memcpy(ssid->wep_key[0], (char *)g_sta_param_ptr->key, g_sta_param_ptr->key_len);
		ssid->wep_key_len[0] = g_sta_param_ptr->key_len;
	}else if(g_sta_param_ptr->key_len == 10 ||
"
7700,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\config_none.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\config_none.c,"os_memcpy(ssid->wep_key[0], (char *)g_sta_param_ptr->orig_key, g_sta_param_ptr->orig_key_len);",120,1,"	}else if(g_sta_param_ptr->orig_key_len == 5 ||
		g_sta_param_ptr->orig_key_len == 13){
		os_memcpy(ssid->wep_key[0], (char *)g_sta_param_ptr->orig_key, g_sta_param_ptr->orig_key_len);
		ssid->wep_key_len[0] = g_sta_param_ptr->orig_key_len;
	}else if(g_sta_param_ptr->orig_key_len == 10 ||
"
7704,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\config_none.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\config_none.c,"os_memcpy(ssid->bssid, g_sta_param_ptr->fast_connect.bssid, 6);",120,1,"
	if ((g_sta_param_ptr->fast_connect_set) && (g_sta_param_ptr->cipher_suite != SECURITY_TYPE_AUTO)){
		os_memcpy(ssid->bssid, g_sta_param_ptr->fast_connect.bssid, 6);
		bk_printf(""bssid %02x-%02x-%02x-%02x-%02x-%02x\r\n"",
			ssid->bssid[0],ssid->bssid[1],ssid->bssid[2],
"
7707,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\events.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\events.c,"os_memcpy(wpa_s->bssid, bssid, ETH_ALEN);",120,1,"		new_bss = 1;
		random_add_randomness(bssid, ETH_ALEN);
		os_memcpy(wpa_s->bssid, bssid, ETH_ALEN);
		os_memset(wpa_s->pending_bssid, 0, ETH_ALEN);
		wpas_notify_bssid_changed(wpa_s);
"
7709,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\events.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\events.c,"os_memcpy(wpa_s->sme.prev_bssid, bssid, ETH_ALEN);",120,1,"
#ifdef CONFIG_SME
	os_memcpy(wpa_s->sme.prev_bssid, bssid, ETH_ALEN);
	wpa_s->sme.prev_bssid_set = 1;
	wpa_s->sme.last_unprot_disconnect.sec = 0;
"
7710,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\events.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\events.c,"os_memcpy(prev_pending_bssid, wpa_s->pending_bssid, ETH_ALEN);",120,1,"
	authenticating = wpa_s->wpa_state == WPA_AUTHENTICATING;
	os_memcpy(prev_pending_bssid, wpa_s->pending_bssid, ETH_ALEN);

	if (wpa_s->key_mgmt == WPA_KEY_MGMT_WPA_NONE) {
"
7711,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\events.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\events.c,"os_memcpy(wpa_s->sme.ssid, bss->ssid, bss->ssid_len);",120,1,"        wpa_s->sme.ssid_len = bss->ssid_len;
        if (bss->ssid_len > 0)
            os_memcpy(wpa_s->sme.ssid, bss->ssid, bss->ssid_len);
    }
        sme_associate(wpa_s, WPAS_MODE_INFRA, data->ft_ies.target_ap,
"
7713,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\main_supplicant.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\main_supplicant.c,"memcpy(psk, conf->ssid->psk, 32);",120,1,"    memset(psk, 0, 32);
    conf = wpa_global_ptr->ifaces->conf;
    memcpy(psk, conf->ssid->psk, 32);

    return 0;
"
7715,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\main_supplicant.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\main_supplicant.c,"os_memcpy(wpas_connect_ssid->ssid, oob_ssid, len);",120,1,"
            wpas_connect_ssid->ssid_len = len;
            os_memcpy(wpas_connect_ssid->ssid, oob_ssid, len);

            wpa_s->num_ssids_from_scan_req = 1;
"
7716,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wmm_ac.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wmm_ac.c,"os_memcpy(_tspec, tspec, sizeof(*_tspec));",120,1,"
	/* store the admitted TSPEC */
	os_memcpy(_tspec, tspec, sizeof(*_tspec));

	if (dir != WMM_AC_DIR_DOWNLINK) {
"
7717,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wmm_ac.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wmm_ac.c,"os_memcpy(addts_req->address, address, ETH_ALEN);",120,1,"
	tspec = &addts_req->tspec;
	os_memcpy(addts_req->address, address, ETH_ALEN);

	/* The dialog token cannot be zero */
"
7719,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpas_glue.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpas_glue.c,"os_memcpy(hdr + 1, data, data_len);",120,1,"
	if (data)
		os_memcpy(hdr + 1, data, data_len);
	else
		os_memset(hdr + 1, 0, data_len);
"
7721,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpas_glue.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpas_glue.c,"os_memcpy(pmk, buf + PMK_LEN, PMK_LEN);",120,1,"		res = eapol_sm_get_key(eapol, buf, 2 * PMK_LEN);
		if (res == 0) {
			os_memcpy(pmk, buf + PMK_LEN, PMK_LEN);
			os_memset(buf, 0, sizeof(buf));
		}
"
7723,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpas_glue.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpas_glue.c,"os_memcpy(wpa_s->last_gtk, key, key_len);",120,1,"	if (key_idx > 0 && addr && is_broadcast_ether_addr(addr) &&
	    alg != WPA_ALG_NONE && key_len <= sizeof(wpa_s->last_gtk)) {
		os_memcpy(wpa_s->last_gtk, key, key_len);
		wpa_s->last_gtk_len = key_len;
	}
"
7724,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpas_glue.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpas_glue.c,"os_memcpy(pos, wpa_s->own_addr, ETH_ALEN);",120,1,"	*pos++ = 0x06; /* FT Action category */
	*pos++ = action;
	os_memcpy(pos, wpa_s->own_addr, ETH_ALEN);
	pos += ETH_ALEN;
	os_memcpy(pos, target_ap, ETH_ALEN);
"
7725,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpas_glue.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpas_glue.c,"os_memcpy(pos, target_ap, ETH_ALEN);",120,1,"	os_memcpy(pos, wpa_s->own_addr, ETH_ALEN);
	pos += ETH_ALEN;
	os_memcpy(pos, target_ap, ETH_ALEN);
	pos += ETH_ALEN;
	os_memcpy(pos, ies, ies_len);
"
7726,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpas_glue.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpas_glue.c,"os_memcpy(pos, ies, ies_len);",120,1,"	os_memcpy(pos, target_ap, ETH_ALEN);
	pos += ETH_ALEN;
	os_memcpy(pos, ies, ies_len);

	ret = wpa_drv_send_action(wpa_s, wpa_s->assoc_freq, 0,
"
7729,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpas_glue.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpas_glue.c,"os_memcpy(buf + len, ssid->ssid, ssid->ssid_len);",120,1,"	}
	if (ssid->ssid && buflen > len + ssid->ssid_len) {
		os_memcpy(buf + len, ssid->ssid, ssid->ssid_len);
		len += ssid->ssid_len;
		buf[len] = '\0';
"
7732,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpa_scan.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpa_scan.c,"os_memcpy(ssids[*num_ssids].ssid, ssid->ssid, ssid->ssid_len);",120,1,"		if (!ssid->ssid || !ssid->ssid_len)
			continue;
		os_memcpy(ssids[*num_ssids].ssid, ssid->ssid, ssid->ssid_len);
		ssids[*num_ssids].ssid_len = ssid->ssid_len;
		(*num_ssids)++;
"
7735,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpa_scan.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpa_scan.c,"os_memcpy(n, src->extra_ies, src->extra_ies_len);",120,1,"		if (n == NULL)
			goto failed;
		os_memcpy(n, src->extra_ies, src->extra_ies_len);
		params->extra_ies = n;
		params->extra_ies_len = src->extra_ies_len;
"
7736,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpa_scan.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpa_scan.c,"os_memcpy(params->freqs, src->freqs, (len + 1) * sizeof(int));",120,1,"		if (params->freqs == NULL)
			goto failed;
		os_memcpy(params->freqs, src->freqs, (len + 1) * sizeof(int));
	}

"
7737,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpa_scan.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpa_scan.c,"os_memcpy(mac_addr, src->mac_addr, ETH_ALEN);",120,1,"				goto failed;

			os_memcpy(mac_addr, src->mac_addr, ETH_ALEN);
			os_memcpy(mac_addr + ETH_ALEN, src->mac_addr_mask,
				  ETH_ALEN);
"
7739,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpa_scan.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpa_scan.c,"os_memcpy(tmp, addr, ETH_ALEN);",120,1,"		if (!tmp)
			return -1;
		os_memcpy(tmp, addr, ETH_ALEN);
		os_memcpy(tmp + ETH_ALEN, mask, ETH_ALEN);
	}
"
7740,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpa_scan.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpa_scan.c,"os_memcpy(tmp + ETH_ALEN, mask, ETH_ALEN);",120,1,"			return -1;
		os_memcpy(tmp, addr, ETH_ALEN);
		os_memcpy(tmp + ETH_ALEN, mask, ETH_ALEN);
	}

"
7741,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpa_supplicant.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpa_supplicant.c,"os_memcpy(key, ssid->psk, 16);",120,1,"	switch (wpa_s->group_cipher) {
	case WPA_CIPHER_CCMP:
		os_memcpy(key, ssid->psk, 16);
		keylen = 16;
		alg = WPA_ALG_CCMP;
"
7743,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpa_supplicant.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpa_supplicant.c,"os_memcpy(key, ssid->psk, 16 + 8);",120,1,"	case WPA_CIPHER_TKIP:
		/* WPA-None uses the same Michael MIC key for both TX and RX */
		os_memcpy(key, ssid->psk, 16 + 8);
		os_memcpy(key + 16 + 8, ssid->psk + 16, 8);
		keylen = 32;
"
7744,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpa_supplicant.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpa_supplicant.c,"os_memcpy(key + 16 + 8, ssid->psk + 16, 8);",120,1,"		/* WPA-None uses the same Michael MIC key for both TX and RX */
		os_memcpy(key, ssid->psk, 16 + 8);
		os_memcpy(key + 16 + 8, ssid->psk + 16, 8);
		keylen = 32;
		alg = WPA_ALG_TKIP;
"
7749,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpa_supplicant.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpa_supplicant.c,"os_memcpy(addr, wpa_s->perm_addr, ETH_ALEN);",120,1,"		break;
	case 2:
		os_memcpy(addr, wpa_s->perm_addr, ETH_ALEN);
		if (random_mac_addr_keep_oui(addr) < 0)
			return -1;
"
7752,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpa_supplicant.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpa_supplicant.c,"os_memcpy(wpa_s->pending_bssid, bss->bssid, ETH_ALEN);",120,1,"		bssid_changed = !is_zero_ether_addr(wpa_s->bssid);
		os_memset(wpa_s->bssid, 0, ETH_ALEN);
		os_memcpy(wpa_s->pending_bssid, bss->bssid, ETH_ALEN);
		if (bssid_changed)
			wpas_notify_bssid_changed(wpa_s);
"
7754,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpa_supplicant.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpa_supplicant.c,"os_memcpy(wpa_ie, wpabuf_head(wps_ie), wpa_ie_len);",120,1,"		if (wps_ie && wpabuf_len(wps_ie) <= sizeof(wpa_ie)) {
			wpa_ie_len = wpabuf_len(wps_ie);
			os_memcpy(wpa_ie, wpabuf_head(wps_ie), wpa_ie_len);
		} else
			wpa_ie_len = 0;
"
7756,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpa_supplicant.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpa_supplicant.c,"os_memcpy(pos, ext_capab, ext_capab_len);",120,1,"				   wpa_ie_len - (pos - wpa_ie));
			wpa_ie_len += ext_capab_len;
			os_memcpy(pos, ext_capab, ext_capab_len);
		}
	}
"
7763,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpa_supplicant.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpa_supplicant.c,"os_memcpy(wpa_s->last_eapol_src, src_addr, ETH_ALEN);",120,1,"	 * still sent to the current BSSID (if available), though. */

	os_memcpy(wpa_s->last_eapol_src, src_addr, ETH_ALEN);
	if (!wpa_key_mgmt_wpa_psk(wpa_s->key_mgmt) &&
	    eapol_sm_rx_eapol(wpa_s->eapol, src_addr, buf, len) > 0)
"
7764,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpa_supplicant.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpa_supplicant.c,"os_memcpy(wpa_s->own_addr, addr, ETH_ALEN);",120,1,"		const u8 *addr = wpa_drv_get_mac_addr(wpa_s);
		if (addr)
			os_memcpy(wpa_s->own_addr, addr, ETH_ALEN);
	}

"
7765,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpa_supplicant.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd-2.5\wpa_supplicant\wpa_supplicant.c,"os_memcpy(wpa_s->perm_addr, wpa_s->own_addr, ETH_ALEN);",120,1,"	wpa_dbg(wpa_s, MSG_DEBUG, ""Own MAC address: "" MACSTR,
		MAC2STR(wpa_s->own_addr));
	os_memcpy(wpa_s->perm_addr, wpa_s->own_addr, ETH_ALEN);
	wpa_sm_set_own_addr(wpa_s->wpa, wpa_s->own_addr);

"
7770,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd_intf\hostapd_intf.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd_intf\hostapd_intf.c,"os_memcpy(beacon_ptr, bcn_info->head, bcn_info->head_len);",120,1,"    if(bcn_info->head && bcn_info->head_len)
    {
        os_memcpy(beacon_ptr, bcn_info->head, bcn_info->head_len);
    }

"
7771,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd_intf\hostapd_intf.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd_intf\hostapd_intf.c,"os_memcpy((void *)((uint32_t)beacon_ptr + bcn_info->head_len), tim_ie, BCN_TIM_IE_LEN);",120,1,"    }

    os_memcpy((void *)((uint32_t)beacon_ptr + bcn_info->head_len), tim_ie, BCN_TIM_IE_LEN);

    if(bcn_info->tail && bcn_info->tail_len)
"
7772,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd_intf\hostapd_intf.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd_intf\hostapd_intf.c,"os_memcpy((u8 *) & (key_param.key.array[0]), (u8 *)&param[1], key_param.key.length);",120,1,"    key_param.key_idx = param->u.crypt.idx;
    key_param.key.length = param->u.crypt.key_len;
    os_memcpy((u8 *) & (key_param.key.array[0]), (u8 *)&param[1], key_param.key.length);

    WPAS_PRT(""sta:%d, vif:%d, key:%d\r\n"",
"
7773,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd_intf\hostapd_intf.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd_intf\hostapd_intf.c,"os_memcpy(bcn_buf, param->u.bcn_change.beacon, param->u.bcn_change.bcn_len);",120,1,"    }

    os_memcpy(bcn_buf, param->u.bcn_change.beacon, param->u.bcn_change.bcn_len);
    os_memset(&bcn_param, 0, sizeof(BCN_PARAM_ST));

"
7775,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd_intf\hostapd_intf.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd_intf\hostapd_intf.c,"os_memcpy(scan_param.ssids[i].array, param->u.scan_req.ssids[i].ssid, scan_param.ssids[i].length);",120,1,"    {
        scan_param.ssids[i].length = param->u.scan_req.ssids[i].ssid_len;
        os_memcpy(scan_param.ssids[i].array, param->u.scan_req.ssids[i].ssid, scan_param.ssids[i].length);
    }
    scan_param.bssid = mac_addr_bcst;
"
7776,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd_intf\hostapd_intf.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd_intf\hostapd_intf.c,"os_memcpy(r->bssid, scan_rst_ptr->bssid, ETH_ALEN);",120,1,"        }

        os_memcpy(r->bssid, scan_rst_ptr->bssid, ETH_ALEN);
        r->level = scan_rst_ptr->level;
        r->freq = rw_ieee80211_get_centre_frequency(scan_rst_ptr->channel);
"
7777,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd_intf\hostapd_intf.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd_intf\hostapd_intf.c,"os_memcpy(r + 1, scan_rst_ptr + 1, scan_rst_ptr->ie_len);",120,1,"        r->tsf = WPA_GET_BE64(scan_rst_ptr->tsf);
        r->ie_len = scan_rst_ptr->ie_len;
        os_memcpy(r + 1, scan_rst_ptr + 1, scan_rst_ptr->ie_len);

        results->res[results->num++] = r;
"
7778,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd_intf\hostapd_intf.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd_intf\hostapd_intf.c,"os_memcpy((UINT8 *)&connect_param.bssid, param->u.assoc_req.bssid, ETH_ALEN);",120,1,"    int ret;

    os_memcpy((UINT8 *)&connect_param.bssid, param->u.assoc_req.bssid, ETH_ALEN);
    connect_param.flags = CONTROL_PORT_HOST;
    if(param->u.assoc_req.proto & (WPA_PROTO_WPA | WPA_PROTO_RSN))
"
7779,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd_intf\hostapd_intf.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd_intf\hostapd_intf.c,"os_memcpy(connect_param.ssid.array, param->u.assoc_req.ssid, connect_param.ssid.length);",120,1,"    connect_param.vif_idx = param->vif_idx;
    connect_param.ssid.length = param->u.assoc_req.ssid_len;
    os_memcpy(connect_param.ssid.array, param->u.assoc_req.ssid, connect_param.ssid.length);
    connect_param.ie_len = param->u.assoc_req.ie_len;
    os_memcpy((UINT8 *)connect_param.ie_buf, (UINT8 *)param->u.assoc_req.ie_buf, connect_param.ie_len);
"
7780,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd_intf\hostapd_intf.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd_intf\hostapd_intf.c,"os_memcpy((UINT8 *)connect_param.ie_buf, (UINT8 *)param->u.assoc_req.ie_buf, connect_param.ie_len);",120,1,"    os_memcpy(connect_param.ssid.array, param->u.assoc_req.ssid, connect_param.ssid.length);
    connect_param.ie_len = param->u.assoc_req.ie_len;
    os_memcpy((UINT8 *)connect_param.ie_buf, (UINT8 *)param->u.assoc_req.ie_buf, connect_param.ie_len);

    connect_param.auth_type = param->u.assoc_req.auth_alg;
"
7781,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd_intf\hostapd_intf.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd_intf\hostapd_intf.c,"os_memcpy(param->u.bss_info.bssid, cfm->bssid, ETH_ALEN);",120,1,"        return -1;

    os_memcpy(param->u.bss_info.bssid, cfm->bssid, ETH_ALEN);
    ssid_len = MIN(SSID_MAX_LEN, os_strlen((char*)cfm->ssid));
    os_memcpy(param->u.bss_info.ssid, cfm->ssid, ssid_len);
"
7782,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd_intf\hostapd_intf.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\hostapd_intf\hostapd_intf.c,"os_memcpy(param->u.bss_info.ssid, cfm->ssid, ssid_len);",120,1,"    os_memcpy(param->u.bss_info.bssid, cfm->bssid, ETH_ALEN);
    ssid_len = MIN(SSID_MAX_LEN, os_strlen((char*)cfm->ssid));
    os_memcpy(param->u.bss_info.ssid, cfm->ssid, ssid_len);
    os_free(cfm);

"
7787,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\joint_up\role_launch.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\joint_up\role_launch.c,"os_memcpy(bssid_info.bssid, link_status.bssid, 6);",120,1,"	}
	os_strncpy((char*)bssid_info.ssid, (char*)link_status.ssid, ssid_len);
	os_memcpy(bssid_info.bssid, link_status.bssid, 6);
	bssid_info.security = link_status.security;
	bssid_info.channel = link_status.channel;
"
7794,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\joint_up\role_launch.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\joint_up\role_launch.c,"os_memcpy(inNetworkInitParaAdv.ap_info.bssid, bssid_info->bssid, 6);",120,1,"	
	os_strcpy((char*)inNetworkInitParaAdv.ap_info.ssid, (char*)bssid_info->ssid);
	os_memcpy(inNetworkInitParaAdv.ap_info.bssid, bssid_info->bssid, 6);
	inNetworkInitParaAdv.ap_info.security = bssid_info->security;
	inNetworkInitParaAdv.ap_info.channel = bssid_info->channel;
"
7799,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\joint_up\role_launch.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\joint_up\role_launch.c,"os_memcpy(&entity->rlaunch, param, sizeof(LAUNCH_REQ));",120,1,"    entity->completion_cb = completion;
    entity->launch_type = LAUNCH_TYPE_ASAP;
    os_memcpy(&entity->rlaunch, param, sizeof(LAUNCH_REQ));
    
    return entity;
"
7800,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\joint_up\role_launch.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\joint_up\role_launch.c,"os_memcpy((uint8_t *)g_sta_param_ptr->orig_key, req->descr.wifi_key, g_sta_param_ptr->orig_key_len);",120,1,"					g_sta_param_ptr->orig_key_len = sizeof(g_sta_param_ptr->orig_key) - 1;
				}
				os_memcpy((uint8_t *)g_sta_param_ptr->orig_key, req->descr.wifi_key, g_sta_param_ptr->orig_key_len);
				g_sta_param_ptr->orig_key[g_sta_param_ptr->orig_key_len] = '\0';
			}
"
7809,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\tcp_server.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\tcp_server.c,"os_memcpy(&client_addr, arg, sizeof(struct sockaddr_in));",120,1,"
    buf = gbuf;
    os_memcpy(&client_addr, arg, sizeof(struct sockaddr_in));
    
    for(int i=0; i<1024; i++)
"
7810,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\dhcpd\dhcp-server.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\dhcpd\dhcp-server.c,"memcpy((uint8_t *) &dhcps.client_ip, (uint8_t *) opt->value, 4);",120,1,"			    (uint8_t)opt->value[2], 
			    (uint8_t)opt->value[3]);
			memcpy((uint8_t *) &dhcps.client_ip, (uint8_t *) opt->value, 4);
			got_client_ip = 1;
		}
"
7815,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\port\ethernetif.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\port\ethernetif.c,"os_memcpy(netif->hwaddr, macptr, ETHARP_HWADDR_LEN);",120,1,"    
    netif->hwaddr_len = ETHARP_HWADDR_LEN;
    os_memcpy(netif->hwaddr, macptr, ETHARP_HWADDR_LEN);
    /* maximum transfer unit */
    netif->mtu = 1500;
"
7818,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\port\net.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\port\net.c,"memcpy(&sta_ip_settings, &addr, sizeof(addr));",120,1,"	}
	if (iface == 1) // Station
		memcpy(&sta_ip_settings, &addr, sizeof(addr));
	else
		memcpy(&uap_ip_settings, &addr, sizeof(addr));
"
7819,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\port\net.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\port\net.c,"memcpy(&uap_ip_settings, &addr, sizeof(addr));",120,1,"		memcpy(&sta_ip_settings, &addr, sizeof(addr));
	else
		memcpy(&uap_ip_settings, &addr, sizeof(addr));
}

"
7826,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\port\net.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\port\net.c,"os_memcpy(macaddr, &if_handle->netif.hwaddr[0], if_handle->netif.hwaddr_len);",120,1,"	struct interface *if_handle = (struct interface *)intrfc_handle;

    os_memcpy(macaddr, &if_handle->netif.hwaddr[0], if_handle->netif.hwaddr_len);

	return 0;
"
7841,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\apps\httpd\makefsdata\makefsdata.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\apps\httpd\makefsdata\makefsdata.c,"memcpy(ret_buf, s_outbuf, out_bytes);",120,1,"          ret_buf = (u8_t*)os_malloc(out_bytes);
          LWIP_ASSERT(""ret_buf != NULL"", ret_buf != NULL);
          memcpy(ret_buf, s_outbuf, out_bytes);
          {
            /* sanity-check compression be inflating and comparing to the original */
"
7844,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\apps\httpd\makefsdata\makefsdata.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\apps\httpd\makefsdata\makefsdata.c,"memcpy(&file_buffer_c[off], NEWLINE, NEWLINE_LEN);",120,1,"    if ((++src_off % HEX_BYTES_PER_LINE) == 0) {
      LWIP_ASSERT(""file_buffer_c overflow"", off < sizeof(file_buffer_c) - NEWLINE_LEN);
      memcpy(&file_buffer_c[off], NEWLINE, NEWLINE_LEN);
      off += NEWLINE_LEN;
    }
"
7852,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\apps\httpd\makefsdata\makefsdata.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\apps\httpd\makefsdata\makefsdata.c,"memcpy(&hdr_buf[hdr_len], cur_string, cur_len);",120,1,"  i = 0;
  if (precalcChksum) {
    memcpy(&hdr_buf[hdr_len], cur_string, cur_len);
    hdr_len += cur_len;
  }
"
7857,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\apps\httpd\makefsdata\makefsdata.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\apps\httpd\makefsdata\makefsdata.c,"memcpy(&hdr_buf[hdr_len], intbuf, cur_len);",120,1,"    i = 0;
    if (precalcChksum) {
      memcpy(&hdr_buf[hdr_len], intbuf, cur_len);
      hdr_len += cur_len;
    }
"
7863,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\apps\httpd\makefsdata\makefsdata.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\apps\httpd\makefsdata\makefsdata.c,"memcpy(&hdr_buf[hdr_len], modbuf, cur_len);",120,1,"    i = 0;
    if (precalcChksum) {
      memcpy(&hdr_buf[hdr_len], modbuf, cur_len);
      hdr_len += cur_len;
    }
"
7937,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\netif\ppp\chap-new.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\netif\ppp\chap-new.c,"memcpy(p + 1 + clen, pcb->chap_server.name, nlen);",120,1,"	clen = *p;
	nlen = strlen(pcb->chap_server.name);
	memcpy(p + 1 + clen, pcb->chap_server.name, nlen);

	len = CHAP_HDRLEN + 1 + clen + nlen;
"
7938,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\netif\ppp\chap-new.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\netif\ppp\chap-new.c,"memcpy(outp + CHAP_HDRLEN, message, mlen);",120,1,"	outp[3] = len;
	if (mlen > 0)
		memcpy(outp + CHAP_HDRLEN, message, mlen);
	ppp_write(pcb, p);

"
7941,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\netif\ppp\chap-new.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\netif\ppp\chap-new.c,"memcpy(outp + clen + 1, pcb->chap_client.name, nlen);",120,1,"	clen = *outp;
	nlen = strlen(pcb->chap_client.name);
	memcpy(outp + clen + 1, pcb->chap_client.name, nlen);

	outp = (u_char*)p->payload + PPP_HDRLEN;
"
7942,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\netif\ppp\chap_ms.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\netif\ppp\chap_ms.c,"memcpy(challenge, mschap_challenge, 8);",120,1,"#ifdef DEBUGMPPEKEY
	if (mschap_challenge && strlen(mschap_challenge) == 8)
		memcpy(challenge, mschap_challenge, 8);
	else
#endif
"
7943,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\netif\ppp\chap_ms.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\netif\ppp\chap_ms.c,"memcpy(challenge, mschap_challenge, 16);",120,1,"#ifdef DEBUGMPPEKEY
	if (mschap_challenge && strlen(mschap_challenge) == 16)
		memcpy(challenge, mschap_challenge, 16);
	else
#endif
"
7945,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\netif\ppp\demand.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\netif\ppp\demand.c,"memcpy(pkt->data, frame, len);",120,1,"	pkt->length = len;
	pkt->next = NULL;
	memcpy(pkt->data, frame, len);
	if (pend_q == NULL)
	    pend_q = pkt;
"
7973,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\netif\ppp\utils.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\netif\ppp\utils.c,"memcpy(buf, fmt, len);",120,1,"	    if (len > buflen)
		len = buflen;
	    memcpy(buf, fmt, len);
	    buf += len;
	    buflen -= len;
"
7974,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\netif\ppp\utils.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\netif\ppp\utils.c,"memcpy(buf, str, len);",120,1,"	if (len > buflen)
	    len = buflen;
	memcpy(buf, str, len);
	buf += len;
	buflen -= len;
"
7975,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\netif\ppp\utils.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\netif\ppp\utils.c,"memcpy(linep, buf, l);",120,1,"		if (linep + l < line + sizeof(line)) {
			if (l > 0) {
				memcpy(linep, buf, l);
				linep += l;
			}
"
7976,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\netif\ppp\utils.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\netif\ppp\utils.c,"memcpy(line, p, n);",120,1,"	l = buf + n - p;
	if (l > 0) {
		memcpy(line, p, n);
		linep = line + l;
	}
"
7985,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\test\unit\dhcp\test_dhcp.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\test\unit\dhcp\test_dhcp.c,"memcpy(q->payload, data, q->len);",120,1,"  fail_unless(p != NULL);
  for(q = p; q != NULL; q = q->next) {
    memcpy(q->payload, data, q->len);
    data += q->len;
  }
"
7986,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\test\unit\dhcp\test_dhcp.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\test\unit\dhcp\test_dhcp.c,"memcpy(&dhcp_offer[46], &xid, 4);",120,1,"  fail_unless(txpacket == 1); /* DHCP discover sent */
  xid = netif_dhcp_data(&net_test)->xid; /* Write bad xid, not using htonl! */
  memcpy(&dhcp_offer[46], &xid, 4);
  send_pkt(&net_test, dhcp_offer, sizeof(dhcp_offer));

"
7987,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\test\unit\dhcp\test_dhcp.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\test\unit\dhcp\test_dhcp.c,"memcpy(&dhcp_offer[46], &xid, 4); */",120,1,"  fail_unless(txpacket == 1, ""TX %d packets, expected 1"", txpacket); /* Nothing more sent */
  xid = htonl(netif_dhcp_data(&net_test)->xid);
  memcpy(&dhcp_offer[46], &xid, 4); /* insert correct transaction id */
  send_pkt(&net_test, dhcp_offer, sizeof(dhcp_offer));

"
7988,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\test\unit\dhcp\test_dhcp.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\test\unit\dhcp\test_dhcp.c,"memcpy(&dhcp_ack[46], &xid, 4);",120,1,"  fail_unless(txpacket == 2, ""TX %d packets, expected 2"", txpacket); /* DHCP request sent */
  xid = netif_dhcp_data(&net_test)->xid; /* Write bad xid, not using htonl! */
  memcpy(&dhcp_ack[46], &xid, 4);
  send_pkt(&net_test, dhcp_ack, sizeof(dhcp_ack));

"
7989,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\test\unit\dhcp\test_dhcp.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\test\unit\dhcp\test_dhcp.c,"memcpy(&dhcp_ack[46], &xid, 4); */",120,1,"  fail_unless(txpacket == 2, ""TX %d packets, still expected 2"", txpacket); /* No more sent */
  xid = htonl(netif_dhcp_data(&net_test)->xid); /* xid updated */
  memcpy(&dhcp_ack[46], &xid, 4); /* insert transaction id */
  send_pkt(&net_test, dhcp_ack, sizeof(dhcp_ack));

"
7994,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\test\unit\dhcp\test_dhcp.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\test\unit\dhcp\test_dhcp.c,"memcpy(&relay_offer[46], &xid, 4); */",120,1,"  fail_unless(txpacket == 1); /* Nothing more sent */
  xid = htonl(netif_dhcp_data(&net_test)->xid);
  memcpy(&relay_offer[46], &xid, 4); /* insert correct transaction id */
  send_pkt(&net_test, relay_offer, sizeof(relay_offer));

"
7995,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\test\unit\dhcp\test_dhcp.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\test\unit\dhcp\test_dhcp.c,"memcpy(&relay_ack1[46], &xid, 4); */",120,1,"  fail_unless(txpacket == 2, ""txpkt = %d, should be 2"", txpacket);
  xid = htonl(netif_dhcp_data(&net_test)->xid); /* xid updated */
  memcpy(&relay_ack1[46], &xid, 4); /* insert transaction id */
  send_pkt(&net_test, relay_ack1, sizeof(relay_ack1));

"
7996,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\test\unit\dhcp\test_dhcp.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\test\unit\dhcp\test_dhcp.c,"memcpy(&relay_ack2[46], &xid, 4); */",120,1,"
  xid = htonl(netif_dhcp_data(&net_test)->xid); /* xid updated */
  memcpy(&relay_ack2[46], &xid, 4); /* insert transaction id */
  send_pkt(&net_test, relay_ack2, sizeof(relay_ack2));

"
7999,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\test\unit\dhcp\test_dhcp.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\test\unit\dhcp\test_dhcp.c,"memcpy(&dhcp_nack_no_endmarker[46], &xid, 4); */",120,1,"  fail_unless(txpacket == 2); /* No more sent */
  xid = htonl(netif_dhcp_data(&net_test)->xid); /* xid updated */
  memcpy(&dhcp_nack_no_endmarker[46], &xid, 4); /* insert transaction id */
  send_pkt(&net_test, dhcp_nack_no_endmarker, sizeof(dhcp_nack_no_endmarker));

"
8000,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\test\unit\dhcp\test_dhcp.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\test\unit\dhcp\test_dhcp.c,"memcpy(&dhcp_offer_invalid_overload[46], &xid, 4); */",120,1,"  fail_unless(txpacket == 1); /* DHCP discover sent */
  xid = htonl(netif_dhcp_data(&net_test)->xid);
  memcpy(&dhcp_offer_invalid_overload[46], &xid, 4); /* insert correct transaction id */
  dhcp_offer_invalid_overload[311] = 3;
  send_pkt(&net_test, dhcp_offer_invalid_overload, sizeof(dhcp_offer_invalid_overload));
"
8065,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\music_player\app_music.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\music_player\app_music.c,"memcpy(app_player.file_info.ext_name,pFile->extname,3);",120,1,"
	app_player.block_played = 0;
	memcpy(app_player.file_info.ext_name,pFile->extname,3);
	memcpy(app_player.file_info.filename,pFile->fname,8);
	return 0;
"
8066,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\music_player\app_music.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\music_player\app_music.c,"memcpy(app_player.file_info.filename,pFile->fname,8);",120,1,"	app_player.block_played = 0;
	memcpy(app_player.file_info.ext_name,pFile->extname,3);
	memcpy(app_player.file_info.filename,pFile->fname,8);
	return 0;
}
"
8077,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\music_player\driver_audio_if.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\music_player\driver_audio_if.c,"memcpy( (uint8_t *)&rb->buffp[0], buff + differ, cpy_size - differ);",120,1,"        memcpy( (uint8_t *)&rb->buffp[rb->wptr],
                buff, differ);
        memcpy( (uint8_t *)&rb->buffp[0], buff + differ, cpy_size - differ);
        rb->wptr = cpy_size - differ;
    }
"
8079,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\music_player\driver_audio_if.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\music_player\driver_audio_if.c,"memcpy( buff, &rb->buffp[rb->rptr], len );",120,1,"        if( len < size1 )
        {
            memcpy( buff, &rb->buffp[rb->rptr], len );
            ret = len;
            rb->rptr += len;
"
8080,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\music_player\driver_audio_if.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\music_player\driver_audio_if.c,"memcpy( buff, &rb->buffp[rb->rptr], size1 );",120,1,"        else
        {
            memcpy( buff, &rb->buffp[rb->rptr], size1 );
            if( len - size1 < size2 )
            {
"
8081,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\music_player\driver_audio_if.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\music_player\driver_audio_if.c,"memcpy( buff + size1, &rb->buffp[0], (len - size1) );",120,1,"            if( len - size1 < size2 )
            {
                memcpy( buff + size1, &rb->buffp[0], (len - size1) );
                ret = len;
                rb->rptr = len - size1;
"
8082,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\music_player\driver_audio_if.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\music_player\driver_audio_if.c,"memcpy( buff + size1, &rb->buffp[0], size2 );",120,1,"            else
            {
                memcpy( buff + size1, &rb->buffp[0], size2 );
                ret = size1 + size2;
                rb->rptr = size2;
"
8097,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\music_player\Mp3Lib\layer21.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\music_player\Mp3Lib\layer21.c,"memcpy(synth_buf + 512, synth_buf, 32 * sizeof(int16_t));",120,1,"    }
    /* copy to avoid wrap */
    memcpy(synth_buf + 512, synth_buf, 32 * sizeof(int16_t));

    samples2 = samples + 31 * incr;
"
8098,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\music_player\Mp3Lib\layer21.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\music_player\Mp3Lib\layer21.c,"memcpy(&header,buf,4);",120,1,"    uint32_t header;
    short *out_samples = data;
    memcpy(&header,buf,4);
    if(mpa_decode_header(s, header)<=0)
    {
"
8099,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\music_player\Mp3Lib\mp3dec.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\music_player\Mp3Lib\mp3dec.c,"memcpy(&header0,buf+i,4);",120,1,"		        return SYNCWORD_NOT_SURE | i; 
		    }
		    memcpy(&header0,buf+i,4);
		    memcpy(&header1,buf+i+frsz,4);
		    //os_printf(""head01:%x,%x,i = %d, frsz = %d,nBytes = %d\r\n"",header0,header1,i,frsz,nBytes);
"
8100,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\music_player\Mp3Lib\mp3dec.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\music_player\Mp3Lib\mp3dec.c,"memcpy(&header1,buf+i+frsz,4);",120,1,"		    }
		    memcpy(&header0,buf+i,4);
		    memcpy(&header1,buf+i+frsz,4);
		    //os_printf(""head01:%x,%x,i = %d, frsz = %d,nBytes = %d\r\n"",header0,header1,i,frsz,nBytes);
		    if((header0 & MP3HEADERMASK) == (header1 & MP3HEADERMASK))
"
8104,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\music_player\Mp3Lib\mp3dec.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\music_player\Mp3Lib\mp3dec.c,"memcpy(&header,*inbuf,4);",120,1,"			    int32_t nL2FrmSize;
				int32_t header;
				memcpy(&header,*inbuf,4);
				nL2FrmSize = L2_GetFrameSize(mp3DecInfo->L2DecInfo,header);
				if(GET_MAINBUF_DATA_LEN(mp3DecInfo) < nL2FrmSize)
"
8107,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\music_player\Mp3Lib\mp3dec.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\music_player\Mp3Lib\mp3dec.c,"memcpy(p_des, p_src, len);",120,1,"					p_src = *inbuf - BIT_RESVOR_SIZE;
					len = BIT_RESVOR_SIZE;
					memcpy(p_des, p_src, len);					
					
				} else {
"
8109,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\net_param_intf\net_param.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\net_param_intf\net_param.c,"os_memcpy(item_buf,ptr0,4);",120,1,"		case RF_CFG_MODE_ITEM: 
		case RF_CFG_TSSI_B_ITEM:
			os_memcpy(item_buf,ptr0,4);
			break;
			
"
8110,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\net_param_intf\net_param.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\net_param_intf\net_param.c,"os_memcpy(item_buf,ptr0,6);",120,1,"			
		case WIFI_MAC_ITEM:
			os_memcpy(item_buf,ptr0,6);
			break;
			
"
8111,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\net_param_intf\net_param.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\net_param_intf\net_param.c,"os_memcpy(item_buf,ptr0,32);",120,1,"			
		case SSID_KEY_ITEM:
			os_memcpy(item_buf,ptr0,32);
			os_memcpy(item_buf+32,ptr1,64);
			break;
"
8112,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\net_param_intf\net_param.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\net_param_intf\net_param.c,"os_memcpy(item_buf+32,ptr1,64);",120,1,"		case SSID_KEY_ITEM:
			os_memcpy(item_buf,ptr0,32);
			os_memcpy(item_buf+32,ptr1,64);
			break;
			
"
8113,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\net_param_intf\net_param.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\net_param_intf\net_param.c,"os_memcpy(item_buf,ptr0,16);",120,1,"			
		case IP_CONFIG_ITEM:
			os_memcpy(item_buf,ptr0,16);
			os_memcpy(item_buf+16,ptr1,16);
			os_memcpy(item_buf+32,ptr2,16);
"
8114,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\net_param_intf\net_param.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\net_param_intf\net_param.c,"os_memcpy(item_buf+16,ptr1,16);",120,1,"		case IP_CONFIG_ITEM:
			os_memcpy(item_buf,ptr0,16);
			os_memcpy(item_buf+16,ptr1,16);
			os_memcpy(item_buf+32,ptr2,16);
			break;
"
8115,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\net_param_intf\net_param.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\net_param_intf\net_param.c,"os_memcpy(item_buf+32,ptr2,16);",120,1,"			os_memcpy(item_buf,ptr0,16);
			os_memcpy(item_buf+16,ptr1,16);
			os_memcpy(item_buf+32,ptr2,16);
			break;
			
"
8117,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\net_param_intf\net_param.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\net_param_intf\net_param.c,"os_memcpy(tmpptr,&head,sizeof(TLV_HEADER_ST));",120,1,"
//set TLV header
	os_memcpy(tmpptr,&head,sizeof(TLV_HEADER_ST));

	hal_flash_lock();
"
8118,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\power_save\mcu_ps.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\power_save\mcu_ps.c,"memcpy(&bssid, &(bcn->h.addr3), 6);",120,1,"    {
        mcu_ps_tsf_cal((UINT64)0);
        memcpy(&bssid, &(bcn->h.addr3), 6);
    }
    else
"
8120,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_ieee80211.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_ieee80211.c,"os_memcpy(&g_country_code.cfg, country, sizeof(wifi_country_t));",120,1,"        prev_policy = g_country_code.cfg.policy;
        
        os_memcpy(&g_country_code.cfg, country, sizeof(wifi_country_t));
        os_printf(""rw_ieee80211_set_country code:\r\n"");
        os_printf(""code: %s\r\n"", g_country_code.cfg.cc);
"
8121,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_ieee80211.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_ieee80211.c,"os_memcpy(country, &g_country_code.cfg, sizeof(wifi_country_t));",120,1,"            return kNotInitializedErr;
        
        os_memcpy(country, &g_country_code.cfg, sizeof(wifi_country_t));

        return kNoErr;
"
8122,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_msdu.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_msdu.c,"gdma_memcpy((void *)((UINT32)orig_addr + CFG_MSDU_RESV_HEAD_LEN), buf, len);",120,1,"{
#if CFG_GENERAL_DMA
    gdma_memcpy((void *)((UINT32)orig_addr + CFG_MSDU_RESV_HEAD_LEN), buf, len);
#else
    os_memmove((void *)((UINT32)orig_addr + CFG_MSDU_RESV_HEAD_LEN), buf, len);
"
8124,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_msdu.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_msdu.c,"os_memcpy(&host_ptr->eth_dest_addr, &eth_hdr_ptr->e_dest, sizeof(host_ptr->eth_dest_addr));",120,1,"    host_ptr = &dst_local->host;

    os_memcpy(&host_ptr->eth_dest_addr, &eth_hdr_ptr->e_dest, sizeof(host_ptr->eth_dest_addr));
    os_memcpy(&host_ptr->eth_src_addr, &eth_hdr_ptr->e_src, sizeof(host_ptr->eth_src_addr));
}
"
8125,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_msdu.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_msdu.c,"os_memcpy(&host_ptr->eth_src_addr, &eth_hdr_ptr->e_src, sizeof(host_ptr->eth_src_addr));",120,1,"
    os_memcpy(&host_ptr->eth_dest_addr, &eth_hdr_ptr->e_dest, sizeof(host_ptr->eth_dest_addr));
    os_memcpy(&host_ptr->eth_src_addr, &eth_hdr_ptr->e_src, sizeof(host_ptr->eth_src_addr));
}

"
8126,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_msdu.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_msdu.c,"gdma_memcpy(upper_buf, node_ptr->msdu_ptr, count);",120,1,"        count = MIN(len, node_ptr->len);
#if CFG_GENERAL_DMA
        gdma_memcpy(upper_buf, node_ptr->msdu_ptr, count);
#else
        os_memcpy(upper_buf, node_ptr->msdu_ptr, count);
"
8127,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_msdu.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_msdu.c,"os_memcpy(upper_buf, node_ptr->msdu_ptr, count);",120,1,"        gdma_memcpy(upper_buf, node_ptr->msdu_ptr, count);
#else
        os_memcpy(upper_buf, node_ptr->msdu_ptr, count);
#endif
        ret = count;
"
8128,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_msg_rx.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_msg_rx.c,"os_memcpy(ssid_b, elmt_addr + MAC_SSID_SSID_OFT, ssid_len);",120,1,"
                
                os_memcpy(ssid_b, elmt_addr + MAC_SSID_SSID_OFT, ssid_len);
                os_printf(""drop: %s, chan:%d\r\n"", ssid_b, chann);
            }
"
8129,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_msg_rx.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_msg_rx.c,"os_memcpy(item->ssid, elmt_addr + MAC_SSID_SSID_OFT, ssid_len);",120,1,"            ssid_len = MAC_SSID_LEN;

        os_memcpy(item->ssid, elmt_addr + MAC_SSID_SSID_OFT, ssid_len);
    }
    else
"
8130,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_msg_rx.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_msg_rx.c,"os_memcpy(item->bssid, probe_rsp_ieee80211_ptr->bssid, ETH_ALEN);",120,1,"    }

    os_memcpy(item->bssid, probe_rsp_ieee80211_ptr->bssid, ETH_ALEN);
    item->channel = chann;
    item->beacon_int = probe_rsp_ieee80211_ptr->rsp.beacon_int;
"
8131,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_msg_rx.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_msg_rx.c,"os_memcpy(item->tsf, probe_rsp_ieee80211_ptr->rsp.timestamp, 8);",120,1,"    item->on_channel = on_channel;

    os_memcpy(item->tsf, probe_rsp_ieee80211_ptr->rsp.timestamp, 8);

    item->ie_len = vies_len;
"
8132,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_msg_rx.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_msg_rx.c,"os_memcpy(item + 1, var_part_addr, vies_len);",120,1,"
    item->ie_len = vies_len;
    os_memcpy(item + 1, var_part_addr, vies_len);

    item->security = get_security_type_from_ie((u8 *)var_part_addr, vies_len, item->caps);
"
8133,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_msg_rx.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_msg_rx.c,"os_memcpy(tx_msg->cfm, &rx_msg->param[0], rx_msg->param_len);",120,1,"
            if(tx_msg->cfm && rx_msg->param_len)
                os_memcpy(tx_msg->cfm, &rx_msg->param[0], rx_msg->param_len);

            ret = rtos_set_semaphore(&tx_msg->semaphore);
"
8134,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_msg_tx.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_msg_tx.c,"os_memcpy(&(add_if_req_param->addr.array[0]), mac, ETH_ALEN);",120,1,"
    /* Set parameters for the ADD_IF_REQ message */
    os_memcpy(&(add_if_req_param->addr.array[0]), mac, ETH_ALEN);
    switch (iftype)
    {
"
8135,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_msg_tx.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_msg_tx.c,"os_memcpy(&(req->mac_addr.array[0]), param->sta_addr, ETH_ALEN);",120,1,"
    /* Set parameters for the MM_STA_ADD_REQ message */
    os_memcpy(&(req->mac_addr.array[0]), param->sta_addr, ETH_ALEN);

    req->vif_idx = param->ap_vif_idx;
"
8136,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_msg_tx.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_msg_tx.c,"os_memcpy(&(key_add_req->key.array[0]), &(param->key.array[0]), param->key.length);",120,1,"    key_add_req->inst_nbr = param->inst_nbr;
    key_add_req->key.length = param->key.length;
    os_memcpy(&(key_add_req->key.array[0]), &(param->key.array[0]), param->key.length);

    key_add_req->cipher_suite = param->cipher_suite;
"
8137,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_msg_tx.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_msg_tx.c,"os_memcpy(&req->bssid, &scan_param->bssid, sizeof(req->bssid));",120,1,"    rw_ieee80211_init_scan_chan(req);

    os_memcpy(&req->bssid, &scan_param->bssid, sizeof(req->bssid));
    req->ssid_cnt = scan_param->num_ssids;
    for(i = 0; i < req->ssid_cnt; i++)
"
8138,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_msg_tx.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_msg_tx.c,"os_memcpy(req->ssid[i].array, scan_param->ssids[i].array, req->ssid[i].length);",120,1,"    {
        req->ssid[i].length = scan_param->ssids[i].length;
        os_memcpy(req->ssid[i].array, scan_param->ssids[i].array, req->ssid[i].length);
    }

"
8139,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_msg_tx.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_msg_tx.c,"os_memcpy(req->ssid.array, sme->ssid.array, sme->ssid.length);",120,1,"    /* Set parameters for the SM_CONNECT_REQ message */
    req->ssid.length = sme->ssid.length;
    os_memcpy(req->ssid.array, sme->ssid.array, sme->ssid.length);
    os_memcpy(&req->bssid, &sme->bssid, sizeof(sme->bssid));

"
8140,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_msg_tx.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_msg_tx.c,"os_memcpy(&req->bssid, &sme->bssid, sizeof(sme->bssid));",120,1,"    req->ssid.length = sme->ssid.length;
    os_memcpy(req->ssid.array, sme->ssid.array, sme->ssid.length);
    os_memcpy(&req->bssid, &sme->bssid, sizeof(sme->bssid));

    req->vif_idx = sme->vif_idx;
"
8141,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_msg_tx.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\rwnx_intf\rw_msg_tx.c,"os_memcpy((UINT8 *)req->ie_buf, (UINT8 *)sme->ie_buf, req->ie_len);",120,1,"    req->ie_len = sme->ie_len;
    req->auth_type = sme->auth_type;
    os_memcpy((UINT8 *)req->ie_buf, (UINT8 *)sme->ie_buf, req->ie_len);

    /* Send the SM_CONNECT_REQ message to LMAC FW */
"
8142,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\sdio_intf\sdio_intf.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\sdio_intf\sdio_intf.c,"os_memcpy(&host_ptr->eth_dest_addr, &eth_hdr_ptr->h_dest, sizeof(host_ptr->eth_dest_addr));",120,1,"    host_ptr = &dst_local->host;

    os_memcpy(&host_ptr->eth_dest_addr, &eth_hdr_ptr->h_dest, sizeof(host_ptr->eth_dest_addr));
    os_memcpy(&host_ptr->eth_src_addr, &eth_hdr_ptr->h_src, sizeof(host_ptr->eth_src_addr));
}
"
8143,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\sdio_intf\sdio_intf.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\sdio_intf\sdio_intf.c,"os_memcpy(&host_ptr->eth_src_addr, &eth_hdr_ptr->h_src, sizeof(host_ptr->eth_src_addr));",120,1,"
    os_memcpy(&host_ptr->eth_dest_addr, &eth_hdr_ptr->h_dest, sizeof(host_ptr->eth_dest_addr));
    os_memcpy(&host_ptr->eth_src_addr, &eth_hdr_ptr->h_src, sizeof(host_ptr->eth_src_addr));
}

"
8145,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\sdio_intf\sdio_intf.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\sdio_intf\sdio_intf.c,"os_memcpy((void *)((UINT32)assoc_rsp_ptr + sizeof(STM32_CMD_HDR_S)), msg->param, msg->param_len);",120,1,"    assoc_rsp_ptr->hdr.size    = len - sizeof(STM32_FRAME_HDR);
#if CFG_REAL_SDIO
    os_memcpy((void *)((UINT32)assoc_rsp_ptr + sizeof(STM32_CMD_HDR_S)), msg->param, msg->param_len);
#else
    assoc_rsp_ptr->statuscode = conn_ind_ptr->status_code;
"
8146,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\sdio_intf\sdio_intf.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\sdio_intf\sdio_intf.c,"os_memcpy(&ssid[0], elmt_addr + MAC_SSID_SSID_OFT, ssid_len);",120,1,"            ssid_len = MAC_SSID_LEN;

        os_memcpy(&ssid[0], elmt_addr + MAC_SSID_SSID_OFT, ssid_len);
        ssid[ssid_len] = '\0';
        SDIO_INTF_PRT(""____ssid:%s\r\n"", ssid);
"
8147,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\sdio_intf\sdio_intf.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\sdio_intf\sdio_intf.c,"os_memcpy((void *)((UINT32)stm32_scan_rsp_ptr + sizeof(STM32_CMD_HDR_S)) , msg->param, msg->param_len);",120,1,"#if CFG_REAL_SDIO
    stm32_scan_rsp_ptr->hdr.size    = msg->param_len;
    os_memcpy((void *)((UINT32)stm32_scan_rsp_ptr + sizeof(STM32_CMD_HDR_S)) , msg->param, msg->param_len);
#else
    stm32_scan_rsp_ptr->hdr.size    = len - sizeof(STM32_FRAME_HDR);
"
8148,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\sdio_intf\sdio_intf.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\sdio_intf\sdio_intf.c,"os_memcpy(beacon_ptr->bssid, probe_rsp_ieee80211_ptr->bssid, ETH_ALEN);",120,1,"    beacon_ptr = &stm32_scan_rsp_ptr->beacon_info;
    beacon_ptr->len = sizeof(BEACON_INFO_S) + vies_len - 2; // 2-->len
    os_memcpy(beacon_ptr->bssid, probe_rsp_ieee80211_ptr->bssid, ETH_ALEN);
    beacon_ptr->rssi = scanu_ret_ptr->rssi;
    os_memcpy(beacon_ptr->timestamp, probe_rsp_ieee80211_ptr->rsp.timestamp, BEACON_TIMESTAMP_LEN);
"
8149,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\sdio_intf\sdio_intf.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\sdio_intf\sdio_intf.c,"os_memcpy(beacon_ptr->timestamp, probe_rsp_ieee80211_ptr->rsp.timestamp, BEACON_TIMESTAMP_LEN);",120,1,"    os_memcpy(beacon_ptr->bssid, probe_rsp_ieee80211_ptr->bssid, ETH_ALEN);
    beacon_ptr->rssi = scanu_ret_ptr->rssi;
    os_memcpy(beacon_ptr->timestamp, probe_rsp_ieee80211_ptr->rsp.timestamp, BEACON_TIMESTAMP_LEN);
    beacon_ptr->beacon_interval = probe_rsp_ieee80211_ptr->rsp.beacon_int;
    beacon_ptr->capability = probe_rsp_ieee80211_ptr->rsp.capab_info;
"
8150,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\sdio_intf\sdio_intf.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\sdio_intf\sdio_intf.c,"os_memcpy(stm32_scan_rsp_ptr->tlvbuffer, probe_rsp_ieee80211_ptr->rsp.variable, vies_len);",120,1,"    beacon_ptr->capability = probe_rsp_ieee80211_ptr->rsp.capab_info;

    os_memcpy(stm32_scan_rsp_ptr->tlvbuffer, probe_rsp_ieee80211_ptr->rsp.variable, vies_len);
#endif

"
8162,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\sdio_intf\sdio_intf.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\sdio_intf\sdio_intf.c,"os_memcpy((char *)&sm_connect_req_ptr->ssid, temp, sizeof(struct mac_ssid));",120,1,"#if CFG_REAL_SDIO
    temp = (char *)((UINT32)asso_ptr + sizeof(STM32_CMD_HDR_S));
    os_memcpy((char *)&sm_connect_req_ptr->ssid, temp, sizeof(struct mac_ssid));
    os_memcpy((char *)&sm_connect_req_ptr->bssid,
              temp + sizeof(struct mac_ssid) + 1, sizeof(struct sm_connect_req) - sizeof(struct mac_ssid));
"
8163,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\sdio_intf\sdio_intf.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\sdio_intf\sdio_intf.c,"os_memcpy(sm_connect_req_ptr->ssid.array, CFG_OOB_CONNECT_SSID, sm_connect_req_ptr->ssid.length);",120,1,"#if (0 == CFG_WIFI_AP_MODE)
    sm_connect_req_ptr->ssid.length = os_strlen((const char *)CFG_OOB_CONNECT_SSID);
    os_memcpy(sm_connect_req_ptr->ssid.array, CFG_OOB_CONNECT_SSID, sm_connect_req_ptr->ssid.length);
#endif

"
8164,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\sdio_intf\sdio_intf.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\sdio_intf\sdio_intf.c,"os_memcpy(&sm_connect_req_ptr->bssid, &asso_ptr->bssid, sizeof(asso_ptr->bssid));",120,1,"#endif

    os_memcpy(&sm_connect_req_ptr->bssid, &asso_ptr->bssid, sizeof(asso_ptr->bssid));

    sm_connect_req_ptr->chan.band = 0;
"
8165,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\sdio_intf\sdio_intf.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\sdio_intf\sdio_intf.c,"os_memcpy(sm_connect_req_ptr->ie_buf, ie_info, sm_connect_req_ptr->ie_len);",120,1,"
    sm_connect_req_ptr->vif_idx = 0;
    os_memcpy(sm_connect_req_ptr->ie_buf, ie_info, sm_connect_req_ptr->ie_len);
#endif
    return;
"
8169,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\sdio_intf\sdio_intf.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\sdio_intf\sdio_intf.c,"os_memcpy(scan_start_ptr->ssid[ssid_id].array, ssid->ssid, ssid->header.len);",120,1,"            ssid = (MRVL_IE_SSID_PARAM_PTR)mrvl_ie_ptr;
            scan_start_ptr->ssid[ssid_id].length = ssid->header.len;
            os_memcpy(scan_start_ptr->ssid[ssid_id].array, ssid->ssid, ssid->header.len);

            ssid_id ++;
"
8171,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\sdio_intf\sdio_intf.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\sdio_intf\sdio_intf.c,"os_memcpy(scan_start_ptr, (void *)&scmd_hdr_ptr[1], kmsg_dst->param_len);",120,1,"    scan_start_ptr = (struct scan_start_req *)kmsg_dst->param;

    os_memcpy(scan_start_ptr, (void *)&scmd_hdr_ptr[1], kmsg_dst->param_len);
#endif
    scan_resp_cmd_sn = resp_inc_seqnum();
"
8178,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\spidma_intf\spidma_intf.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\spidma_intf\spidma_intf.c,"os_memcpy(&spidma_intf, data, sizeof(TVIDEO_DESC_ST));",120,1,"{
    os_memset(&spidma_intf, 0, sizeof(SPIDMA_DESC_ST));
    os_memcpy(&spidma_intf, data, sizeof(TVIDEO_DESC_ST));

    spidma_intf.txbuf = NULL;
"
8182,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\uart_debug\cmd_evm.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\uart_debug\cmd_evm.c,"os_memcpy((UINT8*)&header, (UINT8*)BOOT_LOAD_VISION_ADDR, sizeof(header));",120,1,"    if((v_tab != NULL) && (v_len >= sizeof(UINT32)))
    {
        os_memcpy((UINT8*)&header, (UINT8*)BOOT_LOAD_VISION_ADDR, sizeof(header));
        len = VISION_LEN(header);
        
"
8184,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\uart_debug\cmd_evm.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\uart_debug\cmd_evm.c,"os_memcpy(v_tab, (UINT8*)(BOOT_LOAD_VISION_ADDR + sizeof(UINT32)), len);",120,1,"        {
            os_memset(v_tab, 0, v_len);
            os_memcpy(v_tab, (UINT8*)(BOOT_LOAD_VISION_ADDR + sizeof(UINT32)), len);
            return 1;
        }
"
8186,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\uart_debug\command_line.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\uart_debug\command_line.c,"os_memcpy(pHCItxBuf->param, pHCIrxBuf, HCI_EVENT_HEAD_LENGTH);",120,1,"
        pHCItxBuf->total = uart_rx_index - 1;
        os_memcpy(pHCItxBuf->param, pHCIrxBuf, HCI_EVENT_HEAD_LENGTH);
        pHCItxBuf->param[3] = pHCIrxBuf->cmd;

"
8198,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\video_transfer\video_transfer.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\video_transfer\video_transfer.c,"void *tvideo_memcpy(void *out, const void *in, UINT32 n)",120,1,"#endif

void *tvideo_memcpy(void *out, const void *in, UINT32 n)
{
    #if CFG_GENERAL_DMA
"
8199,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\video_transfer\video_transfer.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\video_transfer\video_transfer.c,"os_memcpy(out, in, n);",120,1,"    sddev_control(GDMA_DEV_NAME, CMD_GDMA_ENABLE, &do_st);
    #else
    os_memcpy(out, in, n);
    #endif
    return out;
"
8200,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\video_transfer\video_transfer.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\video_transfer\video_transfer.c,"tvideo_memcpy(elem_tvhdr + 1, curptr, newlen);",120,1,"            elem_tvhdr->size = tvideo_pool.tv_hdr.size;
            
            tvideo_memcpy(elem_tvhdr + 1, curptr, newlen);
            if(tvideo_st.node_len > newlen){
                //UINT32 left = tvideo_st.node_len - newlen;
"
8202,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\video_transfer\video_transfer.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\video_transfer\video_transfer.c,"tvideo_memcpy(elem->buf_start, curptr, newlen);",120,1,"
            #else // (TVIDEO_USE_HDR && CFG_USE_CAMERA_INTF)
            tvideo_memcpy(elem->buf_start, curptr, newlen);
            if(tvideo_st.node_len > newlen){
                //UINT32 left = tvideo_st.node_len - newlen;
"
8206,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\extral_cli.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\extral_cli.c,"os_memcpy(linkkit_ap_ssid, org_ssid, len);",120,1,"    len = (len > MAX_AP_SSID_LEN) ? MAX_AP_SSID_LEN : len;

    os_memcpy(linkkit_ap_ssid, org_ssid, len);
    os_memcpy(&linkkit_ap_ssid[len], name_diff, NAME_DIF_LEN);
}
"
8207,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\extral_cli.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\extral_cli.c,"os_memcpy(&linkkit_ap_ssid[len], name_diff, NAME_DIF_LEN);",120,1,"
    os_memcpy(linkkit_ap_ssid, org_ssid, len);
    os_memcpy(&linkkit_ap_ssid[len], name_diff, NAME_DIF_LEN);
}

"
8208,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\extral_cli.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\extral_cli.c,"os_memcpy(linkkit_ble_name, org_name, len);",120,1,"    len = (len > MAX_BLE_NAME_LEN) ? MAX_BLE_NAME_LEN : len;

    os_memcpy(linkkit_ble_name, org_name, len);
    os_memcpy(&linkkit_ble_name[len], &name_diff[1], NAME_DIF_LEN-1);
}
"
8209,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\extral_cli.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\extral_cli.c,"os_memcpy(&linkkit_ble_name[len], &name_diff[1], NAME_DIF_LEN-1);",120,1,"
    os_memcpy(linkkit_ble_name, org_name, len);
    os_memcpy(&linkkit_ble_name[len], &name_diff[1], NAME_DIF_LEN-1);
}

"
8220,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\lsig_monitor.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\lsig_monitor.c,"os_memcpy(last_rts.ra, &data[4], 12);",120,1,"void rts_update(uint8_t *data, int8_t rssi, uint32_t time_ms)
{
    os_memcpy(last_rts.ra, &data[4], 12);
    last_rts.rssi = -rssi;
    last_rts.time_ms = time_ms;
"
8221,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\lsig_monitor.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\lsig_monitor.c,"os_memcpy(&data[i], rts_tbl[index].ra, 6);",120,1,"    data[i++] = 0;
    
    os_memcpy(&data[i], rts_tbl[index].ra, 6);
    i+=6;
    os_memcpy(&data[i], rts_tbl[index].ta, 6);
"
8222,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\lsig_monitor.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\lsig_monitor.c,"os_memcpy(&data[i], rts_tbl[index].ta, 6);",120,1,"    os_memcpy(&data[i], rts_tbl[index].ra, 6);
    i+=6;
    os_memcpy(&data[i], rts_tbl[index].ta, 6);
    i+=6;
    os_memset(&data[i], 0xFF, 6);
"
8224,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\lsig_monitor.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\lsig_monitor.c,"os_memcpy(&data[i], &seq_frag, 2);",120,1,"    seq_frag = rts_tbl[index].seq;
    seq_frag <<= 4;
    os_memcpy(&data[i], &seq_frag, 2);
    i+=2;

"
8226,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\lsig_monitor.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\lsig_monitor.c,"os_memcpy(rts_tbl[rts_tbl_num].ra, last_rts.ra, 12);",120,1,"    // new entry
    if (rts_tbl_num < MAX_RTS_TBL) {
        os_memcpy(rts_tbl[rts_tbl_num].ra, last_rts.ra, 12);
        rts_tbl[rts_tbl_num].security = 0xFF;
        rts_tbl[rts_tbl_num].rssi = rssi;
"
8227,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\lsig_monitor.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\lsig_monitor.c,"os_memcpy(rts_tbl[rep_index].ra, last_rts.ra, 12);",120,1,"    }

    os_memcpy(rts_tbl[rep_index].ra, last_rts.ra, 12);
    rts_tbl[rep_index].security = 0xFF;
    rts_tbl[rep_index].rssi = rssi;
"
8231,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_cli.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_cli.c,"os_memcpy(inbuf + *bp, fm + *bp, n);",120,1,"        if (*bp + n < INBUF_SIZE)
        {
            os_memcpy(inbuf + *bp, fm + *bp, n);
            *bp += n;
            inbuf[(*bp)++] = ' ';
"
8247,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_ui.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_ui.c,"os_memcpy(g_ap_param_ptr->ssid.array, inNetworkInitPara->wifi_ssid, g_ap_param_ptr->ssid.length);",120,1,"    {
        g_ap_param_ptr->ssid.length = MIN(SSID_MAX_LEN, os_strlen(inNetworkInitPara->wifi_ssid));
        os_memcpy(g_ap_param_ptr->ssid.array, inNetworkInitPara->wifi_ssid, g_ap_param_ptr->ssid.length);
        g_ap_param_ptr->key_len = os_strlen(inNetworkInitPara->wifi_key);
        if(g_ap_param_ptr->key_len < 8)
"
8248,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_ui.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_ui.c,"os_memcpy(g_ap_param_ptr->key, inNetworkInitPara->wifi_key, g_ap_param_ptr->key_len);",120,1,"        {
            g_ap_param_ptr->cipher_suite = SECURITY_TYPE_WPA2_AES;
            os_memcpy(g_ap_param_ptr->key, inNetworkInitPara->wifi_key, g_ap_param_ptr->key_len);
        }

"
8249,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_ui.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_ui.c,"os_memcpy(g_sta_param_ptr->key, inNetworkInitPara->wifi_key, g_sta_param_ptr->key_len);",120,1,"
        g_sta_param_ptr->key_len = os_strlen(inNetworkInitPara->wifi_key);
        os_memcpy(g_sta_param_ptr->key, inNetworkInitPara->wifi_key, g_sta_param_ptr->key_len);
#if !RL_SUPPORT_FAST_CONNECT
        g_sta_param_ptr->orig_key_len = g_sta_param_ptr->key_len;
"
8250,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_ui.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_ui.c,"os_memcpy(g_sta_param_ptr->orig_key, inNetworkInitPara->wifi_key, g_sta_param_ptr->orig_key_len);",120,1,"#if !RL_SUPPORT_FAST_CONNECT
        g_sta_param_ptr->orig_key_len = g_sta_param_ptr->key_len;
        os_memcpy(g_sta_param_ptr->orig_key, inNetworkInitPara->wifi_key, g_sta_param_ptr->orig_key_len);
        os_null_printf(""%s:%d key_len=%d,orig_key_len=%d,%.*s,%.*s\r\n"", __FUNCTION__, __LINE__, g_sta_param_ptr->key_len, g_sta_param_ptr->orig_key_len, g_sta_param_ptr->key_len, g_sta_param_ptr->key, g_sta_param_ptr->orig_key_len, g_sta_param_ptr->orig_key);
#endif
"
8253,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_ui.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_ui.c,"os_memcpy(scan_param.ssids[i].array, ssid_ary[i], scan_param.ssids[i].length);",120,1,"    {
        scan_param.ssids[i].length = MIN(SSID_MAX_LEN, os_strlen((char*)ssid_ary[i]));
        os_memcpy(scan_param.ssids[i].array, ssid_ary[i], scan_param.ssids[i].length);
    }
    rw_msg_send_scanu_req(&scan_param);
"
8254,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_ui.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_ui.c,"os_memcpy(g_sta_param_ptr->ssid.array, inNetworkInitParaAdv->ap_info.ssid, g_sta_param_ptr->ssid.length);",120,1,"
    g_sta_param_ptr->ssid.length = MIN(SSID_MAX_LEN, os_strlen(inNetworkInitParaAdv->ap_info.ssid));
    os_memcpy(g_sta_param_ptr->ssid.array, inNetworkInitParaAdv->ap_info.ssid, g_sta_param_ptr->ssid.length);

	g_sta_param_ptr->cipher_suite = inNetworkInitParaAdv->ap_info.security;
"
8255,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_ui.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_ui.c,"os_memcpy(g_sta_param_ptr->fast_connect.bssid, inNetworkInitParaAdv->ap_info.bssid, ETH_ALEN);",120,1,"    g_sta_param_ptr->fast_connect_set = 1;
    g_sta_param_ptr->fast_connect.chann = inNetworkInitParaAdv->ap_info.channel;
    os_memcpy(g_sta_param_ptr->fast_connect.bssid, inNetworkInitParaAdv->ap_info.bssid, ETH_ALEN);
    g_sta_param_ptr->key_len = inNetworkInitParaAdv->key_len;
    os_memcpy((uint8_t *)g_sta_param_ptr->key, inNetworkInitParaAdv->key, inNetworkInitParaAdv->key_len);
"
8256,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_ui.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_ui.c,"os_memcpy((uint8_t *)g_sta_param_ptr->key, inNetworkInitParaAdv->key, inNetworkInitParaAdv->key_len);",120,1,"    os_memcpy(g_sta_param_ptr->fast_connect.bssid, inNetworkInitParaAdv->ap_info.bssid, ETH_ALEN);
    g_sta_param_ptr->key_len = inNetworkInitParaAdv->key_len;
    os_memcpy((uint8_t *)g_sta_param_ptr->key, inNetworkInitParaAdv->key, inNetworkInitParaAdv->key_len);
    os_null_printf(""%s:%d key_len=%d,orig_key_len=%d,%.*s,%.*s\r\n"", __FUNCTION__, __LINE__, g_sta_param_ptr->key_len, g_sta_param_ptr->orig_key_len, g_sta_param_ptr->key_len, g_sta_param_ptr->key, g_sta_param_ptr->orig_key_len, g_sta_param_ptr->orig_key);

"
8257,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_ui.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_ui.c,"os_memcpy(g_ap_param_ptr->ssid.array, inNetworkInitParaAP->wifi_ssid, g_ap_param_ptr->ssid.length);",120,1,"
        g_ap_param_ptr->ssid.length = MIN(SSID_MAX_LEN, os_strlen(inNetworkInitParaAP->wifi_ssid));
        os_memcpy(g_ap_param_ptr->ssid.array, inNetworkInitParaAP->wifi_ssid, g_ap_param_ptr->ssid.length);
        g_ap_param_ptr->key_len = os_strlen(inNetworkInitParaAP->wifi_key);
        os_memcpy(g_ap_param_ptr->key, inNetworkInitParaAP->wifi_key, g_ap_param_ptr->key_len);
"
8258,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_ui.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_ui.c,"os_memcpy(g_ap_param_ptr->key, inNetworkInitParaAP->wifi_key, g_ap_param_ptr->key_len);",120,1,"        os_memcpy(g_ap_param_ptr->ssid.array, inNetworkInitParaAP->wifi_ssid, g_ap_param_ptr->ssid.length);
        g_ap_param_ptr->key_len = os_strlen(inNetworkInitParaAP->wifi_key);
        os_memcpy(g_ap_param_ptr->key, inNetworkInitParaAP->wifi_key, g_ap_param_ptr->key_len);

        g_ap_param_ptr->cipher_suite = inNetworkInitParaAP->security;
"
8264,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_ui.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_ui.c,"os_memcpy(outStatus->bssid, cfm->bssid, 6);",120,1,"    outStatus->security = g_sta_param_ptr->cipher_suite;
	#endif
    os_memcpy(outStatus->bssid, cfm->bssid, 6);
    ssid_len = MIN(SSID_MAX_LEN, os_strlen((char*)cfm->ssid));
    os_memcpy(outStatus->ssid, cfm->ssid, ssid_len);
"
8265,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_ui.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_ui.c,"os_memcpy(outStatus->ssid, cfm->ssid, ssid_len);",120,1,"    os_memcpy(outStatus->bssid, cfm->bssid, 6);
    ssid_len = MIN(SSID_MAX_LEN, os_strlen((char*)cfm->ssid));
    os_memcpy(outStatus->ssid, cfm->ssid, ssid_len);

    os_free(cfm);
"
8266,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_ui.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_ui.c,"memcpy(ap_info->wifi_ssid,g_ap_param_ptr->ssid.array,g_ap_param_ptr->ssid.length);",120,1,"    }

    memcpy(ap_info->wifi_ssid,g_ap_param_ptr->ssid.array,g_ap_param_ptr->ssid.length);
    memcpy(ap_info->wifi_key,g_ap_param_ptr->key,g_ap_param_ptr->key_len);
    ap_info->channel = g_ap_param_ptr->chann;
"
8267,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_ui.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_ui.c,"memcpy(ap_info->wifi_key,g_ap_param_ptr->key,g_ap_param_ptr->key_len);",120,1,"
    memcpy(ap_info->wifi_ssid,g_ap_param_ptr->ssid.array,g_ap_param_ptr->ssid.length);
    memcpy(ap_info->wifi_key,g_ap_param_ptr->key,g_ap_param_ptr->key_len);
    ap_info->channel = g_ap_param_ptr->chann;
    ap_info->security = g_ap_param_ptr->cipher_suite;
"
8268,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_ui.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_ui.c,"memcpy(ap_info->local_ip_addr,ap_ips.ip,16);",120,1,"
    bk_wlan_get_ip_status(&ap_ips,SOFT_AP);
    memcpy(ap_info->local_ip_addr,ap_ips.ip,16);
    memcpy(ap_info->gateway_ip_addr,ap_ips.gate,16);
    memcpy(ap_info->net_mask,ap_ips.mask,16);
"
8269,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_ui.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_ui.c,"memcpy(ap_info->gateway_ip_addr,ap_ips.gate,16);",120,1,"    bk_wlan_get_ip_status(&ap_ips,SOFT_AP);
    memcpy(ap_info->local_ip_addr,ap_ips.ip,16);
    memcpy(ap_info->gateway_ip_addr,ap_ips.gate,16);
    memcpy(ap_info->net_mask,ap_ips.mask,16);
    memcpy(ap_info->dns_server_ip_addr,ap_ips.dns,16);
"
8270,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_ui.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_ui.c,"memcpy(ap_info->net_mask,ap_ips.mask,16);",120,1,"    memcpy(ap_info->local_ip_addr,ap_ips.ip,16);
    memcpy(ap_info->gateway_ip_addr,ap_ips.gate,16);
    memcpy(ap_info->net_mask,ap_ips.mask,16);
    memcpy(ap_info->dns_server_ip_addr,ap_ips.dns,16);

"
8271,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_ui.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_ui.c,"memcpy(ap_info->dns_server_ip_addr,ap_ips.dns,16);",120,1,"    memcpy(ap_info->gateway_ip_addr,ap_ips.gate,16);
    memcpy(ap_info->net_mask,ap_ips.mask,16);
    memcpy(ap_info->dns_server_ip_addr,ap_ips.dns,16);

     ap_info->dhcp_mode = g_wlan_general_param->dhcp_enable;
"
8272,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_ui.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wlan_ui\wlan_ui.c,"os_memcpy(pkt, buffer, len);",120,1,"	}

	os_memcpy(pkt, buffer, len);
	ret = bmsg_tx_raw_sender(pkt, len);
	return ret;
"
8277,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wolfssl\src\wolfio.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wolfssl\src\wolfio.c,"memcpy(&mynewt_ctx->mnSockAddrIn, mnSockAddrIn, sizeof(struct mn_sockaddr_in));",120,1,"        Mynewt_Ctx *mynewt_ctx = (Mynewt_Ctx *)ssl->mnCtx;
        mynewt_ctx->mnSocket = mnSocket;
        memcpy(&mynewt_ctx->mnSockAddrIn, mnSockAddrIn, sizeof(struct mn_sockaddr_in));
        mn_socket_set_cbs(mynewt_ctx->mnSocket, mnSocket, &mynewt_sock_cbs);
    }
"
8290,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wolfssl\wolfssl\wolfcrypt\types.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wolfssl\wolfssl\wolfcrypt\types.h,"#define XMEMCPY(d,s,l)    memcpy((d),(s),(l))",120,1,"    #ifndef STRING_USER
        #include <string.h>
        #define XMEMCPY(d,s,l)    memcpy((d),(s),(l))
        #define XMEMSET(b,c,l)    memset((b),(c),(l))
        #define XMEMCMP(s1,s2,n)  memcmp((s1),(s2),(n))
"
8295,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\os\mem_arch.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\os\mem_arch.c,"void *os_memcpy(void *out, const void *in, UINT32 n)",120,1,"}

void *os_memcpy(void *out, const void *in, UINT32 n)
{
    return memcpy(out, in, n);
"
8296,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\os\mem_arch.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\os\mem_arch.c,"return memcpy(out, in, n);",120,1,"void *os_memcpy(void *out, const void *in, UINT32 n)
{
    return memcpy(out, in, n);
}

"
8299,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\os\mem_arch.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\os\mem_arch.c,"os_memcpy(tmp, ptr, size);",120,1,"	if(tmp)
	{
		os_memcpy(tmp, ptr, size);
		vPortFree(ptr);
	}
"
8304,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\os\str_arch.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\os\str_arch.c,"os_memcpy(res, s, len + 1);",120,1,"    res = os_malloc(len + 1);
    if (res)
        os_memcpy(res, s, len + 1);

    return res;
"
8309,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\os\FreeRTOSv9.0.0\FreeRTOS\Source\queue.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\os\FreeRTOSv9.0.0\FreeRTOS\Source\queue.c,"( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); */",120,1,"	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
"
8310,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\os\FreeRTOSv9.0.0\FreeRTOS\Source\queue.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\os\FreeRTOSv9.0.0\FreeRTOS\Source\queue.c,"( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); */",120,1,"			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
	}
}
"
8311,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\os\FreeRTOSv9.0.0\FreeRTOS\Source\queue.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\os\FreeRTOSv9.0.0\FreeRTOS\Source\queue.c,"( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );",120,1,"				}
				--( pxQueue->uxMessagesWaiting );
				( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( unsigned ) pxQueue->uxItemSize );

				xReturn = pdPASS;
"
8321,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\os\FreeRTOSv9.0.0\FreeRTOS\Source\portable\MemMang\heap_4.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\os\FreeRTOSv9.0.0\FreeRTOS\Source\portable\MemMang\heap_4.c,"os_memcpy(pvReturn, pv, datasize);",120,1,"	if (pvReturn != NULL) {
		if (pvReturn != pv)
			os_memcpy(pvReturn, pv, datasize);
	} else { // if can't realloc such big memory, we should NOT put pv in free list. 
		pxPreviousBlock = &xStart;
"
8323,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\os\include\mem_pub.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\os\include\mem_pub.h,"void *os_memcpy(void *out, const void *in, UINT32 n);",120,1,"INT32 os_memcmp(const void *s1, const void *s2, UINT32 n);
void *os_memmove(void *out, const void *in, UINT32 n);
void *os_memcpy(void *out, const void *in, UINT32 n);
void *os_memset(void *b, int c, UINT32 len);
void os_mem_init(void);
"
8331,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\arm-none-eabi\include\c++\4.9.3\arm-none-eabi\armv6-m\bits\c++locale.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\arm-none-eabi\include\c++\4.9.3\arm-none-eabi\armv6-m\bits\c++locale.h,"__builtin_memcpy(__sav, __old, __len);",120,1,"	const size_t __len = __builtin_strlen(__old) + 1;
	__sav = new char[__len];
	__builtin_memcpy(__sav, __old, __len);
	std::setlocale(LC_NUMERIC, ""C"");
      }
"
8333,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\arm-none-eabi\include\c++\4.9.3\arm-none-eabi\armv6-m\bits\time_members.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\arm-none-eabi\include\c++\4.9.3\arm-none-eabi\armv6-m\bits\time_members.h,"__builtin_memcpy(__tmp, __s, __len);",120,1,"	  const size_t __len = __builtin_strlen(__s) + 1;
	  char* __tmp = new char[__len];
	  __builtin_memcpy(__tmp, __s, __len);
	  _M_name_timepunct = __tmp;
	}
"
8380,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\arm-none-eabi\include\c++\4.9.3\bits\char_traits.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\arm-none-eabi\include\c++\4.9.3\bits\char_traits.h,"{ return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n)); }",120,1,"      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      { return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n)); }

      static char_type*
"
8383,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\arm-none-eabi\include\c++\4.9.3\bits\char_traits.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\arm-none-eabi\include\c++\4.9.3\bits\char_traits.h,"{ return wmemcpy(__s1, __s2, __n); }",120,1,"      static char_type*
      copy(char_type* __s1, const char_type* __s2, size_t __n)
      { return wmemcpy(__s1, __s2, __n); }

      static char_type*
"
8386,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\arm-none-eabi\include\c++\4.9.3\bits\char_traits.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\arm-none-eabi\include\c++\4.9.3\bits\char_traits.h,"(__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));",120,1,"      {
	return (static_cast<char_type*>
		(__builtin_memcpy(__s1, __s2, __n * sizeof(char_type))));
      }

"
8391,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\arm-none-eabi\include\c++\4.9.3\bits\locale_facets.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\arm-none-eabi\include\c++\4.9.3\bits\locale_facets.h,"__builtin_memcpy(__to, __lo, __hi - __lo);",120,1,"	if (_M_widen_ok == 1)
	  {
	    __builtin_memcpy(__to, __lo, __hi - __lo);
	    return __hi;
	  }
"
8405,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\arm-none-eabi\include\c++\4.9.3\bits\valarray_array.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\arm-none-eabi\include\c++\4.9.3\bits\valarray_array.h,"{ __builtin_memcpy(__o, __b, (__e - __b) * sizeof(_Tp)); }",120,1,"      inline static void
      _S_do_it(const _Tp* __b, const _Tp* __e, _Tp* __restrict__ __o)
      { __builtin_memcpy(__o, __b, (__e - __b) * sizeof(_Tp)); }
    };

"
8406,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\arm-none-eabi\include\c++\4.9.3\bits\valarray_array.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\arm-none-eabi\include\c++\4.9.3\bits\valarray_array.h,"{ __builtin_memcpy(__b, __a, __n * sizeof (_Tp)); }",120,1,"      inline static void
      _S_do_it(const _Tp* __restrict__ __a, size_t __n, _Tp* __restrict__ __b)
      { __builtin_memcpy(__b, __a, __n * sizeof (_Tp)); }
    };

"
8447,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\libiberty.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\libiberty.h,"(char *) memcpy (libiberty_nptr, libiberty_optr, libiberty_len); }))",120,1,"   const unsigned long libiberty_len = strlen (libiberty_optr) + 1; \
   char *const libiberty_nptr = (char *const) alloca (libiberty_len); \
   (char *) memcpy (libiberty_nptr, libiberty_optr, libiberty_len); }))
#else
# define alloca(x) C_alloca(x)
"
8448,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\libiberty.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\libiberty.h,"(char *) memcpy (libiberty_nptr, libiberty_optr, libiberty_len))",120,1,"   libiberty_len = strlen (libiberty_optr) + 1, \
   libiberty_nptr = (char *) alloca (libiberty_len), \
   (char *) memcpy (libiberty_nptr, libiberty_optr, libiberty_len))
#endif

"
8449,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\obstack.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\obstack.h,"# define _obstack_memcpy(To, From, N) memcpy ((To), (From), (N))",120,1,"#if defined _LIBC || defined HAVE_STRING_H
# include <string.h>
# define _obstack_memcpy(To, From, N) memcpy ((To), (From), (N))
#else
# ifdef memcpy
"
8450,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\obstack.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\obstack.h,"#  define _obstack_memcpy(To, From, N) memcpy ((To), (char *)(From), (N))",120,1,"#else
# ifdef memcpy
#  define _obstack_memcpy(To, From, N) memcpy ((To), (char *)(From), (N))
# else
#  define _obstack_memcpy(To, From, N) bcopy ((char *)(From), (To), (N))
"
8451,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\obstack.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\obstack.h,"#  define _obstack_memcpy(To, From, N) bcopy ((char *)(From), (To), (N))",120,1,"#  define _obstack_memcpy(To, From, N) memcpy ((To), (char *)(From), (N))
# else
#  define _obstack_memcpy(To, From, N) bcopy ((char *)(From), (To), (N))
# endif
#endif
"
8452,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\obstack.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\obstack.h,"_obstack_memcpy (__o->next_free, (where), __len);			\",120,1,"   if (__o->next_free + __len > __o->chunk_limit)			\
     _obstack_newchunk (__o, __len);					\
   _obstack_memcpy (__o->next_free, (where), __len);			\
   __o->next_free += __len;						\
   (void) 0; })
"
8454,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\obstack.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\obstack.h,"_obstack_memcpy ((h)->next_free, (where), (h)->temp),			\",120,1,"  (((h)->next_free + (h)->temp > (h)->chunk_limit)			\
   ? (_obstack_newchunk ((h), (h)->temp), 0) : 0),			\
  _obstack_memcpy ((h)->next_free, (where), (h)->temp),			\
  (h)->next_free += (h)->temp)

"
8466,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\vec.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\vec.h,"memcpy (new_vec->address (), m_vecdata, sizeof (T) * len);",120,1,"      vec_alloc (new_vec, len PASS_MEM_STAT);
      new_vec->embedded_init (len, len);
      memcpy (new_vec->address (), m_vecdata, sizeof (T) * len);
    }
  return new_vec;
"
8467,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\vec.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\vec.h,"memcpy (address () + length (), src.address (), len * sizeof (T));",120,1,"    {
      gcc_checking_assert (space (len));
      memcpy (address () + length (), src.address (), len * sizeof (T));
      m_vecpfx.m_num += len;
    }
"
8472,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\vec.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\vec.h,"memcpy (m_vec->address (), oldvec->address (), sizeof (T) * oldsize);",120,1,"  if (handle_auto_vec)
    {
      memcpy (m_vec->address (), oldvec->address (), sizeof (T) * oldsize);
      m_vec->m_vecpfx.m_num = oldsize;
    }
"
8479,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_os_adapter\src\driver\tuya_os_adapt_bt.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_os_adapter\src\driver\tuya_os_adapt_bt.c,"memcpy(read_req->value , &ntf_enable, sizeof(ntf_enable));",120,1,"    if(read_req->att_idx == 5)
    {
        memcpy(read_req->value , &ntf_enable, sizeof(ntf_enable));
    }
    return 2;
"
8480,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_os_adapter\src\driver\tuya_os_adapt_bt.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_os_adapter\src\driver\tuya_os_adapt_bt.c,"memcpy(&(ble_db_cfg.uuid[0]), &tuya_svc_uuid[0], 16);",120,1,"            ble_db_cfg.start_hdl = 0;
            ble_db_cfg.svc_perm = BK_PERM_SET(SVC_UUID_LEN, UUID_16);
            memcpy(&(ble_db_cfg.uuid[0]), &tuya_svc_uuid[0], 16);

            bk_ble_create_db(&ble_db_cfg);
"
8481,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_os_adapter\src\driver\tuya_os_adapt_bt.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_os_adapter\src\driver\tuya_os_adapt_bt.c,"memcpy(buffer, recv_adv->data + pos + 1, length - 1);",120,1,"            
            /* Copy the AD Data to buffer. */
            memcpy(buffer, recv_adv->data + pos + 1, length - 1);
            /* AD Type, one octet. */
            type = recv_adv->data[pos];
"
8483,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_os_adapter\src\driver\tuya_os_adapt_bt.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_os_adapter\src\driver\tuya_os_adapt_bt.c,"memcpy(ble_scan_info->bd_addr, recv_adv->adv_addr, 6);",120,1,"
    if (ble_scan_found) {
        memcpy(ble_scan_info->bd_addr, recv_adv->adv_addr, 6);
        strcpy(ble_scan_info->name, name);
        ble_scan_info->channel = 0;
"
8486,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_os_adapter\src\driver\tuya_os_adapt_bt.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_os_adapter\src\driver\tuya_os_adapt_bt.c,"memcpy(adv_info.advData, adv->data, adv->len);",120,1,"    adv_info.interval_max = 160;

    memcpy(adv_info.advData, adv->data, adv->len);
    adv_info.advDataLen = adv->len;

"
8487,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_os_adapter\src\driver\tuya_os_adapt_bt.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_os_adapter\src\driver\tuya_os_adapt_bt.c,"memcpy(adv_info.respData, scan_resp->data, scan_resp->len);",120,1,"    adv_info.advDataLen = adv->len;

    memcpy(adv_info.respData, scan_resp->data, scan_resp->len);
    adv_info.respDataLen = scan_resp->len;

"
8488,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_os_adapter\src\driver\tuya_os_adapt_bt.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_os_adapter\src\driver\tuya_os_adapt_bt.c,"memcpy(ble_scan_info, info, sizeof(ty_bt_scan_info_t));",120,1,"        goto END;
    }
    memcpy(ble_scan_info, info, sizeof(ty_bt_scan_info_t));
    ble_scan_found = FALSE;

"
8489,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_os_adapter\src\driver\tuya_os_adapt_bt.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_os_adapter\src\driver\tuya_os_adapt_bt.c,"memcpy(info, ble_scan_info, sizeof(ty_bt_scan_info_t));",120,1,"    //bk_printf(""ble_scan_found:%d, rssi:%d\r\n"", ble_scan_found, ble_scan_info->rssi);
    if (ble_scan_found) {
        memcpy(info, ble_scan_info, sizeof(ty_bt_scan_info_t));
        op_ret = OPRT_OS_ADAPTER_OK;
    } else {
"
8493,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_os_adapter\src\driver\tuya_os_adapt_ota.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_os_adapter\src\driver\tuya_os_adapt_ota.c,"memcpy(frist_block_databuf, &data[len - write_len], RT_IMG_WR_UNIT);",120,1,"                    }
                    
                    memcpy(frist_block_databuf, &data[len - write_len], RT_IMG_WR_UNIT);
                    
                    
"
8495,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_os_adapter\src\driver\tuya_os_adapt_ota.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_os_adapter\src\driver\tuya_os_adapt_ota.c,"memcpy(pTempbuf, frist_block_databuf ,RT_IMG_WR_UNIT);",120,1,"        tuya_os_adapt_flash_read(addr, pTempbuf, rlen);
        if(0 == i) {
            memcpy(pTempbuf, frist_block_databuf ,RT_IMG_WR_UNIT); //first 4k block 
        } 
        
"
8496,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_os_adapter\src\driver\tuya_os_adapt_ota.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_os_adapter\src\driver\tuya_os_adapt_ota.c,"memcpy(pTempbuf, frist_block_databuf, RT_IMG_WR_UNIT);",120,1,"    tuya_os_adapt_flash_set_protect(TRUE);

    memcpy(pTempbuf, frist_block_databuf, RT_IMG_WR_UNIT); // 还原头部信息的512byte
    tuya_os_adapt_flash_set_protect(FALSE);
    tuya_os_adapt_flash_write(ug_proc->start_addr, pTempbuf, BUF_SIZE);
"
8498,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_os_adapter\src\driver\tuya_os_adapt_wifi.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_os_adapter\src\driver\tuya_os_adapt_wifi.c,"os_memcpy(item->bssid, scan_rst_ptr->bssid, 6);",120,1,"        item->channel = scan_rst_ptr->channel;
        item->rssi = scan_rst_ptr->level;
        os_memcpy(item->bssid, scan_rst_ptr->bssid, 6);
		
		ssid_len = os_strlen(scan_rst_ptr->ssid);
"
8501,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_os_adapter\src\driver\tuya_os_adapt_wifi.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_os_adapter\src\driver\tuya_os_adapt_wifi.c,"os_memcpy(array->bssid, scan_rst_ptr->bssid, 6);",120,1,"
        array->rssi = scan_rst_ptr->level;
        os_memcpy(array->bssid, scan_rst_ptr->bssid, 6);

        ssid_len = os_strlen(scan_rst_ptr->ssid);
"
8510,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_os_adapter\src\driver\tuya_os_adapt_wifi.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_os_adapter\src\driver\tuya_os_adapt_wifi.c,"os_memcpy(mac, sta.bssid, 6);",120,1,"    ret = bk_wlan_get_link_status(&sta);
    if (OPRT_OS_ADAPTER_OK == ret) {
        os_memcpy(mac, sta.bssid, 6);
    }
    
"
8512,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_os_adapter\src\driver\tuya_os_adapt_wifi.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_os_adapter\src\driver\tuya_os_adapt_wifi.c,"os_memcpy((char *)wNetConfig.wifi_ssid, cfg->ssid, cfg->s_len);",120,1,"        wNetConfig.channel = cfg->chan;
        wNetConfig.dhcp_mode = DHCP_SERVER;
        os_memcpy((char *)wNetConfig.wifi_ssid, cfg->ssid, cfg->s_len);
        os_memcpy((char *)wNetConfig.wifi_key, cfg->passwd, cfg->p_len);

"
8513,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_os_adapter\src\driver\tuya_os_adapt_wifi.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_os_adapter\src\driver\tuya_os_adapt_wifi.c,"os_memcpy((char *)wNetConfig.wifi_key, cfg->passwd, cfg->p_len);",120,1,"        wNetConfig.dhcp_mode = DHCP_SERVER;
        os_memcpy((char *)wNetConfig.wifi_ssid, cfg->ssid, cfg->s_len);
        os_memcpy((char *)wNetConfig.wifi_key, cfg->passwd, cfg->p_len);

        os_strcpy((char *)wNetConfig.local_ip_addr, ""192.168.175.1"");
"
8519,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_os_adapter\src\driver\tuya_os_adapt_wifi.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_os_adapter\src\driver\tuya_os_adapt_wifi.c,"memcpy(frame_msg->data, frame, len);",120,1,"    memset(frame_msg->data, 0, len);
    
    memcpy(frame_msg->data, frame, len);
    
    frame_msg->len = len;
"
8520,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\sdk\include\lan_protocol.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\sdk\include\lan_protocol.h,"memcpy(head_gw->data,data,len);",120,1,"    head_gw->len = UNI_HTONL(len+sizeof(LAN_PRO_TAIL_S)+sizeof(ret_code));
    head_gw->ret_code = UNI_HTONL(ret_code);
    memcpy(head_gw->data,data,len);

    UINT_T crc = 0;
"
8528,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\sdk\include\coap2\address.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\sdk\include\coap2\address.h,"memcpy( dst, src, sizeof( coap_address_t ) );",120,1,"coap_address_copy( coap_address_t *dst, const coap_address_t *src ) {
#if defined(WITH_LWIP) || defined(WITH_CONTIKI) || defined(WITH_TY_UNI_NETWORK)
  memcpy( dst, src, sizeof( coap_address_t ) );
#else
  memset( dst, 0, sizeof( coap_address_t ) );
"
8530,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\sdk\include\coap2\address.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\sdk\include\coap2\address.h,"memcpy( &dst->addr, &src->addr, src->size );",120,1,"    dst->addr.sin = src->addr.sin;
  } else {
    memcpy( &dst->addr, &src->addr, src->size );
  }
#endif
"
8569,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\common\device_config_load.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\common\device_config_load.c,"memcpy(cTempValue, pStart, usLen);",120,1,"        }
        
        memcpy(cTempValue, pStart, usLen);
        cTempValue[usLen] = '\0';

"
8570,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\common\device_config_load.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\common\device_config_load.c,"memcpy(tJsonTable[i].value, &uiTemp, ucDecLen);",120,1,"            UCHAR_T ucDecLen = 0;
            ucDecLen = ucLightToolSTR2Dec(cTempValue, usLen, &uiTemp);     /* @attention: default little-ending format */
            memcpy(tJsonTable[i].value, &uiTemp, ucDecLen);
        } else {
    #if ((LIGHT_CFG_ENABLE_GAMMA == 1) & (LIGHT_CFG_GAMMA_CAL == 0))
"
8572,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\common\device_config_load.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\common\device_config_load.c,"memcpy(&gtDeviceCfg, ptConfig, SIZEOF(DEVICE_CONFIG_T));",120,1,"    
    vDeviceCfgDataInit();
    memcpy(&gtDeviceCfg, ptConfig, SIZEOF(DEVICE_CONFIG_T));
    ucOemConfigLoadFlag = TRUE;
    
"
8573,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\common\device_config_load.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\common\device_config_load.c,"memcpy(pJsonVer, gtDeviceCfg.Jsonver, 5);",120,1,"{   
    CHECK_LOAD_FINISH();
    memcpy(pJsonVer, gtDeviceCfg.Jsonver, 5);
    
    return LIGHT_OK;
"
8574,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\common\device_config_load.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\common\device_config_load.c,"memcpy(pCategory, gtDeviceCfg.category, 5);",120,1,"{
    CHECK_LOAD_FINISH();
    memcpy(pCategory, gtDeviceCfg.category, 5);
    
    return LIGHT_OK;
"
8575,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\common\device_config_load.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\common\device_config_load.c,"memcpy(pModule, &gtDeviceCfg.module[0], strlen(gtDeviceCfg.module));",120,1,"    
    *pLen = strlen(gtDeviceCfg.module);
    memcpy(pModule, &gtDeviceCfg.module[0], strlen(gtDeviceCfg.module));

    return LIGHT_OK;
"
8591,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_app\light_control.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_app\light_control.c,"memcpy(tLightCtrlData.cScene, SCENE_DATA_DEFAULT_C, strlen(SCENE_DATA_DEFAULT_C));",120,1,"    {
        case LIGHT_C:
            memcpy(tLightCtrlData.cScene, SCENE_DATA_DEFAULT_C, strlen(SCENE_DATA_DEFAULT_C));
            break;

"
8592,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_app\light_control.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_app\light_control.c,"memcpy(tLightCtrlData.cScene, SCENE_DATA_DEFAULT_CW, strlen(SCENE_DATA_DEFAULT_CW));",120,1,"
        case LIGHT_CW:
            memcpy(tLightCtrlData.cScene, SCENE_DATA_DEFAULT_CW, strlen(SCENE_DATA_DEFAULT_CW));
            break;

"
8593,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_app\light_control.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_app\light_control.c,"memcpy(tLightCtrlData.cScene, SCENE_DATA_DEFAULT_RGB, strlen(SCENE_DATA_DEFAULT_RGB));",120,1,"
        case LIGHT_RGB:
            memcpy(tLightCtrlData.cScene, SCENE_DATA_DEFAULT_RGB, strlen(SCENE_DATA_DEFAULT_RGB));
            break;

"
8597,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_app\light_control.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_app\light_control.c,"memcpy(&tLightCfgData, pConfigData, SIZEOF(LIGHT_CTRL_CFG_T));",120,1,"
    memset(&tLightCfgData, 0, SIZEOF(LIGHT_CTRL_CFG_T));
    memcpy(&tLightCfgData, pConfigData, SIZEOF(LIGHT_CTRL_CFG_T));
    memset(&tLightCtrlHandle, 0, SIZEOF(LIGHT_CTRL_HANDLE_T));

"
8601,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_app\light_control.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_app\light_control.c,"memcpy(&tLightCtrlData.cScene, &tAPPData.cScene, SIZEOF(tAPPData.cScene));",120,1,"        tLightCtrlData.tColorOrigin.usValue = tAPPData.tColorOrigin.usValue;
        strcpy((CHAR_T*)&tLightCtrlData.tColorOrigin.ucColorStr, (CHAR_T*)&tAPPData.tColorOrigin.ucColorStr);
        memcpy(&tLightCtrlData.cScene, &tAPPData.cScene, SIZEOF(tAPPData.cScene));
        tLightCtrlData.bSceneFirstSet = TRUE;
        tLightCtrlData.uiCountDown = 0;
"
8604,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_app\light_control.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_app\light_control.c,"memcpy(&tLightCtrlData.tColorOrigin, ptColorOrigin, SIZEOF(COLOR_ORIGIN_T));    */",120,1,"    as exist realtime control dp, the ightCtrlData.Color will equal to the control data */
    if(ptColorOrigin != NULL) {
        memcpy(&tLightCtrlData.tColorOrigin, ptColorOrigin, SIZEOF(COLOR_ORIGIN_T));    /* must save the origin data */
    }

"
8605,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_app\light_control.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_app\light_control.c,"memcpy(&tLightCtrlData.tColor, ptColor, SIZEOF(COLOR_RGB_T));",120,1,"    }

    memcpy(&tLightCtrlData.tColor, ptColor, SIZEOF(COLOR_RGB_T));

    vLightCtrlDataRGBResponse(ptColorOrigin);
"
8608,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_app\light_control.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_app\light_control.c,"memcpy(ptOriginalColor, &tLightCtrlData.tColorOrigin, SIZEOF(COLOR_ORIGIN_T));",120,1,"
    PR_DEBUG(""color original %s"", tLightCtrlData.tColorOrigin.ucColorStr);
    memcpy(ptOriginalColor, &tLightCtrlData.tColorOrigin, SIZEOF(COLOR_ORIGIN_T));

    return LIGHT_OK;
"
8611,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_app\light_control.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_app\light_control.c,"memcpy(&tLightCtrlHandle.tCurrVal, &tLightCtrlHandle.tTargetVal, SIZEOF(tLightCtrlHandle.tTargetVal));",120,1,"
        case SCENE_JUMP:
            memcpy(&tLightCtrlHandle.tCurrVal, &tLightCtrlHandle.tTargetVal, SIZEOF(tLightCtrlHandle.tTargetVal));
            opRet = opLightSetRGBCW(tLightCtrlHandle.tCurrVal.usRed, tLightCtrlHandle.tCurrVal.usGreen, tLightCtrlHandle.tCurrVal.usBlue, \
                                        tLightCtrlHandle.tCurrVal.usWhite, tLightCtrlHandle.tCurrVal.usWarm);
"
8613,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_app\light_control.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_app\light_control.c,"memcpy(&tLightCtrlHandle.tCurrVal, &tLightCtrlHandle.tTargetVal, SIZEOF(BRIGHT_DATA_T));",120,1,"                                                tLightCtrlHandle.tTargetVal.usWhite, tLightCtrlHandle.tTargetVal.usWarm);
        /* make sure current value = target value */
        memcpy(&tLightCtrlHandle.tCurrVal, &tLightCtrlHandle.tTargetVal, SIZEOF(BRIGHT_DATA_T));
        if(opRet != OPRT_OK) {
                PR_ERR(""Light ctrl turn on set RGBCW error!"");
"
8614,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_app\light_control.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_app\light_control.c,"memcpy(&tLightCtrlData.tColorOrigin, &(ptExtData ->ColorOrigin), SIZEOF(COLOR_ORIGIN_T));    */",120,1,"        tLightCtrlData.bSwitch = ptExtData ->bSwitch;
        tLightCtrlData.eMode = COLOR_MODE;    /* change mode to color mode */
        memcpy(&tLightCtrlData.tColorOrigin, &(ptExtData ->ColorOrigin), SIZEOF(COLOR_ORIGIN_T));    /* must save the sorigin data */

        memcpy(&tLightCtrlData.tColor, &(ptExtData ->Color), SIZEOF(COLOR_RGB_T));
"
8615,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_app\light_control.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_app\light_control.c,"memcpy(&tLightCtrlData.tColor, &(ptExtData ->Color), SIZEOF(COLOR_RGB_T));",120,1,"        memcpy(&tLightCtrlData.tColorOrigin, &(ptExtData ->ColorOrigin), SIZEOF(COLOR_ORIGIN_T));    /* must save the sorigin data */

        memcpy(&tLightCtrlData.tColor, &(ptExtData ->Color), SIZEOF(COLOR_RGB_T));
        if(bActiveImmed) {
            opRet = opLightCtrlDataExtActive();
"
8621,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_app\light_control.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_app\light_control.c,"memcpy(&tMusicCtrlData, &tLightCtrlData, SIZEOF(LIGHT_CTRL_DATA_T));     */",120,1,"            LIGHT_CTRL_DATA_T tMusicCtrlData;
            memset(&tMusicCtrlData, 0, sizeof(LIGHT_CTRL_DATA_T));
            memcpy(&tMusicCtrlData, &tLightCtrlData, SIZEOF(LIGHT_CTRL_DATA_T));     /* make sure music mode restart as red color */

            tMusicCtrlData.tColor.usRed = CTRL_RGB_BRIGHT_VALUE_MAX;
"
8630,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_app\light_control.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_app\light_control.c,"memcpy(&tSaveData.cScene, &tLightCtrlData.cScene, SIZEOF(tLightCtrlData.cScene));",120,1,"    tSaveData.tColorOrigin.usValue  = tLightCtrlData.tColorOrigin.usValue;
    strcpy((CHAR_T*)&tSaveData.tColorOrigin.ucColorStr, (CHAR_T*)&tLightCtrlData.tColorOrigin.ucColorStr);
    memcpy(&tSaveData.cScene, &tLightCtrlData.cScene, SIZEOF(tLightCtrlData.cScene));

#if 0
"
8636,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_app\light_prod.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_app\light_prod.c,"memcpy(ucAgingTimeList, ucTargetTime[ucLightNum], 3 * (SIZEOF(UCHAR_T)));",120,1,"
        ucLightNum = tProdConfigData.eLightWay - 1;     /* attention: light way range from 1 to 5! */
        memcpy(ucAgingTimeList, ucTargetTime[ucLightNum], 3 * (SIZEOF(UCHAR_T)));

        PR_NOTICE(""Aging time C --> %d W --> %d RGB --> %d"", ucAgingTimeList[0], ucAgingTimeList[1], ucAgingTimeList[2]);
"
8637,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_driver\user_pwm.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_driver\user_pwm.c,"memcpy(&gPwmInitConfig, pPwmInit, SIZEOF(USER_PWM_INIT_T));",120,1,"    }
    
    memcpy(&gPwmInitConfig, pPwmInit, SIZEOF(USER_PWM_INIT_T));

    switch(gPwmInitConfig.ucChannelNum)
"
8638,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_driver\user_pwm.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_driver\user_pwm.c,"memcpy(gPwmInitConfig.ucList, ucListTemp, SIZEOF(gPwmInitConfig.ucList));",120,1,"        case 1: /* 1 way -- C */
            ucListTemp[0] = gPwmInitConfig.ucList[3];
            memcpy(gPwmInitConfig.ucList, ucListTemp, SIZEOF(gPwmInitConfig.ucList));
            break;

"
8644,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_system\light_system.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_system\light_system.c,"memcpy(tColorOrigin.ucColorStr, root->value.dp_str, SIZEOF(tColorOrigin.ucColorStr));",120,1,"
        vLightSysColor2RGB(root->value.dp_str, &tColorData.usRed, &tColorData.usGreen, &tColorData.usBlue);
        memcpy(tColorOrigin.ucColorStr, root->value.dp_str, SIZEOF(tColorOrigin.ucColorStr));
        opRet = opLightCtrlDataRGBSet(&tColorData, &tColorOrigin);
        if(OPRT_OK == opRet)
"
8645,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_system\light_system.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_system\light_system.c,"memcpy(pConfig, DEFAULT_CONFIG, strlen(DEFAULT_CONFIG));",120,1,"                if(pConfig != NULL)
                {
                    memcpy(pConfig, DEFAULT_CONFIG, strlen(DEFAULT_CONFIG));
                }
                /* load default oem cfg!!!! */
"
8862,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\platforms\bk7231t\bk7231t_os\beken378\driver\usb\src\cd\mu_pip.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\platforms\bk7231t\bk7231t_os\beken378\driver\usb\src\cd\mu_pip.c,"memcpy( &pBuffer[0], &pBuffer[ISOC_PACK_HEAD_LEN], (wUnloadCount - ISOC_PACK_HEAD_LEN) );",120,1,"            pIsochIrp->adwActualLength[wFrameIndex] -= ISOC_PACK_HEAD_LEN;
            pEnd->dwRxOffset -= ISOC_PACK_HEAD_LEN;
            memcpy( &pBuffer[0], &pBuffer[ISOC_PACK_HEAD_LEN], (wUnloadCount - ISOC_PACK_HEAD_LEN) );
        }
        break;
"
8869,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\platforms\bk7231t\bk7231t_os\beken378\driver\usb\src\systems\none\afs\brd_mem.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\platforms\bk7231t\bk7231t_os\beken378\driver\usb\src\systems\none\afs\brd_mem.h,"os_memcpy((void*)_pDest, (void*)_pSrc, _iSize)",120,1,"
#define MUSB_MemCopy(_pDest, _pSrc, _iSize) \
    os_memcpy((void*)_pDest, (void*)_pSrc, _iSize)

#define MUSB_MemSet(_pDest, _iData, _iSize) \
"
10377,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\platforms\bk7231t\tuya_common\src\driver\tuya_key.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\platforms\bk7231t\tuya_common\src\driver\tuya_key.c,"memcpy(&(key_mag->p_tbl[i].kud),&p_tbl[i],SIZEOF(KEY_USER_DEF_S));",120,1,"    INT_T i = 0;
    for(i = 0;i < cnt;i++) {
        memcpy(&(key_mag->p_tbl[i].kud),&p_tbl[i],SIZEOF(KEY_USER_DEF_S));
        key_mag->p_tbl[i].key_val_last = TRUE;
        op_ret = tuya_gpio_inout_set(key_mag->p_tbl[i].kud.port,TRUE);
"
10378,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\platforms\bk7231t\tuya_common\src\driver\tuya_key.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\platforms\bk7231t\tuya_common\src\driver\tuya_key.c,"memcpy(&(tmp_key_ent_lst->key_ent.kud),key_ud,SIZEOF(KEY_USER_DEF_S));",120,1,"                return op_ret;
            }
            memcpy(&(tmp_key_ent_lst->key_ent.kud),key_ud,SIZEOF(KEY_USER_DEF_S));
            tuya_hal_mutex_unlock(key_mag->mutex);
            return OPRT_OK;
"
10380,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\platforms\bk7231t\tuya_common\src\driver\tuya_key.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\platforms\bk7231t\tuya_common\src\driver\tuya_key.c,"memcpy(&(key_ent_lst->key_ent.kud),key_ud,SIZEOF(KEY_USER_DEF_S));",120,1,"    }
    memset(key_ent_lst,0,SIZEOF(KEY_EN_LST_S));
    memcpy(&(key_ent_lst->key_ent.kud),key_ud,SIZEOF(KEY_USER_DEF_S));
    key_ent_lst->key_ent.key_val_last = TRUE;
    
"
10413,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\platforms\bk7231t\tuya_os_adapter\src\driver\tuya_hal_wifi.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\platforms\bk7231t\tuya_os_adapter\src\driver\tuya_hal_wifi.c,"memcpy(frame_msg, frame, len);",120,1,"    memset(frame_msg, 0, len);
    
    memcpy(frame_msg, frame, len);
    op_ret = PostMessage(frameMsgQueue, WIFI_MGNT_FRAME_RX_MSG, frame_msg, len);
    if(OPRT_OK != op_ret) {
"
10418,2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\sdk\include\log_seq.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\sdk\include\log_seq.h,"memcpy(ls_data.data.str_data,str,len); \",120,1,"    memset(ls_data.data.str_data,0,SIZEOF(ls_data.data.str_data)); \
    UCHAR_T len = strlen(str) < STR_DATA_MAX_LENGTH ? strlen(str) : STR_DATA_MAX_LENGTH; \
    memcpy(ls_data.data.str_data,str,len); \
    log_seq_insert_log(ls,&ls_data); \
}while(0)
"
10485,2021\univ-csProject\Network Implement\Network Final Teamproject\tcp_emulc.c,Dataset Download,../../Dataset Download/2021\univ-csProject\Network Implement\Network Final Teamproject\tcp_emulc.c,"memcpy(&serv_addr.sin_addr, hp->h_addr, hp->h_length);",120,1,"	}

	 memcpy(&serv_addr.sin_addr, hp->h_addr, hp->h_length);

#ifdef DEBUG
"
10487,2021\univ-csProject\Network Implement\Network Final Teamproject\tcp_emulc.c,Dataset Download,../../Dataset Download/2021\univ-csProject\Network Implement\Network Final Teamproject\tcp_emulc.c,"memcpy(t_tcb[conn].snd_buf, &sendseg, sizeof sendseg);",120,1,"
	t_tcb[conn].snd_buf = (char *)malloc(sizeof sendseg);
	memcpy(t_tcb[conn].snd_buf, &sendseg, sizeof sendseg);

	print_tcphdr(&sendseg.tcp);
"
10498,2021\univ-csProject\Network Implement\Network Final Teamproject\tcp_emuls.c,Dataset Download,../../Dataset Download/2021\univ-csProject\Network Implement\Network Final Teamproject\tcp_emuls.c,"memcpy(&recvseg.tcp, buf, sizeof buf);",120,1,"					
	  				memset((char *) &recvseg, 0, sizeof(sendseg));
					memcpy(&recvseg.tcp, buf, sizeof buf);

					if(recvseg.tcp.syn != 1 || recvseg.tcp.urg == 1 ||  recvseg.tcp.ack == 1 ||  recvseg.tcp.psh == 1 || recvseg.tcp.fin == 1 || recvseg.tcp.rst == 1){
"
10500,2021\univ-csProject\Network Implement\Network Final Teamproject\tcp_emuls.c,Dataset Download,../../Dataset Download/2021\univ-csProject\Network Implement\Network Final Teamproject\tcp_emuls.c,"memcpy(t_tcb[conn-1].snd_buf, &sendseg, sizeof sendseg);",120,1,"
					t_tcb[conn-1].snd_buf = (char *)malloc(sizeof sendseg);
					memcpy(t_tcb[conn-1].snd_buf, &sendseg, sizeof sendseg);

					printf(""SYN|ACK send to %s.\n"", argv[1]);
"
10517,2021\univ-csProject\Network Implement\Network Final Teamproject\tcp_emuls.c,Dataset Download,../../Dataset Download/2021\univ-csProject\Network Implement\Network Final Teamproject\tcp_emuls.c,"memcpy(&recvseg.tcp,buf,sizeof buf);",120,1,"
                                 memset((char *) &recvseg, 0, sizeof(sendseg));
                                 memcpy(&recvseg.tcp,buf,sizeof buf);

                                if(recvseg.tcp.syn == 1 || recvseg.tcp.fin == 1 || recvseg.tcp.rst == 1 || recvseg.tcp.psh == 1 || recvseg.tcp.ack != 1 || recvseg.tcp.urg == 1){       //코드비트 예외처리 ack=1 경우만 무시
"
10518,2021\univ-csProject\Network Implement\Network Final Teamproject\tcp_tcb.c,Dataset Download,../../Dataset Download/2021\univ-csProject\Network Implement\Network Final Teamproject\tcp_tcb.c,"memcpy(&t_tcb[n_conn].l_addr,&cli_addr->sin_addr, alen);",120,1,"	}
	
	memcpy(&t_tcb[n_conn].l_addr,&cli_addr->sin_addr, alen);
	memcpy(&t_tcb[n_conn].l_port,&cli_addr->sin_port, plen);
	memcpy(&t_tcb[n_conn].r_addr,&serv_addr->sin_addr, alen);
"
10519,2021\univ-csProject\Network Implement\Network Final Teamproject\tcp_tcb.c,Dataset Download,../../Dataset Download/2021\univ-csProject\Network Implement\Network Final Teamproject\tcp_tcb.c,"memcpy(&t_tcb[n_conn].l_port,&cli_addr->sin_port, plen);",120,1,"	
	memcpy(&t_tcb[n_conn].l_addr,&cli_addr->sin_addr, alen);
	memcpy(&t_tcb[n_conn].l_port,&cli_addr->sin_port, plen);
	memcpy(&t_tcb[n_conn].r_addr,&serv_addr->sin_addr, alen);
	memcpy(&t_tcb[n_conn].r_port,&serv_addr->sin_port, plen);
"
10520,2021\univ-csProject\Network Implement\Network Final Teamproject\tcp_tcb.c,Dataset Download,../../Dataset Download/2021\univ-csProject\Network Implement\Network Final Teamproject\tcp_tcb.c,"memcpy(&t_tcb[n_conn].r_addr,&serv_addr->sin_addr, alen);",120,1,"	memcpy(&t_tcb[n_conn].l_addr,&cli_addr->sin_addr, alen);
	memcpy(&t_tcb[n_conn].l_port,&cli_addr->sin_port, plen);
	memcpy(&t_tcb[n_conn].r_addr,&serv_addr->sin_addr, alen);
	memcpy(&t_tcb[n_conn].r_port,&serv_addr->sin_port, plen);

"
10521,2021\univ-csProject\Network Implement\Network Final Teamproject\tcp_tcb.c,Dataset Download,../../Dataset Download/2021\univ-csProject\Network Implement\Network Final Teamproject\tcp_tcb.c,"memcpy(&t_tcb[n_conn].r_port,&serv_addr->sin_port, plen);",120,1,"	memcpy(&t_tcb[n_conn].l_port,&cli_addr->sin_port, plen);
	memcpy(&t_tcb[n_conn].r_addr,&serv_addr->sin_addr, alen);
	memcpy(&t_tcb[n_conn].r_port,&serv_addr->sin_port, plen);

#ifdef DEBUG
"
10531,2021\virtual-festo-twin\Hardware_Design\LinuxSys.sdk\io_ctrl_bsp\mb0_microblaze_0\include\xenv_standalone.h,Dataset Download,../../Dataset Download/2021\virtual-festo-twin\Hardware_Design\LinuxSys.sdk\io_ctrl_bsp\mb0_microblaze_0\include\xenv_standalone.h,"memcpy((void *) DestPtr, (const void *) SrcPtr, (size_t) Bytes)",120,1,"
#define XENV_MEM_COPY(DestPtr, SrcPtr, Bytes) \
	memcpy((void *) DestPtr, (const void *) SrcPtr, (size_t) Bytes)


"
10535,2021\virtual-festo-twin\Hardware_Design\LinuxSys.sdk\zynq_fsbl\src\qspi.c,Dataset Download,../../Dataset Download/2021\virtual-festo-twin\Hardware_Design\LinuxSys.sdk\zynq_fsbl\src\qspi.c,"memcpy(BufferPtr, &ReadBuffer[DATA_OFFSET + DUMMY_SIZE], Length);",120,1,"			 * Moving the data from local buffer to DDR destination address
			 */
			memcpy(BufferPtr, &ReadBuffer[DATA_OFFSET + DUMMY_SIZE], Length);

			/*
"
10542,2021\virtual-festo-twin\Hardware_Design\LinuxSys.sdk\zynq_fsbl_bsp\ps7_cortexa9_0\libsrc\emacps_v3_4\src\xemacps_bdring.c,Dataset Download,../../Dataset Download/2021\virtual-festo-twin\Hardware_Design\LinuxSys.sdk\zynq_fsbl_bsp\ps7_cortexa9_0\libsrc\emacps_v3_4\src\xemacps_bdring.c,"memcpy((void *)CurBd, SrcBdPtr, sizeof(XEmacPs_Bd));",120,1,"	CurBd = RingPtr->BaseBdAddr;
	for (i = 0U; i < RingPtr->AllCnt; i++) {
		memcpy((void *)CurBd, SrcBdPtr, sizeof(XEmacPs_Bd));
	CurBd += RingPtr->Separation;
	}
"
10561,2021\wio-terminal-azure-sample\src\main.cpp,Dataset Download,../../Dataset Download/2021\wio-terminal-azure-sample\src\main.cpp,"memcpy(*response, resultBuff, *response_size);",120,1,"    *response_size = strlen(resultBuff);
    *response = (unsigned char *)malloc(*response_size);
    memcpy(*response, resultBuff, *response_size);

    return IOTHUB_CLIENT_OK;
"
10607,2021\x-cube-subg2\Drivers\CMSIS\NN\Source\ConvolutionFunctions\arm_convolve_HWC_q15_basic.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Drivers\CMSIS\NN\Source\ConvolutionFunctions\arm_convolve_HWC_q15_basic.c,"memcpy(pBuffer, (q15_t *) Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, sizeof(q15_t)*ch_im_in);",120,1,"                    {
                        /* arm_copy_q15((q15_t *) Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, pBuffer, ch_im_in); */
                        memcpy(pBuffer, (q15_t *) Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, sizeof(q15_t)*ch_im_in);
                    }
                    pBuffer += ch_im_in;
"
10611,2021\x-cube-subg2\Drivers\CMSIS\NN\Source\ConvolutionFunctions\arm_convolve_HWC_q15_fast_nonsquare.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Drivers\CMSIS\NN\Source\ConvolutionFunctions\arm_convolve_HWC_q15_fast_nonsquare.c,"memcpy(pBuffer, (q15_t *) Im_in + (i_ker_y * dim_im_in_x + i_ker_x) * ch_im_in, sizeof(q15_t)*ch_im_in);",120,1,"                    {
                        /* arm_copy_q15((q15_t *) Im_in + (i_ker_y * dim_im_in_x + i_ker_x) * ch_im_in, pBuffer, ch_im_in); */
                        memcpy(pBuffer, (q15_t *) Im_in + (i_ker_y * dim_im_in_x + i_ker_x) * ch_im_in, sizeof(q15_t)*ch_im_in);
                    }
                    pBuffer += ch_im_in;
"
10623,2021\x-cube-subg2\Drivers\CMSIS\NN\Source\ConvolutionFunctions\arm_depthwise_separable_conv_HWC_q7.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Drivers\CMSIS\NN\Source\ConvolutionFunctions\arm_depthwise_separable_conv_HWC_q7.c,"memcpy(pBuffer, (q7_t *) Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, ch_im_in);",120,1,"                    {
                        /* arm_copy_q7((q7_t *) Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, pBuffer, ch_im_in); */
                        memcpy(pBuffer, (q7_t *) Im_in + (i_ker_y * dim_im_in + i_ker_x) * ch_im_in, ch_im_in);
                    }
                    pBuffer += ch_im_in;
"
10625,2021\x-cube-subg2\Drivers\CMSIS\NN\Source\ConvolutionFunctions\arm_depthwise_separable_conv_HWC_q7_nonsquare.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Drivers\CMSIS\NN\Source\ConvolutionFunctions\arm_depthwise_separable_conv_HWC_q7_nonsquare.c,"memcpy(pBuffer, (q7_t *) Im_in + (i_ker_y * dim_im_in_x + i_ker_x) * ch_im_in, ch_im_in);",120,1,"                    {
                        /* arm_copy_q7((q7_t *) Im_in + (i_ker_y * dim_im_in_x + i_ker_x) * ch_im_in, pBuffer, ch_im_in); */
                        memcpy(pBuffer, (q7_t *) Im_in + (i_ker_y * dim_im_in_x + i_ker_x) * ch_im_in, ch_im_in);
                    }
                    pBuffer += ch_im_in;
"
10632,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\contiki-main.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\contiki-main.c,"memcpy(&uip_lladdr.addr, &linkaddr_node_addr, sizeof(uip_lladdr.addr));",120,1,"  {
    uip_ds6_addr_t *lladdr;
    memcpy(&uip_lladdr.addr, &linkaddr_node_addr, sizeof(uip_lladdr.addr));
    process_start(&tcpip_process, NULL);

"
10633,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\lib\aes-128.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\lib\aes-128.c,"memcpy(round_keys[0], key, AES_128_KEY_LENGTH);",120,1,"  
  rcon = 0x01;
  memcpy(round_keys[0], key, AES_128_KEY_LENGTH);
  for(i = 1; i <= 10; i++) {
    round_keys[i][0] = sbox[round_keys[i - 1][13]] ^ round_keys[i - 1][0] ^ rcon;
"
10634,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\lib\ccm-star.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\lib\ccm-star.c,"memcpy(iv + 1, nonce, CCM_STAR_NONCE_LENGTH);",120,1,"{
  iv[0] = flags;
  memcpy(iv + 1, nonce, CCM_STAR_NONCE_LENGTH);
  iv[14] = counter >> 8;
  iv[15] = counter;
"
10635,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\lib\ccm-star.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\lib\ccm-star.c,"memcpy(result, x, mic_len);",120,1,"  ctr_step(nonce, 0, x, AES_128_BLOCK_SIZE, 0);

  memcpy(result, x, mic_len);
}
/*---------------------------------------------------------------------------*/
"
10636,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\lib\heapmem.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\lib\heapmem.c,"memcpy(newptr, ptr, chunk->size);",120,1,"  }

  memcpy(newptr, ptr, chunk->size);
  free_chunk(chunk);

"
10640,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\lib\dbg-io\snprintf.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\lib\dbg-io\snprintf.c,"memcpy(buffer->pos, data, len);",120,1,"  }

  memcpy(buffer->pos, data, len);
  buffer->pos += len;
  buffer->left -= len;
"
10641,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\lib\dbg-io\sprintf.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\lib\dbg-io\sprintf.c,"memcpy(*(char **)user_data, data, len);",120,1,"buffer_str(void *user_data, const char *data, unsigned int len)
{
  memcpy(*(char **)user_data, data, len);
  (*(char **)user_data) += len;
  return STRFORMAT_OK;
"
10646,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\linkaddr.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\linkaddr.c,"memcpy(dest, src, LINKADDR_SIZE);",120,1,"linkaddr_copy(linkaddr_t *dest, const linkaddr_t *src)
{
	memcpy(dest, src, LINKADDR_SIZE);
}
/*---------------------------------------------------------------------------*/
"
10648,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\packetbuf.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\packetbuf.c,"memcpy(packetbuf, from, l);",120,1,"  packetbuf_clear();
  l = MIN(PACKETBUF_SIZE, len);
  memcpy(packetbuf, from, l);
  buflen = l;
  return l;
"
10649,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\packetbuf.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\packetbuf.c,"memcpy(to, packetbuf_hdrptr(), hdrlen);",120,1,"    return 0;
  }
  memcpy(to, packetbuf_hdrptr(), hdrlen);
  memcpy((uint8_t *)to + hdrlen, packetbuf_dataptr(), buflen);
  return hdrlen + buflen;
"
10650,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\packetbuf.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\packetbuf.c,"memcpy((uint8_t *)to + hdrlen, packetbuf_dataptr(), buflen);",120,1,"  }
  memcpy(to, packetbuf_hdrptr(), hdrlen);
  memcpy((uint8_t *)to + hdrlen, packetbuf_dataptr(), buflen);
  return hdrlen + buflen;
}
"
10652,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\packetbuf.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\packetbuf.c,"memcpy(attrs, packetbuf_attrs, sizeof(packetbuf_attrs));",120,1,"                      struct packetbuf_addr *addrs)
{
  memcpy(attrs, packetbuf_attrs, sizeof(packetbuf_attrs));
  memcpy(addrs, packetbuf_addrs, sizeof(packetbuf_addrs));
}
"
10653,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\packetbuf.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\packetbuf.c,"memcpy(addrs, packetbuf_addrs, sizeof(packetbuf_addrs));",120,1,"{
  memcpy(attrs, packetbuf_attrs, sizeof(packetbuf_attrs));
  memcpy(addrs, packetbuf_addrs, sizeof(packetbuf_addrs));
}
/*---------------------------------------------------------------------------*/
"
10654,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\packetbuf.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\packetbuf.c,"memcpy(packetbuf_attrs, attrs, sizeof(packetbuf_attrs));",120,1,"                        struct packetbuf_addr *addrs)
{
  memcpy(packetbuf_attrs, attrs, sizeof(packetbuf_attrs));
  memcpy(packetbuf_addrs, addrs, sizeof(packetbuf_addrs));
}
"
10655,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\packetbuf.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\packetbuf.c,"memcpy(packetbuf_addrs, addrs, sizeof(packetbuf_addrs));",120,1,"{
  memcpy(packetbuf_attrs, attrs, sizeof(packetbuf_attrs));
  memcpy(packetbuf_addrs, addrs, sizeof(packetbuf_addrs));
}
/*---------------------------------------------------------------------------*/
"
10656,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\coap\coap-block1.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\coap\coap-block1.c,"memcpy(target + request->block1_offset, payload, pay_len);",120,1,"
  if(target && len) {
    memcpy(target + request->block1_offset, payload, pay_len);
    *len = request->block1_offset + pay_len;
  }
"
10657,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\coap\coap-observe-client.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\coap\coap-observe-client.c,"memcpy(coap_pkt->token, token, coap_pkt->token_len);",120,1,"{
  coap_pkt->token_len = MIN(COAP_TOKEN_LEN, token_len);
  memcpy(coap_pkt->token, token, coap_pkt->token_len);

  return coap_pkt->token_len;
"
10658,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\coap\coap-observe-client.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\coap\coap-observe-client.c,"memcpy(o->token, token, token_len);",120,1,"    coap_endpoint_copy(&o->endpoint, endpoint);
    o->token_len = token_len;
    memcpy(o->token, token, token_len);
    /* o->last_mid = 0; */
    o->notification_callback = notification_callback;
"
10659,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\coap\coap-observe.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\coap\coap-observe.c,"memcpy(o->url, uri, max);",120,1,"      max = uri_len;
    }
    memcpy(o->url, uri, max);
    o->url[max] = 0;
    coap_endpoint_copy(&o->endpoint, endpoint);
"
10661,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\coap\coap-separate.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\coap\coap-separate.c,"memcpy(separate_store->token, coap_req->token, coap_req->token_len);",120,1,"    separate_store->mid = coap_get_mid(); /* if it was a NON, we burned one MID in the engine... */

    memcpy(separate_store->token, coap_req->token, coap_req->token_len);
    separate_store->token_len = coap_req->token_len;

"
10662,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\coap\coap-uip.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\coap\coap-uip.c,"memcpy(buf, text, size);",120,1,"  } else if(size < UIPLIB_IPV6_MAX_STR_LEN) {
    char buf[UIPLIB_IPV6_MAX_STR_LEN];
    memcpy(buf, text, size);
    buf[size] = '\0';
    if(uiplib_ipaddrconv(buf, &ep->ipaddr)) {
"
10664,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\coap\coap-uip.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\coap\coap-uip.c,"memcpy(result, ks.identity, ks.identity_len);",120,1,"      return dtls_alert_fatal_create(DTLS_ALERT_INTERNAL_ERROR);
    }
    memcpy(result, ks.identity, ks.identity_len);
    LOG_DBG(""psk_identity with %u bytes found\n"", ks.identity_len);
    return ks.identity_len;
"
10665,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\coap\coap-uip.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\coap\coap-uip.c,"memcpy(result, ks.key, ks.key_len);",120,1,"      return dtls_alert_fatal_create(DTLS_ALERT_INTERNAL_ERROR);
    }
    memcpy(result, ks.key, ks.key_len);
    LOG_DBG(""psk with %u bytes found\n"", ks.key_len);
    return ks.key_len;
"
10666,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\coap\coap.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\coap\coap.c,"memcpy(&buffer[i], part_start, temp_length);",120,1,"        i += coap_set_option_header(number - current_number, temp_length,
                                    &buffer[i]);
        memcpy(&buffer[i], part_start, temp_length);
        i += temp_length;

"
10667,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\coap\coap.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\coap\coap.c,"memcpy(&buffer[i], array, length);",120,1,"  } else {
    i += coap_set_option_header(number - current_number, length, &buffer[i]);
    memcpy(&buffer[i], array, length);
    i += length;

"
10672,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\coap\coap.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\coap\coap.c,"memcpy(coap_pkt->token, current_option, coap_pkt->token_len);",120,1,"  }

  memcpy(coap_pkt->token, current_option, coap_pkt->token_len);
  LOG_DBG(""Token (len %u) [0x%02X%02X%02X%02X%02X%02X%02X%02X]\n"",
          coap_pkt->token_len, coap_pkt->token[0], coap_pkt->token[1],
"
10674,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\coap\coap.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\coap\coap.c,"memcpy(coap_pkt->etag, current_option, coap_pkt->etag_len);",120,1,"    case COAP_OPTION_ETAG:
      coap_pkt->etag_len = MIN(COAP_ETAG_LEN, option_length);
      memcpy(coap_pkt->etag, current_option, coap_pkt->etag_len);
      LOG_DBG_(""ETag %u [0x%02X%02X%02X%02X%02X%02X%02X%02X]\n"",
               coap_pkt->etag_len, coap_pkt->etag[0], coap_pkt->etag[1],
"
10675,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\coap\coap.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\coap\coap.c,"memcpy(coap_pkt->if_match, current_option, coap_pkt->if_match_len);",120,1,"      /* TODO support multiple ETags */
      coap_pkt->if_match_len = MIN(COAP_ETAG_LEN, option_length);
      memcpy(coap_pkt->if_match, current_option, coap_pkt->if_match_len);
      LOG_DBG_(""If-Match %u [0x%02X%02X%02X%02X%02X%02X%02X%02X]\n"",
               coap_pkt->if_match_len, coap_pkt->if_match[0],
"
10677,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\coap\coap.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\coap\coap.c,"memcpy(coap_pkt->etag, etag, coap_pkt->etag_len);",120,1,"{
  coap_pkt->etag_len = MIN(COAP_ETAG_LEN, etag_len);
  memcpy(coap_pkt->etag, etag, coap_pkt->etag_len);

  coap_set_option(coap_pkt, COAP_OPTION_ETAG);
"
10678,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\coap\coap.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\coap\coap.c,"memcpy(coap_pkt->if_match, etag, coap_pkt->if_match_len);",120,1,"{
  coap_pkt->if_match_len = MIN(COAP_ETAG_LEN, etag_len);
  memcpy(coap_pkt->if_match, etag, coap_pkt->if_match_len);

  coap_set_option(coap_pkt, COAP_OPTION_IF_MATCH);
"
10687,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\http-socket\websocket.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\http-socket\websocket.c,"memcpy(s->mask, &maskptr->mask, sizeof(s->mask));",120,1,"        /*        LOG_INFO(""No mask\n"");*/
      } else {
        memcpy(s->mask, &maskptr->mask, sizeof(s->mask));
        /*        LOG_INFO(""There was a mask, %02x %02x %02x %02x\n"",
                  s->mask[0], s->mask[1], s->mask[2], s->mask[3]);*/
"
10688,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\http-socket\websocket.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\http-socket\websocket.c,"memcpy(&buf[8], data, datalen);",120,1,"      mask->mask[2] =
      mask->mask[3] = 0;
    memcpy(&buf[8], data, datalen);
    return websocket_http_client_send(&s->s, buf, 8 + datalen);
  } else {
"
10689,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\http-socket\websocket.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\http-socket\websocket.c,"memcpy(&buf[6], data, datalen);",120,1,"      mask->mask[2] =
      mask->mask[3] = 0;
    memcpy(&buf[6], data, datalen);
    return websocket_http_client_send(&s->s, buf, 6 + datalen);
  }
"
10690,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\mqtt\mqtt-prop.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\mqtt\mqtt-prop.c,"memcpy((*prop_out)->val + 2, str, str_len);",120,1,"  (*prop_out)->val[0] = str_len >> 8;
  (*prop_out)->val[1] = str_len & 0x00FF;
  memcpy((*prop_out)->val + 2, str, str_len);

  (*prop_out)->property_len = str_len + 2;
"
10691,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\mqtt\mqtt-prop.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\mqtt\mqtt-prop.c,"memcpy((*prop_out)->val + 2, data, data_len);",120,1,"  (*prop_out)->val[0] = data_len >> 8;
  (*prop_out)->val[1] = data_len & 0x00FF;
  memcpy((*prop_out)->val + 2, data, data_len);

  (*prop_out)->property_len = data_len + 2;
"
10692,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\mqtt\mqtt-prop.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\mqtt\mqtt-prop.c,"memcpy((*prop_out)->val + 2, name, strlen(name));",120,1,"    (*prop_out)->val[0] = name_len >> 8;
    (*prop_out)->val[1] = name_len & 0x00FF;
    memcpy((*prop_out)->val + 2, name, strlen(name));
    (*prop_out)->val[name_len + 2] = val_len >> 8;
    (*prop_out)->val[name_len + 3] = val_len & 0x00FF;
"
10693,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\mqtt\mqtt-prop.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\mqtt\mqtt-prop.c,"memcpy((*prop_out)->val + name_len + 4, value, strlen(value));",120,1,"    (*prop_out)->val[name_len + 2] = val_len >> 8;
    (*prop_out)->val[name_len + 3] = val_len & 0x00FF;
    memcpy((*prop_out)->val + name_len + 4, value, strlen(value));

    (*prop_out)->property_len = strlen(name) + strlen(value) + 4;
"
10694,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\mqtt\mqtt-prop.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\mqtt\mqtt-prop.c,"memcpy(data, buf_in, len + MQTT_STRING_LEN_SIZE);",120,1,"  }

  memcpy(data, buf_in, len + MQTT_STRING_LEN_SIZE);
  data[len + MQTT_STRING_LEN_SIZE] = '\0';

"
10697,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\mqtt\mqtt-prop.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\mqtt\mqtt-prop.c,"memcpy(data, buf_in, data_len + 2);",120,1,"  }

  memcpy(data, buf_in, data_len + 2);

  return data_len + 2;
"
10698,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\mqtt\mqtt-prop.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\mqtt\mqtt-prop.c,"memcpy(data, buf_in, total_len + 2 * MQTT_STRING_LEN_SIZE);",120,1,"  }

  memcpy(data, buf_in, total_len + 2 * MQTT_STRING_LEN_SIZE);

  /* Length of string + 2 bytes for length */
"
10699,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\mqtt\mqtt-prop.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\mqtt\mqtt-prop.c,"memcpy(event->auth_data.data, data, prop_len - 2);",120,1,"    case MQTT_VHDR_PROP_AUTH_DATA: {
      event->auth_data.len = prop_len - 2; /* 2 bytes are used to encode len */
      memcpy(event->auth_data.data, data, prop_len - 2);
      break;
    }
"
10700,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\mqtt\mqtt-prop.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\mqtt\mqtt-prop.c,"memcpy(event->auth_method.string, data, prop_len - 2);",120,1,"    case MQTT_VHDR_PROP_AUTH_METHOD: {
      event->auth_method.length = prop_len - 2; /* 2 bytes are used to encode len */
      memcpy(event->auth_method.string, data, prop_len - 2);
      break;
    }
"
10704,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\mqtt\mqtt.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\mqtt\mqtt.c,"memcpy(conn->out_buffer_ptr, &data[conn->out_write_pos], write_bytes);",120,1,"        len - conn->out_write_pos);

  memcpy(conn->out_buffer_ptr, &data[conn->out_write_pos], write_bytes);
  conn->out_write_pos += write_bytes;
  conn->out_buffer_ptr += write_bytes;
"
10707,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\snmp\snmp-api.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\snmp\snmp-api.c,"memcpy(&varbind->oid, oid, sizeof(snmp_oid_t));",120,1,"snmp_api_set_string(snmp_varbind_t *varbind, snmp_oid_t *oid, char *string)
{
  memcpy(&varbind->oid, oid, sizeof(snmp_oid_t));
  varbind->value_type = BER_DATA_TYPE_OCTET_STRING;
  varbind->value.string.string = string;
"
10710,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\snmp\snmp-api.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\snmp\snmp-api.c,"memcpy(&varbind->value.oid, ret_oid, sizeof(snmp_oid_t));",120,1,"  memcpy(&varbind->oid, oid, sizeof(snmp_oid_t));
  varbind->value_type = BER_DATA_TYPE_OBJECT_IDENTIFIER;
  memcpy(&varbind->value.oid, ret_oid, sizeof(snmp_oid_t));
}
/*---------------------------------------------------------------------------*/
"
10711,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\snmp\snmp-engine.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\snmp\snmp-engine.c,"memcpy(&oids[original_varbinds_length], &varbinds[original_varbinds_length].oid, sizeof(snmp_oid_t));",120,1,"  original_varbinds_length = 0;
  while(varbinds[original_varbinds_length].value_type != BER_DATA_TYPE_EOC && original_varbinds_length < SNMP_MAX_NR_VALUES) {
    memcpy(&oids[original_varbinds_length], &varbinds[original_varbinds_length].oid, sizeof(snmp_oid_t));
    original_varbinds_length++;
  }
"
10712,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\snmp\snmp-engine.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\snmp\snmp-engine.c,"memcpy(&varbinds[varbinds_length].oid, &oids[j], sizeof(snmp_oid_t));",120,1,"          if(varbinds_length < SNMP_MAX_NR_VALUES) {
            (&varbinds[varbinds_length])->value_type = BER_DATA_TYPE_END_OF_MIB_VIEW;
            memcpy(&varbinds[varbinds_length].oid, &oids[j], sizeof(snmp_oid_t));
            (varbinds_length)++;
          } else {
"
10713,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\snmp\snmp-engine.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\app-layer\snmp\snmp-engine.c,"memcpy(&oids[j], &resource->oid, sizeof(snmp_oid_t));",120,1,"          resource->handler(&varbinds[varbinds_length], &resource->oid);
          (varbinds_length)++;
          memcpy(&oids[j], &resource->oid, sizeof(snmp_oid_t));
          repeater++;
        } else {
"
10716,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\ip64-addr.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\ip64-addr.c,"memcpy(dest, src, sizeof(uip_ip4addr_t));",120,1,"ip64_addr_copy4(uip_ip4addr_t *dest, const uip_ip4addr_t *src)
{
  memcpy(dest, src, sizeof(uip_ip4addr_t));
}
/*---------------------------------------------------------------------------*/
"
10717,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\ip64-addr.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\ip64-addr.c,"memcpy(dest, src, sizeof(uip_ip6addr_t));",120,1,"ip64_addr_copy6(uip_ip6addr_t *dest, const uip_ip6addr_t *src)
{
  memcpy(dest, src, sizeof(uip_ip6addr_t));
}
/*---------------------------------------------------------------------------*/
"
10718,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\psock.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\psock.c,"memcpy(buf->ptr, *dataptr, *datalen);",120,1,"{
  if(*datalen < buf->left) {
    memcpy(buf->ptr, *dataptr, *datalen);
    buf->ptr += *datalen;
    buf->left -= *datalen;
"
10720,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\psock.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\psock.c,"memcpy(buf->ptr, *dataptr, buf->left);",120,1,"    return BUF_FULL;
  } else {
    memcpy(buf->ptr, *dataptr, buf->left);
    buf->ptr += buf->left;
    *datalen -= buf->left;
"
10721,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,"memcpy(frag_buf[i].data, packetbuf_ptr + packetbuf_hdr_len, len);",120,1,"      frag_buf[i].len = len;
      frag_buf[i].index = index;
      memcpy(frag_buf[i].data, packetbuf_ptr + packetbuf_hdr_len, len);
      /* return the length of the stored fragment */
      return len;
"
10722,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,"memcpy((uint8_t *)UIP_IP_BUF, (uint8_t *)frag_info[context].first_frag,",120,1,"
  /* Copy from the fragment context info buffer first */
  memcpy((uint8_t *)UIP_IP_BUF, (uint8_t *)frag_info[context].first_frag,
         frag_info[context].first_frag_len);

"
10723,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,"memcpy(hc06_ptr, &ipaddr->u16[7], 2);",120,1,"  } else if(sicslowpan_is_iid_16_bit_compressable(ipaddr)) {
    /* compress IID to 16 bits xxxx::0000:00ff:fe00:XXXX */
    memcpy(hc06_ptr, &ipaddr->u16[7], 2);
    hc06_ptr += 2;
    return 2 << bitpos; /* 16-bits */
"
10724,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,"memcpy(hc06_ptr, &ipaddr->u16[4], 8);",120,1,"  } else {
    /* do not compress IID => xxxx::IID */
    memcpy(hc06_ptr, &ipaddr->u16[4], 8);
    hc06_ptr += 8;
    return 1 << bitpos; /* 64-bits */
"
10725,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,"memcpy(ipaddr, prefix, prefcount);",120,1,"
  if(prefcount > 0) {
    memcpy(ipaddr, prefix, prefcount);
  }
  if(prefcount + postcount < 16) {
"
10727,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,"memcpy(&ipaddr->u8[16 - postcount], hc06_ptr, postcount);",120,1,"  }
  if(postcount > 0) {
    memcpy(&ipaddr->u8[16 - postcount], hc06_ptr, postcount);
    if(postcount == 2 && prefcount < 11) {
      /* 16 bits uncompression => 0000:00ff:fe00:XXXX */
"
10728,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,"memcpy(hc06_ptr + 1, &UIP_IP_BUF->flow, 2);",120,1,"      *hc06_ptr = (tmp & 0xc0) |
        (UIP_IP_BUF->tcflow & 0x0F);
      memcpy(hc06_ptr + 1, &UIP_IP_BUF->flow, 2);
      hc06_ptr += 3;
    } else {
"
10729,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,"memcpy(hc06_ptr, &UIP_IP_BUF->vtc, 4);",120,1,"    } else {
      /* compress nothing */
      memcpy(hc06_ptr, &UIP_IP_BUF->vtc, 4);
      /* but replace the top byte with the new ECN | DSCP format*/
      *hc06_ptr = tmp;
"
10730,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,"memcpy(hc06_ptr, &UIP_IP_BUF->srcipaddr.u16[0], 16);",120,1,"    /* send the full address => SAC = 0, SAM = 00 */
    iphc1 |= SICSLOWPAN_IPHC_SAM_00; /* 128-bits */
    memcpy(hc06_ptr, &UIP_IP_BUF->srcipaddr.u16[0], 16);
    hc06_ptr += 16;
  }
"
10731,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,"memcpy(hc06_ptr + 1, &UIP_IP_BUF->destipaddr.u8[13], 3);",120,1,"      /* second byte + the last three */
      *hc06_ptr = UIP_IP_BUF->destipaddr.u8[1];
      memcpy(hc06_ptr + 1, &UIP_IP_BUF->destipaddr.u8[13], 3);
      hc06_ptr += 4;
    } else if(sicslowpan_is_mcast_addr_compressable48(&UIP_IP_BUF->destipaddr)) {
"
10732,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,"memcpy(hc06_ptr + 1, &UIP_IP_BUF->destipaddr.u8[11], 5);",120,1,"      /* second byte + the last five */
      *hc06_ptr = UIP_IP_BUF->destipaddr.u8[1];
      memcpy(hc06_ptr + 1, &UIP_IP_BUF->destipaddr.u8[11], 5);
      hc06_ptr += 6;
    } else {
"
10733,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,"memcpy(hc06_ptr, &UIP_IP_BUF->destipaddr.u8[0], 16);",120,1,"      iphc1 |= SICSLOWPAN_IPHC_DAM_00;
      /* full address */
      memcpy(hc06_ptr, &UIP_IP_BUF->destipaddr.u8[0], 16);
      hc06_ptr += 16;
    }
"
10734,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,"memcpy(hc06_ptr, &UIP_IP_BUF->destipaddr.u16[0], 16);",120,1,"      /* send the full address */
      iphc1 |= SICSLOWPAN_IPHC_DAM_00; /* 128-bits */
      memcpy(hc06_ptr, &UIP_IP_BUF->destipaddr.u16[0], 16);
      hc06_ptr += 16;
    }
"
10735,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,"memcpy(hc06_ptr, ext_hdr, len);",120,1,"        /* copy the ext-hdr into the hc06 buffer */
        CHECK_BUFFER_SPACE(len);
        memcpy(hc06_ptr, ext_hdr, len);
        /* modify the len to octets */
        ext_hdr = (struct uip_ext_hdr *) hc06_ptr;
"
10736,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,"memcpy(hc06_ptr, &udp_buf->srcport, 2);",120,1,"        LOG_DBG(""IPHC: leave source, remove 8 bits of dest with prefix 0xF0\n"");
        CHECK_BUFFER_SPACE(3);
        memcpy(hc06_ptr, &udp_buf->srcport, 2);
        *(hc06_ptr + 2) =
          (uint8_t)((UIP_HTONS(udp_buf->destport) -
"
10737,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,"memcpy(hc06_ptr + 1, &udp_buf->destport, 2);",120,1,"          (uint8_t)((UIP_HTONS(udp_buf->srcport) -
                     SICSLOWPAN_UDP_8_BIT_PORT_MIN));
        memcpy(hc06_ptr + 1, &udp_buf->destport, 2);
        hc06_ptr += 3;
      } else {
"
10738,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,"memcpy(hc06_ptr, &udp_buf->srcport, 4);",120,1,"        LOG_DBG(""IPHC: cannot compress UDP headers\n"");
        CHECK_BUFFER_SPACE(4);
        memcpy(hc06_ptr, &udp_buf->srcport, 4);
        hc06_ptr += 4;
      }
"
10739,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,"memcpy(hc06_ptr, &udp_buf->udpchksum, 2);",120,1,"      /* always inline the checksum  */
      CHECK_BUFFER_SPACE(2);
      memcpy(hc06_ptr, &udp_buf->udpchksum, 2);
      hc06_ptr += 2;
      uncomp_hdr_len += UIP_UDPH_LEN;
"
10740,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,"memcpy(&SICSLOWPAN_IP_BUF(buf)->tcflow, hc06_ptr + 1, 3);",120,1,"      if((iphc0 & SICSLOWPAN_IPHC_TC_C) == 0) {
        /* Traffic class is carried inline */
        memcpy(&SICSLOWPAN_IP_BUF(buf)->tcflow, hc06_ptr + 1, 3);
        tmp = *hc06_ptr;
        hc06_ptr += 4;
"
10741,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,"memcpy(&SICSLOWPAN_IP_BUF(buf)->flow, hc06_ptr + 1, 2);",120,1,"        SICSLOWPAN_IP_BUF(buf)->tcflow = (*hc06_ptr & 0x0F) |
          ((*hc06_ptr >> 2) & 0x30);
        memcpy(&SICSLOWPAN_IP_BUF(buf)->flow, hc06_ptr + 1, 2);
        hc06_ptr += 3;
      }
"
10742,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,"memcpy((uint8_t *)exthdr + UIP_EXT_HDR_LEN, hc06_ptr, len);",120,1,"    exthdr->next = next;
    last_nextheader = &exthdr->next;
    memcpy((uint8_t *)exthdr + UIP_EXT_HDR_LEN, hc06_ptr, len);

    hc06_ptr += len;
"
10743,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,"memcpy(&udp_buf->srcport, hc06_ptr + 1, 2);",120,1,"    case SICSLOWPAN_NHC_UDP_CS_P_00:
      /* 1 byte for NHC, 4 byte for ports, 2 bytes chksum */
      memcpy(&udp_buf->srcport, hc06_ptr + 1, 2);
      memcpy(&udp_buf->destport, hc06_ptr + 3, 2);
      LOG_DBG(""uncompression: UDP ports (ptr+5): %x, %x\n"",
"
10744,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,"memcpy(&udp_buf->destport, hc06_ptr + 3, 2);",120,1,"      /* 1 byte for NHC, 4 byte for ports, 2 bytes chksum */
      memcpy(&udp_buf->srcport, hc06_ptr + 1, 2);
      memcpy(&udp_buf->destport, hc06_ptr + 3, 2);
      LOG_DBG(""uncompression: UDP ports (ptr+5): %x, %x\n"",
             UIP_HTONS(udp_buf->srcport),
"
10746,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,"memcpy(&udp_buf->destport, hc06_ptr + 2, 2);",120,1,"      udp_buf->srcport = UIP_HTONS(SICSLOWPAN_UDP_8_BIT_PORT_MIN +
                                   (*(hc06_ptr + 1)));
      memcpy(&udp_buf->destport, hc06_ptr + 2, 2);
      LOG_DBG(""uncompression: UDP ports (ptr+4): %x, %x\n"",
             UIP_HTONS(udp_buf->srcport), UIP_HTONS(udp_buf->destport));
"
10747,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,"memcpy(&udp_buf->udpchksum, hc06_ptr, 2);",120,1,"    }
    if(!checksum_compressed) { /* has_checksum, default  */
      memcpy(&udp_buf->udpchksum, hc06_ptr, 2);
      hc06_ptr += 2;
      LOG_DBG(""uncompression: checksum included\n"");
"
10748,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,"memcpy(packetbuf_ptr + packetbuf_hdr_len, UIP_IP_BUF, UIP_IPH_LEN);",120,1,"  *packetbuf_ptr = SICSLOWPAN_DISPATCH_IPV6;
  packetbuf_hdr_len += SICSLOWPAN_IPV6_HDR_LEN;
  memcpy(packetbuf_ptr + packetbuf_hdr_len, UIP_IP_BUF, UIP_IPH_LEN);
  packetbuf_hdr_len += UIP_IPH_LEN;
  uncomp_hdr_len += UIP_IPH_LEN;
"
10750,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,"memcpy(packetbuf_ptr + packetbuf_hdr_len, (uint8_t *)UIP_IP_BUF + uncomp_hdr_len,",120,1,"    }

    memcpy(packetbuf_ptr + packetbuf_hdr_len, (uint8_t *)UIP_IP_BUF + uncomp_hdr_len,
           uip_len - uncomp_hdr_len);
    packetbuf_set_datalen(uip_len - uncomp_hdr_len + packetbuf_hdr_len);
"
10751,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,"memcpy(buffer, packetbuf_ptr + packetbuf_hdr_len, UIP_IPH_LEN);",120,1,"
    /* Put uncompressed IP header in sicslowpan_buf. */
    memcpy(buffer, packetbuf_ptr + packetbuf_hdr_len, UIP_IPH_LEN);

    /* Update uncomp_hdr_len and packetbuf_hdr_len. */
"
10752,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\sicslowpan.c,"memcpy((uint8_t *)buffer + uncomp_hdr_len, packetbuf_ptr + packetbuf_hdr_len, packetbuf_payload_len);",120,1,"     or packets that are non fragmented */
  if(buffer != NULL) {
    memcpy((uint8_t *)buffer + uncomp_hdr_len, packetbuf_ptr + packetbuf_hdr_len, packetbuf_payload_len);
  }

"
10753,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\simple-udp.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\simple-udp.c,"memcpy(databuffer, uip_appdata, uip_datalen());",120,1,"             buffer to avoid the uIP buffer being messed with by the
             callee. */
          memcpy(databuffer, uip_appdata, uip_datalen());

          /* Call the client process. We use the PROCESS_CONTEXT
"
10754,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\tcp-socket.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\tcp-socket.c,"memcpy(s->input_data_ptr, dataptr, copylen);",120,1,"  do {
    copylen = MIN(len, s->input_data_maxlen);
    memcpy(s->input_data_ptr, dataptr, copylen);
    if(s->input_callback) {
      bytesleft = s->input_callback(s, s->ptr,
"
10756,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\tcpip.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\tcpip.c,"memcpy(uip_packetqueue_buf(&nbr->packethandle), UIP_IP_BUF, uip_len);",120,1,"#if UIP_CONF_IPV6_QUEUE_PKT
  if(uip_packetqueue_alloc(&nbr->packethandle, UIP_DS6_NBR_PACKET_LIFETIME) != NULL) {
    memcpy(uip_packetqueue_buf(&nbr->packethandle), UIP_IP_BUF, uip_len);
    uip_packetqueue_set_buflen(&nbr->packethandle, uip_len);
    return 0;
"
10757,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\tcpip.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\tcpip.c,"memcpy(UIP_IP_BUF, uip_packetqueue_buf(&nbr->packethandle), uip_len);",120,1,"  if(uip_packetqueue_buflen(&nbr->packethandle) != 0) {
    uip_len = uip_packetqueue_buflen(&nbr->packethandle);
    memcpy(UIP_IP_BUF, uip_packetqueue_buf(&nbr->packethandle), uip_len);
    uip_packetqueue_free(&nbr->packethandle);
    tcpip_output(uip_ds6_nbr_get_ll(nbr));
"
10759,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\udp-socket.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\udp-socket.c,"memcpy(buf, uip_appdata, uip_datalen());",120,1,"             buffer to avoid the uIP buffer being messed with by the
             callee. */
          memcpy(buf, uip_appdata, uip_datalen());

          /* Call the client process. We use the PROCESS_CONTEXT
"
10760,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\uip-ds6-nbr.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\uip-ds6-nbr.c,"memcpy(&nbr_backup, *nbr_pp, sizeof(uip_ds6_nbr_t));",120,1,"  }

  memcpy(&nbr_backup, *nbr_pp, sizeof(uip_ds6_nbr_t));
  if(uip_ds6_nbr_rm(*nbr_pp) == 0) {
    LOG_ERR(""%s: input nbr cannot be removed\n"", __func__);
"
10761,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\uip-ds6-nbr.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\uip-ds6-nbr.c,"memcpy(*nbr_pp, &nbr_backup, sizeof(uip_ds6_nbr_t));",120,1,"    return -1;
  }
  memcpy(*nbr_pp, &nbr_backup, sizeof(uip_ds6_nbr_t));
#endif /* UIP_DS6_NBR_MULTI_IPV6_ADDRS */

"
10765,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\uip-ds6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\uip-ds6.c,"memcpy(ipaddr->u8 + 8, lladdr, UIP_LLADDR_LEN);",120,1,"{
#if (UIP_LLADDR_LEN == 8)
  memcpy(ipaddr->u8 + 8, lladdr, UIP_LLADDR_LEN);
  ipaddr->u8[8] ^= 0x02;
#elif (UIP_LLADDR_LEN == 6)
"
10766,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\uip-ds6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\uip-ds6.c,"memcpy(ipaddr->u8 + 8, lladdr, 3);",120,1,"  ipaddr->u8[8] ^= 0x02;
#elif (UIP_LLADDR_LEN == 6)
  memcpy(ipaddr->u8 + 8, lladdr, 3);
  ipaddr->u8[11] = 0xff;
  ipaddr->u8[12] = 0xfe;
"
10767,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\uip-ds6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\uip-ds6.c,"memcpy(ipaddr->u8 + 13, (uint8_t *)lladdr + 3, 3);",120,1,"  ipaddr->u8[11] = 0xff;
  ipaddr->u8[12] = 0xfe;
  memcpy(ipaddr->u8 + 13, (uint8_t *)lladdr + 3, 3);
  ipaddr->u8[8] ^= 0x02;
#elif (UIP_LLADDR_LEN == 2)
"
10768,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\uip-ds6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\uip-ds6.c,"memcpy(ipaddr->u8 + 8, iid_prefix, 6);",120,1,"#elif (UIP_LLADDR_LEN == 2)
  /* derive IID as per RFC 6282 */
  memcpy(ipaddr->u8 + 8, iid_prefix, 6);
  memcpy(ipaddr->u8 + 8 + 6, lladdr, UIP_LLADDR_LEN);
#else
"
10769,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\uip-ds6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\uip-ds6.c,"memcpy(ipaddr->u8 + 8 + 6, lladdr, UIP_LLADDR_LEN);",120,1,"  /* derive IID as per RFC 6282 */
  memcpy(ipaddr->u8 + 8, iid_prefix, 6);
  memcpy(ipaddr->u8 + 8 + 6, lladdr, UIP_LLADDR_LEN);
#else
#error uip-ds6.c cannot build interface address when UIP_LLADDR_LEN is not 6, 8, or 2
"
10770,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\uip-ds6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\uip-ds6.c,"memcpy(lladdr, ipaddr->u8 + 8, UIP_LLADDR_LEN);",120,1,"{
#if (UIP_LLADDR_LEN == 8)
  memcpy(lladdr, ipaddr->u8 + 8, UIP_LLADDR_LEN);
  lladdr->addr[0] ^= 0x02;
#elif (UIP_LLADDR_LEN == 2)
"
10771,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\uip-ds6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\uip-ds6.c,"memcpy(lladdr, ipaddr->u8 + 6, UIP_LLADDR_LEN);",120,1,"  lladdr->addr[0] ^= 0x02;
#elif (UIP_LLADDR_LEN == 2)
  memcpy(lladdr, ipaddr->u8 + 6, UIP_LLADDR_LEN);
#else
#error uip-ds6.c cannot build lladdr address when UIP_LLADDR_LEN is not 8 or 2
"
10773,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\uip-icmp6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\uip-icmp6.c,"memcpy(&UIP_IP_BUF->destipaddr, dest, sizeof(*dest));",120,1,"  }

  memcpy(&UIP_IP_BUF->destipaddr, dest, sizeof(*dest));
  uip_ds6_select_src(&UIP_IP_BUF->srcipaddr, &UIP_IP_BUF->destipaddr);

"
10774,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\uip-nd6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\uip-nd6.c,"memcpy(dest, &nd6_opt_llao[UIP_ND6_OPT_DATA_OFFSET], UIP_LLADDR_LEN);",120,1,"extract_lladdr_from_llao_aligned(uip_lladdr_t *dest) {
  if(dest != NULL && nd6_opt_llao != NULL) {
    memcpy(dest, &nd6_opt_llao[UIP_ND6_OPT_DATA_OFFSET], UIP_LLADDR_LEN);
    return 1;
  }
"
10775,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\uip-nd6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\uip-nd6.c,"memcpy(&llao[UIP_ND6_OPT_DATA_OFFSET], &uip_lladdr, UIP_LLADDR_LEN);",120,1,"  llao[UIP_ND6_OPT_TYPE_OFFSET] = type;
  llao[UIP_ND6_OPT_LEN_OFFSET] = UIP_ND6_OPT_LLAO_LEN >> 3;
  memcpy(&llao[UIP_ND6_OPT_DATA_OFFSET], &uip_lladdr, UIP_LLADDR_LEN);
  /* padding on some */
  memset(&llao[UIP_ND6_OPT_DATA_OFFSET + UIP_LLADDR_LEN], 0,
"
10776,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\uip-nd6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\uip-nd6.c,"memcpy(&UIP_ND6_NA_BUF->tgtipaddr, &addr->ipaddr, sizeof(uip_ipaddr_t));",120,1,"
  UIP_ND6_NA_BUF->flagsreserved = flags;
  memcpy(&UIP_ND6_NA_BUF->tgtipaddr, &addr->ipaddr, sizeof(uip_ipaddr_t));

  create_llao(&uip_buf[uip_l3_icmp_hdr_len + UIP_ND6_NA_LEN],
"
10779,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\uip-sr.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\uip-sr.c,"memcpy(child_node->link_identifier, ((const unsigned char *)child) + 8, 8);",120,1,"  child_node->graph = graph;
  child_node->lifetime = lifetime;
  memcpy(child_node->link_identifier, ((const unsigned char *)child) + 8, 8);

  /* Is the node reachable before the update? */
"
10783,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\uip6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\uip6.c,"memcpy(FBUF, UIP_IP_BUF, uip_ext_len + UIP_IPH_LEN);",120,1,"  if(uip_reass_on == 0) {
    LOG_INFO(""Starting reassembly\n"");
    memcpy(FBUF, UIP_IP_BUF, uip_ext_len + UIP_IPH_LEN);
    /* temporary in case we do not receive the fragment with offset 0 first */
    etimer_set(&uip_reass_timer, UIP_REASS_MAXAGE*CLOCK_SECOND);
"
10786,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\uip6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\uip6.c,"memcpy(UIP_IP_BUF, FBUF, uip_reasslen);",120,1,"
      uip_reasslen += UIP_IPH_LEN + uip_ext_len;
      memcpy(UIP_IP_BUF, FBUF, uip_reasslen);
      uipbuf_set_len_field(UIP_IP_BUF, uip_reasslen - UIP_IPH_LEN);
      LOG_INFO(""reassembled packet %d (%d)\n"", uip_reasslen, uipbuf_get_len_field(UIP_IP_BUF));
"
10787,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\uip6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\uip6.c,"memcpy(UIP_TCP_PAYLOAD, (data), uip_slen);",120,1,"    if(data != uip_sappdata) {
      if(uip_sappdata == NULL) {
        memcpy(UIP_TCP_PAYLOAD, (data), uip_slen);
      } else {
        memcpy(uip_sappdata, (data), uip_slen);
"
10788,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\uip6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\uip6.c,"memcpy(uip_sappdata, (data), uip_slen);",120,1,"        memcpy(UIP_TCP_PAYLOAD, (data), uip_slen);
      } else {
        memcpy(uip_sappdata, (data), uip_slen);
      }
    }
"
10789,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\uipbuf.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\uipbuf.c,"memcpy(uipbuf_attrs, uipbuf_default_attrs, sizeof(uipbuf_attrs));",120,1,"{
  /* set everything to ""defaults"" */
  memcpy(uipbuf_attrs, uipbuf_default_attrs, sizeof(uipbuf_attrs));
}
/*---------------------------------------------------------------------------*/
"
10793,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\multicast\esmrf.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\multicast\esmrf.c,"memcpy(&mob->mcast_payload, &uip_buf[UIP_IPUDPH_LEN], uip_slen);",120,1,"  struct multicast_on_behalf *mob;
  mob = (struct multicast_on_behalf *)UIP_ICMP_PAYLOAD;
  memcpy(&mob->mcast_payload, &uip_buf[UIP_IPUDPH_LEN], uip_slen);

  UIP_IP_BUF->vtc = 0x60;
"
10794,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\multicast\esmrf.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\multicast\esmrf.c,"memcpy(&mcast_buf, uip_buf, uip_len);",120,1,"  uip_process(UIP_UDP_SEND_CONN);

  memcpy(&mcast_buf, uip_buf, uip_len);
  mcast_len = uip_len;
  /* pass the packet to our uip_process to check if it is allowed to
"
10795,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\multicast\esmrf.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\multicast\esmrf.c,"memcpy(uip_buf, &mcast_buf, mcast_len);",120,1,"  uip_process(UIP_DATA);

  memcpy(uip_buf, &mcast_buf, mcast_len);
  uip_len = mcast_len;
  /* Return the IP of the original Multicast sender */
"
10798,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\multicast\mpl.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\multicast\mpl.c,"#define seed_id_cpy(a, b) (memcpy((a), (b), sizeof(seed_id_t)))",120,1," * b: Source
 */
#define seed_id_cpy(a, b) (memcpy((a), (b), sizeof(seed_id_t)))
/**
 * \brief Clear a seed id value to zero
"
10804,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\multicast\mpl.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\multicast\mpl.c,"memcpy(&data_addr, address, sizeof(uip_ip6addr_t));",120,1,"  if(uip_mcast6_get_address_scope(address) == UIP_MCAST6_SCOPE_LINK_LOCAL) {
    LOG_DBG(""Domain Set Allocate has a local scoped address\n"");
    memcpy(&data_addr, address, sizeof(uip_ip6addr_t));
    memcpy(&ctrl_addr, address, sizeof(uip_ip6addr_t));
    do {
"
10805,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\multicast\mpl.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\multicast\mpl.c,"memcpy(&ctrl_addr, address, sizeof(uip_ip6addr_t));",120,1,"    LOG_DBG(""Domain Set Allocate has a local scoped address\n"");
    memcpy(&data_addr, address, sizeof(uip_ip6addr_t));
    memcpy(&ctrl_addr, address, sizeof(uip_ip6addr_t));
    do {
      data_addr.u8[1]++;
"
10809,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\multicast\mpl.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\multicast\mpl.c,"memcpy(&locdsptr->data_addr, &data_addr, sizeof(uip_ip6addr_t));",120,1,"      }
      memset(locdsptr, 0, sizeof(struct mpl_domain));
      memcpy(&locdsptr->data_addr, &data_addr, sizeof(uip_ip6addr_t));
      memcpy(&locdsptr->ctrl_addr, &ctrl_addr, sizeof(uip_ip6addr_t));
      if(!trickle_timer_config(&locdsptr->tt,
"
10810,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\multicast\mpl.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\multicast\mpl.c,"memcpy(&locdsptr->ctrl_addr, &ctrl_addr, sizeof(uip_ip6addr_t));",120,1,"      memset(locdsptr, 0, sizeof(struct mpl_domain));
      memcpy(&locdsptr->data_addr, &data_addr, sizeof(uip_ip6addr_t));
      memcpy(&locdsptr->ctrl_addr, &ctrl_addr, sizeof(uip_ip6addr_t));
      if(!trickle_timer_config(&locdsptr->tt,
                               MPL_CONTROL_MESSAGE_IMIN,
"
10812,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\multicast\mpl.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\multicast\mpl.c,"memcpy(((void *)locsiptr) + seed_info_len, vector, vec_size);",120,1,"        break;
      }
      memcpy(((void *)locsiptr) + seed_info_len, vector, vec_size);
      locsiptr = ((void *)locsiptr) + seed_info_len + vec_size;
      payload_len += seed_info_len + vec_size;
"
10813,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\multicast\mpl.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\multicast\mpl.c,"memcpy(((void *)UIP_EXT_BUF) + 8 + UIP_EXT_BUF->len * 8, &locmmptr->data, locmmptr->size);",120,1,"    }
    /* Now insert payload */
    memcpy(((void *)UIP_EXT_BUF) + 8 + UIP_EXT_BUF->len * 8, &locmmptr->data, locmmptr->size);
    uip_len += locmmptr->size;
    uipbuf_set_len_field(UIP_IP_BUF, uip_len - UIP_IPH_LEN);
"
10815,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\multicast\mpl.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\multicast\mpl.c,"memcpy(&locmmptr->data, hptr, locmmptr->size);",120,1,"  hptr = ((void *)hptr) + hptr->len * 8 + 8;
  locmmptr->size = uip_len - UIP_IPH_LEN - uip_ext_len;
  memcpy(&locmmptr->data, hptr, locmmptr->size);
  locmmptr->seq = seq_val;
  locmmptr->seed = locssptr;
"
10823,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\multicast\roll-tm.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\multicast\roll-tm.c,"memcpy(UIP_IP_BUF, &locmpptr->buff, uip_len);",120,1,"          PRINTF("" seq %u\n"", locmpptr->seq_val);
          uip_len = locmpptr->buff_len;
          memcpy(UIP_IP_BUF, &locmpptr->buff, uip_len);

          UIP_MCAST6_STATS_ADD(mcast_fwd);
"
10826,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\multicast\roll-tm.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\ipv6\multicast\roll-tm.c,"memcpy(&locmpptr->buff, UIP_IP_BUF, uip_len);",120,1,"
  memset(locmpptr, 0, sizeof(struct mcast_packet));
  memcpy(&locmpptr->buff, UIP_IP_BUF, uip_len);
  locmpptr->sw = locswptr;
  locmpptr->buff_len = uip_len;
"
10835,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\mac-sequence.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\mac-sequence.c,"memcpy(&received_seqnos[j], &received_seqnos[j - 1], sizeof(struct seqno));",120,1,"  /* Keep the last sequence number for each address as per 802.15.4e. */
  for(j = i - 1; j > 0; --j) {
    memcpy(&received_seqnos[j], &received_seqnos[j - 1], sizeof(struct seqno));
  }
  received_seqnos[0].seqno = packetbuf_attr(PACKETBUF_ATTR_MAC_SEQNO);
"
10838,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,"memcpy(&len, &data[1], 2);",120,1,"  l2cap_channel_t *channel;

  memcpy(&len, &data[1], 2);

  if(len != 10) {
"
10839,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,"memcpy(&le_psm, &data[3], 2);",120,1,"  channel = &l2cap_channels[l2cap_channel_count];
  /* parse L2CAP connection data */
  memcpy(&le_psm, &data[3], 2);
  memset(&channel->channel_peer, 0x00, sizeof(ble_mac_l2cap_channel_t));
  memcpy(&channel->channel_peer.cid, &data[5], 2);
"
10841,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,"memcpy(&channel->channel_peer.cid, &data[5], 2);",120,1,"  memcpy(&le_psm, &data[3], 2);
  memset(&channel->channel_peer, 0x00, sizeof(ble_mac_l2cap_channel_t));
  memcpy(&channel->channel_peer.cid, &data[5], 2);
  memcpy(&channel->channel_peer.mtu, &data[7], 2);
  memcpy(&channel->channel_peer.mps, &data[9], 2);
"
10842,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,"memcpy(&channel->channel_peer.mtu, &data[7], 2);",120,1,"  memset(&channel->channel_peer, 0x00, sizeof(ble_mac_l2cap_channel_t));
  memcpy(&channel->channel_peer.cid, &data[5], 2);
  memcpy(&channel->channel_peer.mtu, &data[7], 2);
  memcpy(&channel->channel_peer.mps, &data[9], 2);
  memcpy(&channel->channel_peer.credits, &data[11], 2);
"
10843,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,"memcpy(&channel->channel_peer.mps, &data[9], 2);",120,1,"  memcpy(&channel->channel_peer.cid, &data[5], 2);
  memcpy(&channel->channel_peer.mtu, &data[7], 2);
  memcpy(&channel->channel_peer.mps, &data[9], 2);
  memcpy(&channel->channel_peer.credits, &data[11], 2);
  linkaddr_copy(&channel->peer_addr, packetbuf_addr(PACKETBUF_ADDR_SENDER));
"
10844,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,"memcpy(&channel->channel_peer.credits, &data[11], 2);",120,1,"  memcpy(&channel->channel_peer.mtu, &data[7], 2);
  memcpy(&channel->channel_peer.mps, &data[9], 2);
  memcpy(&channel->channel_peer.credits, &data[11], 2);
  linkaddr_copy(&channel->peer_addr, packetbuf_addr(PACKETBUF_ADDR_SENDER));

"
10845,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,"memcpy(&resp_data[8], &channel->channel_own.cid, 2);",120,1,"  resp_data[7] = 0x00;
  /* node channel information */
  memcpy(&resp_data[8], &channel->channel_own.cid, 2);
  memcpy(&resp_data[10], &channel->channel_own.mtu, 2);
  memcpy(&resp_data[12], &channel->channel_own.mps, 2);
"
10846,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,"memcpy(&resp_data[10], &channel->channel_own.mtu, 2);",120,1,"  /* node channel information */
  memcpy(&resp_data[8], &channel->channel_own.cid, 2);
  memcpy(&resp_data[10], &channel->channel_own.mtu, 2);
  memcpy(&resp_data[12], &channel->channel_own.mps, 2);
  memcpy(&resp_data[14], &channel->channel_own.credits, 2);
"
10847,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,"memcpy(&resp_data[12], &channel->channel_own.mps, 2);",120,1,"  memcpy(&resp_data[8], &channel->channel_own.cid, 2);
  memcpy(&resp_data[10], &channel->channel_own.mtu, 2);
  memcpy(&resp_data[12], &channel->channel_own.mps, 2);
  memcpy(&resp_data[14], &channel->channel_own.credits, 2);
  /* result */
"
10848,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,"memcpy(&resp_data[14], &channel->channel_own.credits, 2);",120,1,"  memcpy(&resp_data[10], &channel->channel_own.mtu, 2);
  memcpy(&resp_data[12], &channel->channel_own.mps, 2);
  memcpy(&resp_data[14], &channel->channel_own.credits, 2);
  /* result */
  memset(&resp_data[16], 0x00, 2);
"
10850,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,"memcpy(&data[8], &channel->channel_own.cid, 2);",120,1,"  data[7] = 0x00;

  memcpy(&data[8], &channel->channel_own.cid, 2);
  data[10] = credits & 0xFF;
  data[11] = credits >> 8;
"
10851,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,"memcpy(&channel->tx_buffer.sdu, packetbuf_dataptr(), data_len);",120,1,"      channel->tx_buffer.sdu_length = data_len;
      if(channel->tx_buffer.sdu_length > 0) {
        memcpy(&channel->tx_buffer.sdu, packetbuf_dataptr(), data_len);
        mac_call_sent_callback(sent_callback, ptr, MAC_TX_DEFERRED, 1);
        process_post(&ble_l2cap_tx_process, l2cap_tx_event, (void *)channel);
"
10853,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,"memcpy(&result, &data[3], 2);",120,1,"  }

  memcpy(&result, &data[3], 2);
  if(result != 0x0000) {
    LOG_WARN(""input_l2cap_connection_update_resp: result: 0x%04X\n"", result);
"
10855,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,"memcpy(&cid, &data[3], 2);",120,1,"
  /* parse L2CAP credit data */
  memcpy(&cid, &data[3], 2);
  memcpy(&credits, &data[5], 2);

"
10856,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,"memcpy(&credits, &data[5], 2);",120,1,"  /* parse L2CAP credit data */
  memcpy(&cid, &data[3], 2);
  memcpy(&credits, &data[5], 2);

  channel->channel_peer.credits += credits;
"
10857,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,"memcpy(&frame_len, &data[0], 2);",120,1,"  if(channel->rx_buffer.sdu_length == 0) {
    /* handle first fragment */
    memcpy(&frame_len, &data[0], 2);
    memcpy(&channel->rx_buffer.sdu_length, &data[4], 2);
    payload_len = frame_len - 2;
"
10858,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,"memcpy(&channel->rx_buffer.sdu_length, &data[4], 2);",120,1,"    /* handle first fragment */
    memcpy(&frame_len, &data[0], 2);
    memcpy(&channel->rx_buffer.sdu_length, &data[4], 2);
    payload_len = frame_len - 2;

"
10859,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,"memcpy(channel->rx_buffer.sdu, &data[6], payload_len);",120,1,"    payload_len = frame_len - 2;

    memcpy(channel->rx_buffer.sdu, &data[6], payload_len);
    channel->rx_buffer.current_index = payload_len;
  } else {
"
10861,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,"memcpy(&channel->rx_buffer.sdu[channel->rx_buffer.current_index], &data[4], payload_len);",120,1,"    payload_len = frame_len;

    memcpy(&channel->rx_buffer.sdu[channel->rx_buffer.current_index], &data[4], payload_len);
    channel->rx_buffer.current_index += payload_len;
  }
"
10862,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,"memcpy(packetbuf_dataptr(), channel->rx_buffer.sdu, channel->rx_buffer.sdu_length);",120,1,"    /* do not use packetbuf_copyfrom here because the packetbuf_attr
     * must not be cleared */
    memcpy(packetbuf_dataptr(), channel->rx_buffer.sdu, channel->rx_buffer.sdu_length);
    packetbuf_set_datalen(channel->rx_buffer.sdu_length);
    NETSTACK_NETWORK.input();
"
10863,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,"memcpy(&channel_id, &data[2], 2);",120,1,"
  if(frame_type == FRAME_BLE_RX_EVENT) {
    memcpy(&channel_id, &data[2], 2);
    channel = get_channel_for_cid(channel_id);
    LOG_DBG(""input %d bytes\n"", len);
"
10864,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,"memcpy(packetbuf_hdrptr(), &frame_len, 2);          */",120,1,"
          /* set L2CAP header fields */
          memcpy(packetbuf_hdrptr(), &frame_len, 2);          /* fragment size */
          memcpy(packetbuf_hdrptr() + 2, &channel->channel_peer.cid, 2);    /* L2CAP channel id*/
          memcpy(packetbuf_hdrptr() + 4, &channel->tx_buffer.sdu_length, 2);  /* overall packet size */
"
10865,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,"memcpy(packetbuf_hdrptr() + 2, &channel->channel_peer.cid, 2);    */",120,1,"          /* set L2CAP header fields */
          memcpy(packetbuf_hdrptr(), &frame_len, 2);          /* fragment size */
          memcpy(packetbuf_hdrptr() + 2, &channel->channel_peer.cid, 2);    /* L2CAP channel id*/
          memcpy(packetbuf_hdrptr() + 4, &channel->tx_buffer.sdu_length, 2);  /* overall packet size */
        } else {
"
10866,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,"memcpy(packetbuf_hdrptr() + 4, &channel->tx_buffer.sdu_length, 2);  */",120,1,"          memcpy(packetbuf_hdrptr(), &frame_len, 2);          /* fragment size */
          memcpy(packetbuf_hdrptr() + 2, &channel->channel_peer.cid, 2);    /* L2CAP channel id*/
          memcpy(packetbuf_hdrptr() + 4, &channel->tx_buffer.sdu_length, 2);  /* overall packet size */
        } else {
          packetbuf_hdralloc(L2CAP_SUBSEQ_HEADER_SIZE);
"
10868,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\ble\ble-l2cap.c,"memcpy(packetbuf_hdrptr() + 2, &channel->channel_peer.cid, 2);      */",120,1,"          /* set L2CAP header fields */
          memcpy(packetbuf_hdrptr(), &frame_len, 2);          /* fragment size */
          memcpy(packetbuf_hdrptr() + 2, &channel->channel_peer.cid, 2);      /* L2CAP channel id*/
        }

"
10869,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\csma\ccm-star-packetbuf.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\csma\ccm-star-packetbuf.c,"memcpy(nonce, get_extended_address(source_addr), 8);",120,1,"
  source_addr = forward ? &linkaddr_node_addr : packetbuf_addr(PACKETBUF_ADDR_SENDER);
  memcpy(nonce, get_extended_address(source_addr), 8);
  nonce[8] = packetbuf_attr(PACKETBUF_ATTR_FRAME_COUNTER_BYTES_2_3) >> 8;
  nonce[9] = packetbuf_attr(PACKETBUF_ATTR_FRAME_COUNTER_BYTES_2_3) & 0xff;
"
10870,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\csma\csma-security.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\csma\csma-security.c,"memcpy(keys[index].u8, key, 16);",120,1,"{
  if(key != NULL && index < CSMA_LLSEC_MAXKEYS) {
    memcpy(keys[index].u8, key, 16);
    return 1;
  }
"
10872,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\framer\frame802154.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\framer\frame802154.c,"memcpy(buf + pos, p->aux_hdr.frame_counter.u8, 4);",120,1,"    if(p->aux_hdr.security_control.frame_counter_suppression == 0) {
      /* We support only 4-byte counters */
      memcpy(buf + pos, p->aux_hdr.frame_counter.u8, 4);
      pos += 4;
      if(p->aux_hdr.security_control.frame_counter_size == 1) {
"
10873,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\framer\frame802154.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\framer\frame802154.c,"memcpy(buf + pos, p->aux_hdr.key_source.u8, c);",120,1,"    if(key_id_mode) {
      c = (key_id_mode - 1) * 4;
      memcpy(buf + pos, p->aux_hdr.key_source.u8, c);
      pos += c;
      buf[pos++] = p->aux_hdr.key_index;
"
10874,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\framer\frame802154.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\framer\frame802154.c,"memcpy(pfcf, &fcf, sizeof(frame802154_fcf_t));",120,1,"
  /* copy fcf */
  memcpy(pfcf, &fcf, sizeof(frame802154_fcf_t));
}
/*----------------------------------------------------------------------------*/
"
10875,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\framer\frame802154.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\framer\frame802154.c,"memcpy(&pf->fcf, &fcf, sizeof(frame802154_fcf_t));",120,1,"  /* decode the FCF */
  frame802154_parse_fcf(p, &fcf);
  memcpy(&pf->fcf, &fcf, sizeof(frame802154_fcf_t));
  p += 2;                             /* Skip first two bytes */

"
10876,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\framer\frame802154.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\framer\frame802154.c,"memcpy(pf->aux_hdr.frame_counter.u8, p, 4);",120,1,"
    if(pf->aux_hdr.security_control.frame_counter_suppression == 0) {
      memcpy(pf->aux_hdr.frame_counter.u8, p, 4);
      p += 4;
      if(pf->aux_hdr.security_control.frame_counter_size == 1) {
"
10877,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\framer\frame802154.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\framer\frame802154.c,"memcpy(pf->aux_hdr.key_source.u8, p, c);",120,1,"    if(key_id_mode) {
      c = (key_id_mode - 1) * 4;
      memcpy(pf->aux_hdr.key_source.u8, p, c);
      p += c;
      pf->aux_hdr.key_index = p[0];
"
10878,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\framer\frame802154e-ie.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\framer\frame802154e-ie.c,"memcpy(buf + 12, ies->ie_hopping_sequence_list, ies->ie_hopping_sequence_len); */",120,1,"    /* Extended bitmap. Size: 0 */
    WRITE16(buf + 10, ies->ie_hopping_sequence_len); /* sequence len */
    memcpy(buf + 12, ies->ie_hopping_sequence_list, ies->ie_hopping_sequence_len); /* sequence list */
    WRITE16(buf + 12 + ies->ie_hopping_sequence_len, 0); /* current hop */
    create_mlme_long_ie_descriptor(buf, MLME_LONG_IE_TSCH_CHANNEL_HOPPING_SEQUENCE, ie_len);
"
10879,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\framer\frame802154e-ie.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\framer\frame802154e-ie.c,"memcpy(ies->ie_hopping_sequence_list, buf+10, ies->ie_hopping_sequence_len); */",120,1,"            if(ies->ie_hopping_sequence_len <= sizeof(ies->ie_hopping_sequence_list)
                && len == 12 + ies->ie_hopping_sequence_len) {
              memcpy(ies->ie_hopping_sequence_list, buf+10, ies->ie_hopping_sequence_len); /* sequence list */
            }
          }
"
10891,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\tsch-security.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\tsch-security.c,"memcpy(nonce, sender, 8);",120,1,"                         const linkaddr_t *sender, struct tsch_asn_t *asn)
{
  memcpy(nonce, sender, 8);
  nonce[8] = asn->ms1b;
  nonce[9] = (asn->ls4b >> 24) & 0xff;
"
10893,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\tsch-security.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\tsch-security.c,"memcpy(outbuf, hdr, a_len + m_len);",120,1,"  /* Copy source data to output */
  if(hdr != outbuf) {
    memcpy(outbuf, hdr, a_len + m_len);
  }

"
10895,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\tsch.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\tsch.c,"memcpy(tsch_hopping_sequence, TSCH_DEFAULT_HOPPING_SEQUENCE, sizeof(TSCH_DEFAULT_HOPPING_SEQUENCE));",120,1,"  frame802154_set_pan_id(IEEE802154_PANID);
  /* Initialize hopping sequence as default */
  memcpy(tsch_hopping_sequence, TSCH_DEFAULT_HOPPING_SEQUENCE, sizeof(TSCH_DEFAULT_HOPPING_SEQUENCE));
  TSCH_ASN_DIVISOR_INIT(tsch_hopping_sequence_length, sizeof(TSCH_DEFAULT_HOPPING_SEQUENCE));
#if TSCH_SCHEDULE_WITH_6TISCH_MINIMAL
"
10897,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\tsch.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\tsch.c,"memcpy(tsch_hopping_sequence, ies.ie_hopping_sequence_list, ies.ie_hopping_sequence_len);",120,1,"  } else {
    if(ies.ie_hopping_sequence_len <= sizeof(tsch_hopping_sequence)) {
      memcpy(tsch_hopping_sequence, ies.ie_hopping_sequence_list, ies.ie_hopping_sequence_len);
      TSCH_ASN_DIVISOR_INIT(tsch_hopping_sequence_length, ies.ie_hopping_sequence_len);
    } else {
"
10898,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\sixtop\sixp-pkt.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\sixtop\sixp-pkt.c,"memcpy(body + offset, &metadata, sizeof(metadata));",120,1,"   * about the internal structure of the field.
   */
  memcpy(body + offset, &metadata, sizeof(metadata));

  return 0;
"
10899,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\sixtop\sixp-pkt.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\sixtop\sixp-pkt.c,"memcpy(metadata, body + offset, sizeof(*metadata));",120,1,"   * the internal structure of the field.
   */
  memcpy(metadata, body + offset, sizeof(*metadata));

  return 0;
"
10900,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\sixtop\sixp-pkt.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\sixtop\sixp-pkt.c,"memcpy(body + offset, &cell_options, sizeof(uint8_t));",120,1,"
  /* The CellOption field is an 8-bit bitfield */
  memcpy(body + offset, &cell_options, sizeof(uint8_t));

  return 0;
"
10901,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\sixtop\sixp-pkt.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\sixtop\sixp-pkt.c,"memcpy(cell_options, body + offset, sizeof(uint8_t));",120,1,"
  /* The CellOption field is an 8-bit bitfield */
  memcpy(cell_options, body + offset, sizeof(uint8_t));

  return 0;
"
10902,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\sixtop\sixp-pkt.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\sixtop\sixp-pkt.c,"memcpy(body + offset, &num_cells, sizeof(uint8_t));",120,1,"  }

  memcpy(body + offset, &num_cells, sizeof(uint8_t));

  return 0;
"
10903,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\sixtop\sixp-pkt.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\sixtop\sixp-pkt.c,"memcpy(num_cells, body + offset, sizeof(uint8_t));",120,1,"
  /* NumCells is an 8-bit unsigned integer */
  memcpy(num_cells, body + offset, sizeof(uint8_t));

  return 0;
"
10904,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\sixtop\sixp-pkt.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\sixtop\sixp-pkt.c,"memcpy(body + offset, &reserved, sizeof(uint8_t));",120,1,"
  /* The Reserved field is an 8-bit field */
  memcpy(body + offset, &reserved, sizeof(uint8_t));

  return 0;
"
10905,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\sixtop\sixp-pkt.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\sixtop\sixp-pkt.c,"memcpy(reserved, body + offset, sizeof(uint8_t));",120,1,"
  /* The Reserved field is an 8-bit field */
  memcpy(reserved, body + offset, sizeof(uint8_t));

  return 0;
"
10906,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\sixtop\sixp-pkt.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\sixtop\sixp-pkt.c,"memcpy(body + offset, cell_list, cell_list_len);",120,1,"  }

  memcpy(body + offset, cell_list, cell_list_len);

  return 0;
"
10907,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\sixtop\sixp-pkt.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\sixtop\sixp-pkt.c,"memcpy(body + offset, rel_cell_list, rel_cell_list_len);",120,1,"  }

  memcpy(body + offset, rel_cell_list, rel_cell_list_len);

  return 0;
"
10908,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\sixtop\sixp-pkt.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\sixtop\sixp-pkt.c,"memcpy(body + offset, cand_cell_list, cand_cell_list_len);",120,1,"  }

  memcpy(body + offset, cand_cell_list, cand_cell_list_len);

  return 0;
"
10909,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\sixtop\sixp-pkt.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\sixtop\sixp-pkt.c,"memcpy(body + offset, payload, payload_len);",120,1,"   * about the internal structure of the field.
   */
  memcpy(body + offset, payload, payload_len);

  return 0;
"
10910,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\sixtop\sixp-pkt.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\sixtop\sixp-pkt.c,"memcpy(buf, body + offset, buf_len);",120,1,"   * the internal structure of the field.
   */
  memcpy(buf, body + offset, buf_len);

  return 0;
"
10912,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\sixtop\sixp-pkt.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\sixtop\sixp-pkt.c,"memcpy(packetbuf_dataptr(), body, body_len);",120,1,"  /* data: write body */
  if(body_len > 0 && body != NULL) {
    memcpy(packetbuf_dataptr(), body, body_len);
    packetbuf_set_datalen(body_len);
  }
"
10918,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\sixtop\sixtop.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\sixtop\sixtop.c,"memcpy(&src_addr, packetbuf_addr(PACKETBUF_ADDR_SENDER), sizeof(src_addr));",120,1,"  hdr_ptr = payload_ptr - hdr_len;

  memcpy(&src_addr, packetbuf_addr(PACKETBUF_ADDR_SENDER), sizeof(src_addr));

  if(frame802154_parse(hdr_ptr, hdr_len, &frame) == 0) {
"
10920,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-dag-root.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-dag-root.c,"memcpy(&root_ipaddr, prefix, 8);",120,1,"    uip_ip6addr_copy(&root_ipaddr, default_prefix);
  } else {
    memcpy(&root_ipaddr, prefix, 8);
  }
  if(iid == NULL) {
"
10921,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-dag-root.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-dag-root.c,"memcpy(((uint8_t*)&root_ipaddr) + 8, ((uint8_t*)iid) + 8, 8);",120,1,"    uip_ds6_set_addr_iid(&root_ipaddr, &uip_lladdr);
  } else {
    memcpy(((uint8_t*)&root_ipaddr) + 8, ((uint8_t*)iid) + 8, 8);
  }

"
10922,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-dag.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-dag.c,"memcpy(&dag->dag_id, dag_id, sizeof(dag->dag_id));",120,1,"  rpl_set_preferred_parent(dag, NULL);

  memcpy(&dag->dag_id, dag_id, sizeof(dag->dag_id));

  instance->dio_intdoubl = RPL_DIO_INTERVAL_DOUBLINGS;
"
10924,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-dag.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-dag.c,"memcpy(ipaddr, &prefix->prefix, (prefix->length + 7) / 8);",120,1,"{
  memset(ipaddr, 0, sizeof(uip_ipaddr_t));
  memcpy(ipaddr, &prefix->prefix, (prefix->length + 7) / 8);
  uip_ds6_set_addr_iid(ipaddr, &uip_lladdr);
}
"
10925,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-dag.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-dag.c,"memcpy(&last_prefix, &dag->prefix_info, sizeof(rpl_prefix_t));",120,1,"  }
  if(dag->prefix_info.length != 0) {
    memcpy(&last_prefix, &dag->prefix_info, sizeof(rpl_prefix_t));
  }
  memset(&dag->prefix_info.prefix, 0, sizeof(dag->prefix_info.prefix));
"
10927,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-dag.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-dag.c,"memcpy(&dag->prefix_info.prefix, prefix, (len + 7) / 8);",120,1,"  }
  memset(&dag->prefix_info.prefix, 0, sizeof(dag->prefix_info.prefix));
  memcpy(&dag->prefix_info.prefix, prefix, (len + 7) / 8);
  dag->prefix_info.length = len;
  dag->prefix_info.flags = UIP_ND6_RA_FLAG_AUTONOMOUS;
"
10930,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-dag.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-dag.c,"memcpy(&p->mc, &dio->mc, sizeof(p->mc));",120,1,"      p->dtsn = dio->dtsn;
#if RPL_WITH_MC
      memcpy(&p->mc, &dio->mc, sizeof(p->mc));
#endif /* RPL_WITH_MC */
    }
"
10931,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-dag.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-dag.c,"memcpy(&dag->dag_id, &dio->dag_id, sizeof(dio->dag_id));",120,1,"  instance->lifetime_unit = dio->lifetime_unit;

  memcpy(&dag->dag_id, &dio->dag_id, sizeof(dio->dag_id));

  /* Copy prefix information from the DIO into the DAG object. */
"
10932,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-dag.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-dag.c,"memcpy(&dag->prefix_info, &dio->prefix_info, sizeof(rpl_prefix_t));",120,1,"
  /* Copy prefix information from the DIO into the DAG object. */
  memcpy(&dag->prefix_info, &dio->prefix_info, sizeof(rpl_prefix_t));

  rpl_set_preferred_parent(dag, p);
"
10936,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-ext-header.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-ext-header.c,"memcpy(((uint8_t *)&UIP_IP_BUF->destipaddr) + cmpr, addr_ptr, 16 - cmpr);",120,1,"      uip_ipaddr_copy(&current_dest_addr, &UIP_IP_BUF->destipaddr);
      /* Second, update the IPv6 destination address with addresses[i] */
      memcpy(((uint8_t *)&UIP_IP_BUF->destipaddr) + cmpr, addr_ptr, 16 - cmpr);
      /* Third, write current_dest_addr to addresses[i] */
      memcpy(addr_ptr, ((uint8_t *)&current_dest_addr) + cmpr, 16 - cmpr);
"
10937,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-ext-header.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-ext-header.c,"memcpy(addr_ptr, ((uint8_t *)&current_dest_addr) + cmpr, 16 - cmpr);",120,1,"      memcpy(((uint8_t *)&UIP_IP_BUF->destipaddr) + cmpr, addr_ptr, 16 - cmpr);
      /* Third, write current_dest_addr to addresses[i] */
      memcpy(addr_ptr, ((uint8_t *)&current_dest_addr) + cmpr, 16 - cmpr);

      /* Update segments left field */
"
10939,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-ext-header.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-ext-header.c,"memcpy(hop_ptr, ((uint8_t*)&node_addr) + cmpri, 16 - cmpri);",120,1,"
    hop_ptr -= (16 - cmpri);
    memcpy(hop_ptr, ((uint8_t*)&node_addr) + cmpri, 16 - cmpri);

    node = node->parent;
"
10942,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-icmp6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-icmp6.c,"memcpy(addr, &uip_ds6_if.addr_list[i].ipaddr, sizeof(uip_ipaddr_t));",120,1,"       !uip_is_addr_linklocal(&uip_ds6_if.addr_list[i].ipaddr) &&
       (prefix == NULL || uip_ipaddr_prefixcmp(prefix, &uip_ds6_if.addr_list[i].ipaddr, prefix_length))) {
      memcpy(addr, &uip_ds6_if.addr_list[i].ipaddr, sizeof(uip_ipaddr_t));
      return 1;
    }
"
10944,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-icmp6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-icmp6.c,"memcpy(&dio.dag_id, buffer + i, sizeof(dio.dag_id));",120,1,"  i += 2;

  memcpy(&dio.dag_id, buffer + i, sizeof(dio.dag_id));
  i += sizeof(dio.dag_id);

"
10945,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-icmp6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-icmp6.c,"memcpy(&dio.prefix_info.prefix, &buffer[i + 16], 16);",120,1,"        /* 32-bit reserved at i + 12 */
        LOG_INFO(""Copying prefix information\n"");
        memcpy(&dio.prefix_info.prefix, &buffer[i + 16], 16);
        break;
      default:
"
10946,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-icmp6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-icmp6.c,"memcpy(buffer + pos, &dag->dag_id, sizeof(dag->dag_id));",120,1,"  buffer[pos++] = 0; /* reserved */

  memcpy(buffer + pos, &dag->dag_id, sizeof(dag->dag_id));
  pos += 16;

"
10948,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-icmp6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-icmp6.c,"memcpy(&buffer[pos], &dag->prefix_info.prefix, 16);",120,1,"    memset(&buffer[pos], 0, 4);
    pos += 4;
    memcpy(&buffer[pos], &dag->prefix_info.prefix, 16);
    pos += 16;
    LOG_DBG(""Sending prefix info in DIO for "");
"
10951,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-icmp6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-icmp6.c,"memcpy(&prefix, buffer + i + 4, (prefixlen + 7) / CHAR_BIT);",120,1,"        prefixlen = buffer[i + 3];
        memset(&prefix, 0, sizeof(prefix));
        memcpy(&prefix, buffer + i + 4, (prefixlen + 7) / CHAR_BIT);
        break;
      case RPL_OPTION_TRANSIT:
"
10955,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-icmp6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-icmp6.c,"memcpy(&dao_parent_addr, buffer + i + 6, 16);",120,1,"        lifetime = buffer[i + 5];
        if(len >= 20) {
          memcpy(&dao_parent_addr, buffer + i + 6, 16);
        }
        break;
"
10957,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-icmp6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-icmp6.c,"memcpy(buffer + pos, prefix, (prefixlen + 7) / CHAR_BIT);",120,1,"  buffer[pos++] = 0; /* reserved */
  buffer[pos++] = prefixlen;
  memcpy(buffer + pos, prefix, (prefixlen + 7) / CHAR_BIT);
  pos += ((prefixlen + 7) / CHAR_BIT);

"
10958,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-icmp6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-icmp6.c,"memcpy(buffer + pos, &parent->dag->dag_id, 8); */",120,1,"  } else {
    /* Include parent global IP address */
    memcpy(buffer + pos, &parent->dag->dag_id, 8); /* Prefix */
    pos += 8;
    memcpy(buffer + pos, ((const unsigned char *)parent_ipaddr) + 8, 8); /* Interface identifier */
"
10959,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-icmp6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl-icmp6.c,"memcpy(buffer + pos, ((const unsigned char *)parent_ipaddr) + 8, 8); */",120,1,"    memcpy(buffer + pos, &parent->dag->dag_id, 8); /* Prefix */
    pos += 8;
    memcpy(buffer + pos, ((const unsigned char *)parent_ipaddr) + 8, 8); /* Interface identifier */
    pos += 8;
    /* Send DAO to root */
"
10961,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl.c,"memcpy(addr, &((rpl_dag_t *)node->graph)->dag_id, 8);",120,1,"{
  if(addr != NULL && node != NULL) {
    memcpy(addr, &((rpl_dag_t *)node->graph)->dag_id, 8);
    memcpy(((unsigned char *)addr) + 8, &node->link_identifier, 8);
    return 1;
"
10962,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-classic\rpl.c,"memcpy(((unsigned char *)addr) + 8, &node->link_identifier, 8);",120,1,"  if(addr != NULL && node != NULL) {
    memcpy(addr, &((rpl_dag_t *)node->graph)->dag_id, 8);
    memcpy(((unsigned char *)addr) + 8, &node->link_identifier, 8);
    return 1;
  } else {
"
10965,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-lite\rpl-dag.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-lite\rpl-dag.c,"memcpy(&nbr->mc, &dio->mc, sizeof(nbr->mc));",120,1,"  nbr->dtsn = dio->dtsn;
#if RPL_WITH_MC
  memcpy(&nbr->mc, &dio->mc, sizeof(nbr->mc));
#endif /* RPL_WITH_MC */

"
10967,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-lite\rpl-dag.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-lite\rpl-dag.c,"memcpy(&curr_instance.dag.dag_id, dag_id, sizeof(curr_instance.dag.dag_id));",120,1,"  curr_instance.dag.dao_last_acked_seqno = RPL_LOLLIPOP_INIT;
  curr_instance.dag.dao_last_seqno = RPL_LOLLIPOP_INIT;
  memcpy(&curr_instance.dag.dag_id, dag_id, sizeof(curr_instance.dag.dag_id));

  return 1;
"
10978,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-lite\rpl-icmp6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-lite\rpl-icmp6.c,"memcpy(buffer + pos, &curr_instance.dag.dag_id, sizeof(curr_instance.dag.dag_id));",120,1,"  buffer[pos++] = 0; /* reserved */

  memcpy(buffer + pos, &curr_instance.dag.dag_id, sizeof(curr_instance.dag.dag_id));
  pos += 16;

"
10980,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-lite\rpl-icmp6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-lite\rpl-icmp6.c,"memcpy(&buffer[pos], &curr_instance.dag.prefix_info.prefix, 16);",120,1,"    memset(&buffer[pos], 0, 4);
    pos += 4;
    memcpy(&buffer[pos], &curr_instance.dag.prefix_info.prefix, 16);
    pos += 16;
  }
"
10984,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-lite\rpl-icmp6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-lite\rpl-icmp6.c,"memcpy(&dao.prefix, buffer + i + 4, (dao.prefixlen + 7) / CHAR_BIT);",120,1,"        dao.prefixlen = buffer[i + 3];
        memset(&dao.prefix, 0, sizeof(dao.prefix));
        memcpy(&dao.prefix, buffer + i + 4, (dao.prefixlen + 7) / CHAR_BIT);
        break;
      case RPL_OPTION_TRANSIT:
"
10985,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-lite\rpl-icmp6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-lite\rpl-icmp6.c,"memcpy(&dao.parent_addr, buffer + i + 6, 16);",120,1,"        dao.lifetime = buffer[i + 5];
        if(len >= 20) {
          memcpy(&dao.parent_addr, buffer + i + 6, 16);
        }
        break;
"
10987,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-lite\rpl-icmp6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-lite\rpl-icmp6.c,"memcpy(buffer + pos, &curr_instance.dag.dag_id, 8); */",120,1,"
  /* Include parent global IP address */
  memcpy(buffer + pos, &curr_instance.dag.dag_id, 8); /* Prefix */
  pos += 8;
  memcpy(buffer + pos, ((const unsigned char *)parent_ipaddr) + 8, 8); /* Interface identifier */
"
10992,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-lite\rpl.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-lite\rpl.c,"memcpy(&curr_instance.dag.prefix_info.prefix, addr, (len + 7) / 8);",120,1,"  /* Try and initialize prefix */
  memset(&curr_instance.dag.prefix_info.prefix, 0, sizeof(uip_ipaddr_t));
  memcpy(&curr_instance.dag.prefix_info.prefix, addr, (len + 7) / 8);
  curr_instance.dag.prefix_info.length = len;
  curr_instance.dag.prefix_info.lifetime = RPL_ROUTE_INFINITE_LIFETIME;
"
10993,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-lite\rpl.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\routing\rpl-lite\rpl.c,"memcpy(addr, &curr_instance.dag.dag_id, 8);",120,1,"{
  if(addr != NULL && node != NULL) {
    memcpy(addr, &curr_instance.dag.dag_id, 8);
    memcpy(((unsigned char *)addr) + 8, &node->link_identifier, 8);
    return 1;
"
10996,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls-ccm.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls-ccm.c,"memcpy(result + 1, nonce, DTLS_CCM_BLOCKSIZE - L - 1);",120,1,"
  /* copy the nonce */
  memcpy(result + 1, nonce, DTLS_CCM_BLOCKSIZE - L - 1);
  
  for (i=0; i < L; i++) {
"
10998,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls-ccm.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls-ccm.c,"memcpy(B + j, msg, i);",120,1,"
  i = min(DTLS_CCM_BLOCKSIZE - j, la);
  memcpy(B + j, msg, i);
  la -= i;
  msg += i;
"
11000,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls-ccm.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls-ccm.c,"memcpy(B, msg, la);",120,1,"  if (la) {
    memset(B, 0, DTLS_CCM_BLOCKSIZE);
    memcpy(B, msg, la);
    memxor(B, X, DTLS_CCM_BLOCKSIZE);

"
11001,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls-ccm.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls-ccm.c,"memcpy(A + 1, nonce, DTLS_CCM_BLOCKSIZE - L - 1);",120,1,"
  /* copy the nonce */
  memcpy(A + 1, nonce, DTLS_CCM_BLOCKSIZE - L - 1);
  
  while (lm >= DTLS_CCM_BLOCKSIZE) {
"
11002,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls-ccm.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls-ccm.c,"memcpy(B + lm, X + lm, DTLS_CCM_BLOCKSIZE - lm);",120,1,"     * (i.e., we can use memcpy() here).
     */
    memcpy(B + lm, X + lm, DTLS_CCM_BLOCKSIZE - lm);
    mac(ctx, msg, lm, B, X);

"
11007,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls-crypto.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls-crypto.c,"memcpy(buf, tmp, dlen);",120,1,"
    len += dtls_hmac_finalize(hmac_p, tmp);
    memcpy(buf, tmp, dlen);
    buf += dlen;

"
11008,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls-crypto.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls-crypto.c,"memcpy(buf, tmp, buflen - len);",120,1,"  
  dtls_hmac_finalize(hmac_p, tmp);
  memcpy(buf, tmp, buflen - len);

 error:
"
11011,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls-crypto.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls-crypto.c,"memcpy(p, result, sizeof(uint16_t));",120,1,"  p += keylen;

  memcpy(p, result, sizeof(uint16_t));
  p += sizeof(uint16_t);
  
"
11012,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls-crypto.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls-crypto.c,"memcpy(p, key, keylen);",120,1,"  p += sizeof(uint16_t);
  
  memcpy(p, key, keylen);

  return 2 * (sizeof(uint16_t) + keylen);
"
11016,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls-hmac.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls-hmac.c,"memcpy(ctx->pad, key, klen);",120,1,"    dtls_hash_finalize(ctx->pad, &ctx->data);
  } else
    memcpy(ctx->pad, key, klen);

  /* create ipad: */
"
11018,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls-peer.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls-peer.c,"memcpy(&peer->session, session, sizeof(session_t));",120,1,"  if (peer) {
    memset(peer, 0, sizeof(dtls_peer_t));
    memcpy(&peer->session, session, sizeof(session_t));
    peer->security_params[0] = dtls_security_new();

"
11020,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,"memcpy(cookie, buf, *clen);",120,1,"  }
  
  memcpy(cookie, buf, *clen);
  return 0;
}
"
11025,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,"memcpy(handshake->tmp.master_secret, master_secret, DTLS_MASTER_SECRET_LENGTH);",120,1,"	   dtls_kb_size(security, role));

  memcpy(handshake->tmp.master_secret, master_secret, DTLS_MASTER_SECRET_LENGTH);
  dtls_debug_keyblock(security, peer);

"
11026,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,"memcpy(config->tmp.random.client, data, DTLS_RANDOM_LENGTH);",120,1,"
  /* store client random in config */
  memcpy(config->tmp.random.client, data, DTLS_RANDOM_LENGTH);
  data += DTLS_RANDOM_LENGTH;
  data_length -= DTLS_RANDOM_LENGTH;
"
11027,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,"memcpy(handshake->keyx.psk.identity, data, id_length);",120,1,"
    handshake->keyx.psk.id_length = id_length;
    memcpy(handshake->keyx.psk.identity, data, id_length);
  }
#endif /* DTLS_PSK */
"
11028,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,"memcpy(b.statebuf, &peer->handshake_params->hs_state.hs_hash, DTLS_HASH_CTX_SIZE);",120,1,"
  /* temporarily store hash status for roll-back after finalize */
  memcpy(b.statebuf, &peer->handshake_params->hs_state.hs_hash, DTLS_HASH_CTX_SIZE);

  digest_length = finalize_hs_hash(peer, buf);
"
11029,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,"memcpy(&peer->handshake_params->hs_state.hs_hash, b.statebuf, DTLS_HASH_CTX_SIZE);",120,1,"
  /* restore hash status */
  memcpy(&peer->handshake_params->hs_state.hs_hash, b.statebuf, DTLS_HASH_CTX_SIZE);

  if (peer->role == DTLS_CLIENT) {
"
11030,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,"memcpy(p, data_array[i], data_len_array[i]);",120,1,"      }

      memcpy(p, data_array[i], data_len_array[i]);
      p += data_len_array[i];
      res += data_len_array[i];
"
11031,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,"memcpy(p, &DTLS_RECORD_HEADER(sendbuf)->epoch, 8);",120,1,"    */

    memcpy(p, &DTLS_RECORD_HEADER(sendbuf)->epoch, 8);
    p += 8;
    res = 8;
"
11034,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,"memcpy(nonce, dtls_kb_local_iv(security, peer->role),",120,1,"
    memset(nonce, 0, DTLS_CCM_BLOCKSIZE);
    memcpy(nonce, dtls_kb_local_iv(security, peer->role),
	   dtls_kb_iv_size(security, peer->role));
    memcpy(nonce + dtls_kb_iv_size(security, peer->role), start, 8); /* epoch + seq_num */
"
11035,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,"memcpy(nonce + dtls_kb_iv_size(security, peer->role), start, 8); */",120,1,"    memcpy(nonce, dtls_kb_local_iv(security, peer->role),
	   dtls_kb_iv_size(security, peer->role));
    memcpy(nonce + dtls_kb_iv_size(security, peer->role), start, 8); /* epoch + seq_num */

    dtls_debug_dump(""nonce:"", nonce, DTLS_CCM_BLOCKSIZE);
"
11036,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,"memcpy(A_DATA, &DTLS_RECORD_HEADER(sendbuf)->epoch, 8); */",120,1,"     *                   TLSCompressed.version + TLSCompressed.length;
     */
    memcpy(A_DATA, &DTLS_RECORD_HEADER(sendbuf)->epoch, 8); /* epoch and seq_num */
    memcpy(A_DATA + 8,  &DTLS_RECORD_HEADER(sendbuf)->content_type, 3); /* type and version */
    dtls_int_to_uint16(A_DATA + 11, res - 8); /* length */
"
11037,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,"memcpy(A_DATA + 8,  &DTLS_RECORD_HEADER(sendbuf)->content_type, 3); */",120,1,"     */
    memcpy(A_DATA, &DTLS_RECORD_HEADER(sendbuf)->epoch, 8); /* epoch and seq_num */
    memcpy(A_DATA + 8,  &DTLS_RECORD_HEADER(sendbuf)->content_type, 3); /* type and version */
    dtls_int_to_uint16(A_DATA + 11, res - 8); /* length */
    
"
11038,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,"memcpy(n->data + n->length, buf_array[i], buf_len_array[i]);",120,1,"      n->length = 0;
      for (i = 0; i < buf_array_len; i++) {
        memcpy(n->data + n->length, buf_array[i], buf_len_array[i]);
        n->length += buf_len_array[i];
      }
"
11039,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,"memcpy(p, handshake->tmp.random.server, DTLS_RANDOM_LENGTH);",120,1,"  dtls_fill_random(handshake->tmp.random.server + 4, 28);

  memcpy(p, handshake->tmp.random.server, DTLS_RANDOM_LENGTH);
  p += DTLS_RANDOM_LENGTH;

"
11040,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,"memcpy(p, &cert_asn1_header, sizeof(cert_asn1_header));",120,1,"  p += 3; /* 24 bits */

  memcpy(p, &cert_asn1_header, sizeof(cert_asn1_header));
  p += sizeof(cert_asn1_header);

"
11041,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,"memcpy(p, key->pub_key_x, DTLS_EC_KEY_SIZE);",120,1,"  p += sizeof(cert_asn1_header);

  memcpy(p, key->pub_key_x, DTLS_EC_KEY_SIZE);
  p += DTLS_EC_KEY_SIZE;

"
11042,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,"memcpy(p, key->pub_key_y, DTLS_EC_KEY_SIZE);",120,1,"  p += DTLS_EC_KEY_SIZE;

  memcpy(p, key->pub_key_y, DTLS_EC_KEY_SIZE);
  p += DTLS_EC_KEY_SIZE;

"
11043,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,"memcpy(p, psk_hint, len);",120,1,"  p += sizeof(uint16_t);

  memcpy(p, psk_hint, len);
  p += len;

"
11045,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,"memcpy(handshake->keyx.psk.identity, p + sizeof(uint16_t), len);",120,1,"    }
    handshake->keyx.psk.id_length = (unsigned int)len;
    memcpy(handshake->keyx.psk.identity, p + sizeof(uint16_t), len);

    dtls_int_to_uint16(p, handshake->keyx.psk.id_length);
"
11046,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,"memcpy(p, handshake->keyx.psk.identity, handshake->keyx.psk.id_length);",120,1,"    p += sizeof(uint16_t);

    memcpy(p, handshake->keyx.psk.identity, handshake->keyx.psk.id_length);
    p += handshake->keyx.psk.id_length;

"
11047,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,"memcpy(p, handshake->tmp.random.client, DTLS_RANDOM_LENGTH);",120,1,"  }
  /* we must use the same Client Random as for the previous request */
  memcpy(p, handshake->tmp.random.client, DTLS_RANDOM_LENGTH);
  p += DTLS_RANDOM_LENGTH;

"
11048,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,"memcpy(p, cookie, cookie_length);",120,1,"  p += sizeof(uint8_t);
  if (cookie_length != 0) {
    memcpy(p, cookie, cookie_length);
    p += cookie_length;
  }
"
11049,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,"memcpy(handshake->tmp.random.server, data, DTLS_RANDOM_LENGTH);",120,1,"
  /* store server random data */
  memcpy(handshake->tmp.random.server, data, DTLS_RANDOM_LENGTH);
  /* skip server random */
  data += DTLS_RANDOM_LENGTH;
"
11050,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,"memcpy(config->keyx.ecdsa.other_eph_pub_x, data, sizeof(config->keyx.ecdsa.other_eph_pub_y));",120,1,"  data_length -= sizeof(uint8_t);

  memcpy(config->keyx.ecdsa.other_eph_pub_x, data, sizeof(config->keyx.ecdsa.other_eph_pub_y));
  data += sizeof(config->keyx.ecdsa.other_eph_pub_y);
  data_length -= sizeof(config->keyx.ecdsa.other_eph_pub_y);
"
11051,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,"memcpy(config->keyx.ecdsa.other_eph_pub_y, data, sizeof(config->keyx.ecdsa.other_eph_pub_y));",120,1,"  data_length -= sizeof(config->keyx.ecdsa.other_eph_pub_y);

  memcpy(config->keyx.ecdsa.other_eph_pub_y, data, sizeof(config->keyx.ecdsa.other_eph_pub_y));
  data += sizeof(config->keyx.ecdsa.other_eph_pub_y);
  data_length -= sizeof(config->keyx.ecdsa.other_eph_pub_y);
"
11052,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,"memcpy(config->keyx.psk.identity, data, len);",120,1,"  /* store the psk_identity_hint in config->keyx.psk for later use */
  config->keyx.psk.id_length = len;
  memcpy(config->keyx.psk.identity, data, len);
  return 0;
}
"
11054,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,"memcpy(nonce, dtls_kb_remote_iv(security, peer->role),",120,1,"
    memset(nonce, 0, DTLS_CCM_BLOCKSIZE);
    memcpy(nonce, dtls_kb_remote_iv(security, peer->role),
	   dtls_kb_iv_size(security, peer->role));

"
11055,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,"memcpy(nonce + dtls_kb_iv_size(security, peer->role), *cleartext, 8);",120,1,"
    /* read epoch and seq_num from message */
    memcpy(nonce + dtls_kb_iv_size(security, peer->role), *cleartext, 8);
    *cleartext += 8;
    clen -= 8;
"
11056,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,"memcpy(A_DATA, &DTLS_RECORD_HEADER(packet)->epoch, 8); */",120,1,"     *                   TLSCompressed.version + TLSCompressed.length;
     */
    memcpy(A_DATA, &DTLS_RECORD_HEADER(packet)->epoch, 8); /* epoch and seq_num */
    memcpy(A_DATA + 8,  &DTLS_RECORD_HEADER(packet)->content_type, 3); /* type and version */
    dtls_int_to_uint16(A_DATA + 11, clen - 8); /* length without nonce_explicit */
"
11057,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,"memcpy(A_DATA + 8,  &DTLS_RECORD_HEADER(packet)->content_type, 3); */",120,1,"     */
    memcpy(A_DATA, &DTLS_RECORD_HEADER(packet)->epoch, 8); /* epoch and seq_num */
    memcpy(A_DATA + 8,  &DTLS_RECORD_HEADER(packet)->content_type, 3); /* type and version */
    dtls_int_to_uint16(A_DATA + 11, clen - 8); /* length without nonce_explicit */

"
11058,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\dtls.c,"memcpy(n->data, data, data_length);",120,1,"    n->peer = peer;
    n->length = data_length;
    memcpy(n->data, data, data_length);

    if (!netq_insert_node(&peer->handshake_params->reorder_queue, n)) {
"
11063,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\ecc\ecc.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\ecc\ecc.c,"memcpy(to, from, length * sizeof(uint32_t));",120,1," */
static void copy(const uint32_t *from, uint32_t *to, uint8_t length){
	memcpy(to, from, length * sizeof(uint32_t));
}

"
11069,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\sha2\sha2.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\sha2\sha2.c,"#define MEMCPY_BCOPY(d,s,l)	memcpy((d), (s), (l))",120,1,"#ifdef SHA2_USE_MEMSET_MEMCPY
#define MEMSET_BZERO(p,l)	memset((p), 0, (l))
#define MEMCPY_BCOPY(d,s,l)	memcpy((d), (s), (l))
#endif
#ifdef SHA2_USE_BZERO_BCOPY
"
11073,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\tests\dtls-client.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\tests\dtls-client.c,"memcpy(result, psk_id, psk_id_length);",120,1,"    }

    memcpy(result, psk_id, psk_id_length);
    return psk_id_length;
  case DTLS_PSK_KEY:
"
11074,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\tests\dtls-client.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\tests\dtls-client.c,"memcpy(result, psk_key, psk_key_length);",120,1,"    }

    memcpy(result, psk_key, psk_key_length);
    return psk_key_length;
  default:
"
11079,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\tests\dtls-client.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\tests\dtls-client.c,"memcpy(addrstr, server, strlen(server));",120,1,"  memset(addrstr, 0, sizeof(addrstr));
  if (server && strlen(server) > 0)
    memcpy(addrstr, server, strlen(server));
  else
    memcpy(addrstr, ""localhost"", 9);
"
11080,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\tests\dtls-client.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\tests\dtls-client.c,"memcpy(addrstr, ""localhost"", 9);",120,1,"    memcpy(addrstr, server, strlen(server));
  else
    memcpy(addrstr, ""localhost"", 9);

  memset ((char *)&hints, 0, sizeof(hints));
"
11082,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\tests\dtls-client.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\tests\dtls-client.c,"memcpy(dst, ainfo->ai_addr, ainfo->ai_addrlen);",120,1,"    case AF_INET:

      memcpy(dst, ainfo->ai_addr, ainfo->ai_addrlen);
      return ainfo->ai_addrlen;
    default:
"
11083,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\tests\dtls-client.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\tests\dtls-client.c,"memcpy(psk_id, PSK_DEFAULT_IDENTITY, psk_id_length);",120,1,"  psk_id_length = strlen(PSK_DEFAULT_IDENTITY);
  psk_key_length = strlen(PSK_DEFAULT_KEY);
  memcpy(psk_id, PSK_DEFAULT_IDENTITY, psk_id_length);
  memcpy(psk_key, PSK_DEFAULT_KEY, psk_key_length);
#endif /* DTLS_PSK */
"
11084,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\tests\dtls-client.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\tests\dtls-client.c,"memcpy(psk_key, PSK_DEFAULT_KEY, psk_key_length);",120,1,"  psk_key_length = strlen(PSK_DEFAULT_KEY);
  memcpy(psk_id, PSK_DEFAULT_IDENTITY, psk_id_length);
  memcpy(psk_key, PSK_DEFAULT_KEY, psk_key_length);
#endif /* DTLS_PSK */

"
11086,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\tests\dtls-client.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\tests\dtls-client.c,"memcpy(output_file.s, optarg, output_file.length + 1);",120,1,"      } else {
	/* copy filename including trailing zero */
	memcpy(output_file.s, optarg, output_file.length + 1);
      }
      break;
"
11088,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\tests\dtls-server.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\tests\dtls-server.c,"memcpy(result, psk[i].key, psk[i].key_length);",120,1,"	}

	memcpy(result, psk[i].key, psk[i].key_length);
	return psk[i].key_length;
      }
"
11097,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\tests\pcap.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\tests\pcap.c,"memcpy(statebuf, hs_hash[0], sizeof(md5_state_t));",120,1,"  /* temporarily store hash status for roll-back after finalize */
#if DTLS_VERSION == 0xfeff
  memcpy(statebuf, hs_hash[0], sizeof(md5_state_t));
  memcpy(statebuf + sizeof(md5_state_t), 
	 hs_hash[1], 
"
11098,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\tests\pcap.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\tests\pcap.c,"memcpy(statebuf, hs_hash[0], sizeof(statebuf));",120,1,"	 sizeof(SHA_CTX));
#elif DTLS_VERSION == 0xfefd
  memcpy(statebuf, hs_hash[0], sizeof(statebuf));
#endif

"
11099,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\tests\pcap.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\tests\pcap.c,"memcpy(hs_hash[0], statebuf, sizeof(md5_state_t));",120,1,"  /* restore hash status */
#if DTLS_VERSION == 0xfeff
  memcpy(hs_hash[0], statebuf, sizeof(md5_state_t));
  memcpy(hs_hash[1], 
	 statebuf + sizeof(md5_state_t), 
"
11100,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\tests\pcap.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\tests\pcap.c,"memcpy(hs_hash[0], statebuf, sizeof(statebuf));",120,1,"	 sizeof(SHA_CTX));
#elif DTLS_VERSION == 0xfefd
  memcpy(hs_hash[0], statebuf, sizeof(statebuf));
#endif
}
"
11102,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\tests\pcap.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\tests\pcap.c,"memcpy(dtls_kb_client_iv(OTHER_CONFIG), data + 14, 32);",120,1,"	goto next;
	
      memcpy(dtls_kb_client_iv(OTHER_CONFIG), data + 14, 32);

	clear_hash();
"
11103,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\tests\pcap.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\tests\pcap.c,"memcpy(dtls_kb_server_iv(OTHER_CONFIG), data + 14, 32);",120,1,"    
    if (packet[0] == 22 && data[0] == 2) { /* ServerHello */
      memcpy(dtls_kb_server_iv(OTHER_CONFIG), data + 14, 32);
      /* FIXME: search in ciphers */
      OTHER_CONFIG->cipher = TLS_PSK_WITH_AES_128_CCM_8;
"
11108,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\tests\secure-server.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\tests\secure-server.c,"memcpy(psk, keybuf, min(strlen(keybuf), max_psk_len));",120,1,"
  printf(""psk_server_callback: check identity of client %s\n"", identity);
  memcpy(psk, keybuf, min(strlen(keybuf), max_psk_len));

  return min(strlen(keybuf), max_psk_len);
"
11113,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\tests\secure-server.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\tests\secure-server.c,"memcpy(cookie, DUMMYSTR, *cookie_len);",120,1,"#define DUMMYSTR ""ABCDEFGHIJKLMNOP""
  *cookie_len = strlen(DUMMYSTR);
  memcpy(cookie, DUMMYSTR, *cookie_len);

  return 1;
"
11118,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-arp.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-arp.c,"memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);",120,1,"
	/* An old entry found, update this and return. */
	memcpy(tabptr->ethaddr.addr, ethaddr->addr, 6);
	tabptr->time = arptime;

"
11120,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-arp.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-arp.c,"memcpy(arphdr->dhwaddr.addr, arphdr->shwaddr.addr, 6);",120,1,"      arphdr->opcode = UIP_HTONS(ARP_REPLY);

      memcpy(arphdr->dhwaddr.addr, arphdr->shwaddr.addr, 6);
      memcpy(arphdr->shwaddr.addr, ip64_eth_addr.addr, 6);
      memcpy(arphdr->ethhdr.src.addr, ip64_eth_addr.addr, 6);
"
11121,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-arp.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-arp.c,"memcpy(arphdr->shwaddr.addr, ip64_eth_addr.addr, 6);",120,1,"
      memcpy(arphdr->dhwaddr.addr, arphdr->shwaddr.addr, 6);
      memcpy(arphdr->shwaddr.addr, ip64_eth_addr.addr, 6);
      memcpy(arphdr->ethhdr.src.addr, ip64_eth_addr.addr, 6);
      memcpy(arphdr->ethhdr.dest.addr, arphdr->dhwaddr.addr, 6);
"
11122,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-arp.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-arp.c,"memcpy(arphdr->ethhdr.src.addr, ip64_eth_addr.addr, 6);",120,1,"      memcpy(arphdr->dhwaddr.addr, arphdr->shwaddr.addr, 6);
      memcpy(arphdr->shwaddr.addr, ip64_eth_addr.addr, 6);
      memcpy(arphdr->ethhdr.src.addr, ip64_eth_addr.addr, 6);
      memcpy(arphdr->ethhdr.dest.addr, arphdr->dhwaddr.addr, 6);

"
11123,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-arp.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-arp.c,"memcpy(arphdr->ethhdr.dest.addr, arphdr->dhwaddr.addr, 6);",120,1,"      memcpy(arphdr->shwaddr.addr, ip64_eth_addr.addr, 6);
      memcpy(arphdr->ethhdr.src.addr, ip64_eth_addr.addr, 6);
      memcpy(arphdr->ethhdr.dest.addr, arphdr->dhwaddr.addr, 6);

      uip_ip4addr_copy(&arphdr->dipaddr, &arphdr->sipaddr);
"
11124,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-arp.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-arp.c,"memcpy(&ethhdr->dest.addr, &broadcast_ethaddr.addr, 6);",120,1,"  uip_ipaddr(&broadcast_addr, 255,255,255,255);
  if(uip_ip4addr_cmp(&ipv4_hdr->destipaddr, &broadcast_addr)) {
    memcpy(&ethhdr->dest.addr, &broadcast_ethaddr.addr, 6);
  } else if(ipv4_hdr->destipaddr.u8[0] == 224) {
    /* Multicast. */
"
11125,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-arp.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-arp.c,"memcpy(ethhdr->dest.addr, tabptr->ethaddr.addr, 6);",120,1,"    }

    memcpy(ethhdr->dest.addr, tabptr->ethaddr.addr, 6);

  }
"
11126,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-arp.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-arp.c,"memcpy(ethhdr->src.addr, ip64_eth_addr.addr, 6);",120,1,"
  }
  memcpy(ethhdr->src.addr, ip64_eth_addr.addr, 6);

  ethhdr->type = UIP_HTONS(IP64_ETH_TYPE_IP);
"
11129,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-arp.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-arp.c,"memcpy(arp_hdr->ethhdr.src.addr, ip64_eth_addr.addr, 6);",120,1,"  memset(arp_hdr->ethhdr.dest.addr, 0xff, 6);
  memset(arp_hdr->dhwaddr.addr, 0x00, 6);
  memcpy(arp_hdr->ethhdr.src.addr, ip64_eth_addr.addr, 6);
  memcpy(arp_hdr->shwaddr.addr, ip64_eth_addr.addr, 6);

"
11130,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-arp.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-arp.c,"memcpy(arp_hdr->shwaddr.addr, ip64_eth_addr.addr, 6);",120,1,"  memset(arp_hdr->dhwaddr.addr, 0x00, 6);
  memcpy(arp_hdr->ethhdr.src.addr, ip64_eth_addr.addr, 6);
  memcpy(arp_hdr->shwaddr.addr, ip64_eth_addr.addr, 6);

  uip_ip4addr_copy(&arp_hdr->dipaddr, &ipaddr);
"
11131,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-dhcpc.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-dhcpc.c,"memcpy(optptr, s.serverid, 4);",120,1,"  *optptr++ = DHCP_OPTION_SERVER_ID;
  *optptr++ = 4;
  memcpy(optptr, s.serverid, 4);
  return optptr + 4;
}
"
11132,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-dhcpc.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-dhcpc.c,"memcpy(optptr, s.ipaddr.u16, 4);",120,1,"  *optptr++ = DHCP_OPTION_REQ_IPADDR;
  *optptr++ = 4;
  memcpy(optptr, s.ipaddr.u16, 4);
  return optptr + 4;
}
"
11133,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-dhcpc.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-dhcpc.c,"memcpy(m->xid, &xid, sizeof(m->xid));",120,1,"  m->hlen = s.mac_len;
  m->hops = 0;
  memcpy(m->xid, &xid, sizeof(m->xid));
  m->secs = 0;
  m->flags = UIP_HTONS(BOOTP_BROADCAST); /*  Broadcast bit. */
"
11134,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-dhcpc.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-dhcpc.c,"memcpy(m->ciaddr, uip_hostaddr.u16, sizeof(m->ciaddr));",120,1,"  m->flags = UIP_HTONS(BOOTP_BROADCAST); /*  Broadcast bit. */
  /*  uip_ipaddr_copy(m->ciaddr, uip_hostaddr);*/
  memcpy(m->ciaddr, uip_hostaddr.u16, sizeof(m->ciaddr));
  memset(m->yiaddr, 0, sizeof(m->yiaddr));
  memset(m->siaddr, 0, sizeof(m->siaddr));
"
11138,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-dhcpc.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-dhcpc.c,"memcpy(m->chaddr, s.mac_addr, s.mac_len);",120,1,"  memset(m->siaddr, 0, sizeof(m->siaddr));
  memset(m->giaddr, 0, sizeof(m->giaddr));
  memcpy(m->chaddr, s.mac_addr, s.mac_len);
  memset(&m->chaddr[s.mac_len], 0, sizeof(m->chaddr) - s.mac_len);

"
11142,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-dhcpc.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-dhcpc.c,"memcpy(m->options, magic_cookie, sizeof(magic_cookie));",120,1,"

  memcpy(m->options, magic_cookie, sizeof(magic_cookie));
}
/*---------------------------------------------------------------------------*/
"
11143,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-dhcpc.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-dhcpc.c,"memcpy(s.netmask.u16, optptr + 2, 4);",120,1,"    switch(*optptr) {
    case DHCP_OPTION_SUBNET_MASK:
      memcpy(s.netmask.u16, optptr + 2, 4);
      break;
    case DHCP_OPTION_ROUTER:
"
11144,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-dhcpc.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-dhcpc.c,"memcpy(s.default_router.u16, optptr + 2, 4);",120,1,"      break;
    case DHCP_OPTION_ROUTER:
      memcpy(s.default_router.u16, optptr + 2, 4);
      break;
    case DHCP_OPTION_DNS_SERVER:
"
11145,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-dhcpc.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-dhcpc.c,"memcpy(s.dnsaddr.u16, optptr + 2, 4);",120,1,"      break;
    case DHCP_OPTION_DNS_SERVER:
      memcpy(s.dnsaddr.u16, optptr + 2, 4);
      break;
    case DHCP_OPTION_MSG_TYPE:
"
11146,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-dhcpc.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-dhcpc.c,"memcpy(s.serverid, optptr + 2, 4);",120,1,"      break;
    case DHCP_OPTION_SERVER_ID:
      memcpy(s.serverid, optptr + 2, 4);
      break;
    case DHCP_OPTION_LEASE_TIME:
"
11147,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-dhcpc.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-dhcpc.c,"memcpy(s.lease_time, optptr + 2, 4);",120,1,"      break;
    case DHCP_OPTION_LEASE_TIME:
      memcpy(s.lease_time, optptr + 2, 4);
      break;
    case DHCP_OPTION_END:
"
11148,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-dhcpc.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-dhcpc.c,"memcpy(s.ipaddr.u16, m->yiaddr, 4);",120,1,"     memcmp(m->xid, &xid, sizeof(xid)) == 0 &&
     memcmp(m->chaddr, s.mac_addr, s.mac_len) == 0) {
    memcpy(s.ipaddr.u16, m->yiaddr, 4);
    return parse_options(&m->options[4], uip_datalen());
  }
"
11149,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-dns64.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-dns64.c,"memcpy(acopy, adata, 2 + 4 + 2);",120,1,"
      /* Copy the class, the TTL, and the data length */
      memcpy(acopy, adata, 2 + 4 + 2);
      acopy += 8;
      adata += 8;
"
11150,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-dns64.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-dns64.c,"memcpy(acopy, adata, len);",120,1,"
      } else {
        memcpy(acopy, adata, len);
        acopy += len;
        adata += len;
"
11151,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-dns64.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-dns64.c,"memcpy(acopy, adata, 2 + 2 + 4 + 2);",120,1,"
      /* Copy the type, class, the TTL, and the data length */
      memcpy(acopy, adata, 2 + 2 + 4 + 2);
      acopy += 10;
      adata += 10;
"
11153,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-eth.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-eth.c,"memcpy(&ip64_eth_addr, addr, sizeof(struct ip64_eth_addr));",120,1,"ip64_eth_addr_set(struct ip64_eth_addr *addr)
{
  memcpy(&ip64_eth_addr, addr, sizeof(struct ip64_eth_addr));
}
/*---------------------------------------------------------------------------*/
"
11155,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-slip-interface.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-slip-interface.c,"memcpy(&prefix, &uip_buf[2], 8);",120,1,"      /* Here we set a prefix !!! */
      memset(&prefix, 0, 16);
      memcpy(&prefix, &uip_buf[2], 8);
      PRINTF(""Setting prefix "");
      PRINT6ADDR(&prefix);
"
11156,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-slip-interface.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\ip64\ip64-slip-interface.c,"memcpy(uip_buf, ip64_packet_buffer, len);",120,1,"			     ip64_packet_buffer);
    if(len > 0) {
      memcpy(uip_buf, ip64_packet_buffer, len);
      uip_len = len;
      /*      PRINTF(""send len %d\n"", len); */
"
11158,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\lwm2m\lwm2m-engine.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\lwm2m\lwm2m-engine.c,"memcpy(outbuf->buffer, ctxbuf->buffer, size);",120,1,"    LOG_DBG(""Double buffer - copying out %d bytes remaining: %d\n"",
            size, ctxbuf->len - size);
    memcpy(outbuf->buffer, ctxbuf->buffer, size);
    memcpy(ctxbuf->buffer, &ctxbuf->buffer[size],
           ctxbuf->len - size);
"
11159,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\lwm2m\lwm2m-engine.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\lwm2m\lwm2m-engine.c,"memcpy(&created.token, ctx->request->token, created.token_len);",120,1,"      created.object_id = instance->object_id;
      created.token_len = MIN(COAP_TOKEN_LEN, ctx->request->token_len);
      memcpy(&created.token, ctx->request->token, created.token_len);
    }
  }
"
11164,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\lwm2m\lwm2m-plain-text.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\lwm2m\lwm2m-plain-text.c,"memcpy(value, inbuf, len);",120,1,"    return 0;
  }
  memcpy(value, inbuf, len);
  value[len] = '\0';
  ctx->last_value_len = len;
"
11167,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\lwm2m\lwm2m-security.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\lwm2m\lwm2m-security.c,"memcpy(server->server_uri, server_uri, server_uri_len);",120,1,"  }

  memcpy(server->server_uri, server_uri, server_uri_len);
  server->server_uri_len = server_uri_len;

"
11168,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\lwm2m\lwm2m-security.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\lwm2m\lwm2m-security.c,"memcpy(server->public_key, identity, identity_len);",120,1,"    return 0;
  }
  memcpy(server->public_key, identity, identity_len);
  server->public_key_len = identity_len;
  memcpy(server->secret_key, key, key_len);
"
11169,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\lwm2m\lwm2m-security.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\lwm2m\lwm2m-security.c,"memcpy(server->secret_key, key, key_len);",120,1,"  memcpy(server->public_key, identity, identity_len);
  server->public_key_len = identity_len;
  memcpy(server->secret_key, key, key_len);
  server->secret_key_len = key_len;

"
11170,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\lwm2m\lwm2m-tlv-reader.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\lwm2m\lwm2m-tlv-reader.c,"memcpy(value, tlv.value, tlv.length);",120,1,"      return 0;
    }
    memcpy(value, tlv.value, tlv.length);
    value[tlv.length] = '\0';
    ctx->last_value_len = tlv.length;
"
11171,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\lwm2m\lwm2m-tlv.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\lwm2m\lwm2m-tlv.c,"memcpy(&buffer[pos], tlv->value, tlv->length);",120,1,"  /* finally add the value */
  if(tlv->value != NULL && tlv->length > 0) {
    memcpy(&buffer[pos], tlv->value, tlv->length);
  }

"
11173,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\resolv\resolv.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\resolv\resolv.c,"memcpy((void *)queryptr, (void *)&nsec_record, sizeof(nsec_record));",120,1,"  }

  memcpy((void *)queryptr, (void *)&nsec_record, sizeof(nsec_record));

  queryptr += sizeof(nsec_record);
"
11175,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\resolv\resolv.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\resolv\resolv.c,"memcpy(&aligned, question, sizeof(aligned));",120,1,"#if !ARCH_DOESNT_NEED_ALIGNED_STRUCTS
      static struct dns_question aligned;
      memcpy(&aligned, question, sizeof(aligned));
      question = &aligned;
#endif /* !ARCH_DOESNT_NEED_ALIGNED_STRUCTS */
"
11176,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\resolv\resolv.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\resolv\resolv.c,"memcpy(&aligned, ans, sizeof(aligned));",120,1,"    {
      static struct dns_answer aligned;
      memcpy(&aligned, ans, sizeof(aligned));
      ans = &aligned;
    }
"
11182,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\rpl-border-router\native\border-router-mac.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\rpl-border-router\native\border-router-mac.c,"memcpy(&buf[3 + size], packetbuf_hdrptr(), packetbuf_totlen());",120,1,"
      /* Copy packet data */
      memcpy(&buf[3 + size], packetbuf_hdrptr(), packetbuf_totlen());

      write_to_slip(buf, packetbuf_totlen() + size + 3);
"
11183,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\rpl-border-router\native\border-router-native.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\rpl-border-router\native\border-router-native.c,"memcpy(uip_lladdr.addr, data, sizeof(uip_lladdr.addr));",120,1,"border_router_set_mac(const uint8_t *data)
{
  memcpy(uip_lladdr.addr, data, sizeof(uip_lladdr.addr));
  linkaddr_set_node_addr((linkaddr_t *)uip_lladdr.addr);

"
11195,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\antelope\aql-adt.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\antelope\aql-adt.c,"memcpy(start_ptr, ptr, length);",120,1,"
  start_ptr = char_buf + next_free_offset;
  memcpy(start_ptr, ptr, length);
  next_free_offset += length;

"
11199,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\antelope\aql-lexer.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\antelope\aql-lexer.c,"memcpy(lexer->value, &float_value, sizeof(float_value));",120,1,"      return -1;
    }
    memcpy(lexer->value, &float_value, sizeof(float_value));
    *lexer->token = FLOAT_VALUE;
    lexer->input = end;
"
11200,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\antelope\aql-lexer.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\antelope\aql-lexer.c,"memcpy(lexer->value, &long_value, sizeof(long_value));",120,1,"      return -1;
  }
  memcpy(lexer->value, &long_value, sizeof(long_value));
  *lexer->token = INTEGER_VALUE;
  lexer->input = end;
"
11201,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\antelope\aql-lexer.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\antelope\aql-lexer.c,"memcpy(lexer->value, s, length);",120,1,"  }

  memcpy(lexer->value, s, length);
  (*lexer->value)[length] = '\0';

"
11203,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\antelope\index-maxheap.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\antelope\index-maxheap.c,"memcpy(bucket_filename, filename, sizeof(bucket_filename));",120,1,"    goto end;
  }
  memcpy(bucket_filename, filename, sizeof(bucket_filename));

  PRINTF(""DB: Generated the bucket file \""%s\"" using %lu bytes of space\n"",
"
11206,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\antelope\lvm.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\antelope\lvm.c,"memcpy(operand, &p->code[p->ip], sizeof(*operand));",120,1,"get_operand(lvm_instance_t *p, operand_t *operand)
{
  memcpy(operand, &p->code[p->ip], sizeof(*operand));
  p->ip += sizeof(*operand);
}
"
11211,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\antelope\lvm.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\antelope\lvm.c,"memcpy(&p->code[p->end], &op, sizeof(op));",120,1,"  }

  memcpy(&p->code[p->end], &op, sizeof(op));
  p->end += sizeof(op);
  return LVM_TRUE;
"
11213,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\antelope\lvm.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\antelope\lvm.c,"memcpy(&p->code[p->end], op, sizeof(*op));",120,1,"  }

  memcpy(&p->code[p->end], op, sizeof(*op));
  p->end += sizeof(*op);
  return LVM_TRUE;
"
11214,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\antelope\lvm.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\antelope\lvm.c,"memcpy(dst, src, sizeof(*dst));",120,1,"lvm_clone(lvm_instance_t *dst, lvm_instance_t *src)
{
  memcpy(dst, src, sizeof(*dst));
}

"
11217,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\antelope\lvm.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\antelope\lvm.c,"memcpy(&operator, p->code + index, sizeof(operator));",120,1,"  int i;

  memcpy(&operator, p->code + index, sizeof(operator));

  for(i = 0; i < sizeof(operator_map) / sizeof(operator_map[0]); i++) {
"
11218,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\antelope\lvm.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\antelope\lvm.c,"memcpy(&operand, p->code + index, sizeof(operand));",120,1,"  operand_t operand;

  memcpy(&operand, p->code + index, sizeof(operand));

  switch(operand.type) {
"
11220,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\antelope\relation.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\antelope\relation.c,"memcpy(rel->name, name, sizeof(rel->name));",120,1,"  }

  memcpy(rel->name, name, sizeof(rel->name));
  rel->name[sizeof(rel->name) - 1] = '\0';
  rel->references = 1;
"
11222,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\antelope\relation.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\antelope\relation.c,"memcpy(to_ptr, from_ptr, result_attr->element_size);",120,1,"    intbuf[1] = result_attr->aggregation_value & 0xff;
    from_ptr = intbuf;
    memcpy(to_ptr, from_ptr, result_attr->element_size);
  }

"
11223,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\antelope\relation.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\antelope\relation.c,"memcpy(join_next_attribute_ptr, source_map[i].from_ptr, element_size);",120,1,"	element_size = source_map[i].attr->element_size;

	memcpy(join_next_attribute_ptr, source_map[i].from_ptr, element_size);
	join_next_attribute_ptr += element_size;
      }
"
11224,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\antelope\result.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\antelope\result.c,"memcpy(ptr, VALUE_STRING(value), attr->element_size);",120,1,"  switch(attr->domain) {
  case DOMAIN_STRING:
    memcpy(ptr, VALUE_STRING(value), attr->element_size);
    ptr[attr->element_size - 1] = '\0';
    break;
"
11228,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\antelope\storage-cfs.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\antelope\storage-cfs.c,"memcpy(record.name, attr->name, sizeof(record.name));",120,1,"
  memset(&record.name, 0, sizeof(record.name));
  memcpy(record.name, attr->name, sizeof(record.name));
  record.domain = attr->domain;
  record.element_size = attr->element_size;
"
11230,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\antelope\storage-cfs.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\antelope\storage-cfs.c,"memcpy(record.file_name, index->descriptor_file, sizeof(record.file_name));",120,1,"
  strcpy(record.attribute_name, index->attr->name);
  memcpy(record.file_name, index->descriptor_file, sizeof(record.file_name));
  record.type = index->type;

"
11235,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\cfs\cfs-coffee.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\cfs\cfs-coffee.c,"memcpy(&copy_buf[lp->offset], lp->buf, lp->size);",120,1,"    }

    memcpy(&copy_buf[lp->offset], lp->buf, lp->size);

    /*
"
11237,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\cfs\cfs-coffee.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\cfs\cfs-coffee.c,"memcpy(&page, dir->state, sizeof(coffee_page_t));",120,1,"  coffee_page_t next_page;

  memcpy(&page, dir->state, sizeof(coffee_page_t));

  while(page < COFFEE_PAGE_COUNT) {
"
11238,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\cfs\cfs-coffee.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\cfs\cfs-coffee.c,"memcpy(record->name, hdr.name, sizeof(record->name));",120,1,"    read_header(&hdr, page);
    if(HDR_ACTIVE(hdr) && !HDR_LOG(hdr)) {
      memcpy(record->name, hdr.name, sizeof(record->name));
      record->name[sizeof(record->name) - 1] = '\0';
      record->size = file_end(page);
"
11239,2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\cfs\cfs-coffee.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\cfs\cfs-coffee.c,"memcpy(dir->state, &next_page, sizeof(coffee_page_t));",120,1,"
      next_page = next_file(page, &hdr);
      memcpy(dir->state, &next_page, sizeof(coffee_page_t));
      return 0;
    }
"
11244,2021\x-cube-subg2\Projects\STM32F401RE-NUCLEO\Applications\Contiki-NG\S2868A1_Border_Router\Src\contiki-platform.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Projects\STM32F401RE-NUCLEO\Applications\Contiki-NG\S2868A1_Border_Router\Src\contiki-platform.c,"memcpy(addr.u8, node_mac, sizeof(addr.u8));",120,1,"
#if NETSTACK_CONF_WITH_IPV6
  memcpy(addr.u8, node_mac, sizeof(addr.u8));
#else
  int i;
"
11245,2021\x-cube-subg2\Projects\STM32F401RE-NUCLEO\Applications\Contiki-NG\S2868A1_Border_Router\Src\radio-driver.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Projects\STM32F401RE-NUCLEO\Applications\Contiki-NG\S2868A1_Border_Router\Src\radio-driver.c,"memcpy(tmpbuff, payload, payload_len);",120,1,"  S2LP_PCKT_BASIC_SetPayloadLength(payload_len);
  //@TODO change IO implementation to avoid the copy here
  memcpy(tmpbuff, payload, payload_len);

  /* Currently does no happen since S2LP_RX_FIFO_SIZE == MAX_PACKET_LEN
"
11246,2021\x-cube-subg2\Projects\STM32F401RE-NUCLEO\Applications\Contiki-NG\S2868A1_Border_Router\Src\radio-driver.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Projects\STM32F401RE-NUCLEO\Applications\Contiki-NG\S2868A1_Border_Router\Src\radio-driver.c,"memcpy(buf, radio_rxbuf, rx_num_bytes);",120,1,"    } else if (pending_packet && (rx_num_bytes!=0)) {
      if (rx_num_bytes <= bufsize) {
        memcpy(buf, radio_rxbuf, rx_num_bytes);
        retval = rx_num_bytes;
      } else {
"
11253,2021\x-cube-subg2\Projects\STM32F401RE-NUCLEO\Applications\Contiki-NG\S2868A1_Serial_Sniffer\Src\sniffer.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Projects\STM32F401RE-NUCLEO\Applications\Contiki-NG\S2868A1_Serial_Sniffer\Src\sniffer.c,"memcpy(&(cap->buf), src, cap->caphdr.incl_len);",120,1,"    cap->caphdr.orig_len = len;
  }
  memcpy(&(cap->buf), src, cap->caphdr.incl_len);

  /* Total size of data to output. */
"
11450,2021\x-cube-subg2\Utilities\PC_Software\wpcapslip6\ip-process.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Utilities\PC_Software\wpcapslip6\ip-process.c,"memcpy(tmp,lowpan,sizeof(uip_lladdr_t));",120,1,"	uint8_t tmp[8];

	memcpy(tmp,lowpan,sizeof(uip_lladdr_t));

    memcpy(ethernet, tmp, 3);
"
11451,2021\x-cube-subg2\Utilities\PC_Software\wpcapslip6\ip-process.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Utilities\PC_Software\wpcapslip6\ip-process.c,"memcpy(ethernet, tmp, 3);",120,1,"	memcpy(tmp,lowpan,sizeof(uip_lladdr_t));

    memcpy(ethernet, tmp, 3);
    memcpy(ethernet+3, tmp+5, 3);
    ethernet[0] |= 0x02;
"
11452,2021\x-cube-subg2\Utilities\PC_Software\wpcapslip6\ip-process.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Utilities\PC_Software\wpcapslip6\ip-process.c,"memcpy(ethernet+3, tmp+5, 3);",120,1,"
    memcpy(ethernet, tmp, 3);
    memcpy(ethernet+3, tmp+5, 3);
    ethernet[0] |= 0x02;

"
11453,2021\x-cube-subg2\Utilities\PC_Software\wpcapslip6\wpcap6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Utilities\PC_Software\wpcapslip6\wpcap6.c,"memcpy(&uip_lladdr, a, sizeof(struct uip_eth_addr));",120,1,"setethaddr(struct uip_eth_addr *a)
{
  memcpy(&uip_lladdr, a, sizeof(struct uip_eth_addr));
}
/*---------------------------------------------------------------------------*/
"
11458,2021\x-cube-subg2\Utilities\PC_Software\wpcapslip6\wpcapslip6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Utilities\PC_Software\wpcapslip6\wpcapslip6.c,"memcpy(&eth_hdr->dest, &adapter_eth_addr, sizeof(struct uip_eth_addr));",120,1,"                  struct uip_eth_hdr * eth_hdr = (struct uip_eth_hdr *)buf;

                  memcpy(&eth_hdr->dest, &adapter_eth_addr, sizeof(struct uip_eth_addr));
                  memcpy(&eth_hdr->src, &dev_eth_addr, sizeof(struct uip_eth_addr));

"
11459,2021\x-cube-subg2\Utilities\PC_Software\wpcapslip6\wpcapslip6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Utilities\PC_Software\wpcapslip6\wpcapslip6.c,"memcpy(&eth_hdr->src, &dev_eth_addr, sizeof(struct uip_eth_addr));",120,1,"
                  memcpy(&eth_hdr->dest, &adapter_eth_addr, sizeof(struct uip_eth_addr));
                  memcpy(&eth_hdr->src, &dev_eth_addr, sizeof(struct uip_eth_addr));

                  eth_hdr->type = htons(UIP_ETHTYPE_IPV6);
"
11470,2021\x-cube-subg2\Utilities\PC_Software\wpcapslip6\wpcapslip6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Utilities\PC_Software\wpcapslip6\wpcapslip6.c,"memcpy(&ipv6addr.s6_addr[8],&dev_addr,8);",120,1,"
    // Copy modified EUI-64 to the last 64 bits of IPv6 address.
    memcpy(&ipv6addr.s6_addr[8],&dev_addr,8);

    inet_ntop(AF_INET6,&ipv6addr,str_addr,INET6_ADDRSTRLEN); // To string format.
"
