GithubID,Year,FullPath,Codesnippet,CWE,isTrueVulnerable,Codesnippet5
2021\a9_gsm_gps_library\a9_spi_lib\src\spi_example.c,Dataset Download,../../Dataset Download/2021\a9_gsm_gps_library\a9_spi_lib\src\spi_example.c,"strcpy(send_buff, ""123456789"");",120,1,"	memset(rev_buff, 0, sizeof(rev_buff));

	strcpy(send_buff, ""123456789"");

	while(1)
"
2021\arduino-learn-circuit\libraries\pubsubclient-master\tests\src\receive_spec.cpp,Dataset Download,../../Dataset Download/2021\arduino-learn-circuit\libraries\pubsubclient-master\tests\src\receive_spec.cpp,"strcpy(lastTopic,topic);",120,1,"void callback(char* topic, byte* payload, unsigned int length) {
    callback_called = true;
    strcpy(lastTopic,topic);
    memcpy(lastPayload,payload,length);
    lastLength = length;
"
2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_draw\lv_img_decoder.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_draw\lv_img_decoder.c,"strcpy((char *)dsc->src, src);",120,1,"        size_t fnlen = strlen(src);
        dsc->src = lv_mem_alloc(fnlen + 1);
        strcpy((char *)dsc->src, src);
    }
    else {
"
2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_calendar.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_calendar.c,"strcpy(&txt_buf[5], get_month_name(calendar, ext->showed_date.month));",120,1,"    txt_buf[4] = ' ';
    txt_buf[5] = '\0';
    strcpy(&txt_buf[5], get_month_name(calendar, ext->showed_date.month));

    calendar->state = LV_STATE_DEFAULT;
"
2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_dropdown.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_dropdown.c,"strcpy(ext->options, options);",120,1,"
#if LV_USE_ARABIC_PERSIAN_CHARS == 0
    strcpy(ext->options, options);
#else
    _lv_txt_ap_proc(options, ext->options);
"
2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_roller.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_roller.c,"strcpy(&opt_extra[opt_len * i], options);",120,1,"        uint8_t i;
        for(i = 0; i < LV_ROLLER_INF_PAGES; i++) {
            strcpy(&opt_extra[opt_len * i], options);
            opt_extra[opt_len * (i + 1) - 1] = '\n';
        }
"
2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_table.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_table.c,"strcpy(ext->cell_data[cell] + 1, txt);  */",120,1,"    if(ext->cell_data[cell] == NULL) return;

    strcpy(ext->cell_data[cell] + 1, txt);  /*+1 to skip the format byte*/
#endif

"
2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_textarea.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_textarea.c,"strcpy(ext->pwd_tmp, txt);",120,1,"        LV_ASSERT_MEM(ext->pwd_tmp);
        if(ext->pwd_tmp == NULL) return;
        strcpy(ext->pwd_tmp, txt);

#if LV_USE_ANIMATION
"
2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_win.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_win.c,"strcpy(ext->title_txt, copy_ext->title_txt);",120,1,"        ext->header   = lv_obj_create(new_win, copy_ext->header);
        ext->title_txt    = lv_mem_alloc(strlen(copy_ext->title_txt) + 1);
        strcpy(ext->title_txt, copy_ext->title_txt);
        ext->page     = lv_page_create(new_win, copy_ext->page);
        ext->btn_w     = copy_ext->btn_w;
"
2021\B-L4S5I-IOT01A-using-VL530X-via-I2C\Core\platform\inc\vl53l0x_platform_log.h,Dataset Download,../../Dataset Download/2021\B-L4S5I-IOT01A-using-VL530X-via-I2C\Core\platform\inc\vl53l0x_platform_log.h,"#define VL53L0_COPYSTRING(str, ...) strcpy(str, ##__VA_ARGS__)",120,1,"#endif /* else */

#define VL53L0_COPYSTRING(str, ...) strcpy(str, ##__VA_ARGS__)
#ifdef __cplusplus
}
"
2021\c-vertices-sdk\src\algorand\algorand_provider.c,Dataset Download,../../Dataset Download/2021\c-vertices-sdk\src\algorand\algorand_provider.c,"strcpy((char *) tx_id, tx_id_json->valuestring);",120,1,"                else
                {
                    strcpy((char *) tx_id, tx_id_json->valuestring);
                }
            }
"
2021\c-vertices-sdk\src\algorand\algorand_provider.c,Dataset Download,../../Dataset Download/2021\c-vertices-sdk\src\algorand\algorand_provider.c,"strcpy(m_provider.version.network, genesis_id->valuestring);",120,1,"                else
                {
                    strcpy(m_provider.version.network, genesis_id->valuestring);
                }
            }
"
2021\c-vertices-sdk\src\algorand\algorand_provider.c,Dataset Download,../../Dataset Download/2021\c-vertices-sdk\src\algorand\algorand_provider.c,"strcpy(version->network, m_provider.version.network);",120,1,"    // local copy of version has been updated (or not)
    // copy version into caller structure
    strcpy(version->network, m_provider.version.network);
    memcpy(version->genesis_hash, m_provider.version.genesis_hash, sizeof(version->genesis_hash));

"
2021\cslim\test\libglusterfs\call-stub.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\call-stub.cpp.c,"extern char *strcpy (char *__restrict __dest, const char *__restrict __src)",120,1,"

extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

"
2021\cslim\test\libglusterfs\compat.h,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\compat.h,"extern char *strcpy (char *__restrict __dest, const char *__restrict __src);",120,1,"gf_asprintf (char **string_ptr, const char *format, ...);
data_ref (data_t *this);
extern char *strcpy (char *__restrict __dest, const char *__restrict __src);
__is_member (struct mem_pool *pool, void *ptr);
list_add (struct list_head *new, struct list_head *head);
"
2021\cslim\test\libglusterfs\logging.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\logging.cpp.c,"strcpy (msg + len, str2);",120,1,"
        strcpy (msg, str1);
        strcpy (msg + len, str2);

        pthread_mutex_lock (&ctx->log.logfile_mutex);
"
2021\cslim\test\libglusterfs\logging.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\logging.cpp.c,"strcpy (msg + hlen, *appmsgstr);",120,1,"
        strcpy (msg, header);
        strcpy (msg + hlen, *appmsgstr);
        if (footer)
                strcpy (msg + hlen + mlen, footer);
"
2021\deneyapkart-arduino-core\libraries\08_WiFi\src\WiFiSTA.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\08_WiFi\src\WiFiSTA.cpp,"strcpy(reinterpret_cast<char*>(conf.sta.ssid), ssid);",120,1,"    wifi_config_t conf;
    memset(&conf, 0, sizeof(wifi_config_t));
    strcpy(reinterpret_cast<char*>(conf.sta.ssid), ssid);

    if(passphrase) {
"
2021\deneyapkart-arduino-core\libraries\08_WiFi\src\WiFiSTA.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\08_WiFi\src\WiFiSTA.cpp,"strcpy(reinterpret_cast<char*>(conf.sta.password), passphrase);",120,1,"            memcpy(reinterpret_cast<char*>(conf.sta.password), passphrase, 64);
        } else {
            strcpy(reinterpret_cast<char*>(conf.sta.password), passphrase);
        }
    }
"
2021\enemy\enemy.c,Dataset Download,../../Dataset Download/2021\enemy\enemy.c,"else strcpy(buf, url);",120,1,"    }
    if (!strncmp(url, ""http://"", 7)) strcpy(buf, url + 7);
    else strcpy(buf, url);
    for (i = 0; i < strlen(buf) && buf[i] != '/'; i++);
    buf[i] = 0;
"
2021\enemy\enemy.c,Dataset Download,../../Dataset Download/2021\enemy\enemy.c,"if(argc == 2) { memset(ldserver, 0, sizeof(ldserver)); strcpy(ldserver, argv[1]); }",120,1,"void processCmd(int argc, unsigned char * argv[]) {
  if(strstr(argv[0], decode(""~-6mvgmv""))) { //LDSERVER - gets loader server for everything
      if(argc == 2) { memset(ldserver, 0, sizeof(ldserver)); strcpy(ldserver, argv[1]); }
    // printf(""SUCCESSFULLY LOADED LOADER SERVER %s\n"", ldserver);
  }
"
2021\enemy\enemy.c,Dataset Download,../../Dataset Download/2021\enemy\enemy.c,"strcpy(params[paramsCount], pch);",120,1,"                                    params[paramsCount] = (unsigned char *)malloc(strlen(pch) + 1);
                                    memset(params[paramsCount], 0, strlen(pch) + 1);
                                    strcpy(params[paramsCount], pch);
                                    paramsCount++;
                            }
"
2021\ESP32WiFiSnifferApp\ESP32WiFiSnifferApp\src\interactFileSystem.cpp,Dataset Download,../../Dataset Download/2021\ESP32WiFiSnifferApp\ESP32WiFiSnifferApp\src\interactFileSystem.cpp,"strcpy( g_espConfigData.ssid, configJsonObj[""ssid""] );",120,1,"    configJsonObj = getConfigFile( SPIFFS, configDynJsonDoc, path_to_file );
#endif
    strcpy( g_espConfigData.ssid, configJsonObj[""ssid""] );
    strcpy( g_espConfigData.pswd, configJsonObj[""pswd""] );
    g_espConfigData.am_i_master = configJsonObj[""am_i_master""];
"
2021\ESP32WiFiSnifferApp\ESP32WiFiSnifferApp\src\interactLoRa.cpp,Dataset Download,../../Dataset Download/2021\ESP32WiFiSnifferApp\ESP32WiFiSnifferApp\src\interactLoRa.cpp,"strcpy( WiFiDevicePayload.mac, incomingPayload.substring(pos1 + 1, pos2).c_str() );",120,1,"
        WiFiDevicePayload.packetID = (uint32_t) strtoul( incomingPayload.substring(0, pos1).c_str(), NULL, 0 );   // packetID
        strcpy( WiFiDevicePayload.mac, incomingPayload.substring(pos1 + 1, pos2).c_str() );                       // MAC Address
        WiFiDevicePayload.rssi = (int8_t) incomingPayload.substring(pos2 + 1, pos3).toInt();                      // RSSI

"
2021\ESP32WiFiSnifferApp\ESP32WiFiSnifferApp\src\interactNTP.cpp,Dataset Download,../../Dataset Download/2021\ESP32WiFiSnifferApp\ESP32WiFiSnifferApp\src\interactNTP.cpp,"strcpy( arr_ms_frac, uint64_to_string( ms_frac ).c_str() );",120,1,"    ms_frac = (uint64_t) tv.tv_usec / 1000LL;
    char arr_ms_frac[4] = {0};
    strcpy( arr_ms_frac, uint64_to_string( ms_frac ).c_str() );
    strcat( buf, arr_ms_frac );

"
2021\fusor-node-connector\src\SyncInOptions\SyncInOptions.cpp,Dataset Download,../../Dataset Download/2021\fusor-node-connector\src\SyncInOptions\SyncInOptions.cpp,"strcpy(url, (char *)baseUrl);",120,1,"    char *url = new char[urlLen];

    strcpy(url, (char *)baseUrl);
    strcat(url, HUB_REQUEST_PATH);

"
2021\haas-mini-program\adapter\platform\linux\network\amp_udp.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\linux\network\amp_udp.c,"strcpy((char *)p_remote->addr, inet_ntoa(addr.sin_addr));",120,1,"            p_remote->port = ntohs(addr.sin_port);

            strcpy((char *)p_remote->addr, inet_ntoa(addr.sin_addr));
        }

"
2021\haas-mini-program\components\das\src\service\service_fscan.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\service\service_fscan.c,"strcpy(scan_paths[scan_paths_cnt], path);",120,1,"        scan_paths[scan_paths_cnt] = malloc(sizeof(char) * (len + 1));
        if (scan_paths[scan_paths_cnt]) {
            strcpy(scan_paths[scan_paths_cnt], path);
            scan_paths[scan_paths_cnt][len] = '\0';
            scan_paths_cnt++;
"
2021\haas-mini-program\components\linkkit\infra\infra_cjson.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\linkkit\infra\infra_cjson.c,"strcpy((char *)output, ""\""\"""");",120,1,"            return false;
        }
        strcpy((char *)output, ""\""\"""");

        return true;
"
2021\haas-mini-program\engine\duktape_engine\addons\network\udp\module_udp.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\addons\network\udp\module_udp.c,"strcpy(p->src_ip, addr_info.addr);",120,1,"    while(1) {
        p->recv_len = amp_udp_recvfrom(sock_id, &addr_info, p->buf, sizeof(p->buf), MAX_UDP_RECV_TIMEOUT);
        strcpy(p->src_ip, addr_info.addr);
        p->src_port  = addr_info.port;
        p->js_cb_ref = recv_param->js_cb_ref;
"
2021\iot2020-2021\sekkyone\main.c,Dataset Download,../../Dataset Download/2021\iot2020-2021\sekkyone\main.c,"strcpy(topics[0], MQTT_TOPIC_IN);",120,1,"    unsigned flags = EMCUTE_QOS_0;
    subscriptions[0].cb = on_pub;
    strcpy(topics[0], MQTT_TOPIC_IN);
    subscriptions[0].topic.name = MQTT_TOPIC_IN;

"
2021\iot2020-2021\sekkyone\main.c,Dataset Download,../../Dataset Download/2021\iot2020-2021\sekkyone\main.c,"strcpy(sensors.temp, temp_s);",120,1,"        }

        strcpy(sensors.temp, temp_s);
        strcpy(sensors.hum, hum_s);
        sensors.sample_flame = sample;
"
2021\IOTProject\Maintain\doorAccess\doorAccessRef.c,Dataset Download,../../Dataset Download/2021\IOTProject\Maintain\doorAccess\doorAccessRef.c,"strcpy(pass[0], ""ABCDEFFF"");",120,1,"    for (int i = 0; i < 100; i++)
        pass[i] = (char *) calloc(sizeof(char), 9);
    strcpy(pass[0], ""ABCDEFFF""); // pass[0] = ""ABCDEFFF""
    strcpy(pass[1], ""DEADDEAD"");
    strcpy(pass[2], ""87654321"");
"
2021\secure-iot-analysis-ecoin-platform\collector\collector.c,Dataset Download,../../Dataset Download/2021\secure-iot-analysis-ecoin-platform\collector\collector.c,"strcpy(wallet[walletSize++],filename);",120,1,"	//struct CoinChain *cl;
	//c = malloc(sizeof(coin));
	strcpy(wallet[walletSize++],filename);
	free(filename); // CHECK
}
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_control.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_control.c,"strcpy((CHAR_T*)&sg_light_ctrl_data.color_origin.color_str, (CHAR_T*)&app_data.color_origin.color_str);",120,1,"        sg_light_ctrl_data.color_origin.sat = app_data.color_origin.sat;
        sg_light_ctrl_data.color_origin.value = app_data.color_origin.value;
        strcpy((CHAR_T*)&sg_light_ctrl_data.color_origin.color_str, (CHAR_T*)&app_data.color_origin.color_str);
        memcpy(&sg_light_ctrl_data.scene, &app_data.scene, SIZEOF(app_data.scene));
        sg_light_ctrl_data.scene_first_set = TRUE;
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_control.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_control.c,"strcpy((CHAR_T*)&sg_light_ctrl_data.scene, scene_data);",120,1,"    }

    strcpy((CHAR_T*)&sg_light_ctrl_data.scene, scene_data);
    PR_DEBUG(""light ctrl scene buf %s"", sg_light_ctrl_data.scene);

"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_control.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_control.c,"strcpy(scene_data, (CHAR_T*)&sg_light_ctrl_data.scene);",120,1,"    PR_DEBUG(""str len %d"", strlen(sg_light_ctrl_data.scene));

    strcpy(scene_data, (CHAR_T*)&sg_light_ctrl_data.scene);

    return LIGHT_OK;
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_control.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_control.c,"strcpy((CHAR_T*)&sg_light_ctrl_data.realtime_data, realtime_data);",120,1,"    }

    strcpy((CHAR_T*)&sg_light_ctrl_data.realtime_data, realtime_data);

    PR_DEBUG(""light real time adjust ctrl data buf %s"", sg_light_ctrl_data.realtime_data);
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\apps\snmp\snmp_msg.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\apps\snmp\snmp_msg.c,"strcpy((char*)request->community, snmp_community);",120,1,"    /* SNMPv3 doesn't use communities */
    /* @todo: Differentiate read/write access */
    strcpy((char*)request->community, snmp_community);
    request->community_strlen = (u16_t)strlen(snmp_community);

"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\netif\ppp\demand.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\netif\ppp\demand.c,"strcpy(ipstr,inet_ntoa(*( (struct in_addr *) (pkt->data+16))));",120,1,"
		/* Log Packet */
		strcpy(ipstr,inet_ntoa(*( (struct in_addr *) (pkt->data+16))));
		if (pkt->data[13] == 1) {
		    syslog(LOG_INFO,""Open ICMP %s -> %s\n"",
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\netif\ppp\ipv6cp.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\netif\ppp\ipv6cp.c,"strcpy(strlocal, llv6_ntoa(ipv6cp_gotoptions[0].ourid));",120,1,"
    sprintf(strspeed, ""%d"", baud_rate);
    strcpy(strlocal, llv6_ntoa(ipv6cp_gotoptions[0].ourid));
    strcpy(strremote, llv6_ntoa(ipv6cp_hisoptions[0].hisid));

"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\netif\ppp\ipv6cp.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\netif\ppp\ipv6cp.c,"strcpy(strremote, llv6_ntoa(ipv6cp_hisoptions[0].hisid));",120,1,"    sprintf(strspeed, ""%d"", baud_rate);
    strcpy(strlocal, llv6_ntoa(ipv6cp_gotoptions[0].ourid));
    strcpy(strremote, llv6_ntoa(ipv6cp_hisoptions[0].hisid));

    argv[0] = script;
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\os\str_arch.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\os\str_arch.c,"return strcpy(out, in);",120,1,"char *os_strcpy(char *out, const char *in)
{
    return strcpy(out, in);
}

"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_common\tuya_main.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_common\tuya_main.c,"strcpy(init_param.sys_env, TARGET_PLATFORM);",120,1,"    TY_INIT_PARAMS_S init_param = {0};
    init_param.init_db = FALSE;
    strcpy(init_param.sys_env, TARGET_PLATFORM);
    TUYA_CALL_ERR_LOG(tuya_iot_init_params(NULL, &init_param));

"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_os_adapter\src\driver\tuya_os_adapt_bt.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_os_adapter\src\driver\tuya_os_adapt_bt.c,"strcpy(name, (char *)buffer);",120,1,"            if (GAP_AD_TYPE_COMPLETE_NAME == type) {
                buffer[length - 1] = '\0';
                strcpy(name, (char *)buffer);
                //PR_DEBUG(""GAP_ADTYPE_LOCAL_NAME_XXX: %s\n\r"", buffer);
                return OPRT_OS_ADAPTER_OK;
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_os_adapter\src\driver\tuya_os_adapt_bt.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\tuya_os_adapter\src\driver\tuya_os_adapt_bt.c,"strcpy(ble_scan_info->name, name);",120,1,"    if (ble_scan_found) {
        memcpy(ble_scan_info->bd_addr, recv_adv->adv_addr, 6);
        strcpy(ble_scan_info->name, name);
        ble_scan_info->channel = 0;
        ble_scan_info->rssi = recv_adv->rssi;
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_app\light_control.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_app\light_control.c,"strcpy((CHAR_T*)&tLightCtrlData.tColorOrigin.ucColorStr, cHSVTemp);",120,1,"    vNum2Str(4, usVTemp, 5, cStrTemp);
    strcat(cHSVTemp, cStrTemp);
    strcpy((CHAR_T*)&tLightCtrlData.tColorOrigin.ucColorStr, cHSVTemp);
    PR_DEBUG(""default color origin string %s"", tLightCtrlData.tColorOrigin.ucColorStr);
    tLightCtrlData.tColorOrigin.usHue = usHTemp;
"
2021\univ-csProject\DB+C_POS Implement\res_pos.c,Dataset Download,../../Dataset Download/2021\univ-csProject\DB+C_POS Implement\res_pos.c,"strcpy(q_menuPrice,row[i]);",120,1,"		row = mysql_fetch_row(res);
		for(i=0;i<fields;i++)
			strcpy(q_menuPrice,row[i]);
	}
	memset(query, 0, sizeof(query));
"
