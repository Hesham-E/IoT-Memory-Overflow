GithubID,Year,FullPath,Codesnippet,CWE,isTrueVulnerable,Codesnippet5,
2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_dropdown.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\src\lv_widgets\lv_dropdown.c,"strcat(ins_buf, ""\n"");",120,1,"    strcpy(ins_buf, option);
    if(pos < ext->option_cnt)
        strcat(ins_buf, ""\n"");
    _lv_txt_ins(ext->options, _lv_txt_encoded_get_char_id(ext->options, insert_pos), ins_buf);
    _lv_mem_buf_release(ins_buf);
",
2021\aws-edukit-example\components\esp-aws-iot\aws-iot-device-sdk-embedded-C\tests\unit\src\aws_iot_tests_unit_helper_functions.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-aws-iot\aws-iot-device-sdk-embedded-C\tests\unit\src\aws_iot_tests_unit_helper_functions.c,"strcat(des, ""a"");",120,0,"	for(i = 0; i < boundary - currLen - 1; i++) {
		//printf(""%d\n"", i);
		strcat(des, ""a"");
	}
	return ret;
",
2021\CircusESP01Lib\src\CircusESP01Lib.cpp,Dataset Download,../../Dataset Download/2021\CircusESP01Lib\src\CircusESP01Lib.cpp,"strcat(body, ""{\""Key\"":\""""); strcat(body, key);",120,1,"	for( int i = 0; i < sizeof(body);  ++i )
        	body[i] = (char)0;
    	strcat(body, ""{\""Key\"":\""""); strcat(body, key);
    	strcat(body, ""\"",\""Value\"":""); strcat(body, bufValue);
    	strcat(body, "",\""Token\"":\""""); strcat(body, _token); strcat(body, ""\""}"");
",
2021\CircusESP01Lib\src\CircusESP01Lib.cpp,Dataset Download,../../Dataset Download/2021\CircusESP01Lib\src\CircusESP01Lib.cpp,"strcat(body, ""\"",\""Value\"":""); strcat(body, bufValue);",120,1,"        	body[i] = (char)0;
    	strcat(body, ""{\""Key\"":\""""); strcat(body, key);
    	strcat(body, ""\"",\""Value\"":""); strcat(body, bufValue);
    	strcat(body, "",\""Token\"":\""""); strcat(body, _token); strcat(body, ""\""}"");
	int countBody = count(body);
",
2021\CircusESP01Lib\src\CircusESP01Lib.cpp,Dataset Download,../../Dataset Download/2021\CircusESP01Lib\src\CircusESP01Lib.cpp,"strcat(body, "",\""Token\"":\""""); strcat(body, _token); strcat(body, ""\""}"");",120,1,"    	strcat(body, ""{\""Key\"":\""""); strcat(body, key);
    	strcat(body, ""\"",\""Value\"":""); strcat(body, bufValue);
    	strcat(body, "",\""Token\"":\""""); strcat(body, _token); strcat(body, ""\""}"");
	int countBody = count(body);
	char countBodyCharArray[16];
",
2021\CircusESP01Lib\src\CircusESP01Lib.cpp,Dataset Download,../../Dataset Download/2021\CircusESP01Lib\src\CircusESP01Lib.cpp,"strcat(header5, countBodyCharArray); strcat(header5, ""\r\n"");",120,1,"	char countBodyCharArray[16];
	itoa(countBody, countBodyCharArray, 10);
	strcat(header5, countBodyCharArray); strcat(header5, ""\r\n"");
    	int messageLength = count(requestLine) + count(header2) + count(header3) + count(header4) + count(header5) + 2 + count(body);

",header5 bounds exceeded
2021\cslim\test\libglusterfs\call-stub.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\call-stub.cpp.c,"extern char *strcat (char *__restrict __dest, const char *__restrict __src)",120,0,"

extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     __attribute__ ((__nothrow__ , __leaf__)) __attribute__ ((__nonnull__ (1, 2)));

",
2021\cslim\test\libglusterfs\logging.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\logging.cpp.c,"strcat (msg, str2);",120,1,"
        strcpy (msg, str1);
        strcat (msg, str2);

        ret = eh_save_history (this->history, msg);
",
2021\cslim\test\libglusterfs\options.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\options.cpp.c,"strcat (given_array, opt->value[i]);",120,0,"
        for (i = 0; (i < 64) && opt->value[i];) {
                strcat (given_array, opt->value[i]);
                if (((++i) < 64) &&
                    (opt->value[i]))
",
2021\cslim\test\libglusterfs\options.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\options.cpp.c,"strcat (given_array, "", "");",120,0,"                if (((++i) < 64) &&
                    (opt->value[i]))
                        strcat (given_array, "", "");
                else
                        strcat (given_array, ""."");
",
2021\cslim\test\libglusterfs\options.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\options.cpp.c,"strcat (given_array, ""."");",120,0,"                        strcat (given_array, "", "");
                else
                        strcat (given_array, ""."");
        }
        snprintf (errstr, len, ""option %s %s: '%s' is not valid ""
",
2021\cslim\test\libglusterfs\run.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\run.cpp.c,"strcat (buf, runner->argv[i]);",120,?,"                if (runner->argv[i] == ((void *)0))
                        break;
                strcat (buf, runner->argv[i]);
                strcat (buf, "" "");
        }
",
2021\cslim\test\libglusterfs\run.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\run.cpp.c,"strcat (buf, "" "");",120,?,"                        break;
                strcat (buf, runner->argv[i]);
                strcat (buf, "" "");
        }
        if (len > 0)
",
2021\cslim\test\libglusterfs\syscall.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\libglusterfs\syscall.cpp.c,"strcat(*newkey, key);",120,0,"                                                      ;
                strcpy(*newkey, ns);
                strcat(*newkey, key);
        } else {
                *newkey = gf_strdup(key);
",
2021\deneyapkart-arduino-core\libraries\07_BLE\src\GeneralUtils.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\07_BLE\src\GeneralUtils.cpp,"strcat(hex, tempBuf);",120,0,"	while (index < length) {
		sprintf(tempBuf, ""%.2x "", pData[index]);
		strcat(hex, tempBuf);
		if (isprint(pData[index])) {
			sprintf(tempBuf, ""%c"", pData[index]);
",
2021\deneyapkart-arduino-core\libraries\07_BLE\src\GeneralUtils.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\07_BLE\src\GeneralUtils.cpp,"strcat(ascii, tempBuf);",120,0,"			sprintf(tempBuf, ""."");
		}
		strcat(ascii, tempBuf);
		index++;
		if (index % 16 == 0) {
",
2021\deneyapkart-arduino-core\libraries\07_BLE\src\GeneralUtils.cpp,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\libraries\07_BLE\src\GeneralUtils.cpp,"strcat(hex, ""   "");",120,0,"	if (index %16 != 0) {
		while (index % 16 != 0) {
			strcat(hex, ""   "");
			index++;
		}
",
2021\enemy\enemy.c,Dataset Download,../../Dataset Download/2021\enemy\enemy.c,"strcat(output, tmp);",120,0,"  for (i=0;i<strlen(p);i++) {
    sprintf(tmp, ""%02x"", p[i]);
    strcat(output, tmp);
  }
  return output;
",
2021\ESP32WiFiSnifferApp\ESP32WiFiSnifferApp\src\interactNTP.cpp,Dataset Download,../../Dataset Download/2021\ESP32WiFiSnifferApp\ESP32WiFiSnifferApp\src\interactNTP.cpp,"strcat( buf, ""."" );",120,1,"    }

    strcat( buf, ""."" );

    ms_frac = (uint64_t) tv.tv_usec / 1000LL;
",buf can be a null ptr
2021\ESP32WiFiSnifferApp\ESP32WiFiSnifferApp\src\interactNTP.cpp,Dataset Download,../../Dataset Download/2021\ESP32WiFiSnifferApp\ESP32WiFiSnifferApp\src\interactNTP.cpp,"strcat( buf, arr_ms_frac );",120,1,"    char arr_ms_frac[4] = {0};
    strcpy( arr_ms_frac, uint64_to_string( ms_frac ).c_str() );
    strcat( buf, arr_ms_frac );

} // getTextFormatTimeinMilliseconds
",buf can be a null ptr
2021\ESP32WiFiSnifferApp\ESP32WiFiSnifferApp\src\interactNTP.cpp,Dataset Download,../../Dataset Download/2021\ESP32WiFiSnifferApp\ESP32WiFiSnifferApp\src\interactNTP.cpp,"strcat( buf, arr_us_frac );",120,1,"    char arr_us_frac[4] = {0};
    strcpy( arr_us_frac, uint64_to_string( us_frac ).c_str() );
    strcat( buf, arr_us_frac );

} // getTextFormatTimeinMicroseconds
",buf can be a null ptr
2021\ESP32WiFiSnifferApp\ESP32WiFiSnifferApp\src\interactSD.cpp,Dataset Download,../../Dataset Download/2021\ESP32WiFiSnifferApp\ESP32WiFiSnifferApp\src\interactSD.cpp,"strcat( dataMessage, uint32_to_string( data.timestamp ).c_str() );",120,?,"    char dataMessage[50] = """";

    strcat( dataMessage, uint32_to_string( data.timestamp ).c_str() ); 
    strcat( dataMessage, "","" );  

",
2021\ESP32WiFiSnifferApp\ESP32WiFiSnifferApp\src\interactSD.cpp,Dataset Download,../../Dataset Download/2021\ESP32WiFiSnifferApp\ESP32WiFiSnifferApp\src\interactSD.cpp,"strcat( dataMessage, "","" );",120,0,"
    strcat( dataMessage, uint32_to_string( data.timestamp ).c_str() ); 
    strcat( dataMessage, "","" );  

    // This char array must be able to accomodate a C-string.
",
2021\ESP32WiFiSnifferApp\ESP32WiFiSnifferApp\src\interactSD.cpp,Dataset Download,../../Dataset Download/2021\ESP32WiFiSnifferApp\ESP32WiFiSnifferApp\src\interactSD.cpp,"strcat( dataMessage, forPrintingMAC );",120,0,"    char forPrintingMAC[18] = {0};
    MACnumberTostring( forPrintingMAC, data.mac );
    strcat( dataMessage, forPrintingMAC ); 

    strcat( dataMessage, "","" ); 
",
2021\ESP32WiFiSnifferApp\ESP32WiFiSnifferApp\src\interactSD.cpp,Dataset Download,../../Dataset Download/2021\ESP32WiFiSnifferApp\ESP32WiFiSnifferApp\src\interactSD.cpp,"strcat( dataMessage, stringRSSI );",120,0,"    char stringRSSI[5] = {0};
    RSSITostring( stringRSSI, data.rssi );
    strcat( dataMessage, stringRSSI ); 

    strcat( dataMessage, ""\n"" );  
",
2021\ESP32WiFiSnifferApp\ESP32WiFiSnifferApp\src\interactSD.cpp,Dataset Download,../../Dataset Download/2021\ESP32WiFiSnifferApp\ESP32WiFiSnifferApp\src\interactSD.cpp,"strcat( dataMessage, ""\n"" );",120,0,"    strcat( dataMessage, stringRSSI ); 

    strcat( dataMessage, ""\n"" );  

    appendFile(SD, path_to_file, dataMessage);
",
2021\ESP32WiFiSnifferApp\ESP32WiFiSnifferApp\src\interactSD.cpp,Dataset Download,../../Dataset Download/2021\ESP32WiFiSnifferApp\ESP32WiFiSnifferApp\src\interactSD.cpp,"strcat( dataMessage, data.timestamp );",120,0,"    char dataMessage[100] = """";

    strcat( dataMessage, data.timestamp ); 
    strcat( dataMessage, "","" );  

",
2021\fusor-node-connector\src\NodeConnector.cpp,Dataset Download,../../Dataset Download/2021\fusor-node-connector\src\NodeConnector.cpp,"strcat((char *)_postUrl, ENDPOINT_NODE);",120,0,"  _postUrl = (const char *)new char[urlSize];
  strcpy((char *)_postUrl, _hubAddress);
  strcat((char *)_postUrl, ENDPOINT_NODE);
  strcat((char *)_postUrl, nodeId);
  strcat((char *)_postUrl, ENDPOINT_PARAM_BATCH);
",
2021\fusor-node-connector\src\NodeConnector.cpp,Dataset Download,../../Dataset Download/2021\fusor-node-connector\src\NodeConnector.cpp,"strcat((char *)_postUrl, nodeId);",120,0,"  strcpy((char *)_postUrl, _hubAddress);
  strcat((char *)_postUrl, ENDPOINT_NODE);
  strcat((char *)_postUrl, nodeId);
  strcat((char *)_postUrl, ENDPOINT_PARAM_BATCH);
}
",
2021\fusor-node-connector\src\NodeConnector.cpp,Dataset Download,../../Dataset Download/2021\fusor-node-connector\src\NodeConnector.cpp,"strcat((char *)_postUrl, ENDPOINT_PARAM_BATCH);",120,0,"  strcat((char *)_postUrl, ENDPOINT_NODE);
  strcat((char *)_postUrl, nodeId);
  strcat((char *)_postUrl, ENDPOINT_PARAM_BATCH);
}

",
2021\fusor-node-connector\src\SyncInOptions\SyncInOptions.cpp,Dataset Download,../../Dataset Download/2021\fusor-node-connector\src\SyncInOptions\SyncInOptions.cpp,"strcat(url, HUB_REQUEST_PATH);",120,0,"
    strcpy(url, (char *)baseUrl);
    strcat(url, HUB_REQUEST_PATH);

    uint8_t count = 0;
",
2021\fusor-node-connector\src\SyncInOptions\SyncInOptions.cpp,Dataset Download,../../Dataset Download/2021\fusor-node-connector\src\SyncInOptions\SyncInOptions.cpp,"strcat(url, (char *)(count++ ? ""&"" : ""?""));",120,0,"        if (strlen(fieldName) > 0)
        {
            strcat(url, (char *)(count++ ? ""&"" : ""?""));
            strcat(url, fieldName);
        }
",
2021\fusor-node-connector\src\SyncInOptions\SyncInOptions.cpp,Dataset Download,../../Dataset Download/2021\fusor-node-connector\src\SyncInOptions\SyncInOptions.cpp,"strcat(url, fieldName);",120,0,"        {
            strcat(url, (char *)(count++ ? ""&"" : ""?""));
            strcat(url, fieldName);
        }
    }
",
2021\fusor-state-machine\test\test.cpp,Dataset Download,../../Dataset Download/2021\fusor-state-machine\test\test.cpp,"strcat(_jsonBuff, json);",120,1,"{
  strcpy(_jsonBuff, ""{\""v\"":"");
  strcat(_jsonBuff, json);
  strcat(_jsonBuff, ""}"");
  deserializeJson(_doc, _jsonBuff);
",json size not checked
2021\fusor-state-machine\test\test.cpp,Dataset Download,../../Dataset Download/2021\fusor-state-machine\test\test.cpp,"strcat(_jsonBuff, ""}"");",120,0,"  strcpy(_jsonBuff, ""{\""v\"":"");
  strcat(_jsonBuff, json);
  strcat(_jsonBuff, ""}"");
  deserializeJson(_doc, _jsonBuff);
  return _doc[""v""];
",
2021\haas-mini-program\components\das\src\service\service_fscan.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\service\service_fscan.c,"strcat(path_tmp, ""/"");",120,1,"        strcpy(path_tmp, path);
        if (path[strlen(path) -1] != '/') {
            strcat(path_tmp, ""/"");
        }
        strcat(path_tmp, namelist[n]->d_name);
",path_tmp length is undefined
2021\haas-mini-program\components\das\src\service\service_fscan.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\service\service_fscan.c,"strcat(path_tmp, namelist[n]->d_name);",120,1,"            strcat(path_tmp, ""/"");
        }
        strcat(path_tmp, namelist[n]->d_name);
        
        _add_scan_path(path_tmp, 1);
",path_tmp length is undefined
2021\haas-mini-program\components\das\src\service\netfilter\domain_parser.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\das\src\service\netfilter\domain_parser.c,"strcat(name_buf, name_tmp);",120,1,"            if (dnsReadName(name_tmp, name_buf_len - strlen(name_buf) - 1,
                            subOff, payload, payloadLen) == 0) {
                strcat(name_buf, name_tmp);
            }

",name_tmp may be larger than name_buf
2021\haas-mini-program\engine\duktape_engine\be.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\be.c,"strcat(base, ""/"");",120,0,"            }
        }
        strcat(base, ""/"");
        strcat(base, p);
    }
",
2021\haas-mini-program\engine\duktape_engine\be.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\be.c,"strcat(base, p);",120,0,"        }
        strcat(base, ""/"");
        strcat(base, p);
    }

",
2021\haas-mini-program\engine\lite_engine\core\be.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\lite_engine\core\be.c,"strcat(path, "".js"");",120,0,"    fd = jse_open(path, O_RDONLY);
    if (fd == -1) {
        strcat(path, "".js"");
        fd = jse_open(path, O_RDONLY);
    }
",
2021\haas-mini-program\engine\lite_engine\core\be_utils.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\lite_engine\core\be_utils.c,"strcat(fullPath, ""/package.json"");",120,0,"    }

    strcat(fullPath, ""/package.json"");

    amp_debug(MOD_STR, ""%s %d try open %s  \n"", __FUNCTION__, __LINE__, fullPath);
",
2021\netifyd\src\nd-flow.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-flow.cpp,"strcat(p, "".cap"");",120,?,"    p += ND_FLOW_CAPTURE_SUB_OFFSET;
    for (int i = 0; i < 4; i++, p += 2) sprintf(p, ""%02hhx"", digest[i]);
    strcat(p, "".cap"");

    pcap_dumper_t *pcap_dumper = pcap_dump_open(pcap, capture_filename);
",
2021\netifyd\src\nd-util.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-util.cpp,"strcat(b, ((byte & i) == i) ? ""1"" : ""0"");",120,0,"    b[0] = '\0';
    for (i = 0x80000000; i > 0; i >>= 1)
        strcat(b, ((byte & i) == i) ? ""1"" : ""0"");

    nd_debug_printf(""%s"", b);
",
2021\pear\src\sdp_attribute.c,Dataset Download,../../Dataset Download/2021\pear\src\sdp_attribute.c,"strcat(sdp_attribute->attributes, attribute);",120,0,"  va_end(argptr);

  strcat(sdp_attribute->attributes, attribute);
  strcat(sdp_attribute->attributes, ""\\r\\n"");

",
2021\pear\src\sdp_attribute.c,Dataset Download,../../Dataset Download/2021\pear\src\sdp_attribute.c,"strcat(sdp_attribute->attributes, ""\\r\\n"");",120,0,"
  strcat(sdp_attribute->attributes, attribute);
  strcat(sdp_attribute->attributes, ""\\r\\n"");

  return 0;
",
2021\Projekt-IoT-AiR\src\mqtt.cpp,Dataset Download,../../Dataset Download/2021\Projekt-IoT-AiR\src\mqtt.cpp,"strcat(completedTopic, ""/"");",120,0,"    memset(completedTopic, 0, sizeof(completedTopic)); // Zero just in case.
    memcpy(completedTopic, ns, strlen(ns));            // Prepend namespace.
    strcat(completedTopic, ""/"");                       // Append slash.
    strcat(completedTopic, topic);                     // Append topic.

",
2021\Projekt-IoT-AiR\src\mqtt.cpp,Dataset Download,../../Dataset Download/2021\Projekt-IoT-AiR\src\mqtt.cpp,"strcat(completedTopic, topic);",120,1,"    memcpy(completedTopic, ns, strlen(ns));            // Prepend namespace.
    strcat(completedTopic, ""/"");                       // Append slash.
    strcat(completedTopic, topic);                     // Append topic.

    // Prepare data.
",topic may be larger than completedTopic
2021\secure-iot-analysis-ecoin-platform\collector\collector.c,Dataset Download,../../Dataset Download/2021\secure-iot-analysis-ecoin-platform\collector\collector.c,"strcat(filename, c);",120,0,"	filename = malloc(strlen(prefix)+strlen(c)+1);
	strcpy(filename,prefix);
	strcat(filename, c);
	if (rename(c,filename) == 0){
		printf(""The coin %s has been moved to %s\n"",c,filename);
",
2021\secure-iot-analysis-ecoin-platform\collector\collector.c,Dataset Download,../../Dataset Download/2021\secure-iot-analysis-ecoin-platform\collector\collector.c,"strcat(filename,ep->d_name);",120,0,"			filename = malloc(strlen(prefix)+strlen(ep->d_name)+1);
			strcpy(filename,prefix);
			strcat(filename,ep->d_name);
			//printf(""Reading coin from file: %s\n"",filename);
			addCoinToWallet(filename);
",
2021\secure-iot-analysis-ecoin-platform\collector\collector.c,Dataset Download,../../Dataset Download/2021\secure-iot-analysis-ecoin-platform\collector\collector.c,"strcat(outputFilename,filename);",120,0,"	outputFilename = malloc(1+strlen(COIN_DIR)+length/2);
	strcpy(outputFilename,COIN_DIR);
	strcat(outputFilename,filename);
	writeFile(outputFilename, buffer, length);

",file has missing entires
2021\secure-iot-analysis-ecoin-platform\collector\collector.c,Dataset Download,../../Dataset Download/2021\secure-iot-analysis-ecoin-platform\collector\collector.c,"strcat(source,&argv[1][2]);",120,0,"				source = calloc(1,newLength);
				strcpy(source,prefix);
				strcat(source,&argv[1][2]);
				COLLECTOR_INTERFACE = source;
				printf(""Collector set to receive data on %s\n"",COLLECTOR_INTERFACE);
",file has missing entires
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_control.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_app\light_control.c,"strcat(hsv_temp, str_temp);",120,0,"
    tuya_num_to_str(4, s_temp, 5, str_temp);
    strcat(hsv_temp, str_temp);

    tuya_num_to_str(4, v_temp, 5, str_temp);
",
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\ftp\ftpd.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\app\ftp\ftpd.c,"strcat(buffer, ""\r\n"");",120,0,"    vsprintf(buffer, msg, arg);
    va_end(arg);
    strcat(buffer, ""\r\n"");
    len = strlen(buffer);
    if (sfifo_space(&fsm->fifo) < len)
",
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\joint_up\role_launch.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\joint_up\role_launch.c,"strcat((char*)bssid_info.psk, (char*)temp);",120,1,"	{
		sprintf((char*)temp, ""%02x"", psk[i]);
		strcat((char*)bssid_info.psk, (char*)temp);
	}
	if (g_sta_param_ptr)
",
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\apps\httpd\makefsdata\makefsdata.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\apps\httpd\makefsdata\makefsdata.c,"strcat(intbuf, ""\r\n"");",120,0,"
    _itoa(content_len, intbuf, 10);
    strcat(intbuf, ""\r\n"");
    cur_len = strlen(intbuf);
    written += file_put_ascii(data_file, intbuf, cur_len, &i);
",
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\apps\httpd\makefsdata\makefsdata.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\apps\httpd\makefsdata\makefsdata.c,"strcat(modbuf, ""\r\n"");",120,0,"
    modbuf[0] = 0;
    strcat(modbuf, ""\r\n"");
    cur_len = strlen(modbuf);
    written += file_put_ascii(data_file, modbuf, cur_len, &i);
",
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\core\memp.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\core\memp.c,"strcat(errstr, desc->desc);",120,?,"    if (m[k] != 0xcd) {
      char errstr[128] = ""detected memp overflow in pool "";
      strcat(errstr, desc->desc);
      LWIP_ASSERT(errstr, 0);
    }
",
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\tree.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\tree.h,"extern tree fold_builtin_strcat (location_t, tree, tree, tree);",120,?,"extern tree fold_builtin_strcpy (location_t, tree, tree, tree, tree);
extern tree fold_builtin_strncpy (location_t, tree, tree, tree, tree, tree);
extern tree fold_builtin_strcat (location_t, tree, tree, tree);
extern tree fold_builtin_memory_chk (location_t, tree, tree, tree, tree, tree, tree, bool,
				     enum built_in_function);
",
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_app\light_control.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_app\light_control.c,"strcat(cHSVTemp, cStrTemp);",120,?,"
    vNum2Str(4, usSTemp, 5, cStrTemp);
    strcat(cHSVTemp, cStrTemp);

    vNum2Str(4, usVTemp, 5, cStrTemp);
",
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\platforms\bk7231t\bk7231t_os\beken378\driver\usb\src\systems\none\afs\board.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\platforms\bk7231t\bk7231t_os\beken378\driver\usb\src\systems\none\afs\board.c,"strcat(pMsg, pString);",120,0,"        return FALSE;
    }
    strcat(pMsg, pString);
    return TRUE;
}
",
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\platforms\bk7231t\bk7231t_os\beken378\driver\usb\src\systems\none\afs\board.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\platforms\bk7231t\bk7231t_os\beken378\driver\usb\src\systems\none\afs\board.c,"strcat(fmt, format);",120,0,"    fmt[0] = '%';
    fmt[1] = (char)0;
    strcat(fmt, format);
    sprintf(number, fmt, dwNumber);

",
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\platforms\bk7231t\bk7231t_os\beken378\func\joint_up\role_launch.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\platforms\bk7231t\bk7231t_os\beken378\func\joint_up\role_launch.c,"strcat(bssid_info.psk, temp);",120,?,"	{
		sprintf(temp, ""%02x"", psk[i]);
		strcat(bssid_info.psk, temp);
	}
	os_strcpy(bssid_info.pwd, g_rl_sta_key);
",
2021\univ-csProject\DB+C_POS Implement\res_pos.c,Dataset Download,../../Dataset Download/2021\univ-csProject\DB+C_POS Implement\res_pos.c,"strcat(desc, src);",120,1,"void append_query(char *desc, char *src)
{
	strcat(desc, src);
}
void append_query_str(char *desc, char *src)
",
2021\univ-csProject\DB+C_POS Implement\res_pos.c,Dataset Download,../../Dataset Download/2021\univ-csProject\DB+C_POS Implement\res_pos.c,"strcat(desc, ""'"");",120,1,"void append_query_str(char *desc, char *src)
{
	strcat(desc, ""'"");
	strcat(desc, src);
	strcat(desc, ""'"");
",
2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\tsch-schedule.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\tsch-schedule.c,"strcat(buffer, ""Tx|"");",120,0,"  buffer[0] = '\0';
  if(link_options & LINK_OPTION_TX) {
    strcat(buffer, ""Tx|"");
  }
  if(link_options & LINK_OPTION_RX) {
",
2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\tsch-schedule.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\tsch-schedule.c,"strcat(buffer, ""Rx|"");",120,0,"  }
  if(link_options & LINK_OPTION_RX) {
    strcat(buffer, ""Rx|"");
  }
  if(link_options & LINK_OPTION_SHARED) {
",
2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\tsch-schedule.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\mac\tsch\tsch-schedule.c,"strcat(buffer, ""Sh|"");",120,0,"  }
  if(link_options & LINK_OPTION_SHARED) {
    strcat(buffer, ""Sh|"");
  }
  length = strlen(buffer);
",
2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\antelope\storage-cfs.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\storage\antelope\storage-cfs.c,"strcat(dest, suffix);",120,1,"{
  strcpy(dest, prefix);
  strcat(dest, suffix);
}

",
2021\x-cube-subg2\Utilities\PC_Software\wpcapslip6\wpcapslip6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Utilities\PC_Software\wpcapslip6\wpcapslip6.c,"strcat(t, dev);",120,1,"	char t[32];
	strcpy(t, ""/dev/"");
	strcat(t, dev);
	return open(t, flags);
}
",
2021\x-cube-subg2\Utilities\PC_Software\wpcapslip6\wpcapslip6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Utilities\PC_Software\wpcapslip6\wpcapslip6.c,"strcat(tmpaddr,""/64"");",120,0,"		if(substr == NULL){ // A prefix length is not specified.
			// Use a 64 bit prefix
			strcat(tmpaddr,""/64"");
			if (timestamp) stamptime();
			execProcess(NULL,""netsh interface ipv6 add route %s \""%s\"""",tmpaddr,if_name);
",
2021\x-cube-subg2\Utilities\PC_Software\wpcapslip6\wpcapslip6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Utilities\PC_Software\wpcapslip6\wpcapslip6.c,"strcat(str_addr,""/"");",120,1,"    char * substr = strtok(NULL,""/"");
    if(substr!=NULL){   // Add the prefix length.
        strcat(str_addr,""/"");
        strcat(str_addr,substr);
    }
",str_addr length based on undefined variable
2021\x-cube-subg2\Utilities\PC_Software\wpcapslip6\wpcapslip6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Utilities\PC_Software\wpcapslip6\wpcapslip6.c,"strcat(str_addr,substr);",120,1,"    if(substr!=NULL){   // Add the prefix length.
        strcat(str_addr,""/"");
        strcat(str_addr,substr);
    }
    strcpy(ipaddr, str_addr);
",str_addr length based on undefined variable
