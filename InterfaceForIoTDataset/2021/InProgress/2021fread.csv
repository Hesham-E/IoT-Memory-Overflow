GithubID,Year,FullPath,Codesnippet,CWE,isTrueVulnerable,Codesnippet5
2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\tests\lv_test_assert.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\tests\lv_test_assert.c,"size_t rcnt = fread(header, 1, 8, fp);",120,1,"    if (!fp)
        lv_test_exit(""[read_png_file] File %s could not be opened for reading"", file_name);
    size_t rcnt = fread(header, 1, 8, fp);
    if (rcnt != 8 || png_sig_cmp((png_const_bytep)header, 0, 8))
        lv_test_exit(""[read_png_file] File %s is not recognized as a PNG file"", file_name);
"
2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\tests\lv_test_main.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\core2forAWS\tft\lvgl\lvgl\tests\lv_test_main.c,"*br = fread(buf, 1, btr, fp);",120,1,"
    FILE * fp = *((FILE **) file_p);
    *br = fread(buf, 1, btr, fp);
    return (*br <= 0) ? LV_FS_RES_UNKNOWN : LV_FS_RES_OK;
}
"
2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\hal\hal_linux_kit_hid.c,Dataset Download,../../Dataset Download/2021\aws-edukit-example\components\esp-cryptoauthlib\cryptoauthlib\lib\hal\hal_linux_kit_hid.c,"bytes_read = fread(&rxdata[total_bytes_read], sizeof(uint8_t), 1,",120,?,"    do
    {
        bytes_read = fread(&rxdata[total_bytes_read], sizeof(uint8_t), 1,
                           pHid->kits[cfg->atcahid.idx].read_handle);
        if (ferror(pHid->kits[cfg->atcahid.idx].read_handle) != 0)
"
2021\c-vertices-sdk\examples\unix\main.c,Dataset Download,../../Dataset Download/2021\c-vertices-sdk\examples\unix\main.c,"bytes_read = fread(alice_account.private_key, 1, 64, f);",120,?,"        LOG_INFO(""🔑 Loading private key from: %s"", CONFIG_PATH ""private_key.bin"");

        bytes_read = fread(alice_account.private_key, 1, 64, f);
        fclose(f);
    }
"
2021\cslim\test\sqlite312-cpp\shell.cpp.c,Dataset Download,../../Dataset Download/2021\cslim\test\sqlite312-cpp\shell.cpp.c,"if( pBuf && 1==fread(pBuf, nIn, 1, in) ){",120,?,"  rewind(in);
  pBuf = sqlite3_malloc64( nIn );
  if( pBuf && 1==fread(pBuf, nIn, 1, in) ){
    sqlite3_result_blob(context, pBuf, nIn, sqlite3_free);
  }else{
"
2021\deneyapkart-arduino-core\tools\sdk\include\app_trace\esp_app_trace.h,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\tools\sdk\include\app_trace\esp_app_trace.h,"size_t esp_apptrace_fread(esp_apptrace_dest_t dest, void *ptr, size_t size, size_t nmemb, void *stream);",120,?," * @return Number of read items. See fread for details.
 */
size_t esp_apptrace_fread(esp_apptrace_dest_t dest, void *ptr, size_t size, size_t nmemb, void *stream);

/**
"
2021\deneyapkart-arduino-core\tools\sdk\include\json\tests\common.h,Dataset Download,../../Dataset Download/2021\deneyapkart-arduino-core\tools\sdk\include\json\tests\common.h,"read_chars = fread(content, sizeof(char), (size_t)length, file);",120,?,"
    /* read the file into memory */
    read_chars = fread(content, sizeof(char), (size_t)length, file);
    if ((long)read_chars != length)
    {
"
2021\enemy\servertor.c,Dataset Download,../../Dataset Download/2021\enemy\servertor.c,"if( 1!=fread( buffer , lSize, 1 , fp) ){",120,?,"                }
                /* copy the file into the buffer */
                if( 1!=fread( buffer , lSize, 1 , fp) ){
                  fclose(fp);
                  free(buffer);
"
2021\haas-mini-program\adapter\include\amp_fs.h,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\include\amp_fs.h,"int amp_fread(void *buff, unsigned int size, unsigned int count, void *stream);",120,?," *          of the error.
 */
int amp_fread(void *buff, unsigned int size, unsigned int count, void *stream);

/**
"
2021\haas-mini-program\adapter\platform\aos-haas100\amp_fs.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\aos-haas100\amp_fs.c,"int amp_fread(void *buff, unsigned int size, unsigned int count, void *stream)",120,?,"}

int amp_fread(void *buff, unsigned int size, unsigned int count, void *stream)
{
    return fread(buff, (size_t)size, (size_t)count, (FILE *)stream);
"
2021\haas-mini-program\adapter\platform\aos-haas100\amp_fs.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\aos-haas100\amp_fs.c,"return fread(buff, (size_t)size, (size_t)count, (FILE *)stream);",120,?,"int amp_fread(void *buff, unsigned int size, unsigned int count, void *stream)
{
    return fread(buff, (size_t)size, (size_t)count, (FILE *)stream);
}

"
2021\haas-mini-program\adapter\platform\linux\amp_system.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\adapter\platform\linux\amp_system.c,"ret = fread(&output, sizeof(unsigned int), 1, handle);",120,?,"        return 0;
    }
    ret = fread(&output, sizeof(unsigned int), 1, handle);
    if (ret != 1) {
        printf(""fread error: %d\n"", (int)ret);
"
2021\haas-mini-program\components\ota\hal\ota_hal_ctrl.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\ota\hal\ota_hal_ctrl.c,"ret = ota_fread(tmp_buf, read_len, 1, fptr);",120,?,"    while(offset < param->len) {
        (param->len - offset >= sizeof(tmp_buf)) ? (read_len = sizeof(tmp_buf)) : (read_len = param->len - offset);
        ret = ota_fread(tmp_buf, read_len, 1, fptr);
        if (ret < 0) {
            OTA_LOG_E(""verify fs file read file failed\r\n"");
"
2021\haas-mini-program\components\ota\hal\ota_hal_fs_ctrl.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\ota\hal\ota_hal_fs_ctrl.c,"OTA_WEAK int ota_fread(const void *ptr, unsigned int size, unsigned int nmemb, void *stream)",120,?,"}

OTA_WEAK int ota_fread(const void *ptr, unsigned int size, unsigned int nmemb, void *stream)
{
    int ret = -1;
"
2021\haas-mini-program\components\ota\hal\ota_hal_fs_ctrl.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\ota\hal\ota_hal_fs_ctrl.c,"ret = amp_fread(ptr, size, nmemb, (FILE*)stream);",120,?,"    int ret = -1;
    if((ptr != NULL) && (stream != NULL)) {
        ret = amp_fread(ptr, size, nmemb, (FILE*)stream);
    }
    return ret;
"
2021\haas-mini-program\components\ota\hal\ota_hal_fs_plat.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\ota\hal\ota_hal_fs_plat.c,"read_len = ota_fread(read_buf, 1, sizeof(read_buf) - 1, fptr);",120,?,"        else {
            memset(read_buf, 0x00, sizeof(read_buf));
            read_len = ota_fread(read_buf, 1, sizeof(read_buf) - 1, fptr);
            if(read_len > 13) {
                pos = strstr(read_buf, ""\""version\"":"");
"
2021\haas-mini-program\components\ota\include\ota_import.h,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\ota\include\ota_import.h,"int ota_fread(const void *ptr, unsigned int size, unsigned int nmemb, void *stream);",120,?,"void *ota_fopen(const char *filename, const char *mode);
int ota_fwrite(const void *ptr, unsigned int size, unsigned int nmemb, void *stream);
int ota_fread(const void *ptr, unsigned int size, unsigned int nmemb, void *stream);
int ota_reboot_module(char *module_name);

"
2021\haas-mini-program\components\ota\ota_agent\tools\upack_data_file.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\ota\ota_agent\tools\upack_data_file.c,"read_len = ota_fread(&pack_head, 1, sizeof(data_file_pack_head_t), read_fd);",120,?,"       read_fd = ota_fopen(pack_file, ""rb"");
       if(read_fd != NULL) {
           read_len = ota_fread(&pack_head, 1, sizeof(data_file_pack_head_t), read_fd);
           OTA_LOG_E(""read_len = %d\r\n"", read_len);
           if(read_len != sizeof(data_file_pack_head_t) ||
"
2021\haas-mini-program\components\ota\ota_agent\tools\upack_data_file.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\ota\ota_agent\tools\upack_data_file.c,"read_len = ota_fread(&file_info, 1, sizeof(data_file_infor_t), read_fd);",120,?,"                ret = 0;
                for(i = 0; i < pack_head.file_numb; i++) {
                    read_len = ota_fread(&file_info, 1, sizeof(data_file_infor_t), read_fd);
                    if(read_len != sizeof(data_file_infor_t)) {
                        ret = -1;
"
2021\haas-mini-program\components\ota\ota_agent\tools\upack_data_file.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\ota\ota_agent\tools\upack_data_file.c,"read_len = ota_fread(&tmp_file_name[upack_path_len], 1, tmp_file_name_len, read_fd);",120,?,"                        }
                        else {
                            read_len = ota_fread(&tmp_file_name[upack_path_len], 1, tmp_file_name_len, read_fd);
                            if(read_len != tmp_file_name_len) {
                                ret = -1;
"
2021\haas-mini-program\components\ota\ota_agent\tools\upack_data_file.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\components\ota\ota_agent\tools\upack_data_file.c,"read_len = ota_fread(tmp_buf, 1, tmp_read_len, read_fd);",120,?,"                               while(has_read_len < file_info.file_size) {
                                   file_info.file_size - has_read_len > sizeof(tmp_buf) ? (tmp_read_len = sizeof(tmp_buf)) : (tmp_read_len = file_info.file_size - has_read_len);
                                   read_len = ota_fread(tmp_buf, 1, tmp_read_len, read_fd);
                                   if(read_len != tmp_read_len) {
                                       ota_fclose(write_fd);
"
2021\haas-mini-program\engine\duktape_engine\be.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\be.c,"amp_fread(pkg_data, 1, sb.st_size, fp);",120,?,"
    void *fp = amp_fopen(resolved_path, ""r"");
    amp_fread(pkg_data, 1, sb.st_size, fp);
    amp_fclose(fp);
    pkg_data[sb.st_size] = '\0';
"
2021\haas-mini-program\engine\duktape_engine\be.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\be.c,"amp_fread(data, 1, len, fp);",120,?,"    }

    amp_fread(data, 1, len, fp);
    duk_push_lstring(ctx, data, len);
    amp_free(data);
"
2021\haas-mini-program\engine\duktape_engine\be.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\be.c,"amp_fread(file_data, 1, sb.st_size, fp);",120,?,"
    void *fp = amp_fopen(filename, ""r"");
    amp_fread(file_data, 1, sb.st_size, fp);
    amp_fclose(fp);
    duk_push_pointer(duk_ctx, (void *)file_data);
"
2021\haas-mini-program\engine\duktape_engine\addons\utils\builtin\module_builtin.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\addons\utils\builtin\module_builtin.c,"amp_fread(json_data + strlen(GLOBAL_APPCONFIG_STRING_1), 1, len, json_fd);",120,?,"    amp_fseek(json_fd, 0, HAL_SEEK_SET, &curpos);
    strncpy(json_data, GLOBAL_APPCONFIG_STRING_1, global_config_len);
    amp_fread(json_data + strlen(GLOBAL_APPCONFIG_STRING_1), 1, len, json_fd);
    strcpy(json_data + strlen(GLOBAL_APPCONFIG_STRING_1) + len, GLOBAL_APPCONFIG_STRING_2);

"
2021\haas-mini-program\engine\duktape_engine\addons\utils\fs\module_fs.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\addons\utils\fs\module_fs.c,"len = amp_fread(buf, 1, size, fp);",120,?,"    }

    len = amp_fread(buf, 1, size, fp);
    if (len > 0) {
        buf[len] = 0;
"
2021\haas-mini-program\engine\duktape_engine\startup\page_entry.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\engine\duktape_engine\startup\page_entry.c,"amp_fread(json_data, 1, file_len, json_fd);",120,?,"    }
    amp_fseek(json_fd, 0, SEEK_SET, &curpos);
    amp_fread(json_data, 1, file_len, json_fd);
    amp_fclose(json_fd);

"
2021\haas-mini-program\services\board_mgr\board_mgr.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\services\board_mgr\board_mgr.c,"amp_fread(json_data, 1, len, json_fd);",120,?,"    amp_fseek(json_fd, 0, HAL_SEEK_SET, &curpos);
    // amp_debug(MOD_STR, ""jse_read"");
    amp_fread(json_data, 1, len, json_fd);
    // amp_debug(MOD_STR, ""jse_read, data: %s"", json_data);
    amp_fclose(json_fd);
"
2021\haas-mini-program\utils\mbedtls\library\ctr_drbg.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\ctr_drbg.c,"if( fread( buf, 1, n, f ) != n )",120,?,"    }

    if( fread( buf, 1, n, f ) != n )
    {
        fclose( f );
"
2021\haas-mini-program\utils\mbedtls\library\entropy_poll.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\entropy_poll.c,"read_len = fread( output, 1, len, file );",120,?,"        return( MBEDTLS_ERR_ENTROPY_SOURCE_FAILED );

    read_len = fread( output, 1, len, file );
    if( read_len != len )
    {
"
2021\haas-mini-program\utils\mbedtls\library\md.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\md.c,"while( ( n = fread( buf, 1, sizeof( buf ), f ) ) > 0 )",120,?,"    md_info->starts_func( ctx.md_ctx );

    while( ( n = fread( buf, 1, sizeof( buf ), f ) ) > 0 )
        md_info->update_func( ctx.md_ctx, buf, n );

"
2021\haas-mini-program\utils\mbedtls\library\pkparse.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\pkparse.c,"if( fread( *buf, 1, *n, f ) != *n )",120,?,"    }

    if( fread( *buf, 1, *n, f ) != *n )
    {
        fclose( f );
"
2021\haas-mini-program\utils\mbedtls\library\platform.c,Dataset Download,../../Dataset Download/2021\haas-mini-program\utils\mbedtls\library\platform.c,"if( ( n = fread( buf, 1, buf_len, file ) ) != buf_len )",120,?,"        return -1;

    if( ( n = fread( buf, 1, buf_len, file ) ) != buf_len )
    {
        fclose( file );
"
2021\IOTProject\Maintain\readHum\readHum.c,Dataset Download,../../Dataset Download/2021\IOTProject\Maintain\readHum\readHum.c,"fread(temp, sizeof(char), 2, FD);",120,?,"  }
  //change 2 to other val if you want read more values on yout txt file
  fread(temp, sizeof(char), 2, FD);
  

"
2021\netifyd\src\nd-fhc.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-fhc.cpp,"if (fread(digest, SHA1_DIGEST_LENGTH * 2, 1, hf) != 1) break;",120,?,"            uint8_t digest[SHA1_DIGEST_LENGTH * 2];

            if (fread(digest, SHA1_DIGEST_LENGTH * 2, 1, hf) != 1) break;

            digest_lower.assign((const char *)digest, SHA1_DIGEST_LENGTH);
"
2021\netifyd\src\nd-util.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-util.cpp,"if (fread((void *)_uuid, 1, length, fh) != length) {",120,?,"    }

    if (fread((void *)_uuid, 1, length, fh) != length) {
        fclose(fh);
        nd_printf(""Error reading uuid: %s: %s\n"", path, strerror(errno));
"
2021\netifyd\src\nd-util.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-util.cpp,"if (fread((void *)&seed, sizeof(unsigned int), 1, fh) != 1)",120,?,"        nd_printf(""Error opening random device: %s\n"", strerror(errno));
    else {
        if (fread((void *)&seed, sizeof(unsigned int), 1, fh) != 1)
            nd_printf(""Error reading from random device: %s\n"", strerror(errno));
        fclose(fh);
"
2021\netifyd\src\nd-util.cpp,Dataset Download,../../Dataset Download/2021\netifyd\src\nd-util.cpp,"if ((bytes = fread(buffer, 1, sizeof(buffer), ph)) > 0)",120,?,"
        do {
            if ((bytes = fread(buffer, 1, sizeof(buffer), ph)) > 0)
                output.append(buffer, bytes);
        }
"
2021\pear\examples\local_file\main.c,Dataset Download,../../Dataset Download/2021\pear\examples\local_file\main.c,"fread(buf, 1, sizeof(buf), fp);",120,?,"
  uint8_t buf[1024*1024*5] = {0};
  fread(buf, 1, sizeof(buf), fp);
  fclose(fp);
  static unsigned long timestamp = 0;
"
2021\pear\examples\local_file\main.c,Dataset Download,../../Dataset Download/2021\pear\examples\local_file\main.c,"fread(remote_sdp, sizeof(remote_sdp), 1, fp);",120,?,"  FILE *fp = fopen(""remote_sdp.txt"", ""r"");
  if(fp != NULL ) { 
    fread(remote_sdp, sizeof(remote_sdp), 1, fp);
    peer_connection_set_remote_description(&peer_connection, remote_sdp);  
    fclose(fp);  
"
2021\Powergy-Medusa-FW-Basic-Auth\lib\ArduinoJson\extras\fuzzing\reproducer.cpp,Dataset Download,../../Dataset Download/2021\Powergy-Medusa-FW-Basic-Auth\lib\ArduinoJson\extras\fuzzing\reproducer.cpp,"if (fread(buffer.data(), 1, size, f) != size) {",120,?,"
  std::vector<uint8_t> buffer(size);
  if (fread(buffer.data(), 1, size, f) != size) {
    fclose(f);
    std::cerr << ""Failed to read "" << path << std::endl;
"
2021\secure-iot-analysis-ecoin-platform\collector\collector.c,Dataset Download,../../Dataset Download/2021\secure-iot-analysis-ecoin-platform\collector\collector.c,"while((bytes = fread(destBuffer,sizeof(unsigned char),BUFSIZ, fileIn)) > 0){",120,?,"	fileIn = fopen(filename,""rb"");
	int c = 0;
	while((bytes = fread(destBuffer,sizeof(unsigned char),BUFSIZ, fileIn)) > 0){
		c+=bytes;
	}
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_soc\soc_flash.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_soc\soc_flash.c,"read_cnt = ufread(fp, data, len);",120,?,"
    //读取数据
    read_cnt = ufread(fp, data, len);
    PR_DEBUG(""uf file %s read data %d!"", file_name, read_cnt);

"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_soc\soc_flash.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\apps\tuya_demo_light_pwm\src\light_soc\soc_flash.c,"read_cnt = ufread(fp, data, 1024);",120,?,"    }

    read_cnt = ufread(fp, data, 1024);
    PR_DEBUG(""oem cfg uf file read data %d!"", read_cnt);
    PR_DEBUG(""oem cfg uf file %s"", data);
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\libc\libc.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\libc\libc.h,"ssize_t lib_fread(FAR void *ptr, size_t count, FAR FILE *stream);",120,?,"	/* Defined in lib_libfread.c */

	ssize_t lib_fread(FAR void *ptr, size_t count, FAR FILE *stream);

	/* Defined in lib_libfgets.c */
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\apps\httpd\makefsdata\makefsdata.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\apps\httpd\makefsdata\makefsdata.c,"while ((len = fread(buf, 1, COPY_BUFSIZE, fin)) > 0) {",120,?,"  }
  buf = os_malloc(COPY_BUFSIZE);
  while ((len = fread(buf, 1, COPY_BUFSIZE, fin)) > 0) {
    fwrite(buf, 1, len, fout);
  }
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\apps\httpd\makefsdata\makefsdata.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\src\apps\httpd\makefsdata\makefsdata.c,"r = fread(buf, 1, fsize, inFile);",120,?,"  buf = (u8_t*)os_malloc(fsize);
  LWIP_ASSERT(""buf != NULL"", buf != NULL);
  r = fread(buf, 1, fsize, inFile);
  *file_size = fsize;
  *is_compressed = 0;
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\test\fuzz\fuzz.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\test\fuzz\fuzz.c,"len = fread(pktbuf, 1, sizeof(pktbuf), f);",120,?,"    f = fopen(filename, ""rb"");
    LWIP_ASSERT(""open failed"", f != NULL);
    len = fread(pktbuf, 1, sizeof(pktbuf), f);
    fclose(f);
    os_printf(""testing file: \""%s\""...\r\n"", filename);
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\test\fuzz\fuzz.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\lwip_intf\lwip-2.0.2\test\fuzz\fuzz.c,"len = fread(pktbuf, 1, sizeof(pktbuf), stdin);",120,?,"    os_printf(""testing file: \""%s\""...\r\n"", filename);
  } else {
    len = fread(pktbuf, 1, sizeof(pktbuf), stdin);
  }
  input_pkt(&net_test, pktbuf, len);
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wolfssl\wolfssl\test.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\bk7231n_os\beken378\func\wolfssl\wolfssl\test.h,"size_t readLen = fread(*buf, *bufLen, 1, file);",120,?,"            }
            else {
                size_t readLen = fread(*buf, *bufLen, 1, file);

                /* check response code */
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\arm-none-eabi\include\c++\4.9.3\ext\stdio_sync_filebuf.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\arm-none-eabi\include\c++\4.9.3\ext\stdio_sync_filebuf.h,"std::streamsize __ret = std::fread(__s, 1, __n, _M_file);",120,?,"    stdio_sync_filebuf<char>::xsgetn(char* __s, std::streamsize __n)
    {
      std::streamsize __ret = std::fread(__s, 1, __n, _M_file);
      if (__ret > 0)
	_M_unget_buf = traits_type::to_int_type(__s[__ret - 1]);
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\arm-none-eabi\include\c++\4.9.3\tr1\random.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\arm-none-eabi\include\c++\4.9.3\tr1\random.h,"std::fread(reinterpret_cast<void*>(&__ret), sizeof(result_type),",120,?,"#ifdef _GLIBCXX_USE_RANDOM_TR1
      result_type __ret;
      std::fread(reinterpret_cast<void*>(&__ret), sizeof(result_type),
		 1, _M_file);
      return __ret;
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\system.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\platforms\bk7231n\toolchain\gcc-arm-none-eabi-4_9-2015q1\lib\gcc\arm-none-eabi\4.9.3\plugin\include\system.h,"#  define fread(Ptr, Size, N, Stream) fread_unlocked (Ptr, Size, N, Stream)",120,?,"# ifdef HAVE_FREAD_UNLOCKED
#  undef fread
#  define fread(Ptr, Size, N, Stream) fread_unlocked (Ptr, Size, N, Stream)
#  if defined (HAVE_DECL_FREAD_UNLOCKED) && !HAVE_DECL_FREAD_UNLOCKED
extern size_t fread_unlocked (void *, size_t, size_t, FILE *);
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\sdk\include\tuya_hal_fs.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\sdk\include\tuya_hal_fs.h,"INT_T tuya_hal_fread(VOID_T* buf, INT_T bytes, TUYA_FILE file);",120,?," * @return  <0: 失败; >= 实际读取的字节数
 */
INT_T tuya_hal_fread(VOID_T* buf, INT_T bytes, TUYA_FILE file);

/**
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\sdk\include\uf_file.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231n\sdk\include\uf_file.h,"UINT_T ufread(IN uFILE *fd, IN UCHAR_T *buf,IN CONST UINT_T len);",120,?,"***********************************************************/
__UF_FILE_EXT \
UINT_T ufread(IN uFILE *fd, IN UCHAR_T *buf,IN CONST UINT_T len);

/***********************************************************
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_bl0937_1_plug_demo\src\app_dltj.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_bl0937_1_plug_demo\src\app_dltj.c,"INT_T Num = ufread(fp, (UCHAR_T *)buf,buf_len);",120,?,"
    memset(buf,0,buf_len);
    INT_T Num = ufread(fp, (UCHAR_T *)buf,buf_len);
    if(Num <= 0) {
        *val = 0;
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_soc\soc_flash.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_soc\soc_flash.c,"uiReadCnt = ufread(fp, pData, usLen);",120,?,"
    PR_DEBUG(""uf open OK"");
    uiReadCnt = ufread(fp, pData, usLen);
    PR_DEBUG(""uf file %s read data %d!"", pFilename, uiReadCnt);

"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_soc\soc_flash.c,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\apps\bk7231t_light_pwm_demo\src\light_soc\soc_flash.c,"uiReadCnt = ufread(fp, pData, 1024);",120,?,"    }

    uiReadCnt = ufread(fp, pData, 1024);
    PR_DEBUG(""oem cfg uf file read data %d!"", uiReadCnt);
    PR_DEBUG(""oem cfg uf file %s"", pData);
"
2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\sdk\include\uf_file.h,Dataset Download,../../Dataset Download/2021\tuya-iotos-embeded-sdk-wifi-ble-bk7231t\sdk\include\uf_file.h,"INT_T ufread(IN uFILE *fd, IN UCHAR_T *buf,IN CONST UINT_T len);",120,?,"***********************************************************/
__UF_FILE_EXT \
INT_T ufread(IN uFILE *fd, IN UCHAR_T *buf,IN CONST UINT_T len);

/***********************************************************
"
2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\posix\dtls-support.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\posix\dtls-support.c,"if(fread(buf, 1, len, urandom) != len) {",120,?,"  }

  if(fread(buf, 1, len, urandom) != len) {
    dtls_emerg(""cannot fill random\n"");
    fclose(urandom);
"
2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\tests\dtls-client.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\net\security\tinydtls\tests\dtls-client.c,"bytes_read = fread(buf, 1, max_buf_len, f);",120,?,"  while (!feof(f)) {
    size_t bytes_read;
    bytes_read = fread(buf, 1, max_buf_len, f);
    if (ferror(f)) {
      result = -1;
"
2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\rpl-border-router\native\slip-dev.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\rpl-border-router\native\slip-dev.c,"ret = fread(&c, 1, 1, inslip);",120,?,"
#ifdef linux
  ret = fread(&c, 1, 1, inslip);
  if(ret == -1 || ret == 0) {
    err(1, ""serial_input: read"");
"
2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\rpl-border-router\native\slip-dev.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Middlewares\Third_Party\Contiki-NG\os\services\rpl-border-router\native\slip-dev.c,"if(fread(&c, 1, 1, inslip) != 1) {",120,?,"
  case SLIP_ESC:
    if(fread(&c, 1, 1, inslip) != 1) {
      clearerr(inslip);
      /* Put ESC back and give up! */
"
2021\x-cube-subg2\Utilities\PC_Software\wpcapslip6\wpcapslip6.c,Dataset Download,../../Dataset Download/2021\x-cube-subg2\Utilities\PC_Software\wpcapslip6\wpcapslip6.c,"if(fread(&inbuf,1,1,stdin)){",120,?,"			if(FD_ISSET(STDIN_FILENO, &rset)) {
				char inbuf;
				if(fread(&inbuf,1,1,stdin)){
					if(inbuf=='q'){
						exit(0);
"
